{"content": {"hp_model": {"f0": 32, "f1": 64, "f2": 32, "f3": 64, "nonlin": "very_leaky_rectify", "nbg1": 4, "nbg3": 2, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.014747427796449605, 0.02070934544989018, 0.010660334893843805, 0.015217767201828467, 0.0082927222169284, 0.008105666433191907, 0.011124695814821478, 0.008640377791597846, 0.010937005358886169, 0.006982330525536391, 0.009734041458856289, 0.009790312523782669, 0.007924522936293425, 0.013367966453829618, 0.010899765410741582, 0.009686846530441207, 0.009427951647559963, 0.009648350683621375, 0.007592166081099592, 0.0067781818706654316, 0.010072400223852791, 0.009152116205741228, 0.015043640682548048, 0.01577280053787598, 0.011900641364451374, 0.014195267104944825, 0.014846690576250333, 0.015002366902291123, 0.012100636910609216, 0.01577298265495855, 0.011064933293955179, 0.010922030863009264, 0.01422917201711467, 0.013346334142064976, 0.014114871979804352, 0.012304329502654336, 0.011802365710880218, 0.009474700103905739, 0.020027467840732973, 0.016261290851694234, 0.013156264033614464, 0.012404225107735346, 0.00736639752524576, 0.013714494765849192, 0.013078318602003286, 0.013550659591238244, 0.009769485337470676, 0.012794564550532617, 0.010798219640625658, 0.011549435424879831, 0.0129459003659837, 0.015529376442139461, 0.009271462593127446, 0.01382803169198479, 0.013943318290982339, 0.009355047870664514, 0.009398445417924766, 0.011903049323600423, 0.011954216449048538, 0.012165864771677056, 0.009008522405010828, 0.013609041205547592, 0.008710642065583866, 0.007825351090025735, 0.010068824449403059, 0.01191774077860182, 0.01102556200922334, 0.008871409538799564, 0.008750747845638363, 0.008949264270580844, 0.007982912320472813, 0.01154688057385535, 0.008027189849071227, 0.013934585420264269, 0.00807941998825648, 0.01156024944646852, 0.010189370474073004, 0.007161784510820803, 0.009750716754235682, 0.008805994002658897, 0.008118939603161837, 0.009307741698281495, 0.007747707482908373, 0.006783738142665219, 0.008521260664153799, 0.008679151157633402, 0.008599588029123641, 0.009409365597812561, 0.010015340127808444, 0.009726697971967943, 0.00669391652848299, 0.0069374185746855655, 0.006407916548877816, 0.007184345267081124, 0.013413496620025592, 0.0058619642579384595, 0.008292874543500296, 0.00755635125149479, 0.007307860502484497, 0.006250029562587981, 0.007284812890012828, 0.006309814337788201, 0.011912364344007284, 0.00686617871573995, 0.007131771176104434, 0.010189212852233304, 0.004301390480606547, 0.007871524721041825, 0.0055533797242341525, 0.008032575835656135, 0.005567078652598985, 0.009681881046299955, 0.01086735113434728, 0.009102679684617141, 0.007261296099602888, 0.007217753310022163, 0.007649018308269876, 0.007126842127717409, 0.009876256163808493, 0.009377836510875774, 0.007584399192237627, 0.009399306708736363, 0.0072941020297001636, 0.01110871524382185, 0.010052835636613175, 0.006677150690686564, 0.006869949822533339, 0.006306788013721813, 0.009498889499156633, 0.006914745525741744, 0.007807049322098239, 0.008276101289941228, 0.010552124207580352, 0.011189956377362099, 0.0072956437577765335, 0.0056422301980144, 0.006375662142212395, 0.004764475015820744, 0.00864826242472333, 0.006584063312198978, 0.013163494576727911, 0.008161425716753488, 0.008524690494720884, 0.010999313543184853, 0.009926819565761597], "moving_avg_accuracy_train": [0.03957161746723882, 0.0960514539209579, 0.16005693298092005, 0.21961005044671691, 0.27782205089300127, 0.3304826046053807, 0.3814619056297079, 0.42861044660397407, 0.4719949390998151, 0.511840725390092, 0.5475320890417896, 0.5822812297996169, 0.6140345813316984, 0.6433287074950863, 0.6705327637135547, 0.6941189789673377, 0.7170739059194873, 0.7378590784562299, 0.7570677856380617, 0.7747066474743108, 0.7904187185149935, 0.8047224870635494, 0.8183398182298411, 0.829644646709321, 0.8410325037265118, 0.8513096570717916, 0.8606845449718015, 0.8698845568425153, 0.8778226264558828, 0.8847624202079505, 0.8922544062002599, 0.8979254081386041, 0.9040569535592861, 0.9096078244235956, 0.9146920720026923, 0.9191028092584032, 0.923321263711162, 0.9275805052341026, 0.9307512272916725, 0.9338025147922948, 0.9373460914380654, 0.9400610882085723, 0.942804529498457, 0.945199149799811, 0.9472706027138867, 0.9488792160651448, 0.9506849689003062, 0.952444969034085, 0.9539987422199622, 0.9552808806467754, 0.9564534785190211, 0.9580784420135569, 0.9593920996348294, 0.9605953178332605, 0.9622338887285058, 0.9634296567747214, 0.964361652741306, 0.9650888780171939, 0.9660968033845405, 0.967422426952048, 0.9684527637949569, 0.9692335465297561, 0.9697177591006176, 0.9704278098274606, 0.9711482717387714, 0.9721035710529895, 0.9725936778238903, 0.9732301224665197, 0.9735378196317818, 0.9738333843198126, 0.9744318888188022, 0.9748263475928836, 0.9747652309502896, 0.9754937650719457, 0.9760657043754747, 0.9762526037665078, 0.9765300591636665, 0.9770402217365949, 0.9773482333796113, 0.9764815427416779, 0.9767966302080048, 0.9771754679312519, 0.977656038957202, 0.97789084313411, 0.9779626579647559, 0.9782458553004324, 0.9787006596513415, 0.9789263689088448, 0.9793968633048743, 0.9801226136553577, 0.9802340292981737, 0.9802366110778894, 0.9805110131391666, 0.980804405872869, 0.9811987397641719, 0.9815210521341925, 0.9817763641815245, 0.9819687984478958, 0.9820839687138482, 0.982199247697253, 0.9826423984108702, 0.9827180744174207, 0.9831976981137831, 0.9829457296416906, 0.9830026261715692, 0.9831863665306028, 0.9835517677489894, 0.9836038640395667, 0.9837112406189527, 0.983817324330913, 0.9840312020168693, 0.984325998481849, 0.9844797802551111, 0.9848250499974571, 0.9843825526977391, 0.9843981455672693, 0.9847841308617329, 0.9850827255505689, 0.9854467918717117, 0.9858511454226357, 0.9858896148827715, 0.9859056001575989, 0.9862268704989818, 0.986127713955036, 0.9862571091512174, 0.9861898420230097, 0.9863362398516704, 0.9859541039617414, 0.9864473073298714, 0.9866981669611793, 0.9866426336722226, 0.9867995559073905, 0.9862945026964502, 0.9865629318910909, 0.9865884595710755, 0.9869344859723106, 0.9867157758048506, 0.987158316527937, 0.9874891738632385, 0.9876567731804953, 0.9876890299767407, 0.9877156998957333, 0.9876514192657022, 0.9878260094819892, 0.9877343497540283], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 486677690, "moving_var_accuracy_train": [0.014093216180761328, 0.04139364189523489, 0.07412458985296869, 0.09863129506672683, 0.11926589852367807, 0.13229751392695988, 0.1424577647306246, 0.14821885250158068, 0.15033689495351782, 0.1495923856239798, 0.14609800801544137, 0.14235573226456288, 0.1371946370397861, 0.13119848578489587, 0.12473918327904464, 0.11727205090112022, 0.11028720385341491, 0.10314669404451288, 0.0961527945244378, 0.08933768009389861, 0.08262573467199587, 0.07620454135701224, 0.07025297259414318, 0.064377867657283, 0.059107230478550536, 0.05414708635863705, 0.0495233744310131, 0.04533279895370329, 0.04136663560101298, 0.03766341867680282, 0.034402245496103184, 0.0312514633133552, 0.028464679625232643, 0.02589552116887954, 0.023538615213001542, 0.021359845119951627, 0.01938401882968647, 0.017608887191874503, 0.01593847977798429, 0.01442842499888895, 0.013098594918000108, 0.011855076293374862, 0.010737306895036778, 0.00971518406302201, 0.008782283911296904, 0.007927344252391826, 0.007163956516867884, 0.006475439269419212, 0.00584962324249565, 0.005279455828755687, 0.004763885117810075, 0.00431126116325623, 0.0038956663140439552, 0.003519129288936881, 0.0031913805912519005, 0.0028851112831098607, 0.0026044177031344464, 0.0023487356422380134, 0.002123005299929481, 0.001926520270521116, 0.0017434225895577038, 0.0015745669257125788, 0.0014192203894653446, 0.0012818358988310227, 0.0011583238972387667, 0.0010507048785326001, 0.000947796232501285, 0.0008566621652993418, 0.0007718480466790002, 0.0006954494683743967, 0.0006291283902547539, 0.0005676159307493268, 0.0005108879548704118, 0.0004645760170811265, 0.0004210624464753044, 0.0003792705842690912, 0.0003420363593188947, 0.0003101751160443565, 0.0002800114449900239, 0.0002587706744479548, 0.00023378712800608582, 0.00021170007739047293, 0.00019260860625027037, 0.00017384394263868466, 0.0001565059647039224, 0.0001415771748119386, 0.00012928108030919777, 0.00011681147429858245, 0.00010712261165898085, 0.00010115077263412394, 9.114741637988852e-05, 8.203273473217818e-05, 7.450712968005863e-05, 6.7831130377757e-05, 6.244751030045275e-05, 5.713772664522219e-05, 5.2010612154315484e-05, 4.714282946074893e-05, 4.254792422610996e-05, 3.841273499963252e-05, 3.633890449448474e-05, 3.275655576674313e-05, 3.155125020107985e-05, 2.8967518179330003e-05, 2.6099901297406996e-05, 2.3793755843506318e-05, 2.2616042712742416e-05, 2.037886465289535e-05, 1.8444745755811354e-05, 1.670155496571991e-05, 1.544309245009818e-05, 1.468092780696929e-05, 1.3425674530361172e-05, 1.315600783214231e-05, 1.360264179124778e-05, 1.2244565850344696e-05, 1.2360971093189194e-05, 1.1927303077679554e-05, 1.1927471345625795e-05, 1.2206240358367313e-05, 1.099893541679887e-05, 9.901341636220728e-06, 9.840139162869647e-06, 8.944613428448153e-06, 8.200840136757041e-06, 7.421479921917199e-06, 6.872222847854422e-06, 7.499251108415069e-06, 8.938572058586893e-06, 8.611089844307142e-06, 7.77773637551747e-06, 7.22158402897659e-06, 8.79513433900824e-06, 8.564108997926444e-06, 7.7135630601424e-06, 8.019815187293023e-06, 7.648340904716833e-06, 8.646087438553427e-06, 8.766677881603576e-06, 8.142815873747757e-06, 7.337898794509143e-06, 6.610510476269873e-06, 5.98664742321759e-06, 5.66231837350384e-06, 5.171700087722123e-06], "duration": 120059.826762, "accuracy_train": [0.3957161746723883, 0.6043699820044297, 0.7361062445205795, 0.7555881076388888, 0.8017300549095607, 0.8044275880167959, 0.8402756148486527, 0.8529473153723699, 0.8624553715623846, 0.8704528020025839, 0.868754361907069, 0.8950234966200628, 0.8998147451204319, 0.9069758429655776, 0.9153692696797711, 0.9063949162513842, 0.9236682484888336, 0.924925631286914, 0.9299461502745479, 0.9334564040005537, 0.931827357881137, 0.9334564040005537, 0.9408957987264673, 0.93138810302464, 0.9435232168812293, 0.9438040371793098, 0.94505853607189, 0.9526846636789406, 0.9492652529761905, 0.9472205639765596, 0.9596822801310447, 0.9489644255837025, 0.9592408623454227, 0.9595656622023809, 0.9604503002145626, 0.9587994445598007, 0.9612873537859912, 0.9659136789405685, 0.9592877258098007, 0.9612641022978959, 0.96923828125, 0.9644960591431341, 0.9674955011074198, 0.9667507325119971, 0.9659136789405685, 0.9633567362264673, 0.9669367444167589, 0.9682849702380952, 0.9679827008928571, 0.9668201264880952, 0.9670068593692323, 0.972703113464378, 0.9712150182262828, 0.97142428161914, 0.9769810267857143, 0.9741915691906607, 0.9727496164405685, 0.9716339055001846, 0.9751681316906607, 0.9793530390596161, 0.977725795381137, 0.9762605911429494, 0.9740756722383721, 0.9768182663690477, 0.9776324289405685, 0.9807012648809523, 0.9770046387619971, 0.9789581242501846, 0.97630709411914, 0.9764934665120893, 0.9798184293097084, 0.9783764765596161, 0.9742151811669435, 0.9820505721668512, 0.9812131581072352, 0.9779346982858066, 0.9790271577380952, 0.9816316848929494, 0.9801203381667589, 0.9686813270002769, 0.9796324174049464, 0.9805850074404762, 0.981981178190753, 0.9800040807262828, 0.9786089914405685, 0.9807946313215209, 0.9827938988095238, 0.980957752226375, 0.98363131286914, 0.9866543668097084, 0.981236770083518, 0.9802598470953304, 0.9829806316906607, 0.9834449404761905, 0.9847477447858989, 0.984421863464378, 0.9840741726075121, 0.9837007068452381, 0.9831205011074198, 0.9832367585478959, 0.9866307548334257, 0.983399158476375, 0.9875143113810447, 0.9806780133928571, 0.9835146949404762, 0.9848400297619048, 0.9868403787144703, 0.9840727306547619, 0.9846776298334257, 0.9847720777385567, 0.9859561011904762, 0.9869791666666666, 0.9858638162144703, 0.9879324776785714, 0.9804000770002769, 0.9845384813930418, 0.9882579985119048, 0.9877700777500923, 0.9887233887619971, 0.9894903273809523, 0.9862358400239941, 0.9860494676310447, 0.9891183035714286, 0.9852353050595238, 0.9874216659168512, 0.98558443786914, 0.9876538203096161, 0.9825148809523809, 0.9908861376430418, 0.9889559036429494, 0.9861428340716132, 0.9882118560239018, 0.9817490237979882, 0.9889787946428571, 0.9868182086909376, 0.9900487235834257, 0.9847473842977114, 0.9911411830357143, 0.9904668898809523, 0.9891651670358066, 0.9879793411429494, 0.9879557291666666, 0.9870728935954227, 0.9893973214285714, 0.9869094122023809], "end": "2016-01-25 00:54:44.406000", "learning_rate_per_epoch": [0.002425943501293659, 0.0017154010711237788, 0.0014006191631779075, 0.0012129717506468296, 0.0010849148966372013, 0.0009903872851282358, 0.0009169204859063029, 0.0008577005355618894, 0.0008086478337645531, 0.0007671507191844285, 0.0007314495160244405, 0.0007003095815889537, 0.0006728356820531189, 0.0006483606994152069, 0.0006263758987188339, 0.0006064858753234148, 0.0005883777048438787, 0.0005718003958463669, 0.0005565496394410729, 0.0005424574483186007, 0.0005293842987157404, 0.0005172129021957517, 0.0005058441893197596, 0.0004951936425641179, 0.00048518870607949793, 0.0004757666611112654, 0.0004668730543926358, 0.00045846024295315146, 0.000450486404588446, 0.0004429146647453308, 0.00043571231071837246, 0.0004288502677809447, 0.0004223025753162801, 0.00041604589205235243, 0.0004100592923350632, 0.00040432391688227654, 0.0003988226526416838, 0.0003935400163754821, 0.00038846186362206936, 0.0003835753595922142, 0.0003788687172345817, 0.00037433122633956373, 0.0003699529042933136, 0.00036572475801222026, 0.00036163831828162074, 0.000357685872586444, 0.0003538602322805673, 0.00035015479079447687, 0.00034656334901228547, 0.00034308023168705404, 0.0003397000255063176, 0.00033641784102655947, 0.0003332289634272456, 0.00033012908534146845, 0.0003271141613367945, 0.00032418034970760345, 0.00032132407068274915, 0.00031854197732172906, 0.0003158309555146843, 0.00031318794935941696, 0.0003106102521996945, 0.00030809512827545404, 0.00030564016196876764, 0.0003032429376617074, 0.00030090127256698906, 0.00029861301300115883, 0.00029637617990374565, 0.0002941888524219394, 0.0002920492843259126, 0.00028995570028200746, 0.0002879065286833793, 0.00028590019792318344, 0.0002839352237060666, 0.00028201020904816687, 0.0002801238151732832, 0.00027827481972053647, 0.00027646191301755607, 0.0002746840182226151, 0.00027293997118249536, 0.00027122872415930033, 0.0002695492876227945, 0.0002679006429389119, 0.0002662818878889084, 0.0002646921493578702, 0.00026313052512705326, 0.0002615962293930352, 0.00026008844724856317, 0.00025860645109787583, 0.00025714951334521174, 0.0002557169063948095, 0.000254307989962399, 0.0002529220946598798, 0.00025155863841064274, 0.0002502169809304178, 0.00024889654014259577, 0.00024759682128205895, 0.0002463172422721982, 0.00024505730834789574, 0.00024381649564020336, 0.00024259435303974897, 0.00024139040033333004, 0.0002402042009634897, 0.00023903531837277114, 0.0002378833305556327, 0.00023674784461036325, 0.00023562846763525158, 0.00023452480672858655, 0.0002334365271963179, 0.00023236325068864971, 0.0002313046425115317, 0.00023026036797091365, 0.00022923012147657573, 0.0002282135683344677, 0.00022721043205820024, 0.0002262203925056383, 0.000225243202294223, 0.00022427855583373457, 0.0002233262057416141, 0.00022238587553147227, 0.0002214573323726654, 0.0002205403143307194, 0.00021963460312690586, 0.0002187399659305811, 0.00021785615535918623, 0.0002169829822378233, 0.0002161202282877639, 0.00021526767523027956, 0.00021442513389047235, 0.0002135924150934443, 0.00021276931511238217, 0.0002119556738762185, 0.00021115128765814006, 0.00021035598183516413, 0.00020956959633622319, 0.00020879197109024972, 0.00020802294602617621, 0.00020726234652101994, 0.0002065100270556286, 0.00020576584211084992, 0.0002050296461675316, 0.0002043012937065214, 0.0002035806537605822, 0.000202867595362477, 0.00020216195844113827, 0.0002014636411331594], "accuracy_valid": [0.3965417333396084, 0.5922675075301205, 0.7226150696536144, 0.7380885848079819, 0.7645366622740963, 0.7667442229856928, 0.7935599821159638, 0.8052287274096386, 0.8102644954819277, 0.8204683970256024, 0.814720797251506, 0.8304266872176205, 0.8357477762612951, 0.8359919168862951, 0.8408747293862951, 0.8334387354103916, 0.8477415521460843, 0.8446794992469879, 0.8519228280308735, 0.8506815347326807, 0.8508139001317772, 0.8557584831513554, 0.8593294074736446, 0.8544671851468373, 0.8554128623870482, 0.8621679099209337, 0.8571115516754518, 0.864344585372741, 0.8600412391754518, 0.8593499976468373, 0.8640798545745482, 0.8566335655120482, 0.8665624411709337, 0.862757671310241, 0.8657991340361446, 0.8667756965361446, 0.8651681923004518, 0.8698171592620482, 0.8669904226280121, 0.8654946936182228, 0.8734189688441265, 0.8671727927334337, 0.8707525414156627, 0.8713437735316265, 0.8672125023531627, 0.8632047722138554, 0.8662874152861446, 0.8692582831325302, 0.8666330360504518, 0.8640901496611446, 0.865809429122741, 0.8729306875941265, 0.8703363257718373, 0.8716790992093373, 0.8764604315700302, 0.8764398413968373, 0.876063335372741, 0.8725130012236446, 0.8754735739834337, 0.8789327230798193, 0.8765825018825302, 0.8701936652861446, 0.8726350715361446, 0.8780267554593373, 0.8756868293486446, 0.8785459219691265, 0.8756162344691265, 0.8752294333584337, 0.8762162909450302, 0.8737645896084337, 0.8732454230986446, 0.8750970679593373, 0.873621929122741, 0.8794312994164157, 0.8722173851656627, 0.8733674934111446, 0.8803975668298193, 0.876551616622741, 0.8746587914156627, 0.8604986351656627, 0.8737337043486446, 0.8766428016754518, 0.8761957007718373, 0.8727262565888554, 0.8751779579254518, 0.8744558311370482, 0.8781488257718373, 0.877284038497741, 0.8760324501129518, 0.881260883377259, 0.8730924675263554, 0.8741602150790663, 0.8787694724209337, 0.8796136695218373, 0.8856671804405121, 0.8773958137236446, 0.8827066076807228, 0.8796136695218373, 0.8795724891754518, 0.875575054122741, 0.8816991599209337, 0.8754118034638554, 0.8826051275414157, 0.8765413215361446, 0.8767854621611446, 0.8765722067959337, 0.881312358810241, 0.8815770896084337, 0.8833772590361446, 0.8746087867093373, 0.880091655685241, 0.879847515060241, 0.8797460349209337, 0.8824521719691265, 0.8723909309111446, 0.8832757788968373, 0.8820756659450302, 0.882777202560241, 0.8834596197289157, 0.8838052404932228, 0.8756765342620482, 0.8812211737575302, 0.8839067206325302, 0.8784341467432228, 0.8793489387236446, 0.8820550757718373, 0.880162250564759, 0.8755853492093373, 0.8850259436182228, 0.8799592902861446, 0.8786062217620482, 0.8839273108057228, 0.870640766189759, 0.8826051275414157, 0.8803255012236446, 0.8854936346950302, 0.8779252753200302, 0.8834993293486446, 0.879115093185241, 0.8810888083584337, 0.8835919851280121, 0.8826242469879518, 0.8788915427334337, 0.8850259436182228, 0.8778840949736446], "accuracy_test": 0.7337452168367347, "start": "2016-01-23 15:33:44.579000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0], "accuracy_train_last": 0.9869094122023809, "batch_size_eval": 1024, "accuracy_train_std": [0.014241566871105511, 0.018022539542293766, 0.021413427228279033, 0.018879529039133324, 0.022184384130758315, 0.020224726428280635, 0.020624497018450885, 0.019487113780540494, 0.01946671876262128, 0.018519213796621452, 0.01986307579793501, 0.02014796156406938, 0.018081128542207413, 0.01844013481916881, 0.017722100066555176, 0.016332556422913466, 0.015696964416958295, 0.015165534094912713, 0.015597335717166918, 0.01597109923362878, 0.017286718324630374, 0.015035194168152804, 0.015931208236504412, 0.015745676258574315, 0.014746276335093627, 0.012665521154112205, 0.013859339786968322, 0.013919931820442346, 0.014583113866105522, 0.014003034412735827, 0.012411137590225042, 0.012728904599491749, 0.011896115159993231, 0.011264404125527922, 0.012109179436669792, 0.0119943761762627, 0.010542454716193524, 0.01062811411568729, 0.010278013340330456, 0.010468635507596257, 0.010674864286953505, 0.010034510791410682, 0.00934393655727752, 0.009934937949338071, 0.010681392054560198, 0.01032992340153899, 0.010222447346719957, 0.010537824770856267, 0.010401838479063176, 0.009932740712092622, 0.00955991431769363, 0.008171494200138027, 0.009387838141318423, 0.009382559272009896, 0.008433465701992174, 0.008634866976953287, 0.009225707218425444, 0.009753362652411517, 0.00885292137197213, 0.0076831635510810825, 0.007479358319724219, 0.007843925405075572, 0.007979745667878336, 0.008373796746141837, 0.008050497765169787, 0.007797399619706024, 0.008232900874511789, 0.007005714064543486, 0.008179964789125138, 0.007899256987104905, 0.007135572589399079, 0.0074430276914889395, 0.008392621636647888, 0.006709877386781214, 0.006191293653181391, 0.006527990651813052, 0.007233716945544563, 0.006405517058881759, 0.007081019836672201, 0.009030171219485848, 0.007928176009133064, 0.007606933192874517, 0.006615763026172905, 0.007819834334925554, 0.007403981118127589, 0.007363457286327494, 0.007409603920628539, 0.006989437988740404, 0.006020080795463886, 0.006042400037091232, 0.006194707317394402, 0.00739385369428807, 0.006137821062542811, 0.005532290820589374, 0.004713937619632277, 0.005921701678247399, 0.0061983619889136, 0.0059915344797133365, 0.005390343983029258, 0.005660040578776318, 0.005222857441296941, 0.006137243381157439, 0.005270608033714391, 0.006910387638145739, 0.007084534212417927, 0.005492275144007697, 0.00537651241774325, 0.0058612661849014635, 0.006045156143313401, 0.005295506913438108, 0.006509087874599216, 0.0054358776771586525, 0.004607980722745469, 0.004853995267669771, 0.005902034986877415, 0.0054551311753697805, 0.004709961835346246, 0.004390144203644654, 0.004547401660536217, 0.004519649112655436, 0.005259481158888314, 0.004592743372133512, 0.0048993925562001205, 0.005349712163384535, 0.004280558618747159, 0.005433123535260433, 0.005096632330837691, 0.006049320492232769, 0.0032864422578780376, 0.004080429733033508, 0.005692512400635273, 0.004583205451564129, 0.005678927744720112, 0.004061762784283413, 0.004748545770239249, 0.0040956079928688455, 0.005638845232841099, 0.004106834194676678, 0.004499508401012606, 0.004131957230211727, 0.004603467948548828, 0.004618333224753665, 0.00455112474867939, 0.0053597580112440145, 0.004956931517746201], "accuracy_test_std": 0.009049182940288667, "error_valid": [0.6034582666603916, 0.4077324924698795, 0.27738493034638556, 0.2619114151920181, 0.23546333772590367, 0.23325577701430722, 0.2064400178840362, 0.19477127259036142, 0.1897355045180723, 0.17953160297439763, 0.18527920274849397, 0.16957331278237953, 0.16425222373870485, 0.16400808311370485, 0.15912527061370485, 0.1665612645896084, 0.15225844785391573, 0.15532050075301207, 0.1480771719691265, 0.1493184652673193, 0.14918609986822284, 0.1442415168486446, 0.1406705925263554, 0.14553281485316272, 0.14458713761295183, 0.13783209007906627, 0.14288844832454817, 0.13565541462725905, 0.13995876082454817, 0.14065000235316272, 0.13592014542545183, 0.14336643448795183, 0.13343755882906627, 0.13724232868975905, 0.1342008659638554, 0.1332243034638554, 0.13483180769954817, 0.13018284073795183, 0.13300957737198793, 0.13450530638177716, 0.1265810311558735, 0.13282720726656627, 0.12924745858433728, 0.1286562264683735, 0.13278749764683728, 0.1367952277861446, 0.1337125847138554, 0.13074171686746983, 0.13336696394954817, 0.1359098503388554, 0.13419057087725905, 0.1270693124058735, 0.12966367422816272, 0.12832090079066272, 0.12353956842996983, 0.12356015860316272, 0.12393666462725905, 0.1274869987763554, 0.12452642601656627, 0.12106727692018071, 0.12341749811746983, 0.1298063347138554, 0.1273649284638554, 0.12197324454066272, 0.12431317065135539, 0.12145407803087349, 0.12438376553087349, 0.12477056664156627, 0.12378370905496983, 0.12623541039156627, 0.1267545769013554, 0.12490293204066272, 0.12637807087725905, 0.12056870058358427, 0.12778261483433728, 0.1266325065888554, 0.11960243317018071, 0.12344838337725905, 0.12534120858433728, 0.13950136483433728, 0.1262662956513554, 0.12335719832454817, 0.12380429922816272, 0.1272737434111446, 0.12482204207454817, 0.12554416886295183, 0.12185117422816272, 0.12271596150225905, 0.12396754988704817, 0.11873911662274095, 0.1269075324736446, 0.12583978492093373, 0.12123052757906627, 0.12038633047816272, 0.11433281955948793, 0.12260418627635539, 0.11729339231927716, 0.12038633047816272, 0.12042751082454817, 0.12442494587725905, 0.11830084007906627, 0.12458819653614461, 0.11739487245858427, 0.12345867846385539, 0.12321453783885539, 0.12342779320406627, 0.11868764118975905, 0.11842291039156627, 0.11662274096385539, 0.12539121329066272, 0.11990834431475905, 0.12015248493975905, 0.12025396507906627, 0.11754782803087349, 0.1276090690888554, 0.11672422110316272, 0.11792433405496983, 0.11722279743975905, 0.11654038027108427, 0.11619475950677716, 0.12432346573795183, 0.11877882624246983, 0.11609327936746983, 0.12156585325677716, 0.12065106127635539, 0.11794492422816272, 0.11983774943524095, 0.12441465079066272, 0.11497405638177716, 0.12004070971385539, 0.12139377823795183, 0.11607268919427716, 0.12935923381024095, 0.11739487245858427, 0.11967449877635539, 0.11450636530496983, 0.12207472467996983, 0.11650067065135539, 0.12088490681475905, 0.11891119164156627, 0.11640801487198793, 0.11737575301204817, 0.12110845726656627, 0.11497405638177716, 0.12211590502635539], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.5041806902049883, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.002425943520316765, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "optimization": "rmsprop", "nb_data_augmentation": 2, "learning_rate_decay_method": "sqrt", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 1.0411463723141958e-05, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.04129414845130235}, "accuracy_valid_max": 0.8856671804405121, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8778840949736446, "loss_train": [1.6915839910507202, 1.2177741527557373, 0.9904674887657166, 0.8753517270088196, 0.8013516068458557, 0.7491458654403687, 0.7055293917655945, 0.6703095436096191, 0.6402390003204346, 0.6141057014465332, 0.5912891626358032, 0.573197603225708, 0.5554227232933044, 0.5386776924133301, 0.5214613676071167, 0.5077581405639648, 0.49454253911972046, 0.48195263743400574, 0.47019684314727783, 0.46225401759147644, 0.4517279863357544, 0.44269633293151855, 0.43367287516593933, 0.42622998356819153, 0.4197869598865509, 0.40925484895706177, 0.40516307950019836, 0.39826926589012146, 0.3922565281391144, 0.3823128938674927, 0.37918567657470703, 0.3759870231151581, 0.36918166279792786, 0.3660295903682709, 0.35890182852745056, 0.3568809926509857, 0.3525627851486206, 0.3451550006866455, 0.3443446159362793, 0.3401857316493988, 0.3361634612083435, 0.3308674991130829, 0.32784005999565125, 0.3278537690639496, 0.3237922489643097, 0.32118892669677734, 0.31539252400398254, 0.31320372223854065, 0.31238222122192383, 0.3077966570854187, 0.3067018985748291, 0.3048723638057709, 0.30086615681648254, 0.29655927419662476, 0.2947792112827301, 0.29393479228019714, 0.29078376293182373, 0.28785717487335205, 0.2864375412464142, 0.2867347300052643, 0.2830274999141693, 0.2811811566352844, 0.28033164143562317, 0.27725788950920105, 0.27721163630485535, 0.2749430537223816, 0.27415814995765686, 0.2703832685947418, 0.2707676291465759, 0.2683591842651367, 0.2680690586566925, 0.26567089557647705, 0.26304399967193604, 0.2621299922466278, 0.2598888576030731, 0.2580738365650177, 0.25797179341316223, 0.2591557502746582, 0.2558380365371704, 0.2542894780635834, 0.25152575969696045, 0.25146958231925964, 0.2510458528995514, 0.2504238486289978, 0.2477339208126068, 0.2488744705915451, 0.24710285663604736, 0.2451302707195282, 0.24379302561283112, 0.24307578802108765, 0.24161025881767273, 0.2416265457868576, 0.24223192036151886, 0.23785752058029175, 0.23897923529148102, 0.23638303577899933, 0.2356204390525818, 0.23472268879413605, 0.23535899817943573, 0.2350732833147049, 0.23101067543029785, 0.2312992811203003, 0.2316678911447525, 0.22943858802318573, 0.23017334938049316, 0.22957363724708557, 0.22690528631210327, 0.22686822712421417, 0.2252718061208725, 0.22580011188983917, 0.2234974503517151, 0.22513248026371002, 0.22315242886543274, 0.22225874662399292, 0.21996304392814636, 0.21984386444091797, 0.22003640234470367, 0.2176024317741394, 0.21891503036022186, 0.21757540106773376, 0.21649836003780365, 0.2162206619977951, 0.21621116995811462, 0.21476992964744568, 0.21401311457157135, 0.21342425048351288, 0.21211035549640656, 0.21264666318893433, 0.21129487454891205, 0.2122371792793274, 0.20936770737171173, 0.2089422643184662, 0.2091703712940216, 0.20893144607543945, 0.2090785652399063, 0.2071162462234497, 0.2065996378660202, 0.2070583701133728, 0.20530033111572266, 0.205974742770195, 0.20526517927646637, 0.20385470986366272, 0.20219208300113678, 0.2034962773323059, 0.20090900361537933], "accuracy_train_first": 0.3957161746723883, "model": "residualv5", "loss_std": [0.29852691292762756, 0.14761312305927277, 0.12813018262386322, 0.12143145501613617, 0.11494562029838562, 0.11073758453130722, 0.10566666722297668, 0.1043061912059784, 0.10298918932676315, 0.09765046834945679, 0.09375598281621933, 0.09269998967647552, 0.0891009271144867, 0.08528971672058105, 0.08453089743852615, 0.08278784900903702, 0.07880358397960663, 0.07782919704914093, 0.07585626095533371, 0.07399626076221466, 0.06913300603628159, 0.07046530395746231, 0.06857328116893768, 0.06294447183609009, 0.06678254902362823, 0.06306856870651245, 0.06191382184624672, 0.06018587201833725, 0.05846812203526497, 0.05577594041824341, 0.053325943648815155, 0.05277251452207565, 0.05418109893798828, 0.05201536417007446, 0.049088627099990845, 0.05107961595058441, 0.0494149774312973, 0.0492502860724926, 0.048292819410562515, 0.0466131791472435, 0.044593438506126404, 0.04511246457695961, 0.04460546001791954, 0.044564466923475266, 0.04230695962905884, 0.04280832037329674, 0.04156121239066124, 0.03818603977560997, 0.03974602743983269, 0.037803132086992264, 0.03923199698328972, 0.039486177265644073, 0.03850950673222542, 0.03659997135400772, 0.03488869592547417, 0.03656210005283356, 0.036312952637672424, 0.03396815061569214, 0.034173160791397095, 0.03598903492093086, 0.03513896465301514, 0.03186551108956337, 0.032085660845041275, 0.03110540099442005, 0.033652085810899734, 0.032115861773490906, 0.031553227454423904, 0.03227145969867706, 0.031127309426665306, 0.03138492628931999, 0.03180672228336334, 0.03279275447130203, 0.02857767418026924, 0.03053506463766098, 0.029589196667075157, 0.028398049995303154, 0.02932591922581196, 0.029824545606970787, 0.02943088300526142, 0.02932531014084816, 0.02821529097855091, 0.02844240702688694, 0.029591411352157593, 0.02819562330842018, 0.026662643998861313, 0.028759678825736046, 0.026258418336510658, 0.026798339560627937, 0.027125157415866852, 0.02607736736536026, 0.026997441425919533, 0.025115590542554855, 0.026840677484869957, 0.024472778663039207, 0.025195829570293427, 0.024371281266212463, 0.025120873004198074, 0.024089593440294266, 0.025316638872027397, 0.024253789335489273, 0.023914841935038567, 0.02487906441092491, 0.02581307478249073, 0.024680379778146744, 0.025086017325520515, 0.024846190586686134, 0.024874307215213776, 0.022877564653754234, 0.023805717006325722, 0.024163853377103806, 0.02320147678256035, 0.023097969591617584, 0.023226328194141388, 0.02255788818001747, 0.022745320573449135, 0.02238788641989231, 0.022846929728984833, 0.02121088095009327, 0.022060852497816086, 0.022862663492560387, 0.023677317425608635, 0.02240944281220436, 0.02250785380601883, 0.02085993066430092, 0.020224006846547127, 0.021553916856646538, 0.0200502872467041, 0.02139946073293686, 0.02222297526896, 0.022419730201363564, 0.020703598856925964, 0.01937381736934185, 0.021390872076153755, 0.020996086299419403, 0.020522451028227806, 0.01992686651647091, 0.01978139951825142, 0.022187883034348488, 0.019843416288495064, 0.020923342555761337, 0.02100299671292305, 0.020540261641144753, 0.020479373633861542, 0.02053302526473999, 0.018721772357821465]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:12 2016", "state": "available"}], "summary": "cf63988b42456bcb34eefdd8e1b9b7d9"}