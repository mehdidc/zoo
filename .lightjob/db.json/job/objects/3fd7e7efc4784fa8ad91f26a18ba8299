{"content": {"hp_model": {"f0": 32, "f1": 32, "f2": 16, "f3": 16, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.4624587297439575, 1.0928528308868408, 0.8849067687988281, 0.7802853584289551, 0.7114290595054626, 0.6600059866905212, 0.6196096539497375, 0.5865557789802551, 0.5594261884689331, 0.5359915494918823, 0.5155979990959167, 0.4976719319820404, 0.4816513955593109, 0.4671739935874939, 0.45380643010139465, 0.44151708483695984, 0.4301222860813141, 0.4196089804172516, 0.40957897901535034, 0.4001788794994354, 0.3913583755493164, 0.3830157518386841, 0.37516653537750244, 0.3676173686981201, 0.360422283411026, 0.3534746766090393, 0.3469237685203552, 0.3405832052230835, 0.3345409631729126, 0.3287249505519867, 0.32310184836387634, 0.3176768720149994, 0.3124832808971405, 0.3073965907096863, 0.30248570442199707, 0.2977013885974884, 0.2930580973625183, 0.28860071301460266, 0.2841857671737671, 0.2798835337162018, 0.27572664618492126, 0.2716429531574249, 0.26768532395362854, 0.263837069272995, 0.2600957155227661, 0.2564218044281006, 0.25285235047340393, 0.2493450939655304, 0.2459331601858139, 0.2425803691148758, 0.23931609094142914, 0.23610936105251312, 0.2329733967781067, 0.22989827394485474, 0.22688952088356018, 0.2239489108324051, 0.22102920711040497, 0.21821053326129913, 0.21541036665439606, 0.21266791224479675, 0.20998768508434296, 0.20733319222927094, 0.20475926995277405, 0.20218440890312195, 0.19969147443771362, 0.19724465906620026, 0.1948494166135788, 0.19245372712612152, 0.19011026620864868, 0.1877966970205307, 0.18551738560199738, 0.18326511979103088, 0.18105000257492065, 0.17886008322238922, 0.17670361697673798, 0.17459900677204132, 0.17249171435832977, 0.17045894265174866, 0.1684323400259018, 0.16645875573158264, 0.16450561583042145, 0.16256216168403625, 0.16064316034317017, 0.1587633639574051, 0.15691521763801575, 0.15509410202503204, 0.15328797698020935, 0.1515282541513443, 0.14977282285690308, 0.14804457128047943, 0.1463550329208374], "moving_avg_accuracy_train": [0.050722147961655584, 0.10795323278596805, 0.16671659265844174, 0.22338605687566326, 0.2762440073723439, 0.32528529637878795, 0.37096846415000845, 0.4134573699440792, 0.4528459726218289, 0.48913033530796646, 0.5225836435718819, 0.5533518190760356, 0.5815406507285557, 0.6074011695658145, 0.6311244262884043, 0.6529147023172789, 0.6728956494039803, 0.6912434419986505, 0.7080679171278736, 0.7234818790084325, 0.7376287762116407, 0.7506097385683282, 0.7625297338190996, 0.7735157489650135, 0.7835844881546602, 0.7928021383955802, 0.8012306291921887, 0.8089324923007937, 0.8160245322687578, 0.8225817544006399, 0.828634352943134, 0.8342862326289794, 0.839500807530764, 0.8443450235661704, 0.8488861796051791, 0.853089477480763, 0.8570096293485505, 0.860660998916464, 0.86407511471211, 0.8672593900222297, 0.8702321585977569, 0.8730169683585977, 0.8756674203207261, 0.8781272318485465, 0.8804246594342713, 0.8825969759578522, 0.8846612707254853, 0.8866306710615746, 0.888510088209293, 0.8903108095874684, 0.8920151641849693, 0.8936513898703391, 0.8951960726002671, 0.8967094838952884, 0.8981552594179504, 0.8995471381919177, 0.9008974492896694, 0.9021731831466936, 0.9034166747192058, 0.9046218476404193, 0.9057692462385498, 0.9068739845899625, 0.9079101017848054, 0.9088937605339733, 0.9098441575748912, 0.9107715584759939, 0.9116527222631767, 0.9124806469037842, 0.9133025089910451, 0.9141142284338565, 0.9148912068109396, 0.9156509051705434, 0.9164090384560915, 0.9171378253404565, 0.9178774028447092, 0.9185755746818699, 0.9192876346924573, 0.919968016231748, 0.9206384883373476, 0.9213209682919111, 0.9219747277807802, 0.9226049639993338, 0.9232070898769936, 0.9237862055478399, 0.9243794892646967, 0.9249785487765345, 0.9255804813550458, 0.9261570258102112, 0.9267014924567648, 0.9272287148196154, 0.9277706082128384], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.04952069018260541, 0.10488694524190509, 0.1617592964631965, 0.21598205139895515, 0.2661833979815747, 0.3123930890569112, 0.3552850219151508, 0.39473107615247605, 0.4309293552559784, 0.46385269185010947, 0.4936545932223274, 0.521179311799191, 0.5459393514871183, 0.5684797348625028, 0.5891099357926682, 0.6077360927687478, 0.6245484621722194, 0.6398637296127534, 0.6538071912241438, 0.6665526486830546, 0.6781222461547342, 0.6883639854417456, 0.6975581662462156, 0.7058817570952387, 0.7135082957117691, 0.7203589439267368, 0.7264390781014577, 0.7319600269837065, 0.7369899161339805, 0.7415035798293174, 0.7456533853911899, 0.7493749738569655, 0.7526999894136635, 0.7557291245084417, 0.7584044589514227, 0.760911975217425, 0.763119911731827, 0.7652179473846986, 0.767191628691033, 0.7689679418667339, 0.7706032448186148, 0.7719407401315574, 0.7732553787031156, 0.7744141393550179, 0.77542040284798, 0.7763870751478958, 0.7772438436779106, 0.7779905212924237, 0.7785903184666453, 0.7790935148296946, 0.779521977493939, 0.779846558735509, 0.780102060759172, 0.7802333268218091, 0.7803016086445228, 0.7803752693162151, 0.7804171498582382, 0.7804304282835589, 0.7804057577725976, 0.7803835543127324, 0.7803025360426037, 0.780217412568238, 0.780042115682649, 0.7798853779942787, 0.7796588648559954, 0.7793939678752905, 0.779155560592656, 0.778953201069535, 0.7787100423424762, 0.7785400276131231, 0.7783992213879554, 0.7781992535978044, 0.7780060460467588, 0.7777823016171582, 0.7775321035055177, 0.777368989869951, 0.7772221875979408, 0.7770778585218817, 0.7769113412596784, 0.7767858897861954, 0.7765742977014012, 0.7763960718563363, 0.776247875627028, 0.7760646413869909, 0.7758875235397075, 0.7756538457809927, 0.7754180922269899, 0.7752059140283873, 0.775002746618395, 0.7747334172219922, 0.7744666067027297], "moving_var_accuracy_train": [0.02315462664459674, 0.050317737611645916, 0.076364156021998, 0.09763059399180077, 0.11301320096900655, 0.12335731311882804, 0.12980414816546657, 0.1330714973891167, 0.1337275058383557, 0.13220375003437262, 0.12905548953514034, 0.1246700661963159, 0.11935455164609139, 0.11343799439227224, 0.10715933113877815, 0.10071674318963127, 0.0942382130890022, 0.0878441652179753, 0.08160731536654242, 0.07558489581758608, 0.0698276185401307, 0.06436140513946928, 0.059204041206528085, 0.05436986984495154, 0.04984529844027853, 0.04562545427992609, 0.041702263965910105, 0.03806590582741232, 0.034711988522835906, 0.031627764129333914, 0.02879469325844994, 0.026202717628454386, 0.023827171988265845, 0.021655652650418463, 0.019675686268912237, 0.017867127059299014, 0.01621872266936777, 0.014716842899924356, 0.013350064289926633, 0.012106314344189715, 0.010975219086803517, 0.009947493666759831, 0.009015968360515802, 0.008168827579235803, 0.007399448382917072, 0.006701974176332972, 0.006070128574688768, 0.005498022556373991, 0.004980010180072838, 0.00451119253940192, 0.004086216706807928, 0.0037016901465683105, 0.003352995534536722, 0.0030383097048141314, 0.0027532911360900756, 0.0024953979611738526, 0.0022622682256028715, 0.0020506888749082046, 0.0018595364290355653, 0.0016866547620622433, 0.0015298379977429445, 0.0013878382193943872, 0.0012587162470279886, 0.0011415528831385231, 0.0010355268856431406, 0.0009397148489611199, 0.0008527314106435891, 0.000773627402473954, 0.0007023437778408507, 0.0006380393961413069, 0.000579668715113269, 0.0005268961179802034, 0.0004793794008900869, 0.00043622163370648045, 0.00039752224429900115, 0.00036215701509694, 0.00033050457871534644, 0.00030162039219487917, 0.00027550414857487645, 0.0002521457437128179, 0.0002307777825651132, 0.00021127478352919244, 0.0001934103053292018, 0.00017708764943825874, 0.00016254675461262018, 0.0001495219298398686, 0.00013783064231753984, 0.00012703920966482374, 0.0001170032840612256, 0.00010780462643411149, 9.966699983726926e-05], "duration": 18403.993714, "accuracy_train": [0.507221479616556, 0.6230329962047804, 0.6955868315107051, 0.7334112348306571, 0.7519655618424695, 0.7666568974367847, 0.782116974090993, 0.7958575220907161, 0.8073433967215762, 0.8156895994832041, 0.8236634179471208, 0.8302653986134183, 0.8352401356012367, 0.8401458391011444, 0.8446337367917128, 0.8490271865771503, 0.852724173184293, 0.8563735753506828, 0.8594881932908823, 0.8622075359334626, 0.8649508510405132, 0.8674383997785161, 0.8698096910760429, 0.8723898852782392, 0.8742031408614802, 0.8757609905638611, 0.8770870463616648, 0.8782492602782392, 0.8798528919804356, 0.8815967535875784, 0.8831077398255813, 0.8851531498015872, 0.8864319816468254, 0.8879429678848283, 0.8897565839562569, 0.8909191583610188, 0.8922909961586378, 0.8935233250276854, 0.8948021568729235, 0.8959178678133074, 0.896987075777501, 0.8980802562061646, 0.899521487979882, 0.9002655355989295, 0.9011015077057956, 0.9021478246700813, 0.9032399236341824, 0.9043552740863787, 0.9054248425387597, 0.9065173019910484, 0.9073543555624769, 0.9083774210386674, 0.9090982171696198, 0.9103301855504798, 0.9111672391219084, 0.9120740471576227, 0.9130502491694352, 0.9136547878599114, 0.9146080988718162, 0.91546840393134, 0.9160958336217239, 0.9168166297526762, 0.9172351565383905, 0.9177466892764857, 0.9183977309431525, 0.9191181665859173, 0.919583196347822, 0.9199319686692506, 0.9206992677763934, 0.9214197034191584, 0.921884012204688, 0.9224881904069768, 0.9232322380260245, 0.9236969072997416, 0.9245336003829827, 0.9248591212163161, 0.9256961747877446, 0.9260914500853636, 0.9266727372877446, 0.9274632878829827, 0.9278585631806018, 0.9282770899663161, 0.9286262227759321, 0.9289982465854559, 0.9297190427164084, 0.930370084383075, 0.9309978745616464, 0.9313459259067, 0.9316016922757475, 0.9319737160852714, 0.9326476487518457], "end": "2016-01-31 22:53:20.338000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0], "moving_var_accuracy_valid": [0.02207068880545433, 0.04745241971853176, 0.07181735674761992, 0.091096585448268, 0.10466850369181578, 0.11341967326613651, 0.11863516707836447, 0.1207755711245741, 0.12049085270261221, 0.11819728226476506, 0.11437093396688322, 0.10975233176481479, 0.10429463467646291, 0.09843779115320044, 0.09242445875165137, 0.08630441638976424, 0.08021787663541692, 0.07430710572285097, 0.06862617624594071, 0.06322557879387881, 0.05810772118540116, 0.05324098807946909, 0.04867768591750974, 0.04443345680735622, 0.04051358794804546, 0.036884611581928066, 0.033528862707978745, 0.03045030432622451, 0.02763297195737845, 0.025053033201232026, 0.022702717856920955, 0.020557098057606204, 0.01860088980791614, 0.01682338176192628, 0.015205460315169863, 0.013741503024071271, 0.012411227574528816, 0.011209720599482415, 0.010123807300624937, 0.009139824167045962, 0.008249909692041238, 0.007441018766246409, 0.006712471360786224, 0.006053308760943175, 0.0054570909808042715, 0.0049197919807426665, 0.004434419253494611, 0.003995995075285285, 0.003599633377608594, 0.0032419488990658094, 0.002919406231451091, 0.002628413785147394, 0.002366159938189518, 0.0021296990213833683, 0.0019167710809108493, 0.001725142805870752, 0.001552644311101878, 0.0013973814668409013, 0.001257648797863811, 0.0011318883550200996, 0.0010187585951589415, 0.0009169479496960403, 0.0008255297157093107, 0.0007431978444649807, 0.0006693398338348171, 0.0006030373841448149, 0.0005432451880220517, 0.0004892892136092264, 0.00044089242774720806, 0.00039706333004626014, 0.000357535434579048, 0.00032214177517502396, 0.00029026356007755055, 0.0002616877581977911, 0.00023608237423362833, 0.000212713591333236, 0.0001916361903635185, 0.00017266004926693145, 0.00015564359632774325, 0.0001402208793447602, 0.00012660173230341236, 0.00011422743913971273, 0.00010300235432717231, 9.300429197495296e-05, 8.39861993638945e-05, 7.607902708176646e-05, 6.897134201761479e-05, 6.247938410751356e-05, 5.6602938665109214e-05, 5.159548971249831e-05, 4.707663141995047e-05], "accuracy_test": 0.5118423150510204, "start": "2016-01-31 17:46:36.345000", "learning_rate_per_epoch": [0.002136586932465434, 0.001068293466232717, 0.0007121956441551447, 0.0005341467331163585, 0.00042731736903078854, 0.00035609782207757235, 0.00030522668384946883, 0.00026707336655817926, 0.00023739853349979967, 0.00021365868451539427, 0.00019423516641836613, 0.00017804891103878617, 0.00016435283760074526, 0.00015261334192473441, 0.00014243912301026285, 0.00013353668327908963, 0.00012568157399073243, 0.00011869926674989983, 0.00011245194036746398, 0.00010682934225769714, 0.00010174223280046135, 9.711758320918307e-05, 9.289508307119831e-05, 8.902445551939309e-05, 8.546347089577466e-05, 8.217641880037263e-05, 7.913284935057163e-05, 7.630667096236721e-05, 7.367540820268914e-05, 7.121956150513142e-05, 6.892215606058016e-05, 6.676834163954481e-05, 6.474505789810792e-05, 6.284078699536622e-05, 6.104533531470224e-05, 5.934963337494992e-05, 5.774559031124227e-05, 5.622597018373199e-05, 5.478427920024842e-05, 5.341467112884857e-05, 5.2111874538240954e-05, 5.0871116400230676e-05, 4.9688067520037293e-05, 4.8558791604591534e-05, 4.747970888274722e-05, 4.644754153559916e-05, 4.5459295506589115e-05, 4.451222775969654e-05, 4.360381353762932e-05, 4.273173544788733e-05, 4.189386163488962e-05, 4.1088209400186315e-05, 4.031295975437388e-05, 3.9566424675285816e-05, 3.8847032556077465e-05, 3.8153335481183603e-05, 3.748398012248799e-05, 3.683770410134457e-05, 3.6213335988577455e-05, 3.560978075256571e-05, 3.502601248328574e-05, 3.446107803029008e-05, 3.3914078812813386e-05, 3.338417081977241e-05, 3.2870568247744814e-05, 3.237252894905396e-05, 3.188935443176888e-05, 3.142039349768311e-05, 3.096502769039944e-05, 3.052266765735112e-05, 3.0092773158685304e-05, 2.967481668747496e-05, 2.9268312573549338e-05, 2.8872795155621134e-05, 2.848782423825469e-05, 2.8112985091865994e-05, 2.7747881176765077e-05, 2.739213960012421e-05, 2.70454038400203e-05, 2.6707335564424284e-05, 2.637761463120114e-05, 2.6055937269120477e-05, 2.5742010620888323e-05, 2.5435558200115338e-05, 2.513631625333801e-05, 2.4844033760018647e-05, 2.455846879456658e-05, 2.4279395802295767e-05, 2.400659468548838e-05, 2.373985444137361e-05, 2.3478976800106466e-05], "accuracy_train_first": 0.507221479616556, "accuracy_train_last": 0.9326476487518457, "batch_size_eval": 1024, "accuracy_train_std": [0.016387693772115675, 0.02216789588570934, 0.01852754416861207, 0.019633147209345263, 0.01927688250331207, 0.01856759994799814, 0.017673343323010245, 0.0165055537422749, 0.015849173793951832, 0.015285329095355675, 0.015298269389457613, 0.01491624226150899, 0.015311733640092804, 0.0152903792448611, 0.015229131855335873, 0.014719315805340657, 0.014759870273233222, 0.014587597140632678, 0.014907916526733912, 0.014687740945836459, 0.014397443116604245, 0.014250564700889626, 0.013701405330524897, 0.013914811516200934, 0.014007490255205214, 0.013769990828411068, 0.0133927735034079, 0.013310196410433775, 0.012924582273386834, 0.013076245910974504, 0.013407328060568519, 0.013897951244665214, 0.013621811532700015, 0.013234815429726038, 0.013403235714005693, 0.01295125192886176, 0.012787672769727306, 0.01216084905661803, 0.012037464104682745, 0.012082965000271924, 0.01200824313484581, 0.011421182200973618, 0.011586637784834536, 0.011532205001657336, 0.01187102401907985, 0.011654114716415085, 0.011758870277007394, 0.011379458373784752, 0.01169642002550996, 0.0119545612152311, 0.011774119146221408, 0.011675729098481124, 0.011561453065970116, 0.011476697694728302, 0.011218892407001779, 0.01085896303077753, 0.011033259943895474, 0.010810605979589412, 0.010625457585874354, 0.010812992210349513, 0.01085164857191201, 0.01084225648253102, 0.010601633653286436, 0.010675832427728916, 0.010618322411559356, 0.010894685837388464, 0.0108208599258366, 0.010764103563819016, 0.010598704889878931, 0.010451645055695763, 0.010766892827866598, 0.010726738655995098, 0.010762066236627421, 0.010792999261205811, 0.010857186307902307, 0.010782798171191914, 0.010832307483451898, 0.010937736735990876, 0.010962865439220674, 0.010967421334530878, 0.011094588164616045, 0.011049170136666373, 0.010789712949206848, 0.01066768035187377, 0.010476396311661649, 0.010353789272453921, 0.010060026202545475, 0.010221761924132256, 0.010233703843262967, 0.009912690435068778, 0.009696837090175242], "accuracy_test_std": 0.015100809121757524, "error_valid": [0.5047930981739458, 0.39681675922439763, 0.3263895425451807, 0.2960131541792168, 0.28200448277484935, 0.27171969126506024, 0.2586875823606928, 0.25025443571159633, 0.2432861328125, 0.23983727880271077, 0.23812829442771077, 0.2310982210090362, 0.2312202913215362, 0.2286568147590362, 0.22521825583584332, 0.2246284944465362, 0.2241402131965362, 0.22229886342243976, 0.22070165427334332, 0.21873823418674698, 0.21775137660015065, 0.21946036097515065, 0.2196942065135542, 0.2192059252635542, 0.21785285673945776, 0.2179852221385542, 0.2188397143260542, 0.2183514330760542, 0.2177410815135542, 0.21787344691265065, 0.21699836455195776, 0.2171307299510542, 0.2173748705760542, 0.2170086596385542, 0.21751753106174698, 0.2165203783885542, 0.2170086596385542, 0.21589973173945776, 0.21504523955195776, 0.21504523955195776, 0.21467902861445776, 0.21602180205195776, 0.21491287415286142, 0.21515701477786142, 0.21552322571536142, 0.21491287415286142, 0.21504523955195776, 0.21528938017695776, 0.21601150696536142, 0.21637771790286142, 0.21662185852786142, 0.21723221009036142, 0.21759842102786142, 0.21858527861445776, 0.2190838549510542, 0.2189617846385542, 0.2192059252635542, 0.2194500658885542, 0.2198162768260542, 0.2198162768260542, 0.2204266283885542, 0.2205486987010542, 0.22153555628765065, 0.2215252612010542, 0.2223797533885542, 0.2229901049510542, 0.2229901049510542, 0.2228680346385542, 0.2234783862010542, 0.2229901049510542, 0.2228680346385542, 0.2236004565135542, 0.22373282191265065, 0.22423139824924698, 0.22471967949924698, 0.22409903285015065, 0.22409903285015065, 0.22422110316265065, 0.22458731410015065, 0.22434317347515065, 0.22533003106174698, 0.22520796074924698, 0.22508589043674698, 0.22558446677334332, 0.22570653708584332, 0.22644925404743976, 0.2267036897590362, 0.2267036897590362, 0.2268257600715362, 0.22769054734563254, 0.22793468797063254], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.08852416353958614, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "valid_ratio": 0.15, "learning_rate": 0.002136586852328588, "optimization": "adam", "nb_data_augmentation": 0, "learning_rate_decay_method": "lin", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 2.2020294837324438e-07, "rotation_range": [0, 0], "momentum": 0.742473429055537}, "accuracy_valid_max": 0.7853209713855422, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7720653120293675, "accuracy_valid_std": [0.018265692716899488, 0.018044628428947305, 0.01489553932739429, 0.01950071364505378, 0.013807370391762679, 0.013989942826738823, 0.009850280141245648, 0.013775979896798563, 0.013588240811560792, 0.011119715593238546, 0.011520487199642541, 0.011576771043664487, 0.011261425269794812, 0.009802408943890735, 0.009668432652271835, 0.006481969918824678, 0.008860736310577978, 0.011362727070706227, 0.010393446928968016, 0.009577971823283305, 0.010344437567683275, 0.00932716606310151, 0.010483918556953313, 0.010217500836627353, 0.01127416923792167, 0.011792702707310133, 0.01171073347743392, 0.011097846370311526, 0.010568514861114058, 0.010600108085400151, 0.012469174740412791, 0.01168052397716774, 0.011212564521246998, 0.011251972082425888, 0.010454290474553351, 0.011818980495426162, 0.012826356841318583, 0.013349167792715179, 0.013623247501927572, 0.013631995124627849, 0.012544071738472079, 0.012962762071499103, 0.013474384351015395, 0.013274805769807498, 0.012928829709691052, 0.013242361971425186, 0.01306946519925276, 0.012916587595560473, 0.01343717914317955, 0.013625272690707162, 0.013916211083231088, 0.01362913941585685, 0.013440659192558298, 0.013087276504180118, 0.012907430879924993, 0.012877651699296796, 0.013406625016855451, 0.013342595641987911, 0.01345635509416298, 0.013187908668441675, 0.013715014913367296, 0.013449255381084286, 0.012918332180031628, 0.014235229407701645, 0.014122099626603497, 0.014074352096151838, 0.013670468671873697, 0.01343987454397193, 0.013518172443692836, 0.014014936920041514, 0.013772804135816498, 0.014110119044778487, 0.013865519211778463, 0.01328497277951765, 0.013886456152416527, 0.014260790510600948, 0.01433582621264502, 0.014100733235722168, 0.01441948830013343, 0.01394631943702235, 0.01382082429564712, 0.013552344418202394, 0.01395153477279278, 0.013585671331291743, 0.014215473575958648, 0.014030980121011625, 0.013770330041401092, 0.014036130713314898, 0.01442394044678069, 0.014246001594959147, 0.014399477163840059], "accuracy_valid": [0.4952069018260542, 0.6031832407756024, 0.6736104574548193, 0.7039868458207832, 0.7179955172251506, 0.7282803087349398, 0.7413124176393072, 0.7497455642884037, 0.7567138671875, 0.7601627211972892, 0.7618717055722892, 0.7689017789909638, 0.7687797086784638, 0.7713431852409638, 0.7747817441641567, 0.7753715055534638, 0.7758597868034638, 0.7777011365775602, 0.7792983457266567, 0.781261765813253, 0.7822486233998494, 0.7805396390248494, 0.7803057934864458, 0.7807940747364458, 0.7821471432605422, 0.7820147778614458, 0.7811602856739458, 0.7816485669239458, 0.7822589184864458, 0.7821265530873494, 0.7830016354480422, 0.7828692700489458, 0.7826251294239458, 0.7829913403614458, 0.782482468938253, 0.7834796216114458, 0.7829913403614458, 0.7841002682605422, 0.7849547604480422, 0.7849547604480422, 0.7853209713855422, 0.7839781979480422, 0.7850871258471386, 0.7848429852221386, 0.7844767742846386, 0.7850871258471386, 0.7849547604480422, 0.7847106198230422, 0.7839884930346386, 0.7836222820971386, 0.7833781414721386, 0.7827677899096386, 0.7824015789721386, 0.7814147213855422, 0.7809161450489458, 0.7810382153614458, 0.7807940747364458, 0.7805499341114458, 0.7801837231739458, 0.7801837231739458, 0.7795733716114458, 0.7794513012989458, 0.7784644437123494, 0.7784747387989458, 0.7776202466114458, 0.7770098950489458, 0.7770098950489458, 0.7771319653614458, 0.7765216137989458, 0.7770098950489458, 0.7771319653614458, 0.7763995434864458, 0.7762671780873494, 0.775768601750753, 0.775280320500753, 0.7759009671498494, 0.7759009671498494, 0.7757788968373494, 0.7754126858998494, 0.7756568265248494, 0.774669968938253, 0.774792039250753, 0.774914109563253, 0.7744155332266567, 0.7742934629141567, 0.7735507459525602, 0.7732963102409638, 0.7732963102409638, 0.7731742399284638, 0.7723094526543675, 0.7720653120293675], "seed": 307407850, "model": "residualv3", "loss_std": [0.2654644548892975, 0.14949487149715424, 0.1360204964876175, 0.12842054665088654, 0.1226649284362793, 0.11849967390298843, 0.11488897353410721, 0.1121952012181282, 0.10966040939092636, 0.10752888768911362, 0.1058521643280983, 0.10417607426643372, 0.10266350954771042, 0.10118090361356735, 0.09992001950740814, 0.09873092919588089, 0.0977616161108017, 0.09675346314907074, 0.09572181850671768, 0.0947018638253212, 0.09362084418535233, 0.09268804639577866, 0.09186757355928421, 0.0909758061170578, 0.09013867378234863, 0.08926036208868027, 0.08844863623380661, 0.08762279152870178, 0.08688896894454956, 0.08611048758029938, 0.08537016063928604, 0.08462804555892944, 0.08394061028957367, 0.08321040123701096, 0.08259601145982742, 0.08194118738174438, 0.08129025995731354, 0.08067940175533295, 0.08007094264030457, 0.07948347181081772, 0.07887378334999084, 0.07826636731624603, 0.07766532152891159, 0.07709488272666931, 0.07652685791254044, 0.07595283538103104, 0.07539274543523788, 0.0748257264494896, 0.07426359504461288, 0.07371426373720169, 0.07320161908864975, 0.07267212867736816, 0.07218339294195175, 0.07166634500026703, 0.07117006927728653, 0.0706520527601242, 0.07014821469783783, 0.06964681297540665, 0.06912581622600555, 0.06862889230251312, 0.068173348903656, 0.06772031635046005, 0.06726481020450592, 0.06681429594755173, 0.06637617945671082, 0.06592651456594467, 0.06547387689352036, 0.06502357125282288, 0.0645844116806984, 0.06415784358978271, 0.06373057514429092, 0.06329280138015747, 0.06286261230707169, 0.06242729350924492, 0.06200404092669487, 0.061594970524311066, 0.061139319092035294, 0.06072364002466202, 0.060309238731861115, 0.05990797281265259, 0.05949937924742699, 0.05906606838107109, 0.05866457521915436, 0.0582728385925293, 0.0578632578253746, 0.057474058121442795, 0.05708779767155647, 0.05668516829609871, 0.05628354847431183, 0.05589717999100685, 0.05552271753549576]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:26 2016", "state": "available"}], "summary": "cf2d36ec8623f02dcd48f87dd9533a92"}