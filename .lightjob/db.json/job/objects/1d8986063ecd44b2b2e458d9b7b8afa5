{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 16, "f3": 16, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.12442532573530182, 0.12344309936917759, 0.12747186138041203, 0.12391859953573328, 0.08145655969344759, 0.08266322504636354, 0.09094335564794846, 0.08826113611097618, 0.08721468345896881, 0.08468986499617501, 0.07974624060049232, 0.08109020106173673, 0.08177647229928876, 0.09015313346351639, 0.09165567717482283, 0.07877179480542927, 0.09023143929726571, 0.08332648448735232, 0.08630185467901003, 0.08832567343095415, 0.0906401561016412, 0.09899320080218872, 0.09478517159667627, 0.08328227448370289, 0.09031283693768807, 0.09227818050218071, 0.08970741347065309, 0.09362969245055916, 0.08899122137456683, 0.08683924395602469, 0.09057638183029372, 0.07724641117277452, 0.07963288412442664, 0.09342059507586462, 0.09992136753873088, 0.0909548272963991, 0.08855073047934374, 0.09572293341299815, 0.09138675560899304, 0.09284581443967764, 0.07875005634663519, 0.08190635205818064, 0.0910148092798903, 0.09160224806880184, 0.08496728358306715, 0.08607723719228068, 0.08553380954451426, 0.08375889090697458, 0.08139347805740263, 0.08358325220887192, 0.08795345556022813, 0.09297020578815827, 0.08444396053790551], "moving_avg_accuracy_train": [0.04233810240963855, 0.08758659638554216, 0.13193646460843372, 0.16688381965361443, 0.16332373211596385, 0.1598208016754518, 0.15785651141754517, 0.156681647173381, 0.1552595291427899, 0.15181706643935428, 0.14754697500626224, 0.14443101997551552, 0.14266205201410853, 0.14188888145125192, 0.14222606634829538, 0.13812911859900803, 0.13812221201019156, 0.13785479502603987, 0.13877422892705032, 0.13874281507048986, 0.1392651826598264, 0.14042479014685583, 0.14228498432494133, 0.14160364327196526, 0.14300709671585307, 0.14529853689366534, 0.14486883380670845, 0.14600930358868822, 0.14666157353102421, 0.14545550653936756, 0.1442712134155513, 0.14107573740532148, 0.13948698896599415, 0.14216809052120197, 0.14425634547510588, 0.14463445716253506, 0.14496299186796832, 0.14832955036189438, 0.1485027135485965, 0.1482444037901224, 0.14612233539906197, 0.14405481194951722, 0.1437377155437221, 0.14326878209175956, 0.1446539709006559, 0.1449264314913132, 0.14369385987832647, 0.14351875099892758, 0.14314936836891434, 0.14243100532720365, 0.14328344319809777, 0.1452813413481675, 0.14243195344829052], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 463210392, "moving_var_accuracy_train": [0.016132634240841378, 0.0329462066805437, 0.047353783314979955, 0.05361026360536723, 0.04836330525431212, 0.043637409423920505, 0.039308394407484216, 0.03538997772066573, 0.03186918172583555, 0.0287889184984329, 0.026074129776212304, 0.023554099380373793, 0.021226852671172775, 0.01910954753852891, 0.01719961602756917, 0.015630719252555773, 0.014067647756608919, 0.012661526587538743, 0.011402982157069814, 0.010262692822836289, 0.009238879351638163, 0.00832709362219012, 0.0075255271613927565, 0.0067771524759277155, 0.006117164362457389, 0.005552704209008082, 0.004999095590793736, 0.004510892073626843, 0.004063631970963234, 0.003670360152162184, 0.0033159470887740325, 0.0030762519822842183, 0.002791343878486982, 0.0025769042405823237, 0.002358461095296629, 0.002123901701800501, 0.0019124829470945181, 0.0018232380972222975, 0.0016411841569031274, 0.0014776662565947213, 0.0013704281992422895, 0.0012718572582478174, 0.001145576483598149, 0.00103299792247966, 0.0009469668625583189, 0.0008529382892636389, 0.0007813175553675417, 0.0007034617679075865, 0.0006343435828630274, 0.0005755536337139875, 0.0005245381232561987, 0.0005080086840930477, 0.0005302789183194317], "duration": 21033.390628, "accuracy_train": [0.42338102409638556, 0.4948230421686747, 0.5310852786144579, 0.48141001506024095, 0.13128294427710843, 0.12829442771084337, 0.14017789909638553, 0.1461078689759036, 0.14246046686746988, 0.12083490210843373, 0.10911615210843373, 0.11638742469879518, 0.12674134036144577, 0.13493034638554216, 0.14526073042168675, 0.10125658885542169, 0.13806005271084337, 0.1354480421686747, 0.14704913403614459, 0.13846009036144577, 0.14396649096385541, 0.15086125753012047, 0.15902673192771086, 0.1354715737951807, 0.15563817771084337, 0.16592149849397592, 0.1410015060240964, 0.15627353162650603, 0.1525320030120482, 0.13460090361445784, 0.13361257530120482, 0.11231645331325302, 0.1251882530120482, 0.16629800451807228, 0.16305064006024098, 0.1480374623493976, 0.14791980421686746, 0.1786285768072289, 0.15006118222891565, 0.14591961596385541, 0.12702371987951808, 0.12544710090361447, 0.14088384789156627, 0.1390483810240964, 0.1571206701807229, 0.1473785768072289, 0.13260071536144577, 0.14194277108433734, 0.13982492469879518, 0.13596573795180722, 0.15095538403614459, 0.16326242469879518, 0.11678746234939759], "end": "2016-01-21 09:43:23.150000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0], "accuracy_valid": [0.41786858974358976, 0.48985042735042733, 0.5240384615384616, 0.484375, 0.12913995726495728, 0.1310096153846154, 0.14329594017094016, 0.1482371794871795, 0.14342948717948717, 0.12259615384615384, 0.11271367521367522, 0.12072649572649573, 0.12887286324786323, 0.140625, 0.1501068376068376, 0.10269764957264957, 0.1390224358974359, 0.13087606837606838, 0.14596688034188035, 0.14142628205128205, 0.14877136752136752, 0.14983974358974358, 0.15852029914529914, 0.13581730769230768, 0.16012286324786323, 0.17120726495726496, 0.13969017094017094, 0.16372863247863248, 0.15197649572649571, 0.1311431623931624, 0.1439636752136752, 0.11204594017094018, 0.13020833333333334, 0.17294337606837606, 0.17120726495726496, 0.14155982905982906, 0.15264423076923078, 0.17922008547008547, 0.1543803418803419, 0.15491452991452992, 0.125133547008547, 0.11979166666666667, 0.14449786324786323, 0.1440972222222222, 0.15691773504273504, 0.14743589743589744, 0.13341346153846154, 0.1438301282051282, 0.13768696581196582, 0.13207799145299146, 0.15197649572649571, 0.1597222222222222, 0.12126068376068376], "accuracy_test": 0.5164, "start": "2016-01-21 03:52:49.759000", "learning_rate_per_epoch": [0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035, 0.005728046875447035], "accuracy_train_last": 0.11678746234939759, "error_valid": [0.5821314102564102, 0.5101495726495726, 0.47596153846153844, 0.515625, 0.8708600427350427, 0.8689903846153846, 0.8567040598290598, 0.8517628205128205, 0.8565705128205128, 0.8774038461538461, 0.8872863247863247, 0.8792735042735043, 0.8711271367521367, 0.859375, 0.8498931623931624, 0.8973023504273504, 0.8609775641025641, 0.8691239316239316, 0.8540331196581197, 0.858573717948718, 0.8512286324786325, 0.8501602564102564, 0.8414797008547008, 0.8641826923076923, 0.8398771367521367, 0.8287927350427351, 0.860309829059829, 0.8362713675213675, 0.8480235042735043, 0.8688568376068376, 0.8560363247863247, 0.8879540598290598, 0.8697916666666666, 0.8270566239316239, 0.8287927350427351, 0.858440170940171, 0.8473557692307692, 0.8207799145299145, 0.8456196581196581, 0.8450854700854701, 0.8748664529914529, 0.8802083333333334, 0.8555021367521367, 0.8559027777777778, 0.8430822649572649, 0.8525641025641025, 0.8665865384615384, 0.8561698717948718, 0.8623130341880342, 0.8679220085470085, 0.8480235042735043, 0.8402777777777778, 0.8787393162393162], "accuracy_train_std": [0.12220651298568297, 0.12398268912429751, 0.12481149632086419, 0.12524109955269655, 0.08478883256968471, 0.08231087133382033, 0.08784058005712934, 0.08808882951098489, 0.08802744610890817, 0.08199385481164395, 0.07855168162200946, 0.07942781147960777, 0.08209006473210691, 0.0851418733477786, 0.08771931034526213, 0.07721311159816914, 0.08584783393722924, 0.08400130169185435, 0.0876568438047844, 0.08507156530525233, 0.08851644565413189, 0.08900398732818778, 0.09105014858026525, 0.08539621423138902, 0.09024693844050378, 0.09339163611748269, 0.08604357171033551, 0.09240691756917362, 0.08875863753942718, 0.08486829129099607, 0.08415687409728129, 0.07845953500790041, 0.08450924922978412, 0.09297299772248932, 0.09112923378969202, 0.08898651566849533, 0.09017416301560044, 0.09483781205438936, 0.08771989110309292, 0.08600541010758686, 0.08276165040481469, 0.08302467067318256, 0.0866359422518299, 0.08594870772050445, 0.08950843959503263, 0.08764046834023771, 0.08798575217661461, 0.08882670048373471, 0.08642442113499185, 0.08404035686583054, 0.09063067485973073, 0.09242732836047883, 0.08076435088379533], "accuracy_test_std": 0.12537360168711753, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.9069688999944485, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.00572804703937107, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "optimization": "adam", "nb_data_augmentation": 2, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.00011202072531631066, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.02671431585251659}, "accuracy_valid_max": 0.5240384615384616, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import os\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-6, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.12126068376068376, "loss_train": [5.48554801940918, 2.734959363937378, 2.4120192527770996, 2.1254663467407227, 2.271723239258456e+18, 1780501375352832.0, 302450791677952.0, 115861012611072.0, 3.812130164960133e+17, 431621731778560.0, 120053840216064.0, 1.3101398304489472e+17, 456882682593280.0, 144236745850880.0, 35932463955968.0, 2.27003212165546e+17, 490380441157632.0, 147356368502784.0, 5.288884146326733e+16, 136205492551680.0, 33243317403648.0, 9.309737438266e+17, 1450745731743744.0, 1074760402337792.0, 3823651275145216.0, 51741752033280.0, 46105710559232.0, 4941475217408.0, 3.8112739202800026e+17, 1717662111498240.0, 674603198316544.0, 2.0614707431446938e+17, 6311545172656128.0, 397335746052096.0, 117267882835968.0, 1.8819620696122982e+17, 911712572145664.0, 345790971117568.0, 8.4649510436864e+16, 321185170587648.0, 1.578256513976238e+17, 2084757663907840.0, 359432424783872.0, 81328569581568.0, 1.4246076667343667e+17, 523747203219456.0, 258190147059712.0, 1.0464851884454707e+17, 862392992923648.0, 112827297693696.0, 688125500194816.0, 9602641952768.0, 2.971087607473111e+17], "accuracy_train_first": 0.42338102409638556, "model": "residualv2", "loss_std": [59.6275634765625, 0.27163514494895935, 0.2865156829357147, 0.2814006805419922, Infinity, 1769529612959744.0, 160482610642944.0, 74265453920256.0, Infinity, 362911482511360.0, 174553410043904.0, Infinity, 280071378042880.0, 228275750174720.0, 17924368629760.0, Infinity, 324117123301376.0, 74263004446720.0, Infinity, 73634345385984.0, 14342786383872.0, Infinity, 857942937042944.0, 2902925177257984.0, 3.56874738204672e+16, 30745517096960.0, 148861855203328.0, 3435761238016.0, Infinity, 1041657210339328.0, 986943890391040.0, Infinity, 3.940478734250803e+16, 326824093548544.0, 159097970229248.0, Infinity, 407238028034048.0, 141912933662720.0, Infinity, 241199390654464.0, Infinity, 2094918080135168.0, 647789516161024.0, 66758828359680.0, Infinity, 655088611753984.0, 584348352905216.0, Infinity, 1578798302625792.0, 74569389965312.0, 4651944039677952.0, 5941126234112.0, Infinity]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:05 2016", "state": "available"}], "summary": "12fa9496ba67a2ca2291f67d11a250d6"}