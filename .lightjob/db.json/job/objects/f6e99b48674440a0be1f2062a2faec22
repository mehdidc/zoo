{"content": {"hp_model": {"f0": 64, "f1": 64, "f2": 32, "f3": 16, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.619483470916748, 1.2450246810913086, 1.0611426830291748, 0.9337143301963806, 0.8260835409164429, 0.7487219572067261, 0.6881176233291626, 0.6401110887527466, 0.5962021350860596, 0.5608881115913391, 0.5278513431549072, 0.49935677647590637, 0.4724770486354828, 0.44893598556518555, 0.42788001894950867, 0.405363529920578, 0.3900936543941498, 0.36998724937438965, 0.3572380244731903, 0.3418525159358978, 0.32630327343940735, 0.31508374214172363, 0.30293190479278564, 0.29435938596725464, 0.2840791940689087, 0.27505749464035034, 0.26791366934776306, 0.26195791363716125, 0.2561134696006775, 0.24882690608501434, 0.24237112700939178, 0.23783384263515472, 0.23263444006443024, 0.229919895529747, 0.22628986835479736, 0.22074128687381744, 0.21862177550792694, 0.21462537348270416, 0.21383853256702423, 0.2118210643529892, 0.2082839012145996, 0.20836739242076874, 0.2056826651096344, 0.2040233016014099, 0.20426785945892334, 0.19992299377918243, 0.19975604116916656, 0.19789262115955353, 0.19735394418239594, 0.19553758203983307, 0.19465114176273346, 0.19368144869804382, 0.1953444927930832, 0.19470682740211487, 0.1908435970544815, 0.19211110472679138, 0.19142788648605347, 0.19117841124534607, 0.19180884957313538, 0.19030629098415375, 0.18870878219604492, 0.19054636359214783, 0.19035761058330536, 0.19059523940086365, 0.1905616819858551, 0.1886339634656906, 0.18852867186069489, 0.19038373231887817, 0.18956603109836578, 0.18682365119457245, 0.18951790034770966, 0.1861926168203354, 0.19071504473686218, 0.18912121653556824, 0.18797516822814941, 0.18776533007621765, 0.18795403838157654, 0.18680402636528015, 0.1880723536014557, 0.18808060884475708, 0.1865842193365097, 0.18874606490135193, 0.18717874586582184, 0.18782195448875427, 0.18683375418186188, 0.18837358057498932, 0.18784146010875702, 0.18818676471710205, 0.18687847256660461, 0.18610216677188873, 0.18748340010643005, 0.18749196827411652, 0.18575306236743927, 0.188476100564003, 0.18785665929317474, 0.18762518465518951], "moving_avg_accuracy_train": [0.04128638767764856, 0.09532794331395346, 0.14904296370316533, 0.20271467770914076, 0.2520256492608549, 0.3013175537249964, 0.34867891663299694, 0.39212270377760605, 0.4348879706599045, 0.4740555822087165, 0.5115291306692771, 0.5458641527836893, 0.5777049246592516, 0.6076473905901058, 0.6355116104123705, 0.6610033207893228, 0.684233854141592, 0.7058645996336713, 0.7257786630991525, 0.7450636771763727, 0.7627410603815851, 0.7790250181757908, 0.7937131683227282, 0.8074276159561253, 0.8201938319583348, 0.8321041340995723, 0.8431816231386277, 0.8533371949344455, 0.8627283977197477, 0.871399044214615, 0.8794094922064056, 0.8868514463287883, 0.8937305305972568, 0.9000705159626881, 0.9058742311392136, 0.9112904540028208, 0.9164092312538861, 0.9210324068215114, 0.9252513575037936, 0.9291483584678384, 0.9327743140224019, 0.9360539140143569, 0.9391101857035451, 0.9420166512428714, 0.9445882203032465, 0.9470724764671357, 0.9492873085777126, 0.9512689956843655, 0.9531013061565343, 0.9548015749041145, 0.9563690552067079, 0.9577821126278515, 0.959065526099747, 0.960294966937539, 0.9613503104177422, 0.962383824907068, 0.9633023622034136, 0.9641360933141907, 0.9649049804067288, 0.9655877142435937, 0.9662510028217722, 0.9668502516421236, 0.9673408195530774, 0.9677171544086316, 0.968118706894125, 0.9685451722489171, 0.9689034144313251, 0.9691677036752543, 0.9694474166733619, 0.9696805571811826, 0.9699299111679831, 0.9702008327322941, 0.9704400118425549, 0.9706343467025039, 0.9708115732252676, 0.9709664267981357, 0.9711639237339552, 0.9712835422559546, 0.9713539965448018, 0.9714522826369071, 0.9715453904174209, 0.9715338923675116, 0.9715374589666317, 0.9715941473284587, 0.9717125961695793, 0.9718285007218258, 0.9718746860986096, 0.9718953265984294, 0.9719301790899338, 0.9720499019870497, 0.9720623214932634, 0.9721479038107607, 0.9721900506643653, 0.9722256937326186, 0.9722344849571327, 0.9723098263746716], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.04173451618975903, 0.09479292168674697, 0.1473653520331325, 0.1995676169521837, 0.24821819477127255, 0.29650016741575674, 0.3422743082419521, 0.38422081143507614, 0.4248180791714631, 0.4612619348461843, 0.4958274535227104, 0.5273921985224725, 0.5563131643347584, 0.5833686007721409, 0.6087082926056949, 0.6313288507698241, 0.652082096152179, 0.6707569284703195, 0.687695466374417, 0.7038943579429241, 0.7184642418493095, 0.7317439177679177, 0.743857406026894, 0.7549914790537227, 0.7650620024115281, 0.7743044608676644, 0.7828953462003256, 0.7900981226213323, 0.7969855124488074, 0.8032350504358544, 0.8088362500703563, 0.8139861635139984, 0.8186730022642552, 0.823072203590917, 0.8268860299185723, 0.8305423182106006, 0.8336569316926279, 0.8367561411024314, 0.8394101227188449, 0.8418607708385266, 0.8439920824500806, 0.8461055754004791, 0.8478113770471782, 0.8495572065864363, 0.8511650742655186, 0.852672160824283, 0.854028538727171, 0.8550417593085202, 0.8558051144394152, 0.8567149491456996, 0.8574707062077862, 0.8581630945949142, 0.8589194919784199, 0.8594792088197345, 0.8601182608293273, 0.860519420674482, 0.8607706012538712, 0.8611431481503214, 0.861428582723467, 0.8616387047316173, 0.8619010567264525, 0.8621239369818946, 0.8622380504843828, 0.8623428116539416, 0.8625204869079751, 0.8627811394125842, 0.8629170409080728, 0.8630261157141028, 0.8632219392895298, 0.8632140455300045, 0.863270035320001, 0.8633824907959076, 0.8634694346756542, 0.863462234948676, 0.8635300268905555, 0.8636154537007469, 0.8636923378299192, 0.8637737405774243, 0.8637737608626789, 0.863700536931908, 0.8636956705504641, 0.8637279119009147, 0.8637314855451605, 0.8637957369812318, 0.8637436999924459, 0.8637589313674484, 0.8637970536674505, 0.8637947426437025, 0.8638292838160793, 0.8637616851125587, 0.8637629109442998, 0.8636918015140264, 0.8635891229157111, 0.863668640123387, 0.8636181352977952, 0.8637069582985127], "moving_var_accuracy_train": [0.015341092267221823, 0.04009139066082618, 0.06204998233346459, 0.08177086005917114, 0.09547792129161972, 0.10779735577377625, 0.1172055084649286, 0.12247122139163069, 0.12668391171609553, 0.12782243669443372, 0.12767859453302421, 0.12552077877209641, 0.12209321367757124, 0.11795285370399734, 0.11314530105032906, 0.10767921662677793, 0.10176821408257819, 0.09580239502920833, 0.08979128483965239, 0.0841593622673144, 0.07855583493343832, 0.0730867569730858, 0.067719757068428, 0.06264055602658794, 0.05784328686306479, 0.05333565585061839, 0.04910648713625007, 0.04512405916912518, 0.04140540546000468, 0.037941485909754796, 0.03472484281204196, 0.031750802661274606, 0.029001618598501366, 0.026463215468556164, 0.02412004191035265, 0.021972056950291745, 0.020010668180176782, 0.018201965133120904, 0.016541964523544582, 0.015024447619814018, 0.013640330840985647, 0.012373099741852168, 0.01121985693741015, 0.010173899121050751, 0.009216025915836184, 0.008349967082442955, 0.007559119705701045, 0.00683855148922901, 0.006184912595303886, 0.00559243956009948, 0.005055308554580696, 0.004567748280601666, 0.004125797803800086, 0.0037268217463827537, 0.0033641633204953467, 0.00303736035824263, 0.0027412177193013683, 0.0024733519154569307, 0.002231337410160883, 0.002012398798572798, 0.0018151184843569965, 0.0016368385282595297, 0.0014753205873108946, 0.0013290631798913502, 0.0011976080614896688, 0.0010794841096302427, 0.0009726907358185268, 0.0008760503014767839, 0.0007891494255808989, 0.000710723673490291, 0.0006402109028378619, 0.0005768503990001539, 0.000519680218921205, 0.0004680520913692071, 0.00042152956539562444, 0.00037959242551733246, 0.00034198422832252206, 0.00030791458280751786, 0.0002771677987881187, 0.00024953796031241876, 0.00022466218581030674, 0.00020219715707564152, 0.0001819775558537409, 0.00016380872240166652, 0.00014755412131316504, 0.00013291961396893188, 0.00011964685037329667, 0.00010768599960806228, 9.692833191273264e-05, 8.736450087030377e-05, 7.862943898048476e-05, 7.083241408005004e-05, 6.376515988746397e-05, 5.740007775354823e-05, 5.166076554884952e-05, 4.6545775956735446e-05], "duration": 67052.383928, "accuracy_train": [0.4128638767764857, 0.5817019440406976, 0.6324781472060723, 0.68576010376292, 0.6958243932262828, 0.7449446939022701, 0.7749311828050018, 0.7831167880790882, 0.8197753726005905, 0.8265640861480252, 0.8487910668143227, 0.8548793518133997, 0.8642718715393135, 0.8771295839677926, 0.8862895888127538, 0.8904287141818937, 0.8933086543120154, 0.9005413090623846, 0.9050052342884828, 0.9186288038713547, 0.9218375092284975, 0.9255806383236435, 0.9259065196451642, 0.9308576446567, 0.9350897759782208, 0.9392968533707088, 0.9428790244901256, 0.944737341096807, 0.9472492227874677, 0.9494348626684201, 0.9515035241325213, 0.9538290334302326, 0.9556422890134736, 0.9571303842515688, 0.9581076677279439, 0.9600364597752861, 0.9624782265134736, 0.9626409869301403, 0.9632219136443337, 0.9642213671442414, 0.9654079140134736, 0.9655703139419527, 0.9666166309062385, 0.968174841096807, 0.9677323418466224, 0.9694307819421374, 0.9692207975729051, 0.9691041796442414, 0.9695921004060539, 0.9701039936323367, 0.970476377930048, 0.9704996294181433, 0.970616247346807, 0.971359934477667, 0.9708484017395718, 0.9716854553110004, 0.9715691978705242, 0.971639673311185, 0.9718249642395718, 0.9717323187753784, 0.9722206000253784, 0.9722434910252861, 0.9717559307516611, 0.9711041681086194, 0.9717326792635659, 0.9723833604420451, 0.9721275940729974, 0.9715463068706165, 0.9719648336563308, 0.9717788217515688, 0.9721740970491879, 0.9726391268110927, 0.9725926238349022, 0.9723833604420451, 0.9724066119301403, 0.9723601089539498, 0.9729413961563308, 0.9723601089539498, 0.971988085144426, 0.9723368574658545, 0.9723833604420451, 0.9714304099183279, 0.9715695583587117, 0.9721043425849022, 0.972778635739664, 0.9728716416920451, 0.972290354489664, 0.972081091096807, 0.9722438515134736, 0.9731274080610927, 0.9721740970491879, 0.9729181446682356, 0.972569372346807, 0.9725464813468992, 0.9723136059777593, 0.9729878991325213], "end": "2016-02-02 04:24:22.919000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0], "moving_var_accuracy_valid": [0.015675928574339328, 0.03944508526185061, 0.06037532062839558, 0.07886347672966526, 0.09227903755587973, 0.10403147374227623, 0.11248577408343592, 0.11707277884626924, 0.12019874429058129, 0.12013226140948231, 0.11887201100092959, 0.11595180804293669, 0.1118844276102817, 0.10728395461660878, 0.10233445899492324, 0.09670621996034173, 0.09091187270940969, 0.08495942969746471, 0.0790457133246752, 0.07350277878464193, 0.06806303455958765, 0.06284387923615825, 0.05788012069274564, 0.053207816862971866, 0.04879977414297563, 0.04468860407349872, 0.04088397346333926, 0.03726249601054441, 0.033963171657210446, 0.03091836501695329, 0.02810888945136786, 0.025536694982524123, 0.023180723601509887, 0.021036827992171426, 0.01906405263427193, 0.017277963367514547, 0.01563747438504493, 0.014160172837232766, 0.012807548119291837, 0.011580844393221152, 0.01046364235656894, 0.009457479792974505, 0.008537919646997986, 0.007711558969319503, 0.006963670218648489, 0.006287744985844115, 0.005675528336398689, 0.005117215046277046, 0.004610737941152114, 0.004157114339771739, 0.0037465434244266104, 0.003376203697091617, 0.003043732560398422, 0.002742178850840641, 0.0024716364529952586, 0.002225921170688013, 0.0020038968787703722, 0.0018047563116038272, 0.0016250139365033658, 0.0014629099041778113, 0.0013172383708827766, 0.0011859616142688924, 0.0010674826498650546, 0.0009608331590023749, 0.0008650339595652004, 0.0007791420211621115, 0.0007013940419941846, 0.0006313617136145607, 0.0005685706641073419, 0.0005117141584995627, 0.0004605709563588611, 0.0004146276768295273, 0.0003732329422906031, 0.0003359101145861598, 0.00030236046485399785, 0.0002721900980276934, 0.0002450242887487913, 0.00022058149753962454, 0.0001985233477893655, 0.00017871926870676683, 0.00016084755497110535, 0.0001447721550161047, 0.000130295054452893, 0.00011730270323093873, 0.00010559680354166192, 9.50392111405559e-05, 8.554836981431738e-05, 7.699358090036252e-05, 6.930496064362869e-05, 6.24155908417248e-05, 5.617404528152344e-05, 5.06021497130353e-05, 4.56368207926997e-05, 4.113004559027884e-05, 3.7039997667923395e-05, 3.340700363023914e-05], "accuracy_test": 0.8560805963010203, "start": "2016-02-01 09:46:50.535000", "learning_rate_per_epoch": [0.002124242251738906, 0.0019190001767128706, 0.0017335884040221572, 0.001566090970300138, 0.0014147768961265683, 0.0012780826073139906, 0.0011545956367626786, 0.0010430398397147655, 0.0009422624134458601, 0.0008512220229022205, 0.0007689778576605022, 0.0006946800276637077, 0.0006275607738643885, 0.0005669264937750995, 0.0005121506401337683, 0.0004626672016456723, 0.00041796479490585625, 0.00037758148391731083, 0.00034109994885511696, 0.000308143236907199, 0.0002783707750495523, 0.00025147487758658826, 0.00022717764659319073, 0.00020522798877209425, 0.00018539908342063427, 0.00016748602502048016, 0.00015130369865801185, 0.00013668490282725543, 0.00012347855954430997, 0.00011154819367220625, 0.00010077052866108716, 9.103418415179476e-05, 8.223855547839776e-05, 7.429275137837976e-05, 6.711466267006472e-05, 6.063011460355483e-05, 5.477209924720228e-05, 4.9480076995678246e-05, 4.469936538953334e-05, 4.0380560676567256e-05, 3.647903213277459e-05, 3.295446731499396e-05, 2.9770440960419364e-05, 2.6894053007708862e-05, 2.429557753202971e-05, 2.194816443079617e-05, 1.982755566132255e-05, 1.7911837858264334e-05, 1.6181214959942736e-05, 1.4617803572036792e-05, 1.3205446521169506e-05, 1.192955005535623e-05, 1.0776929229905363e-05, 9.735674211697187e-06, 8.795023859420326e-06, 7.945258403196931e-06, 7.177596216934035e-06, 6.484104687842773e-06, 5.857617452420527e-06, 5.291660727380076e-06, 4.78038600704167e-06, 4.31851003668271e-06, 3.901260242855642e-06, 3.5243247111793607e-06, 3.1838083032198483e-06, 2.8761921839759452e-06, 2.598297669464955e-06, 2.34725303016603e-06, 2.1204639324423624e-06, 1.9155870631948346e-06, 1.7305051187577192e-06, 1.5633055454600253e-06, 1.4122606444288976e-06, 1.2758094953824184e-06, 1.152542154159164e-06, 1.041184759742464e-06, 9.405865739608998e-07, 8.497081012137642e-07, 7.676102313780575e-07, 6.934445764272823e-07, 6.264447165449383e-07, 5.659182988893008e-07, 5.112398753226444e-07, 4.618444222614926e-07, 4.172215142261848e-07, 3.7691000898121274e-07, 3.404933579531644e-07, 3.0759525770918117e-07, 2.778757277610566e-07, 2.510276715383952e-07, 2.2677365052459209e-07, 2.0486302787503519e-07, 1.8506938204154721e-07, 1.6718817619221227e-07, 1.5103462658316857e-07, 1.3644182672578609e-07], "accuracy_train_first": 0.4128638767764857, "accuracy_train_last": 0.9729878991325213, "batch_size_eval": 1024, "accuracy_train_std": [0.01389256608242225, 0.017422482789907094, 0.017526426579580683, 0.014742716880105046, 0.01787411402925779, 0.017857804654100452, 0.017419092329397104, 0.017335180745716862, 0.01706051994089681, 0.016405214561657253, 0.014366536271038307, 0.015946112205606877, 0.016777156667899966, 0.016652698914981712, 0.013800075257778443, 0.016205856321195308, 0.01605968260079287, 0.014512702480966491, 0.01369963814910662, 0.013472214596818263, 0.013644730294289847, 0.01204383400821231, 0.011612292141845611, 0.012257929008589772, 0.01217296432629664, 0.011077805142045014, 0.009700893445377352, 0.010676563205538838, 0.009262648529914987, 0.009978699878863302, 0.010369686681465505, 0.009326709270241812, 0.007971289436517258, 0.008506681246600445, 0.007888559408120907, 0.007852037149721243, 0.00781640522750705, 0.00767828088984819, 0.007394726306427937, 0.007675843599426283, 0.006926855031251487, 0.006878648964713848, 0.006328172019507978, 0.006581146609377033, 0.006720997473080608, 0.006823360620187679, 0.006779736841357314, 0.006340425877814388, 0.006092210864625829, 0.005813165470554137, 0.005960813169477654, 0.00638287498709345, 0.005745159869448912, 0.005925022879492601, 0.005951920980324874, 0.005782473121892022, 0.005783383719430062, 0.006095093498914706, 0.0054365258220370645, 0.00561257865851454, 0.005776533854019657, 0.0055704715576300945, 0.005826176442833768, 0.00587676080658399, 0.005797131952897405, 0.005705497153721043, 0.005897227165923529, 0.0054260880048148455, 0.005340043530420502, 0.005456032007536087, 0.005474038377677061, 0.005702047055369359, 0.005677773081080611, 0.005482242180293411, 0.005656605345298656, 0.0056382755722370346, 0.005381284809345686, 0.005503773283834144, 0.005686797686496028, 0.005829097091063444, 0.005625338791343921, 0.005429819387713324, 0.00531029507434983, 0.005244881318238054, 0.005389551260711296, 0.005297374176297118, 0.005350997722777014, 0.005389742548210227, 0.005266320864790263, 0.0054770689461671514, 0.00510040779806853, 0.005138590046963755, 0.0051819069650286004, 0.005254807959673994, 0.005635640693094558, 0.005433223094773572], "accuracy_test_std": 0.0073168548335914175, "error_valid": [0.5826548381024097, 0.4276814288403614, 0.37948277484939763, 0.3306119987763554, 0.3139266048569277, 0.26896207878388556, 0.24575842432228923, 0.23826065982680722, 0.2098065112010542, 0.21074336408132532, 0.1930828783885542, 0.18852509647966864, 0.18339814335466864, 0.17313247129141573, 0.1632344808923193, 0.16508612575301207, 0.1611386954066265, 0.16116958066641573, 0.15985769248870485, 0.15031561794051207, 0.15040680299322284, 0.1487389989646084, 0.1471211996423193, 0.1448018637048193, 0.14430328736822284, 0.1425134130271084, 0.13978668580572284, 0.1450768895896084, 0.14102797910391573, 0.14051910768072284, 0.1407529532191265, 0.13966461549322284, 0.13914544898343373, 0.1373349844691265, 0.13878953313253017, 0.1365510871611446, 0.1383115469691265, 0.13535097420933728, 0.13670404273343373, 0.13608339608433728, 0.13682611304593373, 0.13487298804593373, 0.13683640813253017, 0.13473032756024095, 0.13436411662274095, 0.13376406014683728, 0.13376406014683728, 0.13583925545933728, 0.13732468938253017, 0.13509653849774095, 0.13572748023343373, 0.13560540992093373, 0.13427293157003017, 0.13548333960843373, 0.13413027108433728, 0.1358701407191265, 0.1369687735316265, 0.1355039297816265, 0.13600250611822284, 0.13647019719503017, 0.13573777532003017, 0.1358701407191265, 0.13673492799322284, 0.13671433782003017, 0.13588043580572284, 0.13487298804593373, 0.13585984563253017, 0.1359922110316265, 0.1350156485316265, 0.13685699830572284, 0.13622605657003017, 0.13560540992093373, 0.1357480704066265, 0.1366025625941265, 0.13585984563253017, 0.13561570500753017, 0.13561570500753017, 0.13549363469503017, 0.13622605657003017, 0.13695847844503017, 0.13634812688253017, 0.13598191594503017, 0.1362363516566265, 0.1356260000941265, 0.1367246329066265, 0.13610398625753017, 0.13585984563253017, 0.13622605657003017, 0.13585984563253017, 0.1368467032191265, 0.13622605657003017, 0.13694818335843373, 0.1373349844691265, 0.13561570500753017, 0.13683640813253017, 0.13549363469503017], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.09661893470625063, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "valid_ratio": 0.15, "learning_rate": 0.0023514353968714825, "optimization": "rmsprop", "nb_data_augmentation": 1, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 9.001064029915965e-08, "rotation_range": [0, 0], "momentum": 0.6725183380857547}, "accuracy_valid_max": 0.8662359398531627, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8645063653049698, "accuracy_valid_std": [0.016479878010828838, 0.01588633485906183, 0.021321642898601334, 0.019317603071542674, 0.01304852792743799, 0.013160962723736873, 0.01629974339076436, 0.013083754620465238, 0.014679007863829209, 0.013481332285376922, 0.011519027118957659, 0.0072037541346423204, 0.007117808778785219, 0.012417043975443846, 0.008338203940619533, 0.004517463275354354, 0.007692277788297716, 0.004357210595382594, 0.008102940852589184, 0.008168523228602464, 0.005831028723538938, 0.006781623637149129, 0.004331415350810653, 0.0035887032352814956, 0.005285820044435316, 0.007821356993520694, 0.00880923329741284, 0.0073227512725881246, 0.007513503042650111, 0.007833672808911589, 0.005384953334180122, 0.005590083051222382, 0.006460582638865362, 0.006979073747224174, 0.007553920133302934, 0.006311236818850594, 0.006978250519807151, 0.0073709292784034566, 0.005276271185286753, 0.007612062904004034, 0.006199786598808421, 0.005588143362306761, 0.005844338346516401, 0.00432934765972374, 0.005765937105600951, 0.007714360320661378, 0.007235937933948013, 0.005577562489594657, 0.00779386111294576, 0.006265636473440425, 0.00639713485407811, 0.006588492818496655, 0.006304871722625131, 0.005638851160309441, 0.006245860105978143, 0.007039827446326827, 0.006571411441675071, 0.006856776259978911, 0.0077714208280390655, 0.0058504328846167375, 0.006362357227047864, 0.006620961000913613, 0.006982003847250311, 0.005996520159279227, 0.00719314651166168, 0.006039251193478169, 0.0064079491230427, 0.007011091417555615, 0.007028891199643686, 0.0072569575864561454, 0.006919167161314898, 0.006515716637713441, 0.006981478558650415, 0.007655746791849388, 0.006891960069475583, 0.007079517185840582, 0.006444881281835679, 0.006450575427862981, 0.006970662087888291, 0.0074785001440896524, 0.006361609409988295, 0.007397787099574944, 0.007523503901058642, 0.007916758480441578, 0.006260416092307929, 0.006831310486073762, 0.0072131176756084865, 0.007004781731198073, 0.007440895558304622, 0.007106430520201956, 0.006230165984976571, 0.006206081720214878, 0.005552123642046932, 0.007163215512611635, 0.005594217350027017, 0.007348992411469135], "accuracy_valid": [0.41734516189759036, 0.5723185711596386, 0.6205172251506024, 0.6693880012236446, 0.6860733951430723, 0.7310379212161144, 0.7542415756777108, 0.7617393401731928, 0.7901934887989458, 0.7892566359186747, 0.8069171216114458, 0.8114749035203314, 0.8166018566453314, 0.8268675287085843, 0.8367655191076807, 0.8349138742469879, 0.8388613045933735, 0.8388304193335843, 0.8401423075112951, 0.8496843820594879, 0.8495931970067772, 0.8512610010353916, 0.8528788003576807, 0.8551981362951807, 0.8556967126317772, 0.8574865869728916, 0.8602133141942772, 0.8549231104103916, 0.8589720208960843, 0.8594808923192772, 0.8592470467808735, 0.8603353845067772, 0.8608545510165663, 0.8626650155308735, 0.8612104668674698, 0.8634489128388554, 0.8616884530308735, 0.8646490257906627, 0.8632959572665663, 0.8639166039156627, 0.8631738869540663, 0.8651270119540663, 0.8631635918674698, 0.865269672439759, 0.865635883377259, 0.8662359398531627, 0.8662359398531627, 0.8641607445406627, 0.8626753106174698, 0.864903461502259, 0.8642725197665663, 0.8643945900790663, 0.8657270684299698, 0.8645166603915663, 0.8658697289156627, 0.8641298592808735, 0.8630312264683735, 0.8644960702183735, 0.8639974938817772, 0.8635298028049698, 0.8642622246799698, 0.8641298592808735, 0.8632650720067772, 0.8632856621799698, 0.8641195641942772, 0.8651270119540663, 0.8641401543674698, 0.8640077889683735, 0.8649843514683735, 0.8631430016942772, 0.8637739434299698, 0.8643945900790663, 0.8642519295933735, 0.8633974374058735, 0.8641401543674698, 0.8643842949924698, 0.8643842949924698, 0.8645063653049698, 0.8637739434299698, 0.8630415215549698, 0.8636518731174698, 0.8640180840549698, 0.8637636483433735, 0.8643739999058735, 0.8632753670933735, 0.8638960137424698, 0.8641401543674698, 0.8637739434299698, 0.8641401543674698, 0.8631532967808735, 0.8637739434299698, 0.8630518166415663, 0.8626650155308735, 0.8643842949924698, 0.8631635918674698, 0.8645063653049698], "seed": 444255056, "model": "residualv3", "loss_std": [0.2589378356933594, 0.19691914319992065, 0.18620535731315613, 0.1855287253856659, 0.18072691559791565, 0.1780472993850708, 0.17457330226898193, 0.16931557655334473, 0.16718000173568726, 0.160555899143219, 0.1547754853963852, 0.15342192351818085, 0.14985230565071106, 0.146306112408638, 0.14360375702381134, 0.13789081573486328, 0.1366797238588333, 0.13143938779830933, 0.13247895240783691, 0.12806996703147888, 0.12646420300006866, 0.12049766629934311, 0.12012583762407303, 0.11743075400590897, 0.11419031769037247, 0.11116723716259003, 0.11117282509803772, 0.10925287753343582, 0.10794101655483246, 0.10653813928365707, 0.10579570382833481, 0.10274068266153336, 0.10011353343725204, 0.10264761745929718, 0.09941406548023224, 0.098261259496212, 0.09354907274246216, 0.09786763042211533, 0.09645301848649979, 0.09598486870527267, 0.09417876601219177, 0.09402435272932053, 0.09343213587999344, 0.09332436323165894, 0.093122698366642, 0.09031287580728531, 0.089960478246212, 0.08907260000705719, 0.08913659304380417, 0.0892602726817131, 0.08692136406898499, 0.08823028206825256, 0.08844268321990967, 0.08951832354068756, 0.08842378109693527, 0.09094429016113281, 0.08762308210134506, 0.08877839148044586, 0.08691074699163437, 0.08740628510713577, 0.08766345679759979, 0.08686951547861099, 0.0883805975317955, 0.08849608898162842, 0.09013348072767258, 0.08794255554676056, 0.08641640841960907, 0.08606332540512085, 0.08708471804857254, 0.08586867898702621, 0.08470632135868073, 0.08607760071754456, 0.08895258605480194, 0.08731665462255478, 0.08506295084953308, 0.08763148635625839, 0.08641506731510162, 0.08670597523450851, 0.08838651329278946, 0.08790211379528046, 0.08536134660243988, 0.08865375816822052, 0.08729861676692963, 0.08519062399864197, 0.08563652634620667, 0.08589423447847366, 0.0884958803653717, 0.08700096607208252, 0.08572851866483688, 0.08578348159790039, 0.08666807413101196, 0.08891592919826508, 0.08401704579591751, 0.08736307173967361, 0.0886526107788086, 0.08804122358560562]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:31 2016", "state": "available"}], "summary": "553176e578874bf25907fa1115568dcd"}