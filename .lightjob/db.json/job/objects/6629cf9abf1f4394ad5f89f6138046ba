{"content": {"hp_model": {"f0": 32, "f1": 16, "f2": 16, "f3": 32, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.011233692387503401, 0.007422531009990028, 0.01335585323596476, 0.00899369432997218, 0.012014471739552559, 0.013601033857414742, 0.01331115031712596, 0.01335585323596476, 0.007198412988371435, 0.011586708313063743, 0.007198412988371435, 0.00749360373483059, 0.00749360373483059, 0.013866764668998792, 0.00749360373483059, 0.00749360373483059, 0.007811422214151855, 0.00749360373483059, 0.010690798460984903, 0.010690798460984903, 0.01335585323596476, 0.00899369432997218, 0.00749360373483059, 0.007198412988371435, 0.00749360373483059, 0.007198412988371435, 0.00749360373483059, 0.01154600984738318, 0.007198412988371435, 0.00899369432997218, 0.00749360373483059, 0.007811422214151855, 0.007811422214151855, 0.00749360373483059, 0.01335585323596476, 0.011233692387503401, 0.00749360373483059, 0.00749360373483059, 0.01154600984738318, 0.01154600984738318, 0.00749360373483059, 0.01221323543108033, 0.00749360373483059, 0.00749360373483059, 0.00749360373483059, 0.010690798460984903, 0.013078792686866948, 0.00749360373483059, 0.00749360373483059, 0.00899369432997218, 0.00749360373483059, 0.00749360373483059, 0.00749360373483059, 0.00749360373483059, 0.011233692387503401, 0.010690798460984903], "moving_avg_accuracy_train": [0.010068020516103726, 0.019157753596230155, 0.02721953424205195, 0.034412754342440705, 0.04094968379237899, 0.05238825955996649, 0.05711303871655751, 0.061379290850346574, 0.06522345992191952, 0.06873661841131672, 0.07184505472679265, 0.07462190131552904, 0.07712106324539178, 0.08183507486681975, 0.08361291944155341, 0.08521297955881371, 0.08680130245587622, 0.08808252427170427, 0.08919198681084982, 0.09019050309608082, 0.09114900879191755, 0.09194928143731973, 0.0927157053550034, 0.09342623297611066, 0.09404496173991525, 0.09462256372253133, 0.09512165941169384, 0.09562407161282789, 0.0960437626081527, 0.09635455987193137, 0.09668045594615388, 0.09712203120448237, 0.09751944893697803, 0.0977288561046959, 0.09793352649967112, 0.09820819436580773, 0.09834872699064262, 0.098475206352994, 0.09864226385999804, 0.09879261561630166, 0.09887470611608715, 0.09895381464461317, 0.09901978524156752, 0.09907915877882642, 0.09913259496235943, 0.09913705043243948, 0.09931065202333174, 0.09934093888241421, 0.09936819705558844, 0.09934655087462355, 0.09937324784857685, 0.09939727512513483, 0.099418899674037, 0.09943836176804896, 0.0995625461073478, 0.099524006462929], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 266168453, "moving_var_accuracy_train": [0.00091228533401417, 0.0015646660278242556, 0.001993130189673952, 0.0022594989094202877, 0.002418132038179493, 0.0033538879746791033, 0.0032194110199182057, 0.0030612780833479225, 0.0028881489976706723, 0.002710414641048217, 0.002526334563889722, 0.002343099000297142, 0.0021650013934325055, 0.0021484984041918766, 0.0019620951457598786, 0.0017889273625935145, 0.0016327395529621609, 0.0014842393617381278, 0.001346893589696221, 0.0012211775436734424, 0.0011073283878266613, 0.0010023594758068065, 0.0009074101788205042, 0.0008212128064416609, 0.0007425369533459272, 0.0006712858744642328, 0.000606399155580275, 0.0005480310022008827, 0.0004948131667648051, 0.0004462012045408754, 0.00040253695834753067, 0.00036403816089168855, 0.00032905581248943757, 0.0002965448934975183, 0.0002672674138829803, 0.00024121965442487465, 0.00021727543375017403, 0.00019569186363706394, 0.0001763738511691752, 0.00015893991690786997, 0.00014310657486847825, 0.0001288522408152004, 0.00011600618581064297, 0.00010443729418191837, 9.40192635951217e-05, 8.461751589653225e-05, 7.642700191812196e-05, 6.87925573708075e-05, 6.191998870576991e-05, 5.573220684954621e-05, 5.016540072035596e-05, 4.51540564384895e-05, 4.064285938467755e-05, 3.658198240413977e-05, 3.306257991486957e-05, 2.976968966110996e-05], "duration": 65171.416621, "accuracy_train": [0.10068020516103728, 0.10096535131736803, 0.09977556005444813, 0.09915173524593947, 0.09978204884182354, 0.15533544146825398, 0.0996360511258767, 0.09977556005444813, 0.09982098156607605, 0.10035504481589148, 0.09982098156607605, 0.09961352061415651, 0.09961352061415651, 0.12426117945967147, 0.09961352061415651, 0.09961352061415651, 0.10109620852943892, 0.09961352061415651, 0.09917714966315984, 0.09917714966315984, 0.09977556005444813, 0.09915173524593947, 0.09961352061415651, 0.09982098156607605, 0.09961352061415651, 0.09982098156607605, 0.09961352061415651, 0.10014578142303433, 0.09982098156607605, 0.09915173524593947, 0.09961352061415651, 0.10109620852943892, 0.10109620852943892, 0.09961352061415651, 0.09977556005444813, 0.10068020516103728, 0.09961352061415651, 0.09961352061415651, 0.10014578142303433, 0.10014578142303433, 0.09961352061415651, 0.09966579140134735, 0.09961352061415651, 0.09961352061415651, 0.09961352061415651, 0.09917714966315984, 0.10087306634136213, 0.09961352061415651, 0.09961352061415651, 0.09915173524593947, 0.09961352061415651, 0.09961352061415651, 0.09961352061415651, 0.09961352061415651, 0.10068020516103728, 0.09917714966315984], "end": "2016-01-30 04:53:21.655000", "learning_rate_per_epoch": [0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608, 0.005916788708418608], "accuracy_valid": [0.09699883518448796, 0.10529961643448796, 0.10280820547816265, 0.10221697336219879, 0.09904314523719879, 0.16042833443147592, 0.10280820547816265, 0.10280820547816265, 0.10293027579066265, 0.10170957266566265, 0.10293027579066265, 0.10214637848268072, 0.10214637848268072, 0.11762871799698796, 0.10214637848268072, 0.10214637848268072, 0.0964193688817771, 0.10214637848268072, 0.10517901684864459, 0.10517901684864459, 0.10280820547816265, 0.10221697336219879, 0.10214637848268072, 0.10293027579066265, 0.10214637848268072, 0.10293027579066265, 0.10214637848268072, 0.10146543204066265, 0.10293027579066265, 0.10221697336219879, 0.10214637848268072, 0.0964193688817771, 0.0964193688817771, 0.10214637848268072, 0.10280820547816265, 0.09699883518448796, 0.10214637848268072, 0.10214637848268072, 0.10146543204066265, 0.10146543204066265, 0.10214637848268072, 0.09867693429969879, 0.10214637848268072, 0.10214637848268072, 0.10214637848268072, 0.10517901684864459, 0.0911585796310241, 0.10214637848268072, 0.10214637848268072, 0.10221697336219879, 0.10214637848268072, 0.10214637848268072, 0.10214637848268072, 0.10214637848268072, 0.09699883518448796, 0.10517901684864459], "accuracy_test": 0.1003467793367347, "start": "2016-01-29 10:47:10.239000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0], "accuracy_train_last": 0.09917714966315984, "batch_size_eval": 1024, "accuracy_train_std": [0.009115702335306603, 0.010268390194258074, 0.010911921927908578, 0.010434826175732026, 0.009675856927509587, 0.008312319371427861, 0.010844275676538466, 0.010911921927908578, 0.008629580764253382, 0.009128552063310843, 0.008629580764253382, 0.007168484444888886, 0.007168484444888886, 0.01186793926184129, 0.007168484444888886, 0.007168484444888886, 0.009598011730269022, 0.007168484444888886, 0.009792043901091495, 0.009792043901091495, 0.010911921927908578, 0.010434826175732026, 0.007168484444888886, 0.008629580764253382, 0.007168484444888886, 0.008629580764253382, 0.007168484444888886, 0.00919894278200876, 0.008629580764253382, 0.010434826175732026, 0.007168484444888886, 0.009598011730269022, 0.009598011730269022, 0.007168484444888886, 0.010911921927908578, 0.009115702335306603, 0.007168484444888886, 0.007168484444888886, 0.00919894278200876, 0.00919894278200876, 0.007168484444888886, 0.009706518634944226, 0.007168484444888886, 0.007168484444888886, 0.007168484444888886, 0.009792043901091495, 0.0096304556680945, 0.007168484444888886, 0.007168484444888886, 0.010434826175732026, 0.007168484444888886, 0.007168484444888886, 0.007168484444888886, 0.007168484444888886, 0.009115702335306603, 0.009792043901091495], "accuracy_test_std": 0.008625498687119244, "error_valid": [0.9030011648155121, 0.8947003835655121, 0.8971917945218374, 0.8977830266378012, 0.9009568547628012, 0.8395716655685241, 0.8971917945218374, 0.8971917945218374, 0.8970697242093374, 0.8982904273343374, 0.8970697242093374, 0.8978536215173193, 0.8978536215173193, 0.8823712820030121, 0.8978536215173193, 0.8978536215173193, 0.9035806311182228, 0.8978536215173193, 0.8948209831513554, 0.8948209831513554, 0.8971917945218374, 0.8977830266378012, 0.8978536215173193, 0.8970697242093374, 0.8978536215173193, 0.8970697242093374, 0.8978536215173193, 0.8985345679593374, 0.8970697242093374, 0.8977830266378012, 0.8978536215173193, 0.9035806311182228, 0.9035806311182228, 0.8978536215173193, 0.8971917945218374, 0.9030011648155121, 0.8978536215173193, 0.8978536215173193, 0.8985345679593374, 0.8985345679593374, 0.8978536215173193, 0.9013230657003012, 0.8978536215173193, 0.8978536215173193, 0.8978536215173193, 0.8948209831513554, 0.9088414203689759, 0.8978536215173193, 0.8978536215173193, 0.8977830266378012, 0.8978536215173193, 0.8978536215173193, 0.8978536215173193, 0.8978536215173193, 0.9030011648155121, 0.8948209831513554], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "momentum": 0.6826226345701278, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0059167888836027015, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "l2_decay": 2.7584781746724794e-05, "optimization": "santa_sss", "nb_data_augmentation": 4, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.06299803644837569}, "accuracy_valid_max": 0.16042833443147592, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop', 'santa_sss'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.10517901684864459, "loss_train": [49552.26953125, 123874.734375, 300523.25, 604052.9375, 1098991.0, 1644903.625, 2423305.75, 3084764.75, 4354310.5, 5288897.0, 6010080.0, 6587032.5, 7281447.0, 8124927.0, 8881234.0, 10529806.0, 12114107.0, 13726123.0, 15510570.0, 17126416.0, 19080648.0, 21176846.0, 24690764.0, 28526604.0, 30976182.0, 34025592.0, 37298764.0, 41101700.0, 45057464.0, 49430468.0, 52396672.0, 55505972.0, 59481044.0, 63797904.0, 67960232.0, 73289576.0, 77207400.0, 81121016.0, 85301440.0, 89635872.0, 94715608.0, 100843416.0, 108944632.0, 118873720.0, 128943920.0, 136407008.0, 143431392.0, 151487136.0, 158331600.0, 166270944.0, 175172992.0, 187478016.0, 197270784.0, 208002832.0, 218907360.0, 229911344.0], "accuracy_train_first": 0.10068020516103728, "model": "residualv3", "loss_std": [12491.005859375, 37354.14453125, 82031.03125, 138058.9375, 240642.03125, 268109.0, 474846.3125, 522254.375, 802023.125, 885808.9375, 821058.5625, 635346.5625, 609860.9375, 641236.875, 564095.125, 931539.1875, 852449.625, 831699.9375, 773122.3125, 1090987.625, 1035171.125, 945168.5, 1545143.0, 1138961.5, 1122121.25, 1226561.875, 1171868.25, 1431865.0, 1769835.75, 1502447.5, 1377674.875, 1455437.625, 1980442.75, 1532883.5, 1642304.125, 1870890.125, 1469125.5, 1903839.75, 2119919.0, 1792906.0, 2160410.25, 2851780.75, 3240776.75, 3532591.0, 3040069.5, 2725670.75, 3045953.5, 3293772.25, 3352292.0, 3286823.25, 3694755.25, 4054623.5, 3060518.75, 4375571.5, 4057630.0, 3755552.0]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:23 2016", "state": "available"}], "summary": "dced98161aaac4a75d84f42432957e3f"}