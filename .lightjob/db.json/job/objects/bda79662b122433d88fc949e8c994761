{"content": {"hp_model": {"f0": 16, "f1": 16, "f2": 32, "f3": 16, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.011550253457124427, 0.018474525974734066, 0.013474725391735099, 0.008047574231202465, 0.005936816915658362, 0.01763222673652904, 0.011447404592843533, 0.013874677822354986, 0.010230372509165617, 0.00610998392643249, 0.010906778688965446, 0.011010531636584043, 0.007888084853179668, 0.017964489643325147, 0.011027281230202943, 0.016552400623785893, 0.010011567135454598, 0.007102668637253312, 0.011315706190807929, 0.009277663513292397, 0.00971657579600964, 0.008700138575915605, 0.010785384390758485, 0.009690072289801422, 0.011809533114408079, 0.012232518648639999, 0.010467468072384292, 0.006708923048918201, 0.00652918096411578, 0.0097677577637496, 0.008882219710184977, 0.005587513166834751, 0.0050776879886416, 0.006218036807203083, 0.007486073807378637, 0.00669580078502057, 0.003435555769320185, 0.007742793400716688, 0.006252983904852115, 0.0074383858491329675, 0.008800828190364755, 0.006103463174763751, 0.006963607283986971, 0.006954249465460906, 0.0079158425854912, 0.005342160056432965, 0.00760986191569816, 0.0048379208544686745, 0.006780725558165905, 0.004643653769368396, 0.006220646637891046, 0.006662629891101598, 0.004617868113633746, 0.008051328363735717, 0.00457233921469419, 0.0076275779498427634, 0.006297473453400542, 0.008324402262946581, 0.008094387301344812, 0.007530497346202899, 0.00627106188078069, 0.007171614110564949, 0.0060651169612632085, 0.00732158026956337, 0.00782423802973959, 0.007553475567627765, 0.007662216431258934, 0.009338623589849961, 0.006054793559440742, 0.008459170598187184, 0.005540763536725423, 0.0069601517090380925, 0.0056905162625300295, 0.006134802491796845, 0.006734401955278504, 0.007152292223729108, 0.00779386111294576, 0.005602122550087022, 0.006762828969405319, 0.007004162416786631, 0.0064572471176647835, 0.007479888483287138, 0.006653649968020566, 0.0058560765651102156, 0.006920615824854807, 0.006531119206000998, 0.005690437388620127, 0.007717424525489904, 0.006415014984636324, 0.006935999304750924, 0.006036262836668865, 0.005986856924988298, 0.006489875136074082, 0.005243640100336461, 0.005502787809077086, 0.00622641401306506, 0.006691055690104771, 0.005701369530493325, 0.0058855650996220065, 0.005309612275341242], "moving_avg_accuracy_train": [0.020075298772609815, 0.05592427368839977, 0.10201635354662697, 0.145845588958391, 0.18951118074661427, 0.23130455729635296, 0.2782913251155364, 0.31997320119225336, 0.3601854862086869, 0.3991891076113509, 0.4367478321630619, 0.4733728020844449, 0.5105496162431562, 0.5400294640792042, 0.5662541911958776, 0.5928136743984106, 0.6199552043030694, 0.6450520798791302, 0.6704471824878395, 0.6948442043011173, 0.7169924024283606, 0.7371162987499856, 0.7542164378049427, 0.7708667575603474, 0.7861422924043957, 0.8009808406533433, 0.8149934790928539, 0.8282466308086608, 0.839962914860039, 0.8511026644062426, 0.8612099634014341, 0.8692788888209345, 0.8782357388877151, 0.8854949439014446, 0.8930092249185075, 0.900257997886236, 0.9072817645024204, 0.9133823013689004, 0.9190286055677893, 0.9239360013325313, 0.9283874987041231, 0.932514754076651, 0.936987102179737, 0.9410866923320568, 0.9447042078072305, 0.9480158113551344, 0.9513542914160956, 0.9543961258519131, 0.9572406976405683, 0.9598728558146344, 0.962295276593913, 0.9645521491571591, 0.9665927071569564, 0.9685594176901073, 0.9701968515901627, 0.9719077072787838, 0.9735846251294861, 0.9748986107927556, 0.9762369828599363, 0.9774043513882653, 0.9783969264411608, 0.9795807433946823, 0.9805788214350128, 0.9816049388070154, 0.982361033727532, 0.9831577405476544, 0.9838097446167353, 0.9844035237253368, 0.9850774338516495, 0.9856676048260269, 0.9862545983232137, 0.9867410758409292, 0.9871835559044922, 0.9876864196581276, 0.9880715677209233, 0.9883554219595823, 0.9886573937505657, 0.9889268432136412, 0.9892088752601711, 0.989467354399667, 0.9897162256180614, 0.9898890924896255, 0.9900725744597475, 0.9902353830840478, 0.9904260526244802, 0.9905093356049263, 0.9906493944539944, 0.9907498707812509, 0.9909054036424484, 0.9910151562830024, 0.9910581300880723, 0.991206088506683, 0.9912764720655755, 0.9913839950959595, 0.9914877412697338, 0.9915950637189879, 0.9916498012447451, 0.9917083656131647, 0.9917610735447423, 0.991803860385543], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 913261032, "moving_var_accuracy_train": [0.0036271585872859427, 0.014830783751173787, 0.03246802380697115, 0.04651023831729249, 0.05901936964150502, 0.06883760958820877, 0.08182365578023257, 0.0892776993416824, 0.09490318020370016, 0.09910440452603128, 0.10188988418298983, 0.10377339156037074, 0.10583509200325587, 0.10307313565885917, 0.09895544890406918, 0.09540855934553293, 0.092497667221069, 0.08891657897208456, 0.085829122203438, 0.08260314204331212, 0.07875771196153356, 0.07452668159385181, 0.06970574623575647, 0.06523026994379577, 0.06080732063236181, 0.05670823119635275, 0.05280459440104553, 0.04910494923456074, 0.0454298961188579, 0.04200375268654139, 0.03872279485469105, 0.035436483386051085, 0.032614861515515084, 0.029827639880845764, 0.02735305566559173, 0.025090652484871592, 0.023025586913692078, 0.021057977172856405, 0.019239106215528275, 0.01753193839270171, 0.01595708701307514, 0.01451468644395817, 0.013243234877558954, 0.012070171144556033, 0.010980931794018529, 0.009981539077143074, 0.009083694211485692, 0.008258599600951452, 0.007505563938803621, 0.006817361854802985, 0.006188438771209611, 0.005615436157989252, 0.005091367434745153, 0.004617042244161495, 0.004179468727738799, 0.0037878650996505084, 0.003434387070987493, 0.003106487388798245, 0.0028119598080303065, 0.0025430285707556733, 0.002297592560800781, 0.0020804461079357056, 0.0018813669351134465, 0.0017027064933522315, 0.0015375809597764876, 0.001389535539613905, 0.001254407969407398, 0.0011321403351349623, 0.0010230136953465882, 0.0009238470418229067, 0.0008345633899322735, 0.0007532369943162303, 0.000679675392344464, 0.0006139837007024993, 0.0005539203819047261, 0.000499253502773495, 0.00045014883515909334, 0.00040578737876154953, 0.0003659245195628233, 0.0003299333707965324, 0.0002974974656669848, 0.00026801666569784563, 0.00024151798982829969, 0.0002176047506787886, 0.00019617146947374818, 0.00017661674701986113, 0.00015913162064869557, 0.00014330931801487666, 0.00012919610045159966, 0.00011638490118541683, 0.00010476303179817492, 9.448375386109727e-05, 8.507996308324881e-05, 7.667601759349083e-05, 6.910528525129701e-05, 6.229841969919224e-05, 5.609554349980716e-05, 5.051685721706187e-05, 4.549017462981637e-05, 4.095763359054614e-05], "duration": 29397.716764, "accuracy_train": [0.20075298772609818, 0.37856504793050944, 0.5168450722706718, 0.5403087076642672, 0.5825015068406239, 0.6074449462440015, 0.7011722354881875, 0.6951100858827058, 0.7220960513565892, 0.7502217002353267, 0.7747763531284607, 0.8029975313768919, 0.8451409436715578, 0.805348094603636, 0.8022767352459395, 0.831849023221207, 0.8642289734449982, 0.8709239600636766, 0.8990031059662238, 0.9144174006206165, 0.9163261855735512, 0.9182313656446106, 0.908117689299557, 0.9207196353589886, 0.9236221060008305, 0.9345277748938722, 0.9411072250484496, 0.9475249962509228, 0.9454094713224437, 0.9513604103220746, 0.952175654358158, 0.9418992175964378, 0.9588473894887413, 0.9508277890250092, 0.9606377540720746, 0.9654969545957919, 0.9704956640480805, 0.9682871331672205, 0.9698453433577889, 0.9681025632152085, 0.9684509750484496, 0.9696600524294019, 0.9772382351075121, 0.9779830037029347, 0.9772618470837948, 0.977820243286268, 0.9814006119647471, 0.981772635774271, 0.9828418437384644, 0.9835622793812293, 0.9840970636074198, 0.984864002226375, 0.9849577291551311, 0.9862598124884644, 0.9849337566906607, 0.987305408476375, 0.9886768857858066, 0.9867244817621816, 0.9882823314645626, 0.9879106681432264, 0.9873301019172205, 0.990235095976375, 0.9895615237979882, 0.9908399951550388, 0.9891658880121816, 0.990328101928756, 0.9896777812384644, 0.9897475357027501, 0.9911426249884644, 0.9909791435954227, 0.9915375397978959, 0.9911193735003692, 0.9911658764765596, 0.9922121934408453, 0.9915379002860835, 0.9909101101075121, 0.9913751398694168, 0.9913518883813216, 0.9917471636789406, 0.9917936666551311, 0.9919560665836102, 0.9914448943337025, 0.9917239121908453, 0.9917006607027501, 0.9921420784883721, 0.9912588824289406, 0.9919099240956073, 0.9916541577265596, 0.9923051993932264, 0.9920029300479882, 0.9914448943337025, 0.9925377142741787, 0.9919099240956073, 0.9923517023694168, 0.9924214568337025, 0.9925609657622739, 0.9921424389765596, 0.9922354449289406, 0.9922354449289406, 0.9921889419527501], "end": "2016-01-27 04:12:38.834000", "learning_rate_per_epoch": [0.004898872226476669, 0.004593279678374529, 0.004306749906390905, 0.004038094077259302, 0.003786196932196617, 0.0035500130616128445, 0.003328562481328845, 0.0031209259759634733, 0.0029262418393045664, 0.0027437021490186453, 0.002572549507021904, 0.002412073314189911, 0.002261607674881816, 0.0021205281373113394, 0.001988249132409692, 0.0018642217619344592, 0.0017479312373325229, 0.0016388949006795883, 0.0015366602456197143, 0.0014408030547201633, 0.0013509254204109311, 0.001266654348000884, 0.001187640125863254, 0.0011135549284517765, 0.0010440911864861846, 0.000978960539214313, 0.0009178927866742015, 0.0008606344345025718, 0.0008069478790275753, 0.000756610301323235, 0.0007094127940945327, 0.0006651594885624945, 0.0006236666813492775, 0.0005847621941938996, 0.0005482846172526479, 0.0005140824941918254, 0.00048201391473412514, 0.0004519457870628685, 0.00042375331395305693, 0.00039731949800625443, 0.0003725346177816391, 0.00034929582034237683, 0.00032750668469816446, 0.0003070767561439425, 0.0002879212552215904, 0.00026996067026630044, 0.0002531204663682729, 0.00023733075067866594, 0.00022252601047512144, 0.00020864479301963001, 0.00019562948727980256, 0.00018342607654631138, 0.00017198392015416175, 0.0001612555206520483, 0.00015119636373128742, 0.00014176469994708896, 0.0001329213846474886, 0.0001246297179022804, 0.00011685529170790687, 0.00010956582991639152, 0.00010273108637193218, 9.632269939174876e-05, 9.03140680748038e-05, 8.46802577143535e-05, 7.939788338262588e-05, 7.444502989528701e-05, 6.980113539611921e-05, 6.54469258734025e-05, 6.136433512438089e-05, 5.753641380579211e-05, 5.394727850216441e-05, 5.0582035328261554e-05, 4.742671808344312e-05, 4.4468230044003576e-05, 4.169429303146899e-05, 3.909339284291491e-05, 3.665473923319951e-05, 3.4368207707302645e-05, 3.222431041649543e-05, 3.0214150683605112e-05, 2.8329384804237634e-05, 2.6562191123957746e-05, 2.490523547749035e-05, 2.3351642084890045e-05, 2.1894960809731856e-05, 2.0529148969217204e-05, 1.9248536773375235e-05, 1.804780913516879e-05, 1.6921982023632154e-05, 1.586638427397702e-05, 1.4876635759719647e-05, 1.3948628293292131e-05, 1.3078510164632462e-05, 1.22626697702799e-05, 1.1497721970954444e-05, 1.0780491720652208e-05, 1.0108002243214287e-05, 9.477463208895642e-06, 8.886257091944572e-06, 8.331930075655691e-06], "accuracy_valid": [0.19403885071536145, 0.38163886012801207, 0.5041003859186747, 0.5320750776543675, 0.5791045039533133, 0.593163180064006, 0.677832913685994, 0.6807934864457832, 0.7010983386671686, 0.7284023790474398, 0.7459010848079819, 0.7724109327936747, 0.8027270213667168, 0.7703475032944277, 0.7669883636106928, 0.7928496211408133, 0.8126661921121988, 0.8176607798381024, 0.8354742211031627, 0.8467252800263554, 0.8400820077183735, 0.8448633400790663, 0.8350462396460843, 0.8444971291415663, 0.8409570900790663, 0.851160991622741, 0.8498991081513554, 0.8510683358433735, 0.8485151543674698, 0.8527067253388554, 0.8495020119540663, 0.8447103845067772, 0.8529096856174698, 0.8521772637424698, 0.8556364128388554, 0.856846820877259, 0.8592779320406627, 0.8574468773531627, 0.8539774331701807, 0.8548628106174698, 0.8552290215549698, 0.8593897072665663, 0.8594808923192772, 0.8609663262424698, 0.860997211502259, 0.8592676369540663, 0.8613325371799698, 0.8588808358433735, 0.8606104103915663, 0.865635883377259, 0.862095844314759, 0.8634180275790663, 0.8619634789156627, 0.8622076195406627, 0.8601118340549698, 0.8630621117281627, 0.8621973244540663, 0.8609869164156627, 0.8619428887424698, 0.8607221856174698, 0.8618311135165663, 0.8612001717808735, 0.8613222420933735, 0.8627973809299698, 0.8621767342808735, 0.8629091561558735, 0.8616884530308735, 0.8600912438817772, 0.8632959572665663, 0.8608236657567772, 0.8632959572665663, 0.8616781579442772, 0.8632856621799698, 0.8623090996799698, 0.8619222985692772, 0.8635298028049698, 0.8626753106174698, 0.8615766778049698, 0.8633974374058735, 0.8632959572665663, 0.8623193947665663, 0.8620752541415663, 0.8631841820406627, 0.8627973809299698, 0.8623193947665663, 0.8608442559299698, 0.8616987481174698, 0.8619428887424698, 0.8625635353915663, 0.8626753106174698, 0.8628076760165663, 0.8612104668674698, 0.8636621682040663, 0.8628179711031627, 0.8613428322665663, 0.8625635353915663, 0.8626753106174698, 0.8621973244540663, 0.8613222420933735, 0.8616884530308735], "accuracy_test": 0.8347855548469388, "start": "2016-01-26 20:02:41.117000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0], "accuracy_train_last": 0.9921889419527501, "batch_size_eval": 1024, "accuracy_train_std": [0.01483072670943593, 0.020413134361159754, 0.018810464746453683, 0.01620993749845699, 0.017160485648604153, 0.017408528202338843, 0.019368678294660678, 0.017428867181258714, 0.016438511544551622, 0.01889918349401089, 0.017510900208164346, 0.01764582948677029, 0.016796830224825202, 0.01639827800229774, 0.016816177676201794, 0.015707652927260486, 0.015997548871090988, 0.017261258864461414, 0.015967397131559834, 0.017726045736774623, 0.015323755266758702, 0.01600344894759491, 0.01713836715696712, 0.015528875151047193, 0.015544790421076137, 0.014396155160924589, 0.015145943409094293, 0.013791432842461242, 0.012572389397682264, 0.01336301137267101, 0.012440755194966477, 0.012341653077860178, 0.01054943976000696, 0.01102333991218372, 0.010651651804442474, 0.010345597505003287, 0.008899729155706707, 0.009240305040356864, 0.008745137040559434, 0.008326433749587631, 0.008276795583188843, 0.009518893641298211, 0.00778174575988267, 0.007731242984797033, 0.006443757096754245, 0.006617492616155979, 0.006112230310735715, 0.006151795412590296, 0.005807755288378855, 0.006279943032601748, 0.005705304711120071, 0.005347184755790297, 0.0050766966704894915, 0.00437651968283894, 0.005338219967297594, 0.004790228739983394, 0.004055735812354144, 0.004690278923694097, 0.004128270808981246, 0.004027744311375703, 0.004307552805549987, 0.0035607182903701694, 0.0035123736079122423, 0.003515306507766348, 0.0037097598549670273, 0.0033150636806292457, 0.0036434089920337025, 0.0037906473204059607, 0.003164145597876803, 0.0035911080557563214, 0.003286160649120563, 0.0033888087191611214, 0.0032460289106616253, 0.0029023439992184306, 0.0031080230783472234, 0.002980182276631087, 0.003021038456332384, 0.002879865788908347, 0.003060333469954893, 0.00282783086060204, 0.002944489803377686, 0.0031526245625536136, 0.0032825500515274494, 0.002788992719656888, 0.0028753065728437275, 0.0031465302462981835, 0.003031056537382926, 0.002977644283348441, 0.0025766737985045206, 0.0029853633965605444, 0.0031309427405109675, 0.003012238782640535, 0.0031773518827054727, 0.0026351527530193686, 0.0026599252563244313, 0.002475401644712151, 0.0029215941909686138, 0.0029215482875222048, 0.0029678144774294766, 0.0027867039612497614], "accuracy_test_std": 0.012804931466141003, "error_valid": [0.8059611492846386, 0.6183611398719879, 0.4958996140813253, 0.46792492234563254, 0.42089549604668675, 0.40683681993599397, 0.32216708631400603, 0.3192065135542168, 0.29890166133283136, 0.27159762095256024, 0.2540989151920181, 0.22758906720632532, 0.1972729786332832, 0.2296524967055723, 0.23301163638930722, 0.20715037885918675, 0.18733380788780118, 0.18233922016189763, 0.16452577889683728, 0.1532747199736446, 0.1599179922816265, 0.15513665992093373, 0.16495376035391573, 0.15550287085843373, 0.15904290992093373, 0.14883900837725905, 0.1501008918486446, 0.1489316641566265, 0.15148484563253017, 0.1472932746611446, 0.15049798804593373, 0.15528961549322284, 0.14709031438253017, 0.14782273625753017, 0.1443635871611446, 0.14315317912274095, 0.14072206795933728, 0.14255312264683728, 0.1460225668298193, 0.14513718938253017, 0.14477097844503017, 0.14061029273343373, 0.14051910768072284, 0.13903367375753017, 0.13900278849774095, 0.14073236304593373, 0.13866746282003017, 0.1411191641566265, 0.13938958960843373, 0.13436411662274095, 0.13790415568524095, 0.13658197242093373, 0.13803652108433728, 0.13779238045933728, 0.13988816594503017, 0.13693788827183728, 0.13780267554593373, 0.13901308358433728, 0.13805711125753017, 0.13927781438253017, 0.13816888648343373, 0.1387998282191265, 0.1386777579066265, 0.13720261907003017, 0.1378232657191265, 0.1370908438441265, 0.1383115469691265, 0.13990875611822284, 0.13670404273343373, 0.13917633424322284, 0.13670404273343373, 0.13832184205572284, 0.13671433782003017, 0.13769090032003017, 0.13807770143072284, 0.13647019719503017, 0.13732468938253017, 0.13842332219503017, 0.1366025625941265, 0.13670404273343373, 0.13768060523343373, 0.13792474585843373, 0.13681581795933728, 0.13720261907003017, 0.13768060523343373, 0.13915574407003017, 0.13830125188253017, 0.13805711125753017, 0.13743646460843373, 0.13732468938253017, 0.13719232398343373, 0.13878953313253017, 0.13633783179593373, 0.13718202889683728, 0.13865716773343373, 0.13743646460843373, 0.13732468938253017, 0.13780267554593373, 0.1386777579066265, 0.1383115469691265], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "momentum": 0.6604633782089588, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.005224795791995238, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "l2_decay": 1.7216598314117715e-05, "optimization": "rmsprop", "nb_data_augmentation": 1, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.0623802155546402}, "accuracy_valid_max": 0.865635883377259, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        #nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        nb_data_augmentation=make_constant_param(1),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8616884530308735, "loss_train": [1.7534630298614502, 1.3312715291976929, 1.0902276039123535, 0.9513108134269714, 0.8550116419792175, 0.7833427786827087, 0.7259929180145264, 0.684162974357605, 0.647449791431427, 0.6152862310409546, 0.5879438519477844, 0.5603283643722534, 0.5397023558616638, 0.5166616439819336, 0.4998931288719177, 0.48201310634613037, 0.46702319383621216, 0.4505787193775177, 0.4358672499656677, 0.4219995439052582, 0.40787142515182495, 0.397383451461792, 0.38670408725738525, 0.3777541518211365, 0.3671269416809082, 0.35813552141189575, 0.3494117856025696, 0.3429066836833954, 0.3348812162876129, 0.32618656754493713, 0.32208824157714844, 0.31600522994995117, 0.3080054521560669, 0.3050592541694641, 0.2966601848602295, 0.2943808138370514, 0.288373738527298, 0.2845197916030884, 0.2805744707584381, 0.27698928117752075, 0.27541759610176086, 0.27132460474967957, 0.26757240295410156, 0.26428061723709106, 0.2584429681301117, 0.25726476311683655, 0.25713974237442017, 0.2514409124851227, 0.2529657781124115, 0.24914294481277466, 0.24685026705265045, 0.24743205308914185, 0.2441309541463852, 0.24219073355197906, 0.2431742548942566, 0.2405453771352768, 0.2387877255678177, 0.2374512255191803, 0.23776108026504517, 0.2376788705587387, 0.23571190237998962, 0.23196998238563538, 0.2329152226448059, 0.23034530878067017, 0.23192566633224487, 0.23162998259067535, 0.22752656042575836, 0.2287629097700119, 0.22823768854141235, 0.22906383872032166, 0.22574356198310852, 0.22798468172550201, 0.22492767870426178, 0.22562827169895172, 0.22514519095420837, 0.22623592615127563, 0.2240961641073227, 0.22407980263233185, 0.2220689207315445, 0.225157231092453, 0.22198422253131866, 0.22265830636024475, 0.2218775451183319, 0.22394318878650665, 0.22099828720092773, 0.2223391830921173, 0.22168070077896118, 0.22250021994113922, 0.22179190814495087, 0.22158268094062805, 0.2207096517086029, 0.219240203499794, 0.22030657529830933, 0.21980033814907074, 0.2211804986000061, 0.21729102730751038, 0.22184716165065765, 0.2171582132577896, 0.21883085370063782, 0.21894818544387817], "accuracy_train_first": 0.20075298772609818, "model": "residualv4", "loss_std": [0.21043047308921814, 0.12858594954013824, 0.10935933887958527, 0.10364409536123276, 0.09878597408533096, 0.09551088511943817, 0.0898895338177681, 0.08436179906129837, 0.07883477210998535, 0.0796898826956749, 0.07957351207733154, 0.07629533112049103, 0.07382794469594955, 0.07093163579702377, 0.06865555047988892, 0.06781639903783798, 0.06610482186079025, 0.06369533389806747, 0.06473816931247711, 0.06569712609052658, 0.06091636046767235, 0.0609721876680851, 0.058773353695869446, 0.05651090666651726, 0.05743817612528801, 0.05594808608293533, 0.05492144078016281, 0.052935630083084106, 0.05431941896677017, 0.05245761573314667, 0.051972854882478714, 0.04851783066987991, 0.046225372701883316, 0.05032852292060852, 0.049096740782260895, 0.0469588078558445, 0.047311026602983475, 0.046299826353788376, 0.045323435217142105, 0.043935731053352356, 0.04560927674174309, 0.04528704658150673, 0.04269176721572876, 0.04116101562976837, 0.03999313712120056, 0.03990872949361801, 0.04338010400533676, 0.041030216962099075, 0.040708545595407486, 0.04101352021098137, 0.037338003516197205, 0.03959187865257263, 0.04161209613084793, 0.041364725679159164, 0.04075242206454277, 0.039548859000205994, 0.040489546954631805, 0.039114296436309814, 0.037621475756168365, 0.03987451642751694, 0.03762471675872803, 0.037128251045942307, 0.039021726697683334, 0.03743952140212059, 0.04013939946889877, 0.03764207661151886, 0.037435293197631836, 0.038282360881567, 0.038582876324653625, 0.0402294285595417, 0.036505311727523804, 0.03883206844329834, 0.03605789691209793, 0.03563573211431503, 0.03637249767780304, 0.036971814930438995, 0.037129152566194534, 0.03607943281531334, 0.03629615157842636, 0.0369950495660305, 0.035059962421655655, 0.03768603131175041, 0.037773601710796356, 0.03745659068226814, 0.03723959997296333, 0.03829416632652283, 0.035645656287670135, 0.03656505048274994, 0.03535434603691101, 0.035136424005031586, 0.03735943138599396, 0.03669075295329094, 0.037410538643598557, 0.036214202642440796, 0.034970782697200775, 0.03657063841819763, 0.03655175492167473, 0.03663105517625809, 0.03638885170221329, 0.03320322558283806]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:16 2016", "state": "available"}], "summary": "487f3e56069e90bddccd6cbc120c94e8"}