{"content": {"hp_model": {"f0": 32, "f1": 64, "f2": 16, "f3": 32, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.010740434626950164, 0.00989529552113967, 0.007674824827849905, 0.010247695653987691, 0.013945017799492507, 0.015005807212411211, 0.016946518916281936, 0.01427388334407834, 0.016063655936040613, 0.01561105288135123, 0.016953475346215146, 0.016673824967295473, 0.016194231455555784, 0.015869443422784724, 0.018071400032136933, 0.015081489464336427, 0.015242968387524465, 0.016698632013742762, 0.017289185747557893, 0.017375108140519305, 0.01664833154011965, 0.01379365450416908, 0.016373249191341796, 0.014171599021695685, 0.014834966594290823, 0.014486953203209346, 0.015263766678070799, 0.013264998272933622, 0.013607231698996938, 0.013613273150844625, 0.013445493374795142, 0.014449079767973903, 0.013793595542012847, 0.014491082733954476, 0.01604163621192921, 0.016181542632865278, 0.014570496335634356, 0.015868343223043563, 0.016107592791816203, 0.015622903409367221, 0.015148687607844253, 0.016608451844447952, 0.016748189860698967, 0.01666025212708434, 0.01580106448242658, 0.016660891603227757, 0.016864401754028122, 0.016339315317190288, 0.016614071927568693, 0.016700100603143236, 0.016046880386463666, 0.01587302285486828, 0.015748252536201917, 0.016385659467745672, 0.016063765342112454, 0.016018818790405207, 0.014482050474507551, 0.01514671044888166, 0.015181878586197023, 0.01576024419954912, 0.014866886948347095, 0.014689422003424737, 0.015066014470073772, 0.014651019608544959, 0.014735603040810383, 0.014371313573522457, 0.014732550743608162, 0.014747343313050918, 0.01494445984413558, 0.015291600391700405, 0.015189917742079175, 0.014294270659526424, 0.014370699476623216, 0.014295846817712643, 0.014523327064848032, 0.014208070854674074, 0.014354630838671353, 0.014219015664801974, 0.014412595890808323, 0.014501213808120906, 0.014299990468416585, 0.01442446837686153, 0.014702772515567649, 0.014341611495655325, 0.014379523018926577, 0.014441012542115312, 0.014337961957678325, 0.014490432588017889, 0.014515116618665032, 0.014588844288200483, 0.014577081048473875, 0.014572492597601714, 0.014443604401659099, 0.014445692468159905, 0.014443604401659099, 0.014387280514594198, 0.01446010184161333, 0.014387280514594198, 0.014379523018926577, 0.014436909367320668, 0.014511560202730246, 0.01450126332997705, 0.014502816992330964, 0.014577081048473875], "moving_avg_accuracy_train": [0.02343274155592469, 0.051372908447535975, 0.08034556866290604, 0.10929445024830424, 0.1368409008203269, 0.16347400789937763, 0.18879678853593487, 0.21295186506947686, 0.2354681057496831, 0.2568159893653756, 0.2774425948515955, 0.2963203988296604, 0.31367082047539496, 0.3301208923303564, 0.3453303165997663, 0.3593838107565117, 0.3725062137570879, 0.38466729368375085, 0.39596794128796714, 0.40644075742818114, 0.41612434742341214, 0.4251790501453105, 0.4334073376545428, 0.44107088793070903, 0.4480866297197256, 0.45469838032864085, 0.4606628346718842, 0.46618433945105053, 0.4712559642511005, 0.47593668401162165, 0.4803538367448726, 0.48430369756789365, 0.48801203213004113, 0.4913913859145453, 0.4944629952063041, 0.49733661741647844, 0.4999880176211207, 0.502348701168394, 0.504552335371645, 0.5065565685426754, 0.5083603783966028, 0.5099350512377748, 0.5114638278888681, 0.5128164393379382, 0.5141245064944914, 0.5152645285056181, 0.5163650251751745, 0.5174041921563188, 0.5183069624536529, 0.5190962763307959, 0.5198694378380817, 0.5205745837898771, 0.5212092511953117, 0.5217758376114026, 0.5222601887489795, 0.5227402826001798, 0.5231677167686409, 0.5235407817762083, 0.5238927802758669, 0.5242398058600835, 0.5245405031418308, 0.5248320930835078, 0.5250875485845885, 0.5253244339819897, 0.5255353056908413, 0.525734354775227, 0.525943725885698, 0.5261437856291695, 0.5263006239590174, 0.5264417784558806, 0.52656180600781, 0.5266930822926418, 0.5268042555025618, 0.5269136119867279, 0.527019008268906, 0.5270975888811996, 0.5271706365810733, 0.5272503304038169, 0.5273476314811908, 0.5274166012603512, 0.5274833243592145, 0.5275480254458106, 0.5276039312749375, 0.5276402956282946, 0.5276730235463161, 0.5277117792677734, 0.5277489845658945, 0.5277661932925368, 0.5277933068905626, 0.5278200342775953, 0.5278301380330676, 0.5278369062641831, 0.5278522982674252, 0.5278475498798669, 0.5278688529679691, 0.5278740748544041, 0.527876449403386, 0.5278785864974697, 0.5278688841380974, 0.5278648023122814, 0.5278564783714279, 0.5278489868246597, 0.5278375941349495, 0.5278203652677815], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 256818031, "moving_var_accuracy_train": [0.00494184039144084, 0.011473532685676583, 0.01788091477670651, 0.023635163004444525, 0.028100909156052057, 0.031674719774604496, 0.03427843676964884, 0.036101802593755394, 0.037054452183700626, 0.03745059617915292, 0.03753464824619505, 0.03698852676888373, 0.03599900827355833, 0.03483455122250304, 0.033433035379714975, 0.031867238123866576, 0.030230291456065705, 0.028538289095303294, 0.026833801912245075, 0.025137540622181105, 0.023467733796724635, 0.021858849189489753, 0.020282306708552078, 0.018782646063214822, 0.017347367152544726, 0.01600606765232067, 0.01472563332760231, 0.01352745313007929, 0.012406200220083699, 0.011362762435364129, 0.01040208733624751, 0.009502291207313888, 0.008675827793605859, 0.007911025302252859, 0.007204835824798546, 0.006558671583779956, 0.005966073732808556, 0.005419621800821002, 0.004921363654054542, 0.004465379844083815, 0.004048125429577562, 0.0036656292376303326, 0.0033201007363076527, 0.0030045566822662845, 0.002719500371214134, 0.0024592471857654012, 0.002224222303466202, 0.002011518885251889, 0.0018177019446144393, 0.0016415388977228504, 0.0014827650163977025, 0.001338963592077933, 0.0012086924573098295, 0.0010907123930809345, 0.00098375251799309, 0.0008874516771474236, 0.000800350809147994, 0.0007215683257320362, 0.0006505266196526897, 0.0005865577984923284, 0.0005287157883403475, 0.00047660943175309754, 0.00042953580619507954, 0.0003870872577990891, 0.0003487787339175261, 0.0003142574453677269, 0.000283226227188053, 0.0002552638195778688, 0.0002299588219754673, 0.00020714226110578267, 0.00018655769451420405, 0.00016805702622941674, 0.00015136255894991036, 0.00013633393262058187, 0.00012280051474519634, 0.00011057603748433265, 9.956645743401101e-05, 8.96669716390612e-05, 8.078548197207826e-05, 7.274974524880729e-05, 6.551483847122394e-05, 5.9001030699561965e-05, 5.312905678517911e-05, 4.782805240241693e-05, 4.305488721173738e-05, 3.876291654407476e-05, 3.4899082997541835e-05, 3.141183996024152e-05, 2.8277272288998485e-05, 2.5455974239057e-05, 2.2911295588023098e-05, 2.062057830979269e-05, 1.8560652702687656e-05, 1.670479035707853e-05, 1.5038395715434913e-05, 1.3534801556772873e-05, 1.2181372147441394e-05, 1.0963276037237359e-05, 9.867795655510126e-06, 8.881166041677046e-06, 7.993673029431328e-06, 7.194810835945004e-06, 6.47649789276003e-06, 5.831519608259028e-06], "duration": 90555.83923, "accuracy_train": [0.23432741555924697, 0.30283441047203763, 0.3410995106012366, 0.36983438451688816, 0.3847589559685308, 0.40317197161083423, 0.4167018142649502, 0.43034755387135476, 0.43811427187153934, 0.44894694190660767, 0.46308204422757476, 0.46622063463224434, 0.46982461528700625, 0.4781715390250092, 0.4822151350244555, 0.48586525816722037, 0.49060784076227393, 0.49411701302371724, 0.4976737697259136, 0.500696102690107, 0.503276657380491, 0.5066713746423958, 0.5074619252376339, 0.5100428404162053, 0.5112283058208749, 0.5142041358088778, 0.5143429237610742, 0.5158778824635475, 0.5169005874515504, 0.5180631618563123, 0.5201082113441308, 0.5198524449750831, 0.5213870431893688, 0.5218055699750831, 0.5221074788321337, 0.5231992173080473, 0.5238506194629015, 0.5235948530938538, 0.5243850432009044, 0.524594667081949, 0.524594667081949, 0.5241071068083242, 0.525222817748708, 0.5249899423795681, 0.5258971109034699, 0.5255247266057586, 0.5262694952011813, 0.5267566949866187, 0.5264318951296604, 0.5262001012250831, 0.5268278914036545, 0.5269208973560355, 0.526921257844223, 0.52687511535622, 0.5266193489871723, 0.5270611272609819, 0.5270146242847914, 0.5268983668443152, 0.5270607667727943, 0.5273630361180325, 0.5272467786775563, 0.5274564025586009, 0.5273866480943152, 0.5274564025586009, 0.5274331510705057, 0.5275257965346991, 0.5278280658799372, 0.5279443233204134, 0.5277121689276486, 0.5277121689276486, 0.5276420539751753, 0.5278745688561277, 0.527804814391842, 0.527897820344223, 0.5279675748085086, 0.527804814391842, 0.5278280658799372, 0.5279675748085086, 0.5282233411775563, 0.5280373292727943, 0.5280838322489848, 0.5281303352251753, 0.52810708373708, 0.5279675748085086, 0.5279675748085086, 0.5280605807608896, 0.5280838322489848, 0.5279210718323182, 0.5280373292727943, 0.5280605807608896, 0.5279210718323182, 0.527897820344223, 0.5279908262966039, 0.527804814391842, 0.5280605807608896, 0.5279210718323182, 0.527897820344223, 0.527897820344223, 0.5277815629037468, 0.5278280658799372, 0.5277815629037468, 0.5277815629037468, 0.5277350599275563, 0.5276653054632705], "end": "2016-01-23 00:42:51.526000", "learning_rate_per_epoch": [0.002170267980545759, 0.0020070201717317104, 0.0018560518510639668, 0.0017164393793791533, 0.0015873285010457039, 0.0014679294545203447, 0.00135751161724329, 0.0012553994311019778, 0.0011609680950641632, 0.0010736399563029408, 0.0009928805520758033, 0.0009181959321722388, 0.0008491291082464159, 0.0007852574926801026, 0.000726190279237926, 0.0006715661147609353, 0.0006210508290678263, 0.0005743352812714875, 0.0005311336717568338, 0.0004911817377433181, 0.0004542349779512733, 0.00042006734292954206, 0.00038846980896778405, 0.0003592490393202752, 0.00033222627826035023, 0.000307236157823354, 0.0002841257955878973, 0.0002627538051456213, 0.0002429894229862839, 0.00022471172269433737, 0.0002078088728012517, 0.00019217745284549892, 0.0001777218421921134, 0.0001643535797484219, 0.00015199088375084102, 0.0001405581133440137, 0.00012998531747143716, 0.00012020780559396371, 0.00011116575478808954, 0.00010280385322403163, 9.507092909188941e-05, 8.791968139121309e-05, 8.130635251291096e-05, 7.519047358073294e-05, 6.95346316206269e-05, 6.430422945413738e-05, 5.9467256505740806e-05, 5.499412145582028e-05, 5.0857455789810047e-05, 4.703195008914918e-05, 4.349420123617165e-05, 4.0222559618996456e-05, 3.719701271620579e-05, 3.439904685365036e-05, 3.18115453410428e-05, 2.941867569461465e-05, 2.7205798687646165e-05, 2.5159373763017356e-05, 2.326688263565302e-05, 2.1516743800020777e-05, 1.989825068449136e-05, 1.840150071075186e-05, 1.7017337086144835e-05, 1.573729059600737e-05, 1.4553529581462499e-05, 1.3458810826705303e-05, 1.2446436812751926e-05, 1.1510213880683295e-05, 1.0644414032867644e-05, 9.843739462667145e-06, 9.103291631618049e-06, 8.418540346610826e-06, 7.785296475049108e-06, 7.199685114755994e-06, 6.658123766101198e-06, 6.157298685138812e-06, 5.694145784218563e-06, 5.265831077849725e-06, 4.869734311796492e-06, 4.503432137425989e-06, 4.164683105045697e-06, 3.851414930977626e-06, 3.5617108551377896e-06, 3.2937984997261083e-06, 3.046038500542636e-06, 2.816914957293193e-06, 2.6050261112686712e-06, 2.4090757051453693e-06, 2.2278645701589994e-06, 2.060284259641776e-06, 1.9053093183174497e-06, 1.7619917116462602e-06, 1.629454459362023e-06, 1.5068866332512698e-06, 1.3935383549323888e-06, 1.2887162483821157e-06, 1.1917787787751877e-06, 1.1021329555660486e-06, 1.0192303534495295e-06, 9.425637017557165e-07, 8.716639285921701e-07, 8.060972618295636e-07, 7.454625006175775e-07, 6.893886848047259e-07], "accuracy_valid": [0.23170857257153615, 0.2945159544427711, 0.33867746376129515, 0.36823024519954817, 0.3818315253200301, 0.4001126576618976, 0.4149758212537651, 0.4230324618787651, 0.4341717455760542, 0.442371046686747, 0.4531647096197289, 0.4570812547063253, 0.4601536026920181, 0.4671424957643072, 0.47512854150978917, 0.47265625, 0.4786479903990964, 0.48590161426957834, 0.48763118881777107, 0.4885974562311747, 0.49163891895707834, 0.4938258894954819, 0.4960437452936747, 0.49774243458207834, 0.49910579819277107, 0.5004382765436747, 0.5037650602409638, 0.5035003294427711, 0.5053416792168675, 0.5050975385918675, 0.5068168180534638, 0.5066947477409638, 0.5088920133659638, 0.5106112928275602, 0.5087905332266567, 0.5111098691641567, 0.5121982068900602, 0.5114657850150602, 0.5123305722891567, 0.5128188535391567, 0.5131747693900602, 0.513561570500753, 0.513683640813253, 0.514416062688253, 0.5142836972891567, 0.5136733457266567, 0.5156470608998494, 0.515514695500753, 0.515758836125753, 0.5160132718373494, 0.515880906438253, 0.515514695500753, 0.516002976750753, 0.5167456937123494, 0.515636765813253, 0.516125047063253, 0.516491258000753, 0.516125047063253, 0.515758836125753, 0.5161353421498494, 0.515880906438253, 0.515880906438253, 0.515880906438253, 0.515636765813253, 0.515758836125753, 0.516125047063253, 0.515148484563253, 0.516247117375753, 0.515758836125753, 0.515514695500753, 0.515514695500753, 0.5153823301016567, 0.5152602597891567, 0.5152602597891567, 0.5155044004141567, 0.5147719785391567, 0.5151381894766567, 0.5153823301016567, 0.5156264707266567, 0.5158706113516567, 0.5155044004141567, 0.5157485410391567, 0.5157485410391567, 0.5155044004141567, 0.5151381894766567, 0.5155044004141567, 0.5156264707266567, 0.5157485410391567, 0.5155044004141567, 0.5155044004141567, 0.5156264707266567, 0.5155044004141567, 0.5153823301016567, 0.5151381894766567, 0.5153823301016567, 0.5152602597891567, 0.5153823301016567, 0.5152602597891567, 0.5151381894766567, 0.5152602597891567, 0.5151381894766567, 0.5153823301016567, 0.5152602597891567, 0.5156264707266567], "accuracy_test": 0.5105830670926518, "start": "2016-01-21 23:33:35.687000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0], "accuracy_train_last": 0.5276653054632705, "batch_size_eval": 1024, "accuracy_train_std": [0.013063652563469731, 0.014611819836312505, 0.015281976756164618, 0.014008238041542016, 0.013346290595699414, 0.013555103422591497, 0.012642430697958944, 0.014796512141787, 0.013681777909509106, 0.014952423344235964, 0.015921663826145117, 0.01506946109627089, 0.014999911308296622, 0.01632587289492594, 0.0165591068373393, 0.016475901817859673, 0.016187521557244355, 0.01670296278856338, 0.01713802416656007, 0.01687939859243377, 0.017404573520751913, 0.018095822609044968, 0.018815524503910677, 0.018579526465012142, 0.01840503918534049, 0.018580695716751878, 0.018445495158227028, 0.018177732627237674, 0.017832568156378827, 0.01888020344729092, 0.018770579563209905, 0.018648680843588415, 0.018678409332691093, 0.018846552053562254, 0.018564676370728898, 0.018439043794923345, 0.018874843982778573, 0.01838575696598384, 0.01796624244232772, 0.01789072094909534, 0.01831839923285681, 0.017985781210432383, 0.01833985981783832, 0.017797721983138986, 0.01770418777096171, 0.01797372919303928, 0.017804036317108102, 0.01775159022848173, 0.017531837906412624, 0.017385190641958894, 0.017418387087871127, 0.017566268172172047, 0.01734419200751766, 0.017313148749596427, 0.01747343620600871, 0.01741524740403776, 0.017526206589306183, 0.01748147449315383, 0.017378415635866153, 0.017542604249935544, 0.017245360553660837, 0.017288286221685552, 0.01782850651363697, 0.017510141665319116, 0.01775686798654165, 0.017314318220614414, 0.017556633588351217, 0.01746420515568909, 0.01764936720279394, 0.017606860355850504, 0.017455729760969867, 0.017509960564637217, 0.01753072721448525, 0.017360118029819828, 0.017458838647575553, 0.01720386965183097, 0.017330133007229232, 0.017393688331914462, 0.01739634179067704, 0.017281681290822262, 0.01741196594417847, 0.017286894908211364, 0.01734366825830104, 0.01744452645480902, 0.017307314397401477, 0.01732207336262198, 0.01733092461915111, 0.017249794222635513, 0.017323675309919326, 0.01734827042773366, 0.01736001434299219, 0.017379726521138523, 0.017492425296148657, 0.017445031800814147, 0.017494249050891312, 0.017423987432861318, 0.01742930263469064, 0.017508591809608245, 0.017330059974461784, 0.017306532723798486, 0.01729596019562389, 0.017277570900187382, 0.01718116545090932, 0.017204403137838994], "accuracy_test_std": 0.09072430792648631, "error_valid": [0.7682914274284638, 0.7054840455572289, 0.6613225362387049, 0.6317697548004518, 0.6181684746799698, 0.5998873423381024, 0.5850241787462349, 0.5769675381212349, 0.5658282544239458, 0.557628953313253, 0.5468352903802711, 0.5429187452936747, 0.5398463973079819, 0.5328575042356928, 0.5248714584902108, 0.52734375, 0.5213520096009037, 0.5140983857304217, 0.5123688111822289, 0.5114025437688253, 0.5083610810429217, 0.5061741105045181, 0.5039562547063253, 0.5022575654179217, 0.5008942018072289, 0.4995617234563253, 0.4962349397590362, 0.4964996705572289, 0.49465832078313254, 0.49490246140813254, 0.4931831819465362, 0.4933052522590362, 0.4911079866340362, 0.48938870717243976, 0.4912094667733433, 0.4888901308358433, 0.48780179310993976, 0.48853421498493976, 0.4876694277108433, 0.4871811464608433, 0.48682523060993976, 0.486438429499247, 0.486316359186747, 0.485583937311747, 0.4857163027108433, 0.4863266542733433, 0.48435293910015065, 0.484485304499247, 0.484241163874247, 0.48398672816265065, 0.484119093561747, 0.484485304499247, 0.483997023249247, 0.48325430628765065, 0.484363234186747, 0.483874952936747, 0.483508741999247, 0.483874952936747, 0.484241163874247, 0.48386465785015065, 0.484119093561747, 0.484119093561747, 0.484119093561747, 0.484363234186747, 0.484241163874247, 0.483874952936747, 0.484851515436747, 0.483752882624247, 0.484241163874247, 0.484485304499247, 0.484485304499247, 0.4846176698983433, 0.4847397402108433, 0.4847397402108433, 0.4844955995858433, 0.4852280214608433, 0.4848618105233433, 0.4846176698983433, 0.4843735292733433, 0.4841293886483433, 0.4844955995858433, 0.4842514589608433, 0.4842514589608433, 0.4844955995858433, 0.4848618105233433, 0.4844955995858433, 0.4843735292733433, 0.4842514589608433, 0.4844955995858433, 0.4844955995858433, 0.4843735292733433, 0.4844955995858433, 0.4846176698983433, 0.4848618105233433, 0.4846176698983433, 0.4847397402108433, 0.4846176698983433, 0.4847397402108433, 0.4848618105233433, 0.4847397402108433, 0.4848618105233433, 0.4846176698983433, 0.4847397402108433, 0.4843735292733433], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.5337788040237788, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.002346794022028902, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "optimization": "adadelta", "nb_data_augmentation": 4, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 2.6185506741767597e-05, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.07522014945262441}, "accuracy_valid_max": 0.5167456937123494, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import os\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.5156264707266567, "loss_train": [7.702483654022217, 2.6592912673950195, 2.4748475551605225, 2.385824203491211, 2.331695079803467, 2.291313886642456, 2.259752035140991, 2.233901262283325, 2.213873863220215, 2.194884777069092, 2.177630662918091, 2.163926839828491, 2.151273012161255, 2.1416821479797363, 2.1304502487182617, 2.121478796005249, 2.1154699325561523, 2.1074602603912354, 2.101436138153076, 2.0943939685821533, 2.088151454925537, 2.085087776184082, 2.078942060470581, 2.0769736766815186, 2.0722038745880127, 2.0676794052124023, 2.0642054080963135, 2.0642218589782715, 2.0585265159606934, 2.0567710399627686, 2.0553150177001953, 2.0539450645446777, 2.052093267440796, 2.0481770038604736, 2.0478477478027344, 2.047896146774292, 2.045055866241455, 2.0431149005889893, 2.042938470840454, 2.0413079261779785, 2.04036808013916, 2.0403261184692383, 2.0394911766052246, 2.038499116897583, 2.038661003112793, 2.0362589359283447, 2.0372016429901123, 2.0359997749328613, 2.0366733074188232, 2.0350358486175537, 2.0340969562530518, 2.033109188079834, 2.033085584640503, 2.033215284347534, 2.0332095623016357, 2.033921003341675, 2.030705213546753, 2.032431125640869, 2.0304994583129883, 2.0299465656280518, 2.031756639480591, 2.030048131942749, 2.0278077125549316, 2.031341552734375, 2.0309205055236816, 2.029690742492676, 2.0286338329315186, 2.0295166969299316, 2.0303170680999756, 2.0310142040252686, 2.0279510021209717, 2.02912974357605, 2.0283923149108887, 2.026899814605713, 2.0286388397216797, 2.029262065887451, 2.027730703353882, 2.028355836868286, 2.03019118309021, 2.028991222381592, 2.0282199382781982, 2.030033826828003, 2.0284814834594727, 2.0285871028900146, 2.0284547805786133, 2.0297935009002686, 2.02799654006958, 2.0298423767089844, 2.027402639389038, 2.0286972522735596, 2.027677059173584, 2.0293147563934326, 2.029520273208618, 2.027726411819458, 2.0288562774658203, 2.028081178665161, 2.0284600257873535, 2.0280275344848633, 2.027703046798706, 2.029081106185913, 2.0290346145629883, 2.0274953842163086, 2.027198314666748, 2.029514789581299], "accuracy_train_first": 0.23432741555924697, "model": "residualv2", "loss_std": [13.248929977416992, 0.19123192131519318, 0.16881342232227325, 0.16668610274791718, 0.16806767880916595, 0.16877992451190948, 0.16910631954669952, 0.1712213158607483, 0.17126208543777466, 0.1716729700565338, 0.17315854132175446, 0.17432436347007751, 0.17332717776298523, 0.1735369712114334, 0.17470459640026093, 0.17306484282016754, 0.17462308704853058, 0.17350605130195618, 0.17482492327690125, 0.17352773249149323, 0.1747702956199646, 0.17549164593219757, 0.17607589066028595, 0.1775778979063034, 0.17533965408802032, 0.1763191819190979, 0.1737857311964035, 0.17551666498184204, 0.17581674456596375, 0.17751990258693695, 0.17514730989933014, 0.1756642460823059, 0.17741714417934418, 0.1761961430311203, 0.176181361079216, 0.1781972497701645, 0.17653070390224457, 0.1772821843624115, 0.17664706707000732, 0.17650076746940613, 0.17552614212036133, 0.17777128517627716, 0.17582976818084717, 0.1767270416021347, 0.17675329744815826, 0.17578154802322388, 0.17706818878650665, 0.17598053812980652, 0.17646993696689606, 0.17761915922164917, 0.17667680978775024, 0.17582079768180847, 0.17800690233707428, 0.1782403290271759, 0.17591243982315063, 0.1782630831003189, 0.17602412402629852, 0.1759495735168457, 0.17738601565361023, 0.17571641504764557, 0.17699579894542694, 0.17573058605194092, 0.17595674097537994, 0.17635424435138702, 0.17706774175167084, 0.1781025528907776, 0.17848603427410126, 0.17560850083827972, 0.1780446618795395, 0.1781788319349289, 0.17548297345638275, 0.1779954880475998, 0.17702800035476685, 0.1775960624217987, 0.17600274085998535, 0.17694105207920074, 0.17690232396125793, 0.1762179583311081, 0.17752128839492798, 0.17603304982185364, 0.1765104979276657, 0.17603236436843872, 0.1770658940076828, 0.17719030380249023, 0.1759757548570633, 0.17562559247016907, 0.175802081823349, 0.17693950235843658, 0.17655593156814575, 0.17676150798797607, 0.1775885671377182, 0.17678794264793396, 0.1766272336244583, 0.17779873311519623, 0.17655223608016968, 0.17786434292793274, 0.1758745014667511, 0.1785675585269928, 0.1762130856513977, 0.17483656108379364, 0.17630258202552795, 0.17669780552387238, 0.17591369152069092, 0.1762058138847351]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:08 2016", "state": "available"}], "summary": "383edb8551b305f7b3fef89edbd91daa"}