{"content": {"hp_model": {"f0": 16, "f1": 32, "f2": 16, "f3": 32, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.7891850471496582, 1.3998289108276367, 1.2329195737838745, 1.1222976446151733, 1.0383468866348267, 0.9692695140838623, 0.9109650254249573, 0.8596087694168091, 0.8130261301994324, 0.7710870504379272, 0.7321547269821167, 0.6962440013885498, 0.6630229353904724, 0.6315962672233582, 0.602017343044281, 0.5744566321372986, 0.5489388704299927, 0.5249955654144287, 0.5021986961364746, 0.48108530044555664, 0.46108296513557434, 0.44280749559402466, 0.42553094029426575, 0.409730464220047, 0.3950290083885193, 0.3812194764614105, 0.36862337589263916, 0.35700491070747375, 0.34646329283714294, 0.33671337366104126, 0.32762110233306885, 0.31923195719718933, 0.31159308552742004, 0.30443277955055237, 0.2979063391685486, 0.29190853238105774, 0.2863732874393463, 0.2813047766685486, 0.27670228481292725, 0.2724674940109253, 0.2685076594352722, 0.2649225890636444, 0.261616051197052, 0.2585432827472687, 0.25571560859680176, 0.2531011998653412, 0.25068795680999756, 0.24847866594791412, 0.24643205106258392, 0.24454237520694733, 0.24277478456497192, 0.24112626910209656, 0.23960129916667938, 0.2381758838891983, 0.23687388002872467, 0.23564128577709198, 0.23449954390525818, 0.23345375061035156, 0.23245632648468018, 0.23153187334537506, 0.23065714538097382, 0.22985237836837769, 0.22910144925117493], "moving_avg_accuracy_train": [0.053058525978220736, 0.11021175797111478, 0.16567606747762084, 0.21860472535125963, 0.2687206581432839, 0.3158568893250795, 0.35973493239700116, 0.4007315431509334, 0.43886750875439856, 0.47430798598434815, 0.5072574916091046, 0.5377465948499106, 0.5659076199464071, 0.5920104689475213, 0.6159353304830018, 0.6379070508434779, 0.6580094091012304, 0.676661892396303, 0.6938955198844782, 0.7097986987238266, 0.7245579522018499, 0.7382341944320617, 0.7509543998273569, 0.7627606575997892, 0.7737558801092362, 0.7840003526891672, 0.7934297135015997, 0.8022952095863788, 0.8105067069924511, 0.818143484382907, 0.8252118965343173, 0.8317734302682056, 0.8379322158001244, 0.8436588455836225, 0.8490359906256663, 0.8540591439682768, 0.858752042988531, 0.8630802838031885, 0.867157062143523, 0.8710075242569668, 0.8745357191769234, 0.877815726301313, 0.8808514380704064, 0.8836300816387811, 0.8862238307538804, 0.8886186588265175, 0.8908600345978431, 0.8929539666539318, 0.8949292223568017, 0.8968185235834231, 0.8985700479611919, 0.9001952480261839, 0.9017207071025338, 0.9031494238426773, 0.9044585203969016, 0.9056785599742749, 0.9068044973796252, 0.9078666691694405, 0.9088458752683695, 0.9097597128407389, 0.9106123935903951, 0.911403057753181, 0.9121077161020785], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05197047957454818, 0.10731868881777107, 0.16065490869728916, 0.21127304687499998, 0.258918832596009, 0.302953677734375, 0.3433317262824736, 0.3802121678767413, 0.41383387042265146, 0.4446102160611092, 0.4722621580280404, 0.49738083939202854, 0.5200720723297082, 0.5404097622635295, 0.558700446664059, 0.5748701233831953, 0.5892275199304179, 0.6019629828281894, 0.6132275279188644, 0.6231194188581527, 0.6322062556809218, 0.6404342664550736, 0.6475719509729699, 0.6539938080217573, 0.6598243665079853, 0.66502407052925, 0.669631591469548, 0.673949258753316, 0.6777619171212073, 0.6813184684907884, 0.6844949506609114, 0.6872683353952721, 0.689543625585037, 0.6915537361534158, 0.6933129780312971, 0.6948607041362999, 0.696218066045712, 0.6972677638180234, 0.6982358763669438, 0.6992557210532916, 0.7001491672085046, 0.700966505288106, 0.7017377011448376, 0.7025559067457152, 0.7032058130590955, 0.703841615883457, 0.7042297034479726, 0.7045301541310368, 0.7048127667770445, 0.7050304970647016, 0.7052020402610928, 0.7053065715041853, 0.7054006496229686, 0.7054242847736235, 0.7053845212529629, 0.7053985917180281, 0.7054091961192674, 0.7053922670005636, 0.7053159956374802, 0.705198523285705, 0.7051050052003573, 0.7049953953523849, 0.7048967464892096], "moving_var_accuracy_train": [0.025336864610833728, 0.05220160549485247, 0.07466805160666873, 0.0924142318647442, 0.10577726915480204, 0.11519596084953498, 0.12100390873897425, 0.1240300167048617, 0.12471618188695363, 0.12354881053483746, 0.1209649587695964, 0.11723473164049351, 0.11264864848681375, 0.10751601217190708, 0.10191600195014357, 0.09606921021551985, 0.09009923246167519, 0.08422054541316433, 0.07847147211945857, 0.07290052478227942, 0.06757099237310839, 0.06249724954965241, 0.05770375722237363, 0.053187871003438324, 0.04895713816538476, 0.0450059673148149, 0.04130558619131274, 0.03788240075964457, 0.03470101889052951, 0.03175580032167897, 0.029029882342590914, 0.02651437763280041, 0.024204315622573924, 0.022079032658411758, 0.020131352591799167, 0.018345305958149666, 0.01670898507326343, 0.015206689582884082, 0.01383560171932166, 0.012585476073773099, 0.011438961900934663, 0.010391891731465616, 0.009435642471824171, 0.008561565965362382, 0.007765957179074853, 0.007040978274644782, 0.006382094335314879, 0.005783345864883034, 0.005240125994220216, 0.004748238526922413, 0.004301025213043437, 0.003894694169000341, 0.00352616798064287, 0.0031919222662906777, 0.0028881536437561483, 0.002612734748513749, 0.0023628708890292764, 0.002136737680326063, 0.0019316935135510738, 0.0017460400541740326, 0.0015779796289041388, 0.0014258080143785502, 0.0012876961034387336], "duration": 27364.819793, "accuracy_train": [0.5305852597822075, 0.6245908459071613, 0.6648548530361756, 0.6949626462140088, 0.7197640532715024, 0.7400829699612403, 0.7546373200442967, 0.7697010399363234, 0.782091199185585, 0.7932722810538945, 0.8038030422319121, 0.812148524017165, 0.8193568458148762, 0.826936109957549, 0.8312590843023256, 0.835652534087763, 0.838930633421004, 0.8445342420519564, 0.8489981672780547, 0.8529273082779623, 0.8573912335040605, 0.8613203745039681, 0.8654362483850129, 0.8690169775516795, 0.8727128826942598, 0.8762006059085455, 0.878293960813492, 0.8820846743493909, 0.8844101836471022, 0.8868744808970099, 0.8888276058970099, 0.8908272338732004, 0.8933612855873938, 0.8951985136351052, 0.8974302960040605, 0.8992675240517718, 0.9009881341708195, 0.9020344511351052, 0.9038480672065338, 0.9056616832779623, 0.9062894734565338, 0.9073357904208195, 0.9081728439922481, 0.9086378737541528, 0.9095675727897747, 0.910172111480251, 0.9110324165397747, 0.9117993551587301, 0.9127065236826319, 0.9138222346230158, 0.914333767361111, 0.914822048611111, 0.9154498387896824, 0.9160078745039681, 0.9162403893849206, 0.9166589161706349, 0.9169379340277777, 0.9174262152777777, 0.9176587301587301, 0.9179842509920635, 0.9182865203373015, 0.918519035218254, 0.9184496412421558], "end": "2016-01-29 23:31:08.967000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0], "moving_var_accuracy_valid": [0.02430837672487677, 0.04944835745027335, 0.0701062928645727, 0.0861554267913159, 0.09797097218493507, 0.10562548324368042, 0.10973641616028587, 0.11100427729395101, 0.1100776195033269, 0.10759450861071455, 0.1037167268005259, 0.0990235875016634, 0.09375525722158543, 0.0881023261860252, 0.08230303578998067, 0.076425858217795, 0.07063848591654331, 0.0650343654618736, 0.059672938700584904, 0.05458629038771937, 0.04987079677994012, 0.04549301855364213, 0.041402235560771064, 0.03763317423628949, 0.034175815523012465, 0.031001566267890027, 0.028092472884038575, 0.02545100585259461, 0.023036732541807416, 0.020846900806426896, 0.018853021076578186, 0.01703694393488343, 0.015379842050423852, 0.013878222745855442, 0.012518254859133921, 0.011287988478085494, 0.010175771512455052, 0.009168111149928307, 0.008259735212101873, 0.007443122439550132, 0.006705994409885504, 0.006041407342724251, 0.0054426192958967855, 0.004904382509954876, 0.004417745662904932, 0.003979609303697633, 0.003583003880947456, 0.003225515928369294, 0.0029036831647015165, 0.0026137415065348333, 0.0023526321994954036, 0.0021174673205729055, 0.0019058002447475192, 0.0017152252478558855, 0.0015437169533084748, 0.0013893470397795117, 0.0012504133478814913, 0.001125374592448883, 0.0010128894890914343, 0.0009117247379631752, 0.0008206309748574414, 0.0007386760062406502, 0.0006648959900004371], "accuracy_test": 0.4586894132653061, "start": "2016-01-29 15:55:04.147000", "learning_rate_per_epoch": [0.00014660520537290722, 0.000136075759655796, 0.00012630256242118776, 0.00011723129136953503, 0.00010881153866648674, 0.00010099650535266846, 9.374276123708114e-05, 8.700999023858458e-05, 8.076077938312665e-05, 7.496040052501485e-05, 6.957661389606073e-05, 6.457950075855479e-05, 5.9941288782283664e-05, 5.563620288739912e-05, 5.164031244930811e-05, 4.7931414883350953e-05, 4.4488897401606664e-05, 4.129362787352875e-05, 3.832784932455979e-05, 3.5575078072724864e-05, 3.3020012779161334e-05, 3.064845805056393e-05, 2.844723167072516e-05, 2.6404102754895575e-05, 2.450771353323944e-05, 2.274752660014201e-05, 2.1113759430591017e-05, 1.9597333448473364e-05, 1.818981945689302e-05, 1.6883395801414736e-05, 1.5670801076339558e-05, 1.454529683542205e-05, 1.350062848359812e-05, 1.253098980669165e-05, 1.1630992048594635e-05, 1.0795633897942025e-05, 1.002027238428127e-05, 9.300599231210072e-06, 8.632614481030032e-06, 8.012604666873813e-06, 7.4371255323057994e-06, 6.902978384459857e-06, 6.407194632629398e-06, 5.947018962615402e-06, 5.519893875316484e-06, 5.123445589561015e-06, 4.755470854433952e-06, 4.413924671098357e-06, 4.096908924111631e-06, 3.8026616948627634e-06, 3.5295479392516427e-06, 3.2760497106210096e-06, 3.040758201677818e-06, 2.822365559040918e-06, 2.6196582894044695e-06, 2.4315099835803267e-06, 2.2568747226614505e-06, 2.0947820758010494e-06, 1.944331188497017e-06, 1.8046858940579114e-06, 1.6750701661294443e-06, 1.5547636849078117e-06, 1.4430978581003728e-06], "accuracy_train_first": 0.5305852597822075, "accuracy_train_last": 0.9184496412421558, "batch_size_eval": 1024, "accuracy_train_std": [0.01533089208673132, 0.020518915494882824, 0.018631898974617055, 0.017840869403194445, 0.01952851638273254, 0.0190423634663113, 0.018934370756752524, 0.018505391709224054, 0.018885158196366603, 0.020502996696594847, 0.020657614692248628, 0.02060016810999516, 0.018935579357506005, 0.018676441896315038, 0.01976990099568986, 0.02018593298697251, 0.01944609562172041, 0.019398632923465574, 0.0195669609486468, 0.01893682778591252, 0.018834987635765466, 0.018141414723313792, 0.017715090136497528, 0.0177187197679545, 0.0175855604138158, 0.01685565973670438, 0.01664636410485921, 0.016112236869209123, 0.01605365410524281, 0.015210939858348307, 0.014866087551213719, 0.01460915433027389, 0.01420975479088961, 0.013558464285420475, 0.013273808982919022, 0.012532111734695577, 0.012360464146438302, 0.012107787699046314, 0.01145693808642542, 0.011103501312771175, 0.010855511702444205, 0.010722022280661658, 0.01046164955774887, 0.010580046910473265, 0.010455823773889119, 0.010597381643486108, 0.01040406816750521, 0.010484974615628397, 0.01040338657753467, 0.010402381311026917, 0.010333725052802055, 0.010090062372498003, 0.010265908686405471, 0.010340942307920216, 0.010620184885696474, 0.010434692310527358, 0.010576008363476561, 0.010442952893087564, 0.010210683613481536, 0.010270796387963141, 0.01037917595307125, 0.010105508555783673, 0.01010481379609448], "accuracy_test_std": 0.019211970953469527, "error_valid": [0.4802952042545181, 0.39454742799322284, 0.35931911238704817, 0.33316370952560237, 0.3122690959149097, 0.30073271602033136, 0.2932658367846386, 0.28786385777484935, 0.2835708066641567, 0.2784026731927711, 0.27887036426957834, 0.27655102833207834, 0.2757068312311747, 0.27655102833207834, 0.2766833937311747, 0.27960278614457834, 0.28155591114457834, 0.28341785109186746, 0.28539156626506024, 0.287853562688253, 0.2860122129141567, 0.28551363657756024, 0.2881888883659638, 0.2882094785391567, 0.2877006071159638, 0.28817859327936746, 0.2889007200677711, 0.2871917356927711, 0.2879241575677711, 0.2866725691829819, 0.2869167098079819, 0.2877712019954819, 0.28997876270707834, 0.2903552687311747, 0.2908538450677711, 0.2912097609186747, 0.29156567676957834, 0.2932849562311747, 0.2930511106927711, 0.29156567676957834, 0.29180981739457834, 0.2916774519954819, 0.29132153614457834, 0.29008024284638556, 0.2909450301204819, 0.2904361586972892, 0.29227750847138556, 0.29276578972138556, 0.29264371940888556, 0.29300993034638556, 0.29325407097138556, 0.2937526473079819, 0.2937526473079819, 0.2943629988704819, 0.2949733504329819, 0.29447477409638556, 0.29449536426957834, 0.2947600950677711, 0.2953704466302711, 0.2958587278802711, 0.2957366575677711, 0.29599109327936746, 0.29599109327936746], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.07182173709648584, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.00015794941656525327, "optimization": "adam", "nb_data_augmentation": 0, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 6.213918242291738e-05, "rotation_range": [0, 0], "momentum": 0.5880812640729651}, "accuracy_valid_max": 0.7242931687688253, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7040089067206325, "accuracy_valid_std": [0.0072482083103836146, 0.01508469255517606, 0.015261040773786443, 0.010217595677435161, 0.012846455041439324, 0.010163829928490343, 0.00846000990226804, 0.008796280149647008, 0.010885159077393826, 0.008759521536799904, 0.009732521398792889, 0.010100839216230293, 0.008326635443123016, 0.009211993007857924, 0.010788836050646141, 0.012701538730487936, 0.013867971332977545, 0.011464542489325633, 0.01124017643499726, 0.010448243811965867, 0.009783175995220925, 0.009582156865156904, 0.011291030902796028, 0.009359371651439057, 0.009876597381494337, 0.010542167751391005, 0.011752501161202389, 0.010816872114609572, 0.011219820772135835, 0.012896448328037683, 0.01244144479340462, 0.012992804835263484, 0.013836328047235872, 0.011626300176355254, 0.01157518314422288, 0.012687033384991617, 0.012795525784169866, 0.011811730100267682, 0.010003275122458763, 0.01076119629474074, 0.011433894793378677, 0.012958934698071125, 0.011836071878120656, 0.013604278494772639, 0.013311217347431603, 0.014654736939308233, 0.01402700072554924, 0.014202933652371772, 0.013925166731583822, 0.014237854322328476, 0.013583702420781493, 0.012930537680723919, 0.01300408218004768, 0.013230588992356027, 0.01346103387859139, 0.014300461488728563, 0.012517500678664169, 0.010778463907937666, 0.011565570655906661, 0.011822083911046513, 0.011826084787316664, 0.011347380344113646, 0.011368371819754131], "accuracy_valid": [0.5197047957454819, 0.6054525720067772, 0.6406808876129518, 0.6668362904743976, 0.6877309040850903, 0.6992672839796686, 0.7067341632153614, 0.7121361422251506, 0.7164291933358433, 0.7215973268072289, 0.7211296357304217, 0.7234489716679217, 0.7242931687688253, 0.7234489716679217, 0.7233166062688253, 0.7203972138554217, 0.7184440888554217, 0.7165821489081325, 0.7146084337349398, 0.712146437311747, 0.7139877870858433, 0.7144863634224398, 0.7118111116340362, 0.7117905214608433, 0.7122993928840362, 0.7118214067206325, 0.7110992799322289, 0.7128082643072289, 0.7120758424322289, 0.7133274308170181, 0.7130832901920181, 0.7122287980045181, 0.7100212372929217, 0.7096447312688253, 0.7091461549322289, 0.7087902390813253, 0.7084343232304217, 0.7067150437688253, 0.7069488893072289, 0.7084343232304217, 0.7081901826054217, 0.7083225480045181, 0.7086784638554217, 0.7099197571536144, 0.7090549698795181, 0.7095638413027108, 0.7077224915286144, 0.7072342102786144, 0.7073562805911144, 0.7069900696536144, 0.7067459290286144, 0.7062473526920181, 0.7062473526920181, 0.7056370011295181, 0.7050266495670181, 0.7055252259036144, 0.7055046357304217, 0.7052399049322289, 0.7046295533697289, 0.7041412721197289, 0.7042633424322289, 0.7040089067206325, 0.7040089067206325], "seed": 727611759, "model": "residualv3", "loss_std": [0.41871127486228943, 0.2648303508758545, 0.2639842927455902, 0.2607020139694214, 0.25529563426971436, 0.24921581149101257, 0.24293558299541473, 0.23675855994224548, 0.23000574111938477, 0.22295750677585602, 0.21624141931533813, 0.2101474106311798, 0.20343458652496338, 0.19683945178985596, 0.19016006588935852, 0.1836247444152832, 0.17760945856571198, 0.1715296357870102, 0.1653524488210678, 0.15926851332187653, 0.15332719683647156, 0.14751647412776947, 0.14201374351978302, 0.13658110797405243, 0.13128700852394104, 0.12616635859012604, 0.12129638344049454, 0.11655838787555695, 0.1121930256485939, 0.10801427066326141, 0.10394805669784546, 0.09995292127132416, 0.09628040343523026, 0.09279361367225647, 0.08953433483839035, 0.0864597037434578, 0.0835237130522728, 0.08081970363855362, 0.0782991349697113, 0.07598572969436646, 0.0736856609582901, 0.07161719352006912, 0.06959753483533859, 0.06770094484090805, 0.0659976601600647, 0.06433016806840897, 0.06277754157781601, 0.061356671154499054, 0.06002357229590416, 0.05875227227807045, 0.05753044784069061, 0.056397996842861176, 0.05533026531338692, 0.05431665852665901, 0.05339622497558594, 0.05251495912671089, 0.05170554295182228, 0.05094208940863609, 0.0502137690782547, 0.04954535886645317, 0.048907287418842316, 0.048317402601242065, 0.047762367874383926]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:22 2016", "state": "available"}], "summary": "bf324e53decef2b3b51ceebe801a798b"}