{"content": {"hp_model": {"f0": 32, "f1": 32, "f2": 64, "f3": 32, "nonlin": "leaky_rectify", "nbg1": 6, "nbg3": 4, "nbg2": 3, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.3958872556686401, 0.9411558508872986, 0.7462666034698486, 0.6303132176399231, 0.543144941329956, 0.4713781774044037, 0.40921100974082947, 0.35705700516700745, 0.3127240836620331, 0.27676746249198914, 0.24513760209083557, 0.22402800619602203, 0.19833166897296906, 0.181664377450943, 0.1683443933725357, 0.1530909240245819, 0.14242635667324066, 0.13456115126609802, 0.12286438047885895, 0.11675368994474411, 0.10795649886131287, 0.10600738972425461, 0.09899885952472687, 0.09478587657213211, 0.08881504088640213, 0.08568698167800903, 0.08100295066833496, 0.08141545951366425, 0.07729918509721756, 0.07674279063940048, 0.07258795201778412, 0.06951388716697693, 0.0683373436331749, 0.06756050139665604, 0.06240713968873024, 0.06300275772809982, 0.06339125335216522, 0.062359463423490524, 0.05940689891576767, 0.05754241347312927, 0.0547824501991272, 0.05593905970454216, 0.056119512766599655, 0.05932261422276497, 0.056095391511917114, 0.05094844102859497, 0.05311030521988869, 0.05013938248157501, 0.050899140536785126, 0.048995569348335266, 0.04841369763016701, 0.04680187627673149, 0.04906753450632095, 0.047071974724531174, 0.04568692669272423, 0.04712597653269768, 0.04595725238323212, 0.04342345893383026, 0.04891720786690712, 0.047978177666664124, 0.04517791047692299, 0.04329032078385353, 0.04188968241214752, 0.04330899566411972, 0.04346029832959175, 0.04412338510155678, 0.044450536370277405, 0.04390924051403999, 0.040952522307634354, 0.04253528639674187, 0.04274779185652733, 0.04146527126431465, 0.04134821146726608, 0.04215310513973236, 0.04243559390306473, 0.04175466671586037, 0.04190858080983162, 0.04172820970416069, 0.039482634514570236, 0.04165666550397873, 0.04432731494307518, 0.040149394422769547, 0.04047052189707756, 0.04068246856331825, 0.03983999043703079, 0.03799169138073921, 0.03936675563454628, 0.039233237504959106, 0.03977660834789276, 0.0433289110660553, 0.0400659441947937, 0.03823778033256531, 0.04003964364528656, 0.03817342221736908, 0.040863774716854095, 0.039957914501428604, 0.03954244405031204, 0.039187390357255936, 0.03738503158092499, 0.04026925191283226, 0.04182859882712364, 0.04061227664351463, 0.04041175916790962, 0.038503170013427734, 0.039474062621593475, 0.040451791137456894, 0.04175382852554321, 0.038151320070028305, 0.040026623755693436, 0.039269670844078064, 0.03657302260398865, 0.037490248680114746, 0.037897441536188126, 0.036493655294179916, 0.036976683884859085, 0.036599911749362946, 0.03749088943004608, 0.037284255027770996, 0.03724553436040878, 0.04010513052344322, 0.039837323129177094, 0.04043898731470108, 0.03953868895769119, 0.03868691623210907, 0.039576269686222076, 0.037402380257844925, 0.036009497940540314, 0.03738214820623398, 0.03544441983103752, 0.03871515765786171, 0.03915686532855034, 0.03999674320220947, 0.039764586836099625, 0.038576286286115646, 0.04157281666994095, 0.038339171558618546, 0.04038415476679802, 0.03941945359110832, 0.03909587487578392, 0.03962472081184387, 0.03865722939372063, 0.03888833150267601, 0.037219539284706116, 0.03968223184347153, 0.038005515933036804, 0.037404291331768036, 0.03628930449485779, 0.035865627229213715, 0.03894437849521637, 0.03918351233005524, 0.04371778666973114, 0.04022538289427757, 0.03930649161338806, 0.038097597658634186, 0.03770193085074425, 0.03924357518553734, 0.03912319615483284, 0.038868844509124756, 0.03744574636220932, 0.03631936013698578, 0.03656625375151634, 0.03714512661099434, 0.036740493029356, 0.03707398846745491, 0.03515331819653511, 0.03714866563677788, 0.036841973662376404, 0.03639499470591545, 0.037422530353069305, 0.03724698722362518, 0.03761392459273338, 0.037488456815481186, 0.03645636886358261, 0.03702479228377342, 0.036398377269506454, 0.036990001797676086, 0.03769959509372711, 0.037392161786556244, 0.038432858884334564, 0.039947446435689926, 0.037414707243442535, 0.0381348617374897, 0.038083601742982864, 0.04031285643577576, 0.03616826608777046, 0.0382535383105278, 0.03817416727542877, 0.03644987568259239, 0.036425426602363586, 0.03732381761074066, 0.036588165909051895, 0.03710796311497688, 0.03797408565878868, 0.03836560621857643, 0.03744561970233917, 0.036476992070674896, 0.03618345782160759, 0.035713452845811844, 0.034476619213819504, 0.03537386655807495, 0.03733715042471886, 0.037139687687158585, 0.040968820452690125, 0.03955557197332382, 0.03803953528404236, 0.039186328649520874, 0.034767668694257736, 0.036169759929180145, 0.03708504140377045, 0.03802302107214928], "moving_avg_accuracy_train": [0.05203999999999999, 0.11508541176470585, 0.17834628235294114, 0.23973283058823525, 0.2982089592941176, 0.3512962986588235, 0.4008584334988235, 0.44669964897247055, 0.48946262525169404, 0.5276787156677011, 0.5634308441009309, 0.5964007008673085, 0.6269959248982248, 0.6551833912319317, 0.6804838756381503, 0.7025578410155117, 0.7242855863257252, 0.7449699688696232, 0.7625294425708962, 0.7791000277255712, 0.7947170837765435, 0.8087230224577127, 0.8216366025648826, 0.834181177602512, 0.8451960010187314, 0.8551305185639171, 0.8655115843545842, 0.8752286612132435, 0.8838140303860368, 0.8913267449944919, 0.8983587763773957, 0.9046264281514208, 0.9109543735715728, 0.9166565832732391, 0.921529748475327, 0.9262661853925002, 0.9296795668532501, 0.9338739631091016, 0.9378677432687796, 0.9416621454124898, 0.945281813224182, 0.9483371613135285, 0.9506775628292345, 0.9532803947816052, 0.9554582376563858, 0.956686531537806, 0.958690819560496, 0.9601440905456228, 0.9619132109028252, 0.9633195368713663, 0.9638558184783472, 0.9653855307481595, 0.9667387423792259, 0.9680695740236561, 0.9695143813271729, 0.9706570608415145, 0.9712266488750101, 0.9718522192816267, 0.9728246444122874, 0.9736457093828235, 0.9742411384445411, 0.9754240834236164, 0.9762134397871371, 0.9771332722790117, 0.9777258274040517, 0.9781367740754112, 0.9786313319619877, 0.9792317281775537, 0.9797814965362689, 0.9802339351179361, 0.9807587769002601, 0.9811746639161165, 0.9816195504656813, 0.9822246542426426, 0.9823010123477901, 0.9829556169953639, 0.9832059376487687, 0.9836406380015389, 0.9836648094955027, 0.9840371520753642, 0.9840052015737102, 0.9841905637692804, 0.9842468015099993, 0.9845303566531171, 0.984745556281923, 0.9848639418302012, 0.9853916652942399, 0.9856407340589336, 0.9858578371236285, 0.9856908769406775, 0.9856017892466098, 0.9860863162043018, 0.9863859198779892, 0.9865685043607785, 0.9865210656894065, 0.9866948414734069, 0.9867218279143015, 0.9867649392405184, 0.9867260923752901, 0.9870393654907023, 0.9871330760004556, 0.987464474282763, 0.9874874386191925, 0.9877716359337438, 0.9880344723403695, 0.9882427898122149, 0.9879549814192287, 0.9881500715125998, 0.9883091820083986, 0.9884829696899116, 0.9887123197797439, 0.9890363819194166, 0.9893209790215926, 0.9894947634723744, 0.9897288165369017, 0.9896288760596822, 0.989821282571361, 0.989914448431872, 0.9900124153533907, 0.9899641149945222, 0.9901912329068348, 0.9900944625573278, 0.990209722183948, 0.989998161730259, 0.9899865808513507, 0.9901243933544509, 0.9902013657837117, 0.9900612292053405, 0.9903798121671593, 0.9904853603622081, 0.9904721184436344, 0.9903990242463298, 0.990220298292285, 0.9903206214042329, 0.9903638533814567, 0.9904474680433111, 0.9903886035919212, 0.9904768020562584, 0.9906291218506326, 0.990629739077334, 0.9908655886990124, 0.9909225592408759, 0.9910444209638472, 0.9910199788674624, 0.9911626868630691, 0.9912417122944093, 0.9913222469473213, 0.9912653163702362, 0.9913529023802714, 0.991396435671656, 0.9912756156339022, 0.9912562893646296, 0.9914412486634607, 0.9916524179147617, 0.9917907055350502, 0.9914445761580157, 0.9913518832480964, 0.9916002243350515, 0.991828437195664, 0.9920550052408035, 0.9921059753049585, 0.9921306718921097, 0.9921905458793693, 0.992244432467903, 0.992121165691701, 0.9921937550048838, 0.9922873206808661, 0.9922774121421912, 0.9922661415162074, 0.9923054097175279, 0.992324280510481, 0.992251852459433, 0.9921984319193721, 0.9922632946097878, 0.992356965148809, 0.9923659745162811, 0.9925411417705353, 0.9926470275934818, 0.9925776189517806, 0.9926045629389555, 0.9926523419391775, 0.9924624018629068, 0.9923549852060278, 0.9924253690383662, 0.9925640086051178, 0.992392313626959, 0.9923460234407337, 0.9923961269790134, 0.9924388672222886, 0.9925502746177068, 0.9927352471559362, 0.9924993694991662, 0.9925670796080731, 0.992571548117854, 0.992556746247245, 0.9925881304460499, 0.9926587291661508, 0.992854032720124, 0.9927215706245821, 0.9928211782680063, 0.9929225898529703, 0.9927291543970851, 0.9925362389573765, 0.9925837915322271, 0.9926524712025339, 0.9924860476116921, 0.9923103840269936, 0.9925922868007648, 0.9927071757677473, 0.9928905758380313], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.051586666666666656, 0.11230799999999999, 0.17371719999999996, 0.23241214666666665, 0.28675759866666667, 0.33565517213333335, 0.38039632158666664, 0.4206500227613333, 0.4575183538185333, 0.4901665184366799, 0.5198965332596786, 0.5467735466003774, 0.571269525273673, 0.593195906079639, 0.6129296488050084, 0.6295566839245076, 0.6454943488653901, 0.6608382473121845, 0.6730077559142994, 0.6852803136562028, 0.6960456156239159, 0.7054143873948576, 0.7147529486553719, 0.7233043204565014, 0.7301472217441846, 0.7367858329030995, 0.7440139162794562, 0.7504391913181774, 0.7558352721863596, 0.760105078301057, 0.7647479038042847, 0.7686597800905228, 0.7727538020814706, 0.7761317552066569, 0.7793319130193245, 0.7822520550507254, 0.7841601828789861, 0.7868908312577543, 0.7897350814653122, 0.7922949066521143, 0.7941987493202362, 0.7958988743882125, 0.7980823202827245, 0.799674088254452, 0.8008266794290068, 0.8018506781527728, 0.8024922770041623, 0.802883049303746, 0.8035280777067048, 0.8037352699360343, 0.8037084096090975, 0.8040042353148544, 0.8051771451167022, 0.8059660972716987, 0.8065961542111955, 0.8074565387900758, 0.8076308849110683, 0.8079077964199615, 0.8086903501112986, 0.8093279817668354, 0.8099418502568185, 0.8105743318978034, 0.8109435653746897, 0.811462542170554, 0.8117562879534986, 0.812033992491482, 0.8126839265756671, 0.8131488672514338, 0.8130206471929571, 0.813265249140328, 0.8137920575596286, 0.8139061851369991, 0.8145422332899659, 0.8151680099609693, 0.815397875631539, 0.8157914214017185, 0.8156922792615466, 0.8165097180020586, 0.8162187462018528, 0.8165702049150009, 0.8162731844235008, 0.8162191993144841, 0.8162372793830356, 0.8165468847780654, 0.8161588629669254, 0.8158629766702329, 0.8159700123365429, 0.8162396777695552, 0.8163223766592664, 0.8158768056600064, 0.8162091250940058, 0.8165882125846052, 0.8164893913261447, 0.8166271188601969, 0.8167377403075105, 0.8169572996100927, 0.8169015696490833, 0.8171047460175083, 0.8170342714157574, 0.8178375109408482, 0.8178404265134301, 0.8183497171954205, 0.8179280788092118, 0.818268604261624, 0.8182950771687949, 0.8184655694519154, 0.8184856791733905, 0.8186904445893848, 0.8191947334637796, 0.8195419267840682, 0.8199877341056614, 0.8205222940284286, 0.8210300646255857, 0.8209937248296938, 0.820641019013391, 0.820176917112052, 0.8203858920675134, 0.8205073028607621, 0.8203899059080192, 0.8201775819838839, 0.8203064904521622, 0.819915841406946, 0.8196975905995847, 0.8196078315396262, 0.8191537150523303, 0.8193450102137639, 0.8196371758590543, 0.8194067916064822, 0.8194527791125007, 0.8195208345345839, 0.8189420844144588, 0.8188345426396796, 0.818204421709045, 0.8182773128714738, 0.8187029149176597, 0.818845956759227, 0.818348027749971, 0.8185665583083072, 0.8184165691441432, 0.8182815788963955, 0.818893421006756, 0.8187374122394138, 0.8186370043488058, 0.8187199705805919, 0.8187013068558661, 0.8187245095036128, 0.8187587252199182, 0.8188028526979264, 0.8192159007614671, 0.819600977351987, 0.8198008796167884, 0.8202474583217763, 0.820156045822932, 0.8202071079073054, 0.8203863971165749, 0.8200410907382507, 0.8197836483310923, 0.8201386168313165, 0.8206447551481848, 0.821206946300033, 0.8212995850033631, 0.82130295983636, 0.8216393305193908, 0.821848730800785, 0.8213971910540399, 0.8208574719486359, 0.8206383914204389, 0.8206412189450617, 0.8201770970505555, 0.8201193873454999, 0.8201207819442833, 0.8200020370831882, 0.8199351667082027, 0.8195016500373824, 0.8197781517003109, 0.820253669863613, 0.8207616362105851, 0.8208188059228598, 0.8201635919972405, 0.8199872327975165, 0.8194685095177648, 0.8192816585659883, 0.8185401593760562, 0.8190861434384507, 0.8194175290946056, 0.8191291095184784, 0.8192961985666305, 0.8193532453766341, 0.8195112541723041, 0.8195601287550737, 0.8195641158795663, 0.8191943709582763, 0.8192749338624487, 0.8194141071428704, 0.8195660297619167, 0.820169426785725, 0.8203791507738192, 0.8205279023631039, 0.8201551121267935, 0.8201662675807808, 0.8202963074893694, 0.8203066767404326, 0.8199160090663893, 0.820031074826417, 0.8196813006771086, 0.8196998372760644, 0.8196765202151246, 0.8201755348602788, 0.8203446480409176, 0.8206968499034925], "moving_var_accuracy_train": [0.024373454399999994, 0.05770862446123182, 0.0879552017433417, 0.11307445630720436, 0.1325421293323262, 0.14465230680650465, 0.1522947230149393, 0.1559780040383574, 0.1568382528968386, 0.15429865370731458, 0.1503727205241386, 0.14511855156848377, 0.13903130601315294, 0.13227897473666242, 0.12481210786369998, 0.11671623660465856, 0.10929346719058226, 0.10221471360252488, 0.09476825829226367, 0.08776269109435235, 0.08118145394221002, 0.07482880541305506, 0.06884676983240821, 0.06337839011503982, 0.05813248811755029, 0.05320749105549568, 0.04885664069249754, 0.044820770867341604, 0.041002070855105786, 0.037409831696688066, 0.03411389371535055, 0.03105605547265946, 0.028310835964557322, 0.02577238912743758, 0.02340887986647538, 0.021269896391861092, 0.01924776730964431, 0.017481327218239785, 0.01587674701609035, 0.014418649703135054, 0.013094702688424553, 0.011869248787105758, 0.010731621221687651, 0.009719431707069421, 0.008790175532647576, 0.007924736332115028, 0.007168417233204613, 0.006470583478890056, 0.005851693212545463, 0.0052843236658590515, 0.004758479680931021, 0.004303691889493649, 0.003889803336010365, 0.0035167630182016837, 0.003183873929680173, 0.0028772379849646176, 0.002592434061219268, 0.002336712700100052, 0.002111551925802714, 0.0019064640623950137, 0.0017190084780633543, 0.0015597018596686942, 0.0014093394249195005, 0.0012760203087455234, 0.0011515783720568717, 0.001037940429351498, 0.0009363476739449237, 0.0008459571870914243, 0.0007640816756164817, 0.000689515814086463, 0.0006230433627460743, 0.0005622956845610878, 0.0005078474324828323, 0.0004603580444625843, 0.0004143747150583213, 0.00037679380875411776, 0.000339678371744395, 0.0003074112141402422, 0.00027667535107630197, 0.000250255566939673, 0.00022523919775670925, 0.00020302451027295762, 0.0001827505233969925, 0.00016519910272998984, 0.0001490959903791348, 0.00013431252758359168, 0.00012338770331570554, 0.00011160725023004917, 0.00010087072887334342, 9.103453731022861e-05, 8.200251313431454e-05, 7.591515917545519e-05, 6.913150450949297e-05, 6.251838789874265e-05, 5.628680295674222e-05, 5.0929904869013004e-05, 4.584346879404113e-05, 4.1275849192670644e-05, 3.716184598384618e-05, 3.432892178902199e-05, 3.097506454686381e-05, 2.8865981485824003e-05, 2.5984129583970464e-05, 2.411262964795715e-05, 2.2323113472992205e-05, 2.048136764737754e-05, 1.9178733922299458e-05, 1.760340183085397e-05, 1.6070906996628766e-05, 1.4735635721177139e-05, 1.3735485322414467e-05, 1.3307083223496067e-05, 1.2705334496249185e-05, 1.1706610364626445e-05, 1.102897686129522e-05, 1.0015972066047611e-05, 9.347557251070643e-06, 8.4909204240463e-06, 7.728206041048294e-06, 6.97638175894488e-06, 6.7429864978890366e-06, 6.152968352993505e-06, 5.657234551451714e-06, 5.494331526392083e-06, 4.946105424559464e-06, 4.622425456200257e-06, 4.213505704377002e-06, 3.968899479317494e-06, 4.485465463437432e-06, 4.137182710396176e-06, 3.7250425750241848e-06, 3.4006231726382176e-06, 3.3480475552172286e-06, 3.1038253408138405e-06, 2.810263841424543e-06, 2.5921601623752047e-06, 2.3641293588746203e-06, 2.197727144990277e-06, 2.18676630831492e-06, 1.968093106202637e-06, 2.2719091919947993e-06, 2.0739290565572703e-06, 2.000188666631189e-06, 1.8055465446491861e-06, 1.808282038275024e-06, 1.6836590036339914e-06, 1.5736655761475158e-06, 1.4454688339979116e-06, 1.3699637329830956e-06, 1.2500236868137927e-06, 1.2563986518379526e-06, 1.1341203288101194e-06, 1.3285977759461296e-06, 1.5970700726067183e-06, 1.6094742586716383e-06, 2.5267767436206512e-06, 2.3514268492022168e-06, 2.6713438235121945e-06, 2.872939428901409e-06, 3.0476431977161856e-06, 2.766260404904195e-06, 2.49512365716603e-06, 2.2778753406027124e-06, 2.076221686356603e-06, 2.0053518007581834e-06, 1.8522394961775798e-06, 1.745806368057886e-06, 1.5721093435001364e-06, 1.4160416522407289e-06, 1.2883154117311384e-06, 1.1626888319981313e-06, 1.0936323520059619e-06, 1.0099529037090026e-06, 9.468221308098099e-07, 9.311074466535593e-07, 8.387272203084204e-07, 1.0310066009443318e-06, 1.0288122083593646e-06, 9.692890234085757e-07, 8.788939270716383e-07, 8.115500301244826e-07, 1.0550901202754676e-06, 1.053426151823291e-06, 9.926684913327162e-07, 1.066390007421132e-06, 1.2250634964037104e-06, 1.1218421788303128e-06, 1.0322512418804676e-06, 9.454666732493728e-07, 9.626244757092457e-07, 1.1742955872292583e-06, 1.5576104491764804e-06, 1.443111333892508e-06, 1.298979908720217e-06, 1.1710537762099053e-06, 1.0628131100005552e-06, 1.0013894125194487e-06, 1.2445417750183867e-06, 1.278003458314485e-06, 1.2394982561396213e-06, 1.2081072166099932e-06, 1.4240519752908849e-06, 1.616594079663127e-06, 1.4752858980710993e-06, 1.3702093822849228e-06, 1.482459748353996e-06, 1.6119330284211517e-06, 2.1659622903182797e-06, 2.0681613338948668e-06, 2.164065472527307e-06], "duration": 92109.640145, "accuracy_train": [0.5204, 0.6824941176470588, 0.7476941176470588, 0.7922117647058824, 0.8244941176470588, 0.8290823529411765, 0.8469176470588236, 0.8592705882352941, 0.8743294117647059, 0.8716235294117647, 0.8852, 0.8931294117647058, 0.9023529411764706, 0.9088705882352941, 0.9081882352941176, 0.9012235294117648, 0.9198352941176471, 0.9311294117647059, 0.920564705882353, 0.928235294117647, 0.9352705882352941, 0.9347764705882353, 0.9378588235294117, 0.9470823529411765, 0.9443294117647059, 0.9445411764705882, 0.9589411764705882, 0.9626823529411764, 0.9610823529411765, 0.9589411764705882, 0.9616470588235294, 0.9610352941176471, 0.9679058823529412, 0.9679764705882353, 0.9653882352941177, 0.9688941176470588, 0.9604, 0.9716235294117647, 0.9738117647058824, 0.9758117647058824, 0.9778588235294118, 0.975835294117647, 0.9717411764705882, 0.9767058823529412, 0.9750588235294118, 0.9677411764705882, 0.9767294117647058, 0.9732235294117647, 0.977835294117647, 0.9759764705882353, 0.9686823529411764, 0.9791529411764706, 0.9789176470588236, 0.9800470588235294, 0.9825176470588235, 0.9809411764705882, 0.9763529411764705, 0.9774823529411765, 0.9815764705882353, 0.981035294117647, 0.9796, 0.9860705882352941, 0.9833176470588235, 0.9854117647058823, 0.9830588235294118, 0.981835294117647, 0.9830823529411765, 0.984635294117647, 0.9847294117647059, 0.9843058823529411, 0.9854823529411765, 0.9849176470588236, 0.9856235294117647, 0.9876705882352941, 0.9829882352941176, 0.9888470588235294, 0.9854588235294117, 0.9875529411764706, 0.9838823529411764, 0.9873882352941177, 0.9837176470588235, 0.9858588235294118, 0.9847529411764706, 0.9870823529411765, 0.9866823529411765, 0.9859294117647058, 0.9901411764705882, 0.9878823529411764, 0.9878117647058824, 0.9841882352941177, 0.9848, 0.9904470588235295, 0.9890823529411765, 0.9882117647058823, 0.9860941176470588, 0.9882588235294117, 0.986964705882353, 0.9871529411764706, 0.9863764705882353, 0.9898588235294118, 0.9879764705882353, 0.9904470588235295, 0.9876941176470588, 0.9903294117647059, 0.9904, 0.9901176470588235, 0.9853647058823529, 0.9899058823529412, 0.9897411764705882, 0.9900470588235294, 0.9907764705882353, 0.9919529411764706, 0.9918823529411764, 0.9910588235294118, 0.991835294117647, 0.9887294117647059, 0.9915529411764706, 0.9907529411764706, 0.9908941176470588, 0.9895294117647059, 0.9922352941176471, 0.9892235294117647, 0.9912470588235294, 0.9880941176470588, 0.9898823529411764, 0.9913647058823529, 0.9908941176470588, 0.9888, 0.9932470588235294, 0.9914352941176471, 0.9903529411764705, 0.9897411764705882, 0.9886117647058823, 0.9912235294117647, 0.9907529411764706, 0.9912, 0.9898588235294118, 0.9912705882352941, 0.992, 0.9906352941176471, 0.9929882352941176, 0.9914352941176471, 0.9921411764705882, 0.9908, 0.9924470588235295, 0.9919529411764706, 0.9920470588235294, 0.9907529411764706, 0.9921411764705882, 0.9917882352941176, 0.9901882352941177, 0.9910823529411765, 0.9931058823529412, 0.9935529411764706, 0.993035294117647, 0.9883294117647059, 0.9905176470588235, 0.993835294117647, 0.9938823529411764, 0.9940941176470588, 0.9925647058823529, 0.9923529411764705, 0.9927294117647059, 0.9927294117647059, 0.9910117647058824, 0.9928470588235294, 0.9931294117647059, 0.9921882352941176, 0.992164705882353, 0.9926588235294118, 0.9924941176470589, 0.9916, 0.9917176470588235, 0.9928470588235294, 0.9932, 0.9924470588235295, 0.9941176470588236, 0.9936, 0.9919529411764706, 0.9928470588235294, 0.9930823529411764, 0.9907529411764706, 0.9913882352941177, 0.9930588235294118, 0.9938117647058824, 0.9908470588235294, 0.9919294117647058, 0.9928470588235294, 0.9928235294117647, 0.9935529411764706, 0.9944, 0.9903764705882353, 0.9931764705882353, 0.9926117647058823, 0.9924235294117647, 0.9928705882352942, 0.9932941176470588, 0.9946117647058823, 0.9915294117647059, 0.9937176470588235, 0.993835294117647, 0.9909882352941176, 0.9908, 0.9930117647058824, 0.9932705882352941, 0.9909882352941176, 0.9907294117647059, 0.9951294117647059, 0.9937411764705882, 0.9945411764705883], "end": "2016-02-06 19:22:13.459000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0], "moving_var_accuracy_valid": [0.023950657599999998, 0.054739314736, 0.08320519186416, 0.10589054355556962, 0.12188234257777139, 0.13121286253834683, 0.13610751037416172, 0.1370800034610798, 0.1356054676294615, 0.1316380447429178, 0.1264291043010075, 0.12028755848595167, 0.11365927937781947, 0.10662024701727164, 0.09946300773310411, 0.09200483163157923, 0.08509043094233185, 0.0787003048240085, 0.07216314679816019, 0.06630237318009935, 0.06071516140019383, 0.055433610220638405, 0.050675127736321955, 0.04626574859982013, 0.042060601422134906, 0.03825118170299484, 0.034896270236355435, 0.0317782006466288, 0.028862439780589583, 0.026140277000844588, 0.02372025175864092, 0.02148595156748632, 0.01948820555529896, 0.017642080105612665, 0.015970041185285198, 0.014449782132108666, 0.013037572485178648, 0.011800923201777, 0.010693638714788038, 0.009683249188192113, 0.008747545821517556, 0.007898805066586656, 0.007151831483696346, 0.0064594518628090705, 0.005825462874269118, 0.005252353747318675, 0.004730823214361745, 0.004259115219836669, 0.0038369482526186133, 0.0034536397849358027, 0.003108282299736691, 0.0027982416853967016, 0.0025307989734864693, 0.002283321085663684, 0.002058561722820388, 0.0018593679051505272, 0.0016737046837646205, 0.001507024335241976, 0.0013618334142362074, 0.0012293092399658701, 0.0011097698266762305, 0.0010023931412442531, 0.00090338082736391, 0.0008154667768593298, 0.0007346966784383765, 0.0006619210888882883, 0.0005995307088235296, 0.0005415231664290176, 0.0004875188132366778, 0.000439305402926929, 0.0003978726066300494, 0.0003582025719022925, 0.0003260233299880951, 0.0002969453649670346, 0.00026772637250888943, 0.00024234763971703563, 0.00021820133822095274, 0.00020239505924926607, 0.00018291753462097485, 0.00016573749020230654, 0.0001499577317334145, 0.000134988188088033, 0.00012149231127913918, 0.00011020577965690916, 0.00010054025002450061, 9.127416332718439e-05, 8.224985669922787e-05, 7.467934604116089e-05, 6.727296339427991e-05, 6.233246869328575e-05, 5.7093147679880074e-05, 5.267719884165272e-05, 4.749736972760095e-05, 4.291835261756573e-05, 3.873665129726105e-05, 3.529684275368873e-05, 3.179511093530671e-05, 2.8987125571953374e-05, 2.6133113040185467e-05, 2.9326545348181635e-05, 2.6393967318434794e-05, 2.608896357545074e-05, 2.508007757642786e-05, 2.3615688072449603e-05, 2.126042659853137e-05, 1.9395992506111016e-05, 1.746003286358018e-05, 1.609138945750796e-05, 1.677101593130305e-05, 1.617880315305064e-05, 1.6349620349620284e-05, 1.7286447113918108e-05, 1.7878281216562194e-05, 1.6102338321795163e-05, 1.5611717025299493e-05, 1.5989060496208756e-05, 1.4783189234679e-05, 1.3437535537666507e-05, 1.221782038451967e-05, 1.1401771384909415e-05, 1.0411150785163138e-05, 1.0743495795401901e-05, 1.0097846950086304e-05, 9.160572454679333e-06, 1.0100511265517518e-05, 9.419804688057044e-06, 9.246071097842275e-06, 8.799156122556869e-06, 7.938274166689345e-06, 7.186130614294801e-06, 9.482082866768245e-06, 8.637961679995396e-06, 1.134763699701047e-05, 1.0260691391351465e-05, 1.0864856167675404e-05, 9.962519266858733e-06, 1.1197667024501146e-05, 1.0507700766391771e-05, 9.659401434052261e-06, 8.857462593529771e-06, 1.134087324626974e-05, 1.0425834541031645e-05, 9.473986787395705e-06, 8.588538669207179e-06, 7.732819813872245e-06, 6.964383098247147e-06, 6.278481225603054e-06, 5.668158211881011e-06, 6.63682071584532e-06, 7.307694469359036e-06, 6.936573261677316e-06, 8.037808793247048e-06, 7.309234118426962e-06, 6.601776734729333e-06, 6.230900646300583e-06, 6.680939035872655e-06, 6.6093344693170054e-06, 7.082424747747433e-06, 8.679766235193692e-06, 1.0656319632621878e-05, 9.667925033551725e-06, 8.701235035676374e-06, 8.849418659731346e-06, 8.359113094390155e-06, 9.35819507096734e-06, 1.104404597851338e-05, 1.0371607881177423e-05, 9.334519047119113e-06, 1.0339749339047213e-05, 9.335748095660881e-06, 8.402190790246693e-06, 7.68887478955025e-06, 6.960232134051515e-06, 7.955639255558154e-06, 7.84815385642201e-06, 9.098396183452928e-06, 1.0510824852012642e-05, 9.489157750825664e-06, 1.2403989570672353e-05, 1.1443513719550894e-05, 1.2720826916202613e-05, 1.1762963728200353e-05, 1.5535056793410916e-05, 1.666443848156778e-05, 1.598634271135813e-05, 1.5136381107263015e-05, 1.3874011746648272e-05, 1.251589961876774e-05, 1.1489010672472478e-05, 1.0361608128793341e-05, 9.325590390369484e-06, 9.623433112710053e-06, 8.71950323519722e-06, 8.021875729527785e-06, 7.4274124961759514e-06, 9.961462961625103e-06, 9.3611740261017e-06, 8.62419994132417e-06, 9.012532989786977e-06, 8.112399688191248e-06, 7.4533531198036695e-06, 6.7089855001317805e-06, 7.4116780339998935e-06, 6.789671392776742e-06, 7.2117818532186025e-06, 6.493696117404376e-06, 5.84921967364176e-06, 7.5054382509829705e-06, 7.012287836676565e-06, 7.427474421020022e-06], "accuracy_test": 0.6361, "start": "2016-02-05 17:47:03.818000", "learning_rate_per_epoch": [0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705, 0.0013454032596200705], "accuracy_train_first": 0.5204, "accuracy_train_last": 0.9945411764705883, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.4841333333333333, 0.34119999999999995, 0.27359999999999995, 0.2393333333333333, 0.2241333333333333, 0.22426666666666661, 0.2169333333333333, 0.21706666666666663, 0.21066666666666667, 0.21599999999999997, 0.21253333333333335, 0.21133333333333337, 0.2082666666666667, 0.2094666666666667, 0.2094666666666667, 0.2208, 0.21106666666666662, 0.20106666666666662, 0.2174666666666667, 0.2042666666666667, 0.20706666666666662, 0.2102666666666667, 0.20120000000000005, 0.19973333333333332, 0.2082666666666667, 0.20346666666666668, 0.1909333333333333, 0.1917333333333333, 0.1956, 0.20146666666666668, 0.19346666666666668, 0.19613333333333338, 0.1904, 0.19346666666666668, 0.19186666666666663, 0.19146666666666667, 0.19866666666666666, 0.18853333333333333, 0.18466666666666665, 0.18466666666666665, 0.18866666666666665, 0.18879999999999997, 0.1822666666666667, 0.18600000000000005, 0.18879999999999997, 0.1889333333333333, 0.1917333333333333, 0.1936, 0.19066666666666665, 0.19440000000000002, 0.19653333333333334, 0.19333333333333336, 0.1842666666666667, 0.18693333333333328, 0.1877333333333333, 0.18479999999999996, 0.19079999999999997, 0.1896, 0.1842666666666667, 0.18493333333333328, 0.18453333333333333, 0.1837333333333333, 0.1857333333333333, 0.18386666666666662, 0.1856, 0.18546666666666667, 0.18146666666666667, 0.18266666666666664, 0.18813333333333337, 0.18453333333333333, 0.18146666666666667, 0.1850666666666667, 0.1797333333333333, 0.17920000000000003, 0.18253333333333333, 0.18066666666666664, 0.18520000000000003, 0.17613333333333336, 0.1864, 0.1802666666666667, 0.1864, 0.1842666666666667, 0.18359999999999999, 0.18066666666666664, 0.18733333333333335, 0.18679999999999997, 0.1830666666666667, 0.18133333333333335, 0.18293333333333328, 0.18813333333333337, 0.18079999999999996, 0.18000000000000005, 0.1844, 0.18213333333333337, 0.1822666666666667, 0.1810666666666667, 0.18359999999999999, 0.1810666666666667, 0.18359999999999999, 0.17493333333333339, 0.18213333333333337, 0.1770666666666667, 0.18586666666666662, 0.17866666666666664, 0.18146666666666667, 0.18000000000000005, 0.18133333333333335, 0.17946666666666666, 0.17626666666666668, 0.17733333333333334, 0.17600000000000005, 0.17466666666666664, 0.1744, 0.17933333333333334, 0.18253333333333333, 0.18400000000000005, 0.1777333333333333, 0.1784, 0.18066666666666664, 0.1817333333333333, 0.17853333333333332, 0.18359999999999999, 0.1822666666666667, 0.18120000000000003, 0.18493333333333328, 0.1789333333333334, 0.1777333333333333, 0.18266666666666664, 0.18013333333333337, 0.17986666666666662, 0.1862666666666667, 0.18213333333333337, 0.18746666666666667, 0.1810666666666667, 0.17746666666666666, 0.17986666666666662, 0.18613333333333337, 0.17946666666666666, 0.18293333333333328, 0.18293333333333328, 0.17559999999999998, 0.18266666666666664, 0.1822666666666667, 0.18053333333333332, 0.18146666666666667, 0.1810666666666667, 0.18093333333333328, 0.18079999999999996, 0.1770666666666667, 0.1769333333333334, 0.1784, 0.1757333333333333, 0.18066666666666664, 0.17933333333333334, 0.17800000000000005, 0.1830666666666667, 0.18253333333333333, 0.17666666666666664, 0.17479999999999996, 0.1737333333333333, 0.17786666666666662, 0.17866666666666664, 0.17533333333333334, 0.17626666666666668, 0.18266666666666664, 0.18400000000000005, 0.18133333333333335, 0.17933333333333334, 0.18400000000000005, 0.1804, 0.17986666666666662, 0.1810666666666667, 0.18066666666666664, 0.1844, 0.1777333333333333, 0.17546666666666666, 0.17466666666666664, 0.17866666666666664, 0.1857333333333333, 0.18159999999999998, 0.18520000000000003, 0.1824, 0.18813333333333337, 0.17600000000000005, 0.17759999999999998, 0.18346666666666667, 0.17920000000000003, 0.18013333333333337, 0.1790666666666667, 0.18000000000000005, 0.1804, 0.18413333333333337, 0.18000000000000005, 0.17933333333333334, 0.1790666666666667, 0.1744, 0.1777333333333333, 0.17813333333333337, 0.18320000000000003, 0.1797333333333333, 0.17853333333333332, 0.17959999999999998, 0.18359999999999999, 0.1789333333333334, 0.18346666666666667, 0.18013333333333337, 0.18053333333333332, 0.17533333333333334, 0.17813333333333337, 0.17613333333333336], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.014770339337300388, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "valid_ratio": 0.15, "learning_rate": 0.0013454032130299665, "optimization": "rmsprop", "nb_data_augmentation": 0, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 5.91689240195187e-07, "rotation_range": [0, 0], "momentum": 0.8601730085664686}, "accuracy_valid_max": 0.8262666666666667, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8238666666666666, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.5158666666666667, 0.6588, 0.7264, 0.7606666666666667, 0.7758666666666667, 0.7757333333333334, 0.7830666666666667, 0.7829333333333334, 0.7893333333333333, 0.784, 0.7874666666666666, 0.7886666666666666, 0.7917333333333333, 0.7905333333333333, 0.7905333333333333, 0.7792, 0.7889333333333334, 0.7989333333333334, 0.7825333333333333, 0.7957333333333333, 0.7929333333333334, 0.7897333333333333, 0.7988, 0.8002666666666667, 0.7917333333333333, 0.7965333333333333, 0.8090666666666667, 0.8082666666666667, 0.8044, 0.7985333333333333, 0.8065333333333333, 0.8038666666666666, 0.8096, 0.8065333333333333, 0.8081333333333334, 0.8085333333333333, 0.8013333333333333, 0.8114666666666667, 0.8153333333333334, 0.8153333333333334, 0.8113333333333334, 0.8112, 0.8177333333333333, 0.814, 0.8112, 0.8110666666666667, 0.8082666666666667, 0.8064, 0.8093333333333333, 0.8056, 0.8034666666666667, 0.8066666666666666, 0.8157333333333333, 0.8130666666666667, 0.8122666666666667, 0.8152, 0.8092, 0.8104, 0.8157333333333333, 0.8150666666666667, 0.8154666666666667, 0.8162666666666667, 0.8142666666666667, 0.8161333333333334, 0.8144, 0.8145333333333333, 0.8185333333333333, 0.8173333333333334, 0.8118666666666666, 0.8154666666666667, 0.8185333333333333, 0.8149333333333333, 0.8202666666666667, 0.8208, 0.8174666666666667, 0.8193333333333334, 0.8148, 0.8238666666666666, 0.8136, 0.8197333333333333, 0.8136, 0.8157333333333333, 0.8164, 0.8193333333333334, 0.8126666666666666, 0.8132, 0.8169333333333333, 0.8186666666666667, 0.8170666666666667, 0.8118666666666666, 0.8192, 0.82, 0.8156, 0.8178666666666666, 0.8177333333333333, 0.8189333333333333, 0.8164, 0.8189333333333333, 0.8164, 0.8250666666666666, 0.8178666666666666, 0.8229333333333333, 0.8141333333333334, 0.8213333333333334, 0.8185333333333333, 0.82, 0.8186666666666667, 0.8205333333333333, 0.8237333333333333, 0.8226666666666667, 0.824, 0.8253333333333334, 0.8256, 0.8206666666666667, 0.8174666666666667, 0.816, 0.8222666666666667, 0.8216, 0.8193333333333334, 0.8182666666666667, 0.8214666666666667, 0.8164, 0.8177333333333333, 0.8188, 0.8150666666666667, 0.8210666666666666, 0.8222666666666667, 0.8173333333333334, 0.8198666666666666, 0.8201333333333334, 0.8137333333333333, 0.8178666666666666, 0.8125333333333333, 0.8189333333333333, 0.8225333333333333, 0.8201333333333334, 0.8138666666666666, 0.8205333333333333, 0.8170666666666667, 0.8170666666666667, 0.8244, 0.8173333333333334, 0.8177333333333333, 0.8194666666666667, 0.8185333333333333, 0.8189333333333333, 0.8190666666666667, 0.8192, 0.8229333333333333, 0.8230666666666666, 0.8216, 0.8242666666666667, 0.8193333333333334, 0.8206666666666667, 0.822, 0.8169333333333333, 0.8174666666666667, 0.8233333333333334, 0.8252, 0.8262666666666667, 0.8221333333333334, 0.8213333333333334, 0.8246666666666667, 0.8237333333333333, 0.8173333333333334, 0.816, 0.8186666666666667, 0.8206666666666667, 0.816, 0.8196, 0.8201333333333334, 0.8189333333333333, 0.8193333333333334, 0.8156, 0.8222666666666667, 0.8245333333333333, 0.8253333333333334, 0.8213333333333334, 0.8142666666666667, 0.8184, 0.8148, 0.8176, 0.8118666666666666, 0.824, 0.8224, 0.8165333333333333, 0.8208, 0.8198666666666666, 0.8209333333333333, 0.82, 0.8196, 0.8158666666666666, 0.82, 0.8206666666666667, 0.8209333333333333, 0.8256, 0.8222666666666667, 0.8218666666666666, 0.8168, 0.8202666666666667, 0.8214666666666667, 0.8204, 0.8164, 0.8210666666666666, 0.8165333333333333, 0.8198666666666666, 0.8194666666666667, 0.8246666666666667, 0.8218666666666666, 0.8238666666666666], "seed": 304870032, "model": "residualv5", "loss_std": [0.31114649772644043, 0.199750617146492, 0.18580251932144165, 0.17923931777477264, 0.17216628789901733, 0.16658595204353333, 0.1633014976978302, 0.15323977172374725, 0.14337776601314545, 0.13292557001113892, 0.1274717003107071, 0.12271542102098465, 0.10906866192817688, 0.10622057318687439, 0.10138072073459625, 0.09727295488119125, 0.0916186273097992, 0.08890900015830994, 0.08298566937446594, 0.08070868253707886, 0.07790316641330719, 0.07765516638755798, 0.07434266805648804, 0.07629270851612091, 0.06856904923915863, 0.07171297073364258, 0.06883218884468079, 0.07001067698001862, 0.06557723879814148, 0.06348481774330139, 0.062463875859975815, 0.06084131821990013, 0.06166873499751091, 0.0609046034514904, 0.059095434844493866, 0.06025468930602074, 0.06210235133767128, 0.061717260628938675, 0.05419519171118736, 0.05290845409035683, 0.05509765446186066, 0.05421030893921852, 0.05443675071001053, 0.05882122367620468, 0.05635088309645653, 0.051311053335666656, 0.05066631734371185, 0.04747428745031357, 0.04858987405896187, 0.043397560715675354, 0.04868163913488388, 0.04563327133655548, 0.05033045634627342, 0.04629483073949814, 0.046185173094272614, 0.046773478388786316, 0.047732528299093246, 0.03989628329873085, 0.05012074112892151, 0.048181451857089996, 0.04236791655421257, 0.04154904559254646, 0.03921832889318466, 0.04147667437791824, 0.03970678523182869, 0.03875628858804703, 0.04548919200897217, 0.046917419880628586, 0.03985774517059326, 0.04190249368548393, 0.04011029750108719, 0.0384911373257637, 0.03963776305317879, 0.03854239359498024, 0.04008680209517479, 0.03869731351733208, 0.03760352358222008, 0.041552186012268066, 0.03515632078051567, 0.037342093884944916, 0.043910443782806396, 0.03829573839902878, 0.03723164647817612, 0.039317768067121506, 0.03803906962275505, 0.032491717487573624, 0.03607901930809021, 0.03627132251858711, 0.034821633249521255, 0.04212001711130142, 0.0352279357612133, 0.03379625454545021, 0.04037366062402725, 0.033092956990003586, 0.037297919392585754, 0.03653966635465622, 0.03348222002387047, 0.03650889918208122, 0.03450790047645569, 0.03557444363832474, 0.04079310595989227, 0.03681101277470589, 0.03485646843910217, 0.03345752879977226, 0.03588784486055374, 0.034429676830768585, 0.03517955169081688, 0.030021529644727707, 0.033553894609212875, 0.03277859836816788, 0.026492806151509285, 0.02961263619363308, 0.03135662153363228, 0.029549937695264816, 0.02911798283457756, 0.031315576285123825, 0.03032762184739113, 0.030000917613506317, 0.029450295493006706, 0.034358635544776917, 0.03486692160367966, 0.034083377569913864, 0.03208838775753975, 0.031527020037174225, 0.03538474068045616, 0.029607949778437614, 0.026970690116286278, 0.030942438170313835, 0.024101339280605316, 0.030400807037949562, 0.03246089443564415, 0.03533957526087761, 0.03297225013375282, 0.02989313192665577, 0.03648064658045769, 0.03150223568081856, 0.034385889768600464, 0.03292635455727577, 0.034136876463890076, 0.03252364695072174, 0.030808698385953903, 0.03233717009425163, 0.027233142405748367, 0.03199535608291626, 0.03128139302134514, 0.028343582525849342, 0.024179406464099884, 0.024597780779004097, 0.03166857361793518, 0.03378313034772873, 0.04418841376900673, 0.03268066421151161, 0.03263136371970177, 0.030872352421283722, 0.027705151587724686, 0.030934907495975494, 0.03326904773712158, 0.02953377552330494, 0.027596019208431244, 0.02283976785838604, 0.02299351617693901, 0.02727939747273922, 0.025232290849089622, 0.026853159070014954, 0.02076728455722332, 0.027532506734132767, 0.026852523908019066, 0.025362206622958183, 0.024761628359556198, 0.029069438576698303, 0.029877252876758575, 0.025392770767211914, 0.023254990577697754, 0.02501113899052143, 0.023519914597272873, 0.02678941749036312, 0.02752901054918766, 0.029482873156666756, 0.0350167490541935, 0.0352696068584919, 0.026034977287054062, 0.026727136224508286, 0.028952304273843765, 0.030679941177368164, 0.021754616871476173, 0.02790530025959015, 0.02829398773610592, 0.02352166548371315, 0.025448206812143326, 0.02477000467479229, 0.024472393095493317, 0.025360483676195145, 0.026689590886235237, 0.027515297755599022, 0.02529864013195038, 0.02484886720776558, 0.02218550257384777, 0.021275410428643227, 0.019617808982729912, 0.022788790985941887, 0.02582239918410778, 0.02482464723289013, 0.037159476429224014, 0.03257058188319206, 0.027011843398213387, 0.027983836829662323, 0.022334549576044083, 0.02366996742784977, 0.025744259357452393, 0.02596227638423443]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:42 2016", "state": "available"}], "summary": "98cd003abc01b7fa2dd6f1415a309688"}