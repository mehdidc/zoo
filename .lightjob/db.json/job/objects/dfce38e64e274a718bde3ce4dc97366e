{"content": {"hp_model": {"f0": 32, "f1": 32, "f2": 16, "f3": 64, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.6297330856323242, 1.242661714553833, 1.0396535396575928, 0.9051506519317627, 0.7996553182601929, 0.7193889617919922, 0.6561362743377686, 0.6016133427619934, 0.5555075407028198, 0.5157926082611084, 0.48098790645599365, 0.45317012071609497, 0.4249981939792633, 0.40057840943336487, 0.3697187602519989, 0.3377620577812195, 0.3218063414096832, 0.29678359627723694, 0.2734924852848053, 0.2509405016899109, 0.23288002610206604, 0.21652936935424805, 0.19736549258232117, 0.1909925490617752, 0.1785614937543869, 0.16091488301753998, 0.1573982983827591, 0.14551745355129242, 0.13472336530685425, 0.13688494265079498, 0.12482669949531555, 0.12040051817893982, 0.11534669995307922, 0.1075616329908371, 0.11182951927185059, 0.1032261997461319, 0.10263283550739288, 0.09195441007614136, 0.09345877170562744, 0.09659930318593979, 0.09113769978284836, 0.08798369765281677, 0.09028080105781555, 0.08328858762979507, 0.08259380608797073, 0.08577949553728104, 0.07805978506803513, 0.08585668355226517, 0.07942671328783035, 0.0774286612868309, 0.07182957977056503, 0.0825706273317337, 0.06715557724237442, 0.07734569162130356, 0.07939095795154572, 0.076690174639225, 0.07310732454061508, 0.07002782076597214, 0.06501119583845139, 0.07418928295373917, 0.07329924404621124, 0.06570316851139069, 0.07362289726734161, 0.06739126145839691, 0.06343872845172882, 0.07922640442848206, 0.05711554363369942, 0.07803693413734436, 0.06517139822244644, 0.06003798916935921, 0.06916947662830353, 0.06841256469488144, 0.0682692676782608, 0.05931856483221054, 0.06896927952766418, 0.06628245860338211, 0.06168228015303612, 0.06906543672084808, 0.061562106013298035, 0.06085154786705971, 0.07001350075006485, 0.06041411682963371, 0.06351891160011292, 0.06544899940490723, 0.07283693552017212, 0.06272374838590622, 0.05940362438559532, 0.06249205023050308, 0.061148177832365036, 0.062158577144145966, 0.047565072774887085, 0.03404908999800682, 0.03338766098022461, 0.03312857076525688, 0.03294770419597626, 0.03279780596494675, 0.032661788165569305, 0.03253055736422539, 0.03239810839295387, 0.032259877771139145, 0.03211195021867752, 0.031950585544109344, 0.03177196905016899, 0.031572096049785614, 0.03134668618440628, 0.03109114058315754, 0.030800500884652138, 0.030469419434666634, 0.030092131346464157, 0.029662495478987694, 0.029399147257208824, 0.029368478804826736, 0.029364975169301033, 0.02936469204723835, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805, 0.02936468832194805], "moving_avg_accuracy_train": [0.039774117647058814, 0.09589082352941174, 0.15097468235294115, 0.2035195670588235, 0.25571819858823525, 0.30547108461176464, 0.3523592702682352, 0.3959727550061176, 0.4358107736231529, 0.4710696962608376, 0.5043815501641656, 0.5360775127948079, 0.564483879162386, 0.5912919618343826, 0.6167368832980031, 0.6394631949682028, 0.6589098166478531, 0.6765529526301266, 0.6914905985435845, 0.7049603622186378, 0.7189913848203034, 0.7330851875147437, 0.7462919628809164, 0.7582674724751777, 0.7678477840511894, 0.7774630056460705, 0.7880131756696988, 0.7971365639850818, 0.8073923193512795, 0.8137213227102693, 0.8231703669098306, 0.8331498008070829, 0.8413971736675511, 0.847172750418443, 0.8558531224354222, 0.8638607513683506, 0.8707593821138685, 0.8777610909613052, 0.8816132171592923, 0.8884730719139513, 0.8943057647225562, 0.8984163647208888, 0.9023276694252705, 0.9047631377768611, 0.9095762357638809, 0.9102068474816105, 0.9145108686158023, 0.9176668405777515, 0.9207707447552704, 0.9235642585150374, 0.9268007738400043, 0.9290312846912979, 0.9314458032809917, 0.9319365170705396, 0.9337075712458386, 0.93711328470949, 0.9390043091797174, 0.9416709370852752, 0.9441861963179241, 0.9409369884508375, 0.9437491719586949, 0.9457036665275314, 0.948036829286543, 0.9501837345931828, 0.9506218317220998, 0.950865530902831, 0.9533719189890184, 0.9555500212077637, 0.9566891367340461, 0.958417870119465, 0.9593149066369303, 0.9610092983261784, 0.9619483684935606, 0.9625441198794986, 0.9639885314209605, 0.9643920312200409, 0.965058710450978, 0.9663951923470567, 0.9670568495829392, 0.96797469403641, 0.9685019305151219, 0.9693011492283156, 0.9695969166584252, 0.9702325191102297, 0.9697810319050891, 0.9709135169498743, 0.9719092240784163, 0.9717535957882216, 0.9728252950329288, 0.9728204125884594, 0.9754277830943194, 0.9778332400790052, 0.9800075631299282, 0.9819715126992884, 0.9837484790764184, 0.9853618664628941, 0.9868162680518988, 0.988125229482003, 0.9893032947690967, 0.9903659064686576, 0.9913222569982625, 0.9921829724749067, 0.9929599693450631, 0.9936592665282039, 0.9942886339930306, 0.9948550647113746, 0.9953648523578843, 0.995823661239743, 0.9962365892334157, 0.9966105773688977, 0.9969471666908315, 0.9972500970805719, 0.9975227344313382, 0.997768108047028, 0.9979889443011487, 0.9981876969298574, 0.9983665742956952, 0.9985275639249492, 0.9986724545912778, 0.9988028561909736, 0.9989202176306998, 0.9990258429264534, 0.9991209056926316, 0.999206462182192, 0.9992834630227964, 0.9993527637793402, 0.9994151344602298, 0.9994712680730303, 0.9995217883245509, 0.9995672565509193, 0.9996081779546508, 0.9996450072180093, 0.9996781535550319, 0.9997079852583522, 0.9997348337913405, 0.99975899747103, 0.9997807447827506, 0.9998003173632991, 0.9998179326857928, 0.999833786476037, 0.9998480548872569, 0.9998608964573548, 0.9998724538704429, 0.9998828555422221, 0.9998922170468234, 0.9999006424009647, 0.9999082252196917, 0.9999150497565461, 0.9999211918397151, 0.9999267197145671, 0.999931694801934, 0.9999361723805641, 0.9999402022013312, 0.9999438290400215, 0.999947093194843, 0.9999500309341822, 0.9999526748995875, 0.9999550544684523], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.040159999999999994, 0.09617066666666664, 0.14958026666666663, 0.2012755733333333, 0.2520413493333333, 0.2996372143999999, 0.34370015962666656, 0.3847301436639999, 0.42124379596426653, 0.45358608303450654, 0.4840274747310559, 0.5121313939246169, 0.5372115878654886, 0.5604237624122731, 0.5822880528377125, 0.6005525808872745, 0.615777322798547, 0.628986257185359, 0.6401542981334898, 0.6499922016534742, 0.6593396481547934, 0.6685790166726474, 0.6772011150053827, 0.6846676701715111, 0.6907075698210267, 0.6955301461722574, 0.7010837982216983, 0.7060020850661952, 0.7114418765595757, 0.7134576889036182, 0.7186852533465897, 0.7240833946785974, 0.7283017218774043, 0.7308982163563305, 0.735875061387364, 0.7403675552486275, 0.7440374663904314, 0.7476737197513883, 0.7497596811095828, 0.7535837129986245, 0.756825341698762, 0.7586228075288859, 0.7598005267759973, 0.7602071407650643, 0.7626530933552246, 0.7609477840197021, 0.7633063389510653, 0.7654290383892921, 0.766846134550363, 0.76789485442866, 0.7690520356524606, 0.7693468320872145, 0.7695854822118264, 0.7694936006573104, 0.7698775739249126, 0.7717431498657548, 0.7723288348791792, 0.7746692847245946, 0.7759356895854685, 0.7732354539602551, 0.7758185752308963, 0.7765833843744733, 0.7778717126036926, 0.7790978746766566, 0.7796014205423243, 0.7796012784880919, 0.7812544839726161, 0.7831423689086878, 0.7834547986844856, 0.7847359854827037, 0.7844757202677667, 0.7861348149076567, 0.786401333416891, 0.7867878667418686, 0.7877490800676819, 0.7876408387275804, 0.788663421521489, 0.7901170793693401, 0.7903587047657393, 0.7906161676224988, 0.7903278841935821, 0.7904417624408906, 0.7902909195301349, 0.7906751609104548, 0.7903676448194092, 0.7909308803374684, 0.7909177923037216, 0.7903060130733495, 0.7911554117660144, 0.7906132039227463, 0.792965216863805, 0.7951353618440912, 0.7971418256596821, 0.7990276430937139, 0.8007915454510092, 0.8023523909059082, 0.8037971518153173, 0.8050841033004522, 0.8063090263037404, 0.8073714570066997, 0.8083943113060297, 0.8093815468420933, 0.8102700588245506, 0.8110697196087622, 0.8118427476478859, 0.8125518062164305, 0.8132432922614541, 0.8139189630353086, 0.8144870667317778, 0.8150383600586001, 0.81549452405274, 0.8159050716474661, 0.8162745644827194, 0.8166071080344475, 0.8169063972310027, 0.8171757575079024, 0.8174181817571122, 0.817636363581401, 0.8178327272232608, 0.8180094545009347, 0.8181685090508413, 0.8183116581457572, 0.8184404923311814, 0.8185564430980632, 0.8186607987882568, 0.8187547189094311, 0.818839247018488, 0.8189153223166392, 0.8189837900849752, 0.8190454110764778, 0.81910086996883, 0.8191507829719471, 0.8191957046747524, 0.8192361342072771, 0.8192725207865494, 0.8193052687078946, 0.8193347418371051, 0.8193612676533946, 0.819385140888055, 0.8194066267992495, 0.8194259641193244, 0.819443367707392, 0.8194590309366527, 0.8194731278429874, 0.8194858150586888, 0.8194972335528199, 0.819507510197538, 0.8195167591777841, 0.8195250832600056, 0.819532574934005, 0.8195393174406045, 0.819545385696544, 0.8195508471268895, 0.8195557624142005, 0.8195601861727804, 0.8195641675555023, 0.8195677507999521, 0.819570975719957], "moving_var_accuracy_train": [0.014237823911418682, 0.04115580363205536, 0.06434830679486449, 0.08276216029416827, 0.09900821846664117, 0.11138554362900982, 0.12003350685350972, 0.1251493806269922, 0.12691805211027424, 0.12541497152937894, 0.12286059087073106, 0.11961623820740559, 0.11491690923854664, 0.10989327798362947, 0.10473094643987489, 0.09890621897506689, 0.09241913693032322, 0.08597874546289186, 0.07938907030552529, 0.07308307407612884, 0.06754659302575201, 0.06257965119268512, 0.05789145631356952, 0.05339302615259277, 0.04887976486637465, 0.044823860756605195, 0.04134322946869185, 0.037958032451002086, 0.035108853869083516, 0.03195847503383809, 0.029566187457021654, 0.027505870619506132, 0.025367455989451802, 0.023130925971755617, 0.02149597309975846, 0.019923474879929858, 0.018359447347403912, 0.01696471795372198, 0.015401796044556751, 0.014285134905396235, 0.01316280416345257, 0.011998597038223943, 0.010936422074816215, 0.00989616342215899, 0.009115040290036975, 0.008207115301280118, 0.007553125152464241, 0.006887454068439301, 0.006285416651884349, 0.005727108458829986, 0.005248672895985695, 0.004768582214306776, 0.004344193093055887, 0.003911940983959571, 0.0035489765815902097, 0.003298468881199659, 0.003000805755002685, 0.0027647233189827067, 0.002545189748151269, 0.0023856869392079746, 0.002218293630023965, 0.002030844708198067, 0.0018767530735186069, 0.0017305605877278502, 0.0015592318908043531, 0.0014038432053401194, 0.001319996715953351, 0.001230694207835741, 0.0011193030446921266, 0.0010342694122836718, 0.0009380845416783006, 0.0008701147562798091, 0.0007910399556652327, 0.0007151302375233335, 0.0006623941360809751, 0.0005976200312635991, 0.0005418581789099049, 0.0005037480157458286, 0.0004573133268514076, 0.0004191639401331706, 0.0003797493508602147, 0.00034752317073786414, 0.00031355815901850054, 0.00028583825740731, 0.00025908899793423013, 0.00024472279953076647, 0.0002291734137501538, 0.00020647405385751835, 0.00019616350191172134, 0.0001765473662649252, 0.00022007805823188735, 0.0002501462621552577, 0.00026768076250770824, 0.0002756265674558456, 0.0002764823962593152, 0.0002722613263629369, 0.00026407274956553796, 0.00025308589483848907, 0.0002402678457405393, 0.00022640335378287894, 0.0002119944754238698, 0.00019746250806709867, 0.00018314977448648419, 0.000169235945990973, 0.00015587728204391685, 0.00014317714766767846, 0.0001311983839017147, 0.00011997309582219452, 0.00010951037199160259, 9.981813892177373e-05, 9.085595637435477e-05, 8.25962621261736e-05, 7.500561603885222e-05, 6.804692833645673e-05, 6.168115336301771e-05, 5.5868561493483335e-05, 5.0569679352216575e-05, 4.574597036354099e-05, 4.13603130738892e-05, 3.737732296132914e-05, 3.37635540330076e-05, 3.048760895763405e-05, 2.7520180427491684e-05, 2.483404160089555e-05, 2.2403999605889946e-05, 2.020682299901895e-05, 1.8221151615628632e-05, 1.6427395296440143e-05, 1.4807626429119371e-05, 1.334547002268926e-05, 1.2025994071970616e-05, 1.0835602216529283e-05, 9.761930111798494e-06, 8.793746475325577e-06, 7.920859421305635e-06, 7.134028429920289e-06, 6.4248820970318856e-06, 5.785841660512632e-06, 5.2100501907403545e-06, 4.691307255652296e-06, 4.2240088181157065e-06, 3.8030920896073337e-06, 3.4239850448221896e-06, 3.0825602933221976e-06, 2.7750930039055816e-06, 2.498222582846662e-06, 2.248917816820623e-06, 2.0244452038680485e-06, 1.822340210152128e-06, 1.640381205740331e-06, 1.4765658486150643e-06, 1.3290897021470585e-06, 1.1963268870310883e-06, 1.0768125839579557e-06, 9.692272179224408e-07, 8.723821689420239e-07, 7.852068670254015e-07, 7.06737141454701e-07], "duration": 28294.497707, "accuracy_train": [0.3977411764705882, 0.6009411764705882, 0.6467294117647059, 0.6764235294117648, 0.7255058823529412, 0.7532470588235294, 0.7743529411764706, 0.7884941176470588, 0.7943529411764706, 0.7884, 0.8041882352941176, 0.8213411764705882, 0.8201411764705883, 0.832564705882353, 0.8457411764705882, 0.844, 0.8339294117647059, 0.8353411764705883, 0.8259294117647059, 0.8261882352941177, 0.8452705882352941, 0.8599294117647058, 0.8651529411764706, 0.8660470588235294, 0.8540705882352941, 0.864, 0.882964705882353, 0.8792470588235294, 0.8996941176470589, 0.8706823529411765, 0.9082117647058824, 0.9229647058823529, 0.9156235294117647, 0.8991529411764706, 0.9339764705882353, 0.9359294117647059, 0.9328470588235294, 0.9407764705882353, 0.9162823529411764, 0.9502117647058823, 0.9468, 0.9354117647058824, 0.9375294117647058, 0.9266823529411765, 0.9528941176470588, 0.9158823529411765, 0.9532470588235294, 0.9460705882352941, 0.9487058823529412, 0.9487058823529412, 0.9559294117647059, 0.9491058823529411, 0.9531764705882353, 0.9363529411764706, 0.9496470588235294, 0.967764705882353, 0.9560235294117647, 0.9656705882352942, 0.9668235294117647, 0.9116941176470589, 0.9690588235294118, 0.9632941176470589, 0.9690352941176471, 0.9695058823529412, 0.954564705882353, 0.9530588235294117, 0.9759294117647059, 0.9751529411764706, 0.9669411764705882, 0.9739764705882353, 0.9673882352941177, 0.9762588235294117, 0.9704, 0.9679058823529412, 0.9769882352941176, 0.9680235294117647, 0.9710588235294118, 0.9784235294117647, 0.9730117647058824, 0.9762352941176471, 0.9732470588235295, 0.9764941176470588, 0.9722588235294117, 0.9759529411764706, 0.9657176470588236, 0.9811058823529412, 0.9808705882352942, 0.9703529411764706, 0.9824705882352941, 0.9727764705882352, 0.9988941176470588, 0.9994823529411765, 0.9995764705882353, 0.9996470588235294, 0.9997411764705882, 0.9998823529411764, 0.9999058823529412, 0.9999058823529412, 0.9999058823529412, 0.9999294117647058, 0.9999294117647058, 0.9999294117647058, 0.9999529411764706, 0.9999529411764706, 0.9999529411764706, 0.9999529411764706, 0.9999529411764706, 0.9999529411764706, 0.9999529411764706, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352, 0.9999764705882352], "end": "2016-02-04 08:40:24.822000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0], "moving_var_accuracy_valid": [0.0145154304, 0.04129864038399999, 0.06284204469503998, 0.08060948280778238, 0.09574301064294373, 0.10655700692164842, 0.11337519450791762, 0.11718881136806032, 0.11746915146999723, 0.11513644811940185, 0.11196290826326635, 0.10787508990328362, 0.10274872606596087, 0.0973230988840783, 0.0918932137579421, 0.08570622924600706, 0.07922174121779009, 0.07286985062472702, 0.06670539180982644, 0.060905911739860485, 0.05560169337072967, 0.05080981740913511, 0.0463979008851558, 0.042259855811079765, 0.03836219371995775, 0.034735289531933014, 0.03153934803851605, 0.028603119144027203, 0.02600912921304757, 0.02344478778640036, 0.021346255877809105, 0.019473889658591165, 0.0176866492519378, 0.01597866037895587, 0.014603715219226598, 0.013324986207145359, 0.012113701816529453, 0.01102133268142214, 0.009958360526370853, 0.00909413345272944, 0.008279293517122496, 0.00748044211610441, 0.00674488110811912, 0.006071881011732152, 0.0055185370672187406, 0.004992856079865247, 0.004543635504157038, 0.00412982462988677, 0.003734915620665587, 0.0033713223790472467, 0.0030462417566049734, 0.0027423997253859687, 0.0024686723377851673, 0.0022218810839871933, 0.002001019894820573, 0.0018322412676579543, 0.0016521043833067097, 0.001536193294286184, 0.0013970079963023703, 0.0013229286485571836, 0.0012506884231910146, 0.0011308839781068046, 0.0010327336869319552, 0.0009429915791013398, 0.0008509744471406849, 0.0007658770026082311, 0.0007138870977139544, 0.0006745753737291779, 0.0006079963476395061, 0.0005619696693829108, 0.0005063823442835758, 0.00048051746507222386, 0.0004331050076068819, 0.0003911391789480576, 0.0003603406405727385, 0.00032441202220482744, 0.00030138190011792635, 0.0002902618003537056, 0.00026176106580800125, 0.00023618154333069757, 0.00021331135501611873, 0.00019209693381139727, 0.00017309202268378485, 0.00015711159336055728, 0.00014225152934076857, 0.00013088148464592122, 0.00011779487785097533, 0.00010938385450631052, 0.00010493877230758939, 9.709079918454357e-05, 0.00013716940314025813, 0.00016583822594538357, 0.00018548747674032505, 0.00019894549561677664, 0.00020705310978974548, 0.00020827394561748325, 0.00020623255782394658, 0.00020051549916737108, 0.0001939678765264933, 0.00018472991986115918, 0.00017567300613396467, 0.00016687741155357115, 0.0001572947522849465, 0.00014732039338470523, 0.00013796650518967877, 0.0001286947311533514, 0.00012012863459217792, 0.00011222455008473146, 0.00010390677136573534, 9.625141321895009e-05, 8.849904220300285e-05, 8.116608193052024e-05, 7.427819833520057e-05, 6.784564542584372e-05, 6.186724709183156e-05, 5.6333517011591915e-05, 5.122909095987695e-05, 4.653461163993907e-05, 4.2228178594545514e-05, 3.828645351115728e-05, 3.468549330865527e-05, 3.140136894816683e-05, 2.841061627935559e-05, 2.5690555874484456e-05, 2.3219511277718214e-05, 2.0976949052398986e-05, 1.894355915814569e-05, 1.7101290301230267e-05, 1.543335178881555e-05, 1.3924190929277724e-05, 1.2559453035018369e-05, 1.1325929502437944e-05, 1.0211498186640488e-05, 9.205059291877973e-06, 8.29646921105042e-06, 7.476474127117174e-06, 6.7366447025146095e-06, 6.069312802631564e-06, 5.467510904366826e-06, 4.9249146133488645e-06, 4.435788539543145e-06, 3.994935649487456e-06, 3.5976501152965986e-06, 3.23967360868083e-06, 2.9171549367929975e-06, 2.6266128811877004e-06, 2.3649020779088717e-06, 2.129181762838337e-06, 1.91688719965799e-06, 1.7257036063060163e-06, 1.5535423982326136e-06, 1.3985195719806835e-06, 1.258936059775394e-06, 1.1332598942420062e-06, 1.0201100315775692e-06, 9.18241691095221e-07, 8.265330787527798e-07, 7.43973371858837e-07], "accuracy_test": 0.813, "start": "2016-02-04 00:48:50.324000", "learning_rate_per_epoch": [0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.006376235280185938, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 0.000637623539660126, 6.376235251082107e-05, 6.376235432981048e-06, 6.376235432981048e-07, 6.376235717198142e-08, 6.376235539562458e-09, 6.376235650584761e-10, 6.37623565058476e-11, 6.376235477112413e-12, 6.376235260271979e-13, 6.376234989221435e-14, 6.376234904518141e-15, 6.376234798639022e-16, 6.376235063336818e-17, 6.376234897900696e-18, 6.376234897900696e-19, 6.376235156394637e-20, 6.3762353179533506e-21, 6.376235216979155e-22, 6.376235216979155e-23, 6.376235295865245e-24, 6.3762354930804715e-25, 6.376235739599504e-26, 6.376235585525109e-27, 6.376235489228612e-28, 6.376235248487369e-29, 6.376234947560815e-30, 6.376234947560815e-31, 6.376235182659685e-32, 6.376235476533273e-33, 6.3762353846977765e-34, 6.376235499492147e-35, 6.376235355999184e-36, 6.376235355999184e-37, 6.376235355999184e-38, 6.37623591651857e-39, 6.376230311324712e-40, 6.376188272370783e-41, 6.375908012677918e-42, 6.375908012677918e-43, 6.445972935894159e-44, 7.006492321624085e-45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_train_first": 0.3977411764705882, "accuracy_train_last": 0.9999764705882352, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.5984, 0.3997333333333334, 0.36973333333333336, 0.3334666666666667, 0.2910666666666667, 0.272, 0.25973333333333337, 0.246, 0.2501333333333333, 0.2553333333333333, 0.242, 0.23493333333333333, 0.23706666666666665, 0.2306666666666667, 0.22093333333333331, 0.23506666666666665, 0.24719999999999998, 0.2521333333333333, 0.2593333333333333, 0.2614666666666666, 0.2565333333333333, 0.24826666666666664, 0.24519999999999997, 0.24813333333333332, 0.25493333333333335, 0.26106666666666667, 0.24893333333333334, 0.24973333333333336, 0.23960000000000004, 0.26839999999999997, 0.23426666666666662, 0.2273333333333334, 0.23373333333333335, 0.24573333333333336, 0.21933333333333338, 0.21919999999999995, 0.22293333333333332, 0.21960000000000002, 0.2314666666666667, 0.21199999999999997, 0.21399999999999997, 0.22519999999999996, 0.22960000000000003, 0.2361333333333333, 0.21533333333333338, 0.25439999999999996, 0.2154666666666667, 0.2154666666666667, 0.22040000000000004, 0.22266666666666668, 0.22053333333333336, 0.22799999999999998, 0.22826666666666662, 0.23133333333333328, 0.22666666666666668, 0.2114666666666667, 0.22240000000000004, 0.2042666666666667, 0.21266666666666667, 0.25106666666666666, 0.2009333333333333, 0.21653333333333336, 0.21053333333333335, 0.20986666666666665, 0.21586666666666665, 0.22040000000000004, 0.20386666666666664, 0.19986666666666664, 0.21373333333333333, 0.20373333333333332, 0.21786666666666665, 0.1989333333333333, 0.21120000000000005, 0.20973333333333333, 0.2036, 0.21333333333333337, 0.2021333333333334, 0.19679999999999997, 0.2074666666666667, 0.20706666666666662, 0.21226666666666671, 0.20853333333333335, 0.21106666666666662, 0.20586666666666664, 0.21240000000000003, 0.20399999999999996, 0.20920000000000005, 0.21519999999999995, 0.20120000000000005, 0.21426666666666672, 0.18586666666666662, 0.18533333333333335, 0.18479999999999996, 0.18400000000000005, 0.18333333333333335, 0.18359999999999999, 0.18320000000000003, 0.18333333333333335, 0.18266666666666664, 0.1830666666666667, 0.1824, 0.1817333333333333, 0.1817333333333333, 0.1817333333333333, 0.18120000000000003, 0.1810666666666667, 0.18053333333333332, 0.18000000000000005, 0.1804, 0.18000000000000005, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804, 0.1804], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.04463642598418476, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "valid_ratio": 0.15, "learning_rate": 0.006376235427616876, "optimization": "adam", "nb_data_augmentation": 0, "learning_rate_decay_method": "discrete", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 8.591090759959737e-08, "rotation_range": [0, 0], "momentum": 0.7530784840962356}, "accuracy_valid_max": 0.82, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8196, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.4016, 0.6002666666666666, 0.6302666666666666, 0.6665333333333333, 0.7089333333333333, 0.728, 0.7402666666666666, 0.754, 0.7498666666666667, 0.7446666666666667, 0.758, 0.7650666666666667, 0.7629333333333334, 0.7693333333333333, 0.7790666666666667, 0.7649333333333334, 0.7528, 0.7478666666666667, 0.7406666666666667, 0.7385333333333334, 0.7434666666666667, 0.7517333333333334, 0.7548, 0.7518666666666667, 0.7450666666666667, 0.7389333333333333, 0.7510666666666667, 0.7502666666666666, 0.7604, 0.7316, 0.7657333333333334, 0.7726666666666666, 0.7662666666666667, 0.7542666666666666, 0.7806666666666666, 0.7808, 0.7770666666666667, 0.7804, 0.7685333333333333, 0.788, 0.786, 0.7748, 0.7704, 0.7638666666666667, 0.7846666666666666, 0.7456, 0.7845333333333333, 0.7845333333333333, 0.7796, 0.7773333333333333, 0.7794666666666666, 0.772, 0.7717333333333334, 0.7686666666666667, 0.7733333333333333, 0.7885333333333333, 0.7776, 0.7957333333333333, 0.7873333333333333, 0.7489333333333333, 0.7990666666666667, 0.7834666666666666, 0.7894666666666666, 0.7901333333333334, 0.7841333333333333, 0.7796, 0.7961333333333334, 0.8001333333333334, 0.7862666666666667, 0.7962666666666667, 0.7821333333333333, 0.8010666666666667, 0.7888, 0.7902666666666667, 0.7964, 0.7866666666666666, 0.7978666666666666, 0.8032, 0.7925333333333333, 0.7929333333333334, 0.7877333333333333, 0.7914666666666667, 0.7889333333333334, 0.7941333333333334, 0.7876, 0.796, 0.7908, 0.7848, 0.7988, 0.7857333333333333, 0.8141333333333334, 0.8146666666666667, 0.8152, 0.816, 0.8166666666666667, 0.8164, 0.8168, 0.8166666666666667, 0.8173333333333334, 0.8169333333333333, 0.8176, 0.8182666666666667, 0.8182666666666667, 0.8182666666666667, 0.8188, 0.8189333333333333, 0.8194666666666667, 0.82, 0.8196, 0.82, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196, 0.8196], "seed": 523120846, "model": "residualv3", "loss_std": [0.42435479164123535, 0.14832144975662231, 0.12170029431581497, 0.11493134498596191, 0.10525495558977127, 0.10072186589241028, 0.09645213186740875, 0.08776990324258804, 0.08480411767959595, 0.08222227543592453, 0.08075718581676483, 0.0781387984752655, 0.07766517996788025, 0.07608818262815475, 0.07171927392482758, 0.06977148354053497, 0.0693490207195282, 0.06575321406126022, 0.06607560068368912, 0.06060875207185745, 0.05875345692038536, 0.05953337997198105, 0.05490190163254738, 0.05053165182471275, 0.04840349778532982, 0.048820145428180695, 0.048150766640901566, 0.04336987063288689, 0.04355718195438385, 0.04927803575992584, 0.04463505372405052, 0.03910607472062111, 0.04131263494491577, 0.0408223420381546, 0.03842275217175484, 0.03758879005908966, 0.03980736434459686, 0.038320813328027725, 0.03776762634515762, 0.03992573171854019, 0.036700937896966934, 0.03621076047420502, 0.035757023841142654, 0.03411588445305824, 0.03413311392068863, 0.03269432485103607, 0.03139965981245041, 0.03904484957456589, 0.03396499902009964, 0.03014497272670269, 0.029693294316530228, 0.032713208347558975, 0.0279573742300272, 0.03376039117574692, 0.03448569029569626, 0.033280618488788605, 0.0316799096763134, 0.031098278239369392, 0.027551086619496346, 0.03203064203262329, 0.03312387317419052, 0.02562766708433628, 0.030732223764061928, 0.02690470777451992, 0.02604294754564762, 0.03364979475736618, 0.02407546527683735, 0.03236110880970955, 0.02585921622812748, 0.02478565089404583, 0.029774079099297523, 0.02702484279870987, 0.02814817801117897, 0.02334854006767273, 0.026860585436224937, 0.026908015832304955, 0.025049332529306412, 0.02732892520725727, 0.024404451251029968, 0.023675626143813133, 0.028580358251929283, 0.025726493448019028, 0.026459261775016785, 0.02465677633881569, 0.029480645433068275, 0.026154829189181328, 0.022180939093232155, 0.025338826701045036, 0.022959159687161446, 0.02399183064699173, 0.02232309989631176, 0.001417849794961512, 0.0005299262702465057, 0.00036892734351567924, 0.0002846374991349876, 0.00022949089179746807, 0.00018979852029588073, 0.00016006037185434252, 0.0001371577673126012, 0.000119437747343909, 0.00010601332178339362, 9.6412084531039e-05, 9.041127486852929e-05, 8.791206346359104e-05, 8.872843318386003e-05, 9.26767970668152e-05, 9.957262227544561e-05, 0.00010922671208390966, 0.00012145149958087131, 0.000136083661345765, 2.6886522391578183e-05, 1.876755413832143e-05, 1.8225584426545538e-05, 1.818094460759312e-05, 1.818066812120378e-05, 1.8180731785832904e-05, 1.8180731785832904e-05, 1.818069904402364e-05, 1.818067357817199e-05, 1.8180660845246166e-05, 1.8180666302214377e-05, 1.8180717233917676e-05, 1.8180680854129605e-05, 1.818073906179052e-05, 1.8180680854129605e-05, 1.8180689949076623e-05, 1.8180700863013044e-05, 1.818067357817199e-05, 1.818071905290708e-05, 1.818069904402364e-05, 1.8180695406044833e-05, 1.8180684492108412e-05, 1.818068813008722e-05, 1.8180702682002448e-05, 1.8180689949076623e-05, 1.8180706319981255e-05, 1.8180737242801115e-05, 1.818067357817199e-05, 1.818071359593887e-05, 1.818071905290708e-05, 1.818072450987529e-05, 1.8180689949076623e-05, 1.8180709957960062e-05, 1.8180733604822308e-05, 1.8180684492108412e-05, 1.8180695406044833e-05, 1.8180695406044833e-05, 1.818062264646869e-05, 1.8180695406044833e-05, 1.8180680854129605e-05, 1.818073906179052e-05, 1.8180666302214377e-05, 1.8180613551521674e-05, 1.8180720871896483e-05, 1.8180728147854097e-05, 1.8180737242801115e-05, 1.8180666302214377e-05, 1.818071905290708e-05]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:36 2016", "state": "available"}], "summary": "c63365e3bec2ddb094154a467f2804a2"}