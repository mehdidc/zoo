{"content": {"hp_model": {"f0": 16, "f1": 64, "f2": 64, "f3": 32, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.4966719150543213, 1.1008000373840332, 0.9026719927787781, 0.7845712900161743, 0.6988773941993713, 0.634428858757019, 0.5817781686782837, 0.5386378765106201, 0.5006102919578552, 0.46441197395324707, 0.4354919195175171, 0.40746834874153137, 0.3806001543998718, 0.35769417881965637, 0.33872219920158386, 0.3183690309524536, 0.30210041999816895, 0.28472134470939636, 0.27089664340019226, 0.25792253017425537, 0.24506734311580658, 0.2367759346961975, 0.2281290590763092, 0.2156083732843399, 0.20766998827457428, 0.20027610659599304, 0.19715958833694458, 0.18922358751296997, 0.1827806532382965, 0.17985869944095612, 0.17290960252285004, 0.16973403096199036, 0.1678638607263565, 0.1633150726556778, 0.16283881664276123, 0.15824389457702637, 0.15644390881061554, 0.1539028286933899, 0.15320664644241333, 0.15017105638980865, 0.14973896741867065, 0.146571084856987, 0.14597226679325104, 0.14329804480075836, 0.14376850426197052, 0.14273525774478912, 0.1426944136619568, 0.14203990995883942, 0.14055535197257996, 0.13828080892562866, 0.13938681781291962, 0.13760854303836823, 0.13942576944828033, 0.13916105031967163, 0.13784117996692657, 0.13776639103889465, 0.13643157482147217, 0.13480634987354279, 0.13591642677783966, 0.13543497025966644, 0.13389942049980164, 0.1349039524793625, 0.13384245336055756, 0.13538086414337158, 0.13393335044384003, 0.13610218465328217, 0.13303855061531067, 0.13428106904029846, 0.1346006989479065, 0.13540711998939514, 0.13324429094791412, 0.13443276286125183, 0.13412559032440186, 0.1342162936925888, 0.13449224829673767, 0.13337861001491547, 0.13399799168109894, 0.13428303599357605, 0.13348296284675598, 0.13400180637836456, 0.13303296267986298, 0.13294315338134766, 0.1333654671907425, 0.13334041833877563, 0.13361729681491852], "moving_avg_accuracy_train": [0.05919783808024178, 0.1245084473196982, 0.1879953044611134, 0.2485972266382025, 0.3053543908272338, 0.35842569734367064, 0.40702478187517654, 0.4524447521522676, 0.49453638098258346, 0.5335717963000228, 0.5699219759642712, 0.6035252724096952, 0.6343238776784156, 0.6628099215274068, 0.6891657598760043, 0.7137042504777819, 0.7362375736419823, 0.7572034833885721, 0.7764005399961896, 0.79413136705854, 0.8105192278955985, 0.8254403997096746, 0.8391554115970958, 0.8517383405255184, 0.8631885706456317, 0.8736728502608858, 0.8833737688789002, 0.8923859386410655, 0.9005735492400911, 0.9081284467327948, 0.9149813328988472, 0.921379156229256, 0.9270883330528051, 0.9322801066654371, 0.9370712855060916, 0.9414438363805471, 0.9453954082092236, 0.949009915526452, 0.9523606644107762, 0.9553506896721256, 0.9581185144156918, 0.9606118457848923, 0.962927923630268, 0.9649612404172966, 0.9669051578172889, 0.9685988799058536, 0.9700930028510379, 0.9715540069909987, 0.972827058038392, 0.9740402332965222, 0.9750995389455059, 0.97605988947602, 0.9769242049534825, 0.9777229791736659, 0.9784535017158785, 0.9791668116241172, 0.9797831778558085, 0.9803239926202922, 0.9808478922404612, 0.9813217630962416, 0.9817156947831107, 0.9820678721036645, 0.9824011077338296, 0.9827103564450351, 0.9829607784994058, 0.983246612217387, 0.9835015013659417, 0.9837285764508314, 0.9839329440272323, 0.9840982736555168, 0.9842470703209729, 0.9843530855341691, 0.9844857016069981, 0.9845911412285058, 0.9847046380783389, 0.9848230612848553, 0.984892403740949, 0.9849641485954901, 0.9850380195598152, 0.9851067925276985, 0.9851826751404695, 0.9852555837407637, 0.9852723733560284, 0.9853107715466806, 0.9853569556623152], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05892789909638552, 0.1228622693900602, 0.184776555440512, 0.24327967455760535, 0.29732511283414903, 0.3480067875917733, 0.393843992398108, 0.43670174536085743, 0.47548124255858193, 0.5110074076476032, 0.5437317621859302, 0.573643430423286, 0.6010553016128851, 0.6255743537652261, 0.6481003674192004, 0.6690126633674159, 0.6880605157712617, 0.7053165347419518, 0.7208490108328921, 0.735390792260898, 0.7484875140513744, 0.7604109000238725, 0.7709425168644822, 0.7809642584479888, 0.7900295654721659, 0.7982026078424944, 0.806040597246498, 0.8127457842744837, 0.8189289959919902, 0.8247797957997942, 0.8300190425469985, 0.834723187096892, 0.8389538286658172, 0.8426240402081211, 0.846325062156812, 0.8494209597909049, 0.8522550662779288, 0.8547834070710697, 0.8568238916651676, 0.8587701910811056, 0.8603468440833114, 0.8618676060699351, 0.8633451256304867, 0.8645406158912332, 0.8656765627734955, 0.8667508316185104, 0.8678387143828642, 0.8688879625323037, 0.8696105002869801, 0.8704988949118965, 0.871137699650752, 0.8715620215060835, 0.8721056911081106, 0.8726570584148448, 0.8731400524509959, 0.8735238599412126, 0.8738103105434769, 0.8740569385629244, 0.8743521459679272, 0.8745669454901104, 0.8747490875374848, 0.8749363999339623, 0.8751304246619517, 0.8752918103772324, 0.8754625010921446, 0.8756527438293157, 0.8757140990115196, 0.8758303538317532, 0.8758607114738037, 0.8758992108742396, 0.8759735699543608, 0.8759173933053103, 0.8759390470000051, 0.8759717718651402, 0.8760235792889424, 0.8760091708141143, 0.8760826819141788, 0.8761498714128965, 0.8761981349304923, 0.8762537791275785, 0.8762295872087966, 0.8763309143030524, 0.8763488665003828, 0.8763395799068204, 0.8762946008788642], "moving_var_accuracy_train": [0.03153945630037072, 0.0667747917833944, 0.0963725418723051, 0.11978862442909627, 0.13680214316721262, 0.14847100102874566, 0.15488074008157524, 0.15795942937316423, 0.15810883339414952, 0.1560118228957794, 0.15230266066080966, 0.14723502838272018, 0.14104851232293425, 0.1342467533381407, 0.12707374993984324, 0.11978561263498065, 0.1123768072468832, 0.10509525086571425, 0.09790246862070746, 0.0909416618134715, 0.08426455347745752, 0.07784187044445841, 0.07175059735966154, 0.066000508527455, 0.06058042760294146, 0.05551166591410481, 0.050807469720994376, 0.046457695583293726, 0.042415258730855845, 0.0386874211428976, 0.03524133746785169, 0.03208559301137063, 0.029170386010256517, 0.026495938028434265, 0.02405294277773906, 0.021819721310312463, 0.019778283458535932, 0.017918037080999007, 0.016227281035671306, 0.014685015191675747, 0.013285461356808055, 0.012012865532977002, 0.010859856928951861, 0.009811080630464385, 0.008863981901139887, 0.008003401961645522, 0.007223153395858907, 0.00652004885414586, 0.005882629899454697, 0.00530761305737168, 0.004786950907756234, 0.004316556275253737, 0.0038916240189295964, 0.003508203979330102, 0.003162186550059218, 0.0028505471942800193, 0.002568911640836141, 0.00231465280223788, 0.002085657759322211, 0.0018791129656816122, 0.0016925983086787263, 0.001524454737596866, 0.0013730086777040832, 0.001236568522822115, 0.0011134760713877403, 0.0010028637724779808, 0.0009031621115326415, 0.0008133099682269767, 0.0007323548663608345, 0.0006593653846986493, 0.000593628110257642, 0.000534366452260739, 0.0004810880902396183, 0.0004330793388397096, 0.00038988733877003693, 0.0003510248213956079, 0.00031596561464200106, 0.0002844153790951791, 0.0002560229534599941, 0.00023046322560399814, 0.00020746872658188682, 0.0001867696948996698, 0.00016809526243032947, 0.00015129900597670484, 0.00013618830213186695], "duration": 103453.419539, "accuracy_train": [0.5919783808024179, 0.7123039304748062, 0.7593770187338501, 0.7940145262320044, 0.8161688685285161, 0.8360674559916021, 0.8444165426587301, 0.8612244846460871, 0.8733610404554264, 0.8848905341569768, 0.8970735929425065, 0.9059549404185124, 0.9115113250968992, 0.9191843161683279, 0.9263683050133813, 0.9345506658937799, 0.939037482119786, 0.9458966711078812, 0.9491740494647471, 0.9537088106196937, 0.9580099754291252, 0.9597309460363603, 0.9625905185838871, 0.9649847008813216, 0.9662406417266519, 0.9680313667981728, 0.97068203644103, 0.9734954665005537, 0.9742620446313216, 0.9761225241671282, 0.9766573083933187, 0.9789595662029347, 0.9784709244647471, 0.9790060691791252, 0.9801918950719823, 0.980796794250646, 0.9809595546673128, 0.9815404813815062, 0.9825174043696937, 0.982260917024271, 0.9830289371077889, 0.9830518281076966, 0.983772624238649, 0.9832610915005537, 0.9844004144172205, 0.9838423787029347, 0.9835401093576966, 0.984703044250646, 0.9842845174649317, 0.9849588106196937, 0.9846332897863603, 0.984703044250646, 0.984703044250646, 0.9849119471553157, 0.9850282045957919, 0.9855866007982651, 0.98533047394103, 0.985191325500646, 0.9855629888219823, 0.9855866007982651, 0.9852610799649317, 0.985237467988649, 0.9854002284053157, 0.9854935948458842, 0.9852145769887413, 0.9858191156792175, 0.9857955037029347, 0.9857722522148394, 0.9857722522148394, 0.9855862403100776, 0.9855862403100776, 0.9853072224529347, 0.9856792462624585, 0.9855400978220746, 0.9857261097268365, 0.9858888701435032, 0.9855164858457919, 0.9856098522863603, 0.9857028582387413, 0.985725749238649, 0.985865618655408, 0.985911761143411, 0.985423479893411, 0.9856563552625508, 0.9857726127030271], "end": "2016-02-01 20:29:29.586000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0], "moving_var_accuracy_valid": [0.031252475627224156, 0.06491566140814016, 0.09292450462156068, 0.11443558867726396, 0.1292802143960708, 0.1394698823626022, 0.14443233822646284, 0.14652018730496108, 0.14540281320063989, 0.14222150753396748, 0.13763730720012185, 0.1319259475507844, 0.12549604893474253, 0.11835709930731125, 0.1110881809968315, 0.1039152799935801, 0.09678913812501033, 0.08979015602896065, 0.0829824607477053, 0.07658738533683386, 0.07047236389806474, 0.06470463170570075, 0.0592324031146274, 0.054213080542463925, 0.04953139061120087, 0.045179439144365466, 0.041214401931004375, 0.037497597535626356, 0.034091926746355306, 0.03099082079723877, 0.028138786075817712, 0.025524068251752578, 0.023132746379339784, 0.020940705816293148, 0.01896991330584606, 0.017159183214708496, 0.015515554329455769, 0.014021531461006534, 0.012656850511314635, 0.0114252581929315, 0.010305104885842629, 0.009295408850438003, 0.008385515541860518, 0.007559826760346324, 0.006815457462185583, 0.006144298197929352, 0.005540519778317219, 0.0049963760955974166, 0.004501437033300068, 0.0040583965350562854, 0.003656229525000116, 0.0032922270138323116, 0.002965664502174596, 0.002671834105119554, 0.002406750243758216, 0.0021674009930883124, 0.0019513993793073194, 0.0017568068697963767, 0.0015819105095244551, 0.0014241347080845808, 0.0012820198188049187, 0.0011541336103292937, 0.0010390590596520062, 0.0009353875618286757, 0.0008421110235272237, 0.0007582256518659184, 0.0006824369668047761, 0.0006143149067733464, 0.0005528917103738896, 0.000497615879171006, 0.00044790405470907375, 0.0004031420515812533, 0.00036283206636557346, 0.0003265584979801991, 0.00029392680426462844, 0.0002645359922754874, 0.00023813102798443287, 0.00021435855504463097, 0.00019294366384434443, 0.0001736771639499344, 0.00015631471479535011, 0.00014077564793608816, 0.00012670098367498022, 0.00011403166147486213, 0.00010264670334397882], "accuracy_test": 0.8445651307397959, "start": "2016-01-31 15:45:16.167000", "learning_rate_per_epoch": [0.004097789525985718, 0.003689933568239212, 0.0033226716332137585, 0.002991963643580675, 0.002694171154871583, 0.002426018239930272, 0.002184554934501648, 0.00196712464094162, 0.001771335257217288, 0.0015950329834595323, 0.0014362781075760722, 0.001293324283324182, 0.0011645987397059798, 0.0010486854007467628, 0.0009443089365959167, 0.0008503211429342628, 0.0007656880188733339, 0.0006894785328768194, 0.0006208542035892606, 0.0005590601358562708, 0.0005034164641983807, 0.00045331104774959385, 0.0004081926599610597, 0.0003675649350043386, 0.0003309809253551066, 0.00029803815414197743, 0.00026837419136427343, 0.00024166271032299846, 0.00021760983509011567, 0.00019595096819102764, 0.00017644782201386988, 0.00015888584312051535, 0.00014307181118056178, 0.0001288317725993693, 0.00011600904690567404, 0.00010446258238516748, 9.406534081790596e-05, 8.470294415019453e-05, 7.627239392604679e-05, 6.868094351375476e-05, 6.184507947182283e-05, 5.5689593864372e-05, 5.014676571590826e-05, 4.515561886364594e-05, 4.066124529344961e-05, 3.6614201235352084e-05, 3.2969961466733366e-05, 2.968843728012871e-05, 2.6733525373856537e-05, 2.4072716769296676e-05, 2.167674210795667e-05, 1.9519240595400333e-05, 1.7576476238900796e-05, 1.5827075912966393e-05, 1.4251795619202312e-05, 1.2833304026571568e-05, 1.1555996024981141e-05, 1.0405819011793938e-05, 9.370120096718892e-06, 8.437505130132195e-06, 7.597714102303144e-06, 6.841507911303779e-06, 6.160567409096984e-06, 5.547401542571606e-06, 4.995264589524595e-06, 4.49808203484281e-06, 4.050384632137138e-06, 3.6472467854764545e-06, 3.284233571321238e-06, 2.9573513984360034e-06, 2.6630038973962655e-06, 2.3979530396900373e-06, 2.1592829853034345e-06, 1.944368023032439e-06, 1.7508435803392786e-06, 1.5765807575007784e-06, 1.419662453372439e-06, 1.2783623333234573e-06, 1.1511259572216659e-06, 1.0365534990341985e-06, 9.333845696346543e-07, 8.404841196352208e-07, 7.568301043647807e-07, 6.815022288719774e-07, 6.136717729532393e-07], "accuracy_train_first": 0.5919783808024179, "accuracy_train_last": 0.9857726127030271, "batch_size_eval": 1024, "accuracy_train_std": [0.018907279994255004, 0.01847513582191193, 0.01729350681166947, 0.01920580181629688, 0.018879292406711136, 0.020416266593991105, 0.019575114070474926, 0.018442349254740247, 0.01645070210375687, 0.01797066078423061, 0.01689717951901538, 0.016359063753153307, 0.01616671745622116, 0.014439068878309445, 0.014368064315047937, 0.012928880944463022, 0.013058404016256022, 0.012396601765417703, 0.012006282379320237, 0.010806865698700189, 0.009832564349069541, 0.00903812568229336, 0.009212723620052748, 0.008246030484173215, 0.0085958913858577, 0.007771682552389541, 0.006928872917137575, 0.00659238860774282, 0.006378743320954731, 0.005964328714343715, 0.006150130199193036, 0.004998148417318226, 0.005399088460349311, 0.005181253181729158, 0.00538296300003957, 0.0046016887165443564, 0.005122700316283007, 0.004512844197507794, 0.003872617521048555, 0.004472901321537028, 0.004106459301357783, 0.004231720705094945, 0.003324592688907422, 0.004093882637464462, 0.0040593944994158455, 0.003645436618088147, 0.0036354434623749494, 0.003720795849515069, 0.003877326553111352, 0.003586333003244989, 0.0031192829199420706, 0.0038937514779018587, 0.0036468294450846504, 0.0037673389267099686, 0.003986691313749497, 0.0037995683946064826, 0.003658766477048582, 0.004181657059061828, 0.004042224376323482, 0.0039576347327431325, 0.0037997845774603344, 0.004068527214041258, 0.003710883927500945, 0.0034141148066715236, 0.00391032391049606, 0.0038788373357501976, 0.003748703944067213, 0.0037301393400723565, 0.003656361954747272, 0.004077301832227658, 0.003691494019202825, 0.0038194890996440197, 0.003647238235166164, 0.0038555330349315073, 0.003812260433464242, 0.004039179483270886, 0.0036921938636836006, 0.003716473197393546, 0.0038998328105929467, 0.003605167028133388, 0.003783984061991155, 0.003925807823766235, 0.0036951756555724095, 0.003725159612412783, 0.003843020991399201], "accuracy_test_std": 0.010235098778074802, "error_valid": [0.4107210090361446, 0.30172839796686746, 0.25799487010542166, 0.2301922533885542, 0.21626594267695776, 0.1958581395896084, 0.19362116434487953, 0.17757847797439763, 0.17550328266189763, 0.16925710655120485, 0.1617490469691265, 0.15715155544051207, 0.15223785768072284, 0.15375417686370485, 0.14916550969503017, 0.1427766730986446, 0.1405088125941265, 0.13937929452183728, 0.1393587043486446, 0.13373317488704817, 0.13364198983433728, 0.1322786262236446, 0.13427293157003017, 0.12884006730045183, 0.12838267131024095, 0.12824001082454817, 0.12341749811746983, 0.1269075324736446, 0.12542209855045183, 0.12256300592996983, 0.12282773672816272, 0.12293951195406627, 0.12297039721385539, 0.12434405591114461, 0.12036574030496983, 0.12271596150225905, 0.12223797533885539, 0.12246152579066272, 0.12481174698795183, 0.12371311417545183, 0.12546327889683728, 0.12444553605045183, 0.12335719832454817, 0.12469997176204817, 0.12409991528614461, 0.12358074877635539, 0.12237034073795183, 0.12166880412274095, 0.12388665992093373, 0.12150555346385539, 0.12311305769954817, 0.12461908179593373, 0.12300128247364461, 0.12238063582454817, 0.12251300122364461, 0.12302187264683728, 0.12361163403614461, 0.12372340926204817, 0.12299098738704817, 0.12349985881024095, 0.12361163403614461, 0.12337778849774095, 0.12312335278614461, 0.12325571818524095, 0.12300128247364461, 0.12263507153614461, 0.12373370434864461, 0.12312335278614461, 0.12386606974774095, 0.12375429452183728, 0.12335719832454817, 0.12458819653614461, 0.12386606974774095, 0.12373370434864461, 0.12351015389683728, 0.12412050545933728, 0.12325571818524095, 0.12324542309864461, 0.12336749341114461, 0.12324542309864461, 0.12398814006024095, 0.12275714184864461, 0.12348956372364461, 0.12374399943524095, 0.12411021037274095], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.09953075004434234, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.00455072641954689, "optimization": "nesterov_momentum", "nb_data_augmentation": 2, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 6.361187406545022e-08, "rotation_range": [0, 0], "momentum": 0.8968734285951636}, "accuracy_valid_max": 0.8796342596950302, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.875889789627259, "accuracy_valid_std": [0.018916158537182544, 0.012554142038206, 0.013157754254359312, 0.0138761768581905, 0.009136467331812406, 0.017363023872522095, 0.010198852594471218, 0.01161586542641342, 0.01199676403633248, 0.01457391778032783, 0.01676653668090689, 0.01372552585160385, 0.015562306322589429, 0.01323640321306068, 0.015002481668900738, 0.011797422943994947, 0.011826463300857336, 0.010248515438217663, 0.011934982159408074, 0.010577760173903723, 0.011850462333202605, 0.009147878070479407, 0.01207674108105963, 0.010538727560637251, 0.010389442952957198, 0.010947290912781784, 0.010966044085915318, 0.011758767005860362, 0.009654418756467342, 0.011539114683265125, 0.010183634122322009, 0.010219122641444145, 0.008420901538944911, 0.00937827532012756, 0.009926744608470648, 0.0075541318834060804, 0.009426545607405738, 0.009357187414623009, 0.009753905313167562, 0.00938901565125841, 0.009554202489325253, 0.007586446477372691, 0.008058409571601947, 0.00821142715582583, 0.008779620758052884, 0.008799280645353508, 0.008187780326820493, 0.008757605972082477, 0.009588500653129002, 0.00760348100826358, 0.007716622183338324, 0.009369555138227596, 0.007985250890571475, 0.008270736848441186, 0.00890038850137763, 0.010022925121412304, 0.007301682551515689, 0.007679435537383769, 0.007246665892762757, 0.008573328787646122, 0.008062076559986591, 0.007645788207731479, 0.0076261146728312254, 0.007192290044211009, 0.0076497727446727575, 0.00823219615323068, 0.00729938323335656, 0.007962589638013886, 0.0071568694839924795, 0.00960884052297544, 0.0072319969670418885, 0.008950223284674054, 0.008539137632638612, 0.008045190326168914, 0.009140882081819965, 0.008053290387395004, 0.00793313993938278, 0.00729633275254685, 0.00901039842971619, 0.00786254033271335, 0.007894983435025241, 0.007889984391000296, 0.007730177222558676, 0.009149404124623683, 0.009055054532856866], "accuracy_valid": [0.5892789909638554, 0.6982716020331325, 0.7420051298945783, 0.7698077466114458, 0.7837340573230422, 0.8041418604103916, 0.8063788356551205, 0.8224215220256024, 0.8244967173381024, 0.8307428934487951, 0.8382509530308735, 0.8428484445594879, 0.8477621423192772, 0.8462458231362951, 0.8508344903049698, 0.8572233269013554, 0.8594911874058735, 0.8606207054781627, 0.8606412956513554, 0.8662668251129518, 0.8663580101656627, 0.8677213737763554, 0.8657270684299698, 0.8711599326995482, 0.871617328689759, 0.8717599891754518, 0.8765825018825302, 0.8730924675263554, 0.8745779014495482, 0.8774369940700302, 0.8771722632718373, 0.8770604880459337, 0.8770296027861446, 0.8756559440888554, 0.8796342596950302, 0.877284038497741, 0.8777620246611446, 0.8775384742093373, 0.8751882530120482, 0.8762868858245482, 0.8745367211031627, 0.8755544639495482, 0.8766428016754518, 0.8753000282379518, 0.8759000847138554, 0.8764192512236446, 0.8776296592620482, 0.878331195877259, 0.8761133400790663, 0.8784944465361446, 0.8768869423004518, 0.8753809182040663, 0.8769987175263554, 0.8776193641754518, 0.8774869987763554, 0.8769781273531627, 0.8763883659638554, 0.8762765907379518, 0.8770090126129518, 0.876500141189759, 0.8763883659638554, 0.876622211502259, 0.8768766472138554, 0.876744281814759, 0.8769987175263554, 0.8773649284638554, 0.8762662956513554, 0.8768766472138554, 0.876133930252259, 0.8762457054781627, 0.8766428016754518, 0.8754118034638554, 0.876133930252259, 0.8762662956513554, 0.8764898461031627, 0.8758794945406627, 0.876744281814759, 0.8767545769013554, 0.8766325065888554, 0.8767545769013554, 0.876011859939759, 0.8772428581513554, 0.8765104362763554, 0.876256000564759, 0.875889789627259], "seed": 451459027, "model": "residualv3", "loss_std": [0.30749696493148804, 0.2607802450656891, 0.25244611501693726, 0.24518424272537231, 0.23642444610595703, 0.2283756136894226, 0.22014480829238892, 0.21286948025226593, 0.20628683269023895, 0.19861528277397156, 0.19375969469547272, 0.1839340776205063, 0.17636629939079285, 0.1710430383682251, 0.16446778178215027, 0.15855681896209717, 0.15747304260730743, 0.1491852104663849, 0.14398497343063354, 0.1395825445652008, 0.1341136395931244, 0.12986700236797333, 0.12649714946746826, 0.12093329429626465, 0.11911898851394653, 0.11244362592697144, 0.11504015326499939, 0.11053245514631271, 0.10831330716609955, 0.10915712267160416, 0.10329343378543854, 0.10317215323448181, 0.10263362526893616, 0.09885969012975693, 0.09816958755254745, 0.09726272523403168, 0.09683965146541595, 0.0927918329834938, 0.09381517767906189, 0.09153225272893906, 0.09189559519290924, 0.09102239459753036, 0.08986891806125641, 0.08817869424819946, 0.0898950845003128, 0.0890713781118393, 0.08889533579349518, 0.09000743180513382, 0.0873241126537323, 0.08610935509204865, 0.08956543356180191, 0.08623797446489334, 0.08794273436069489, 0.08736766129732132, 0.08618871867656708, 0.08771312236785889, 0.08702816814184189, 0.08616083860397339, 0.08788226544857025, 0.08649294823408127, 0.08415061980485916, 0.08545326441526413, 0.08398943394422531, 0.08661816269159317, 0.08478587120771408, 0.08441148698329926, 0.08513041585683823, 0.08470046520233154, 0.08460266888141632, 0.08816564083099365, 0.08511427789926529, 0.08347593992948532, 0.08527784049510956, 0.085199736058712, 0.08572939038276672, 0.08474671095609665, 0.08415383100509644, 0.08413875848054886, 0.08427984267473221, 0.08453238010406494, 0.08269608020782471, 0.08494242280721664, 0.0857277438044548, 0.08488411456346512, 0.08390229195356369]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:29 2016", "state": "available"}], "summary": "0cb2941041e464aea463cdea5102c3df"}