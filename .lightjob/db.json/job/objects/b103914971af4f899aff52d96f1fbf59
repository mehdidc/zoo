{"content": {"hp_model": {"f0": 16, "f1": 32, "f2": 16, "f3": 64, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.5768213272094727, 1.2625625133514404, 1.089187741279602, 1.0120432376861572, 0.964009702205658, 0.9293094873428345, 0.9022212028503418, 0.8799408674240112, 0.8611651062965393, 0.8447926044464111, 0.8303118944168091, 0.8173300623893738, 0.8055285215377808, 0.79469233751297, 0.7846866846084595, 0.7754133939743042, 0.7667438983917236, 0.7586267590522766, 0.7509567141532898, 0.7437163591384888, 0.7368602156639099, 0.7302954792976379, 0.7240222096443176, 0.7180267572402954, 0.7122907042503357, 0.7068172693252563, 0.7015324234962463, 0.6964558362960815, 0.6915466785430908, 0.6867853403091431, 0.6822103261947632, 0.6777850985527039, 0.6734738349914551, 0.6693049669265747, 0.6652630567550659, 0.6613348126411438, 0.6575207114219666, 0.6538085341453552, 0.650165855884552, 0.6466224789619446, 0.6431359648704529, 0.6397210359573364, 0.6364024877548218, 0.6331391334533691, 0.6299676895141602, 0.6268583536148071, 0.6238094568252563, 0.6208345293998718, 0.6179262399673462, 0.6150615215301514, 0.6122496724128723, 0.6094919443130493, 0.6067721843719482, 0.6040982604026794, 0.6014803051948547, 0.5989149212837219, 0.5963755249977112, 0.5938777923583984, 0.5914224982261658, 0.5890176892280579, 0.5866327285766602, 0.5842889547348022, 0.5819758772850037, 0.579695999622345, 0.577450692653656, 0.57524174451828, 0.5730657577514648, 0.5709218978881836, 0.5688022375106812, 0.5666962265968323, 0.5646166801452637, 0.5625787377357483, 0.5605643391609192, 0.5585600137710571, 0.5565850734710693, 0.55463707447052, 0.5527012944221497, 0.5508004426956177, 0.5489123463630676, 0.5470492243766785, 0.5452010035514832, 0.5433733463287354, 0.5415666699409485, 0.5397683382034302, 0.5379921197891235, 0.5362470149993896, 0.5345104932785034, 0.5328013300895691, 0.5311048030853271, 0.5294243693351746, 0.5277599096298218, 0.526106059551239, 0.524478554725647, 0.5228660106658936, 0.5212584137916565, 0.519675612449646, 0.5181093811988831, 0.5165525078773499, 0.5150097608566284, 0.5134853720664978, 0.5119799971580505, 0.5104802846908569, 0.5089991092681885, 0.5075299739837646, 0.5060721635818481, 0.5046222805976868, 0.5031828284263611, 0.501751184463501, 0.5003342032432556, 0.4989270567893982, 0.49754104018211365, 0.49615976214408875, 0.4947892129421234, 0.4934326410293579, 0.49208468198776245, 0.49074554443359375, 0.48941296339035034, 0.4880964159965515, 0.486793577671051, 0.4854930639266968, 0.48420238494873047, 0.4829247295856476, 0.4816475510597229, 0.48038530349731445, 0.479132741689682, 0.47788166999816895, 0.47664952278137207, 0.47542816400527954, 0.47420811653137207, 0.47300034761428833, 0.471800297498703, 0.4706052541732788, 0.46941709518432617, 0.46823781728744507, 0.4670685827732086, 0.4659115672111511, 0.4647569954395294, 0.46360743045806885, 0.46246594190597534, 0.46134334802627563, 0.46022307872772217, 0.4591110050678253, 0.4580012857913971, 0.4569041132926941, 0.4558069705963135, 0.45472216606140137], "moving_avg_accuracy_train": [0.05300766109496123, 0.10923721780984678, 0.16450047908880117, 0.2163041110433393, 0.26431985554877835, 0.3083801995262464, 0.3487296925511965, 0.3856533171152906, 0.4194168941050812, 0.4502736492601415, 0.478381839428258, 0.5040184660128408, 0.5274076862258794, 0.5488415979223668, 0.5684320265968152, 0.586365537553782, 0.6027428625936234, 0.6176731173318616, 0.6313753414629242, 0.6439026196320619, 0.6553445806985714, 0.6658399472584208, 0.6754693918206001, 0.6843149283848948, 0.6924828495368077, 0.6999711623532913, 0.7068617425119267, 0.7132376147665942, 0.7191223841707949, 0.7245326089262422, 0.7295622464740019, 0.7342516806836523, 0.7385953683104237, 0.7426093188709464, 0.7463614193528071, 0.7498708072198058, 0.7531338879965332, 0.756177617540826, 0.7590262561247371, 0.7616993128443047, 0.7641841189514393, 0.7665297264419082, 0.768701191003559, 0.7707647550542737, 0.7726940062641933, 0.7745465537447784, 0.7763184781737336, 0.777987614921698, 0.779552617012723, 0.7810494385005888, 0.7824639711063255, 0.7838137803622027, 0.7850844483127396, 0.7862977678836898, 0.7874548236153929, 0.7885752648822681, 0.7896766679748368, 0.7907074943367293, 0.7917072095290715, 0.7926651179712363, 0.7936039654798989, 0.7945070569579333, 0.795403580694126, 0.7962964465138329, 0.7971628047694264, 0.7980401834494605, 0.7988972535769674, 0.7997290705607712, 0.8005241727735665, 0.8012862316924538, 0.8020533928301482, 0.8027996414255019, 0.8035340081303586, 0.8042577171825867, 0.8049602086034015, 0.8056715419904773, 0.8063768462055123, 0.8070511114799869, 0.8077021280543949, 0.8083577613868291, 0.8089989846598296, 0.8096272388793394, 0.8102391706530887, 0.8108247864816059, 0.8113936934058429, 0.8119661635067037, 0.8125209141272405, 0.8130410799761905, 0.8135743334069122, 0.8140961141731331, 0.8146075334924846, 0.8150910623679962, 0.8155564652904804, 0.8160334205921356, 0.8165068581910062, 0.8169794550061802, 0.8174419945207891, 0.8178931573160801, 0.818345634710395, 0.8187947170438498, 0.8192267929296734, 0.8196412378638194, 0.8200514406855031, 0.8204694513500185, 0.8208781769825969, 0.8212902078792984, 0.8216935877696632, 0.8221100720447917, 0.822496533636455, 0.8228769011522853, 0.8232471337022469, 0.823601269336498, 0.8239757949787526, 0.824345420140115, 0.8247082736710464, 0.8250789836274467, 0.8254660289131885, 0.8258585474977371, 0.8262466914559738, 0.8266122970600535, 0.826976219335868, 0.8273478911626633, 0.8277033221460647, 0.8280790136025545, 0.8284473628479193, 0.8287835274663665, 0.8291209528551119, 0.8294502123418875, 0.8297976991537951, 0.8301383390702262, 0.8304727807319098, 0.8308063303107582, 0.8311344267174362, 0.8314575792203419, 0.8317693428122428, 0.8320615557890011, 0.8323431486585599, 0.8326175085804484, 0.8329016348911005, 0.8331782749099731, 0.8334528275638632, 0.8337138758452214, 0.8339627701913009, 0.834228627781344, 0.8344888259516684, 0.834755520339475], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05224506424134036, 0.10747933629047438, 0.16122070753717993, 0.21162151540733243, 0.25797307103903894, 0.3004382180484634, 0.3392102847978339, 0.374570041568427, 0.4067844476619608, 0.43587506939614123, 0.4624137213891325, 0.48644396304916504, 0.5083417942480135, 0.5280121917245676, 0.5458132057034663, 0.5617842606508154, 0.5762304227822701, 0.5892940333654888, 0.6012832164841357, 0.6121945220947583, 0.6220879393318187, 0.631089671095173, 0.6393255070259418, 0.6468343861049741, 0.6536412054011032, 0.659841614463779, 0.6654586037139373, 0.6705993432578297, 0.6752748369723328, 0.6795448459802953, 0.6834366822124616, 0.6869016842190016, 0.6900069494849779, 0.6928881669517661, 0.6954812626718756, 0.6977906347574742, 0.6998690696345129, 0.7017030399300979, 0.7034390624148743, 0.705086931869923, 0.7067419423256265, 0.7082293927184404, 0.7096423697681326, 0.7109018420816055, 0.7119743320074811, 0.7130016376056787, 0.7139628337378067, 0.7148523243192217, 0.7156406588112454, 0.716324716282907, 0.7169769891011524, 0.7176383063337329, 0.7181958412406457, 0.7186732085943673, 0.7191526968463764, 0.7195842362731846, 0.7199360006635619, 0.7202525886149015, 0.7205385472797667, 0.7208325311718955, 0.721183595402221, 0.721499553209514, 0.7218327433610776, 0.722157028559985, 0.7224244711765015, 0.7227139976563665, 0.7229501574257449, 0.7231871152806855, 0.723436998443882, 0.7236863073532589, 0.7239361289428577, 0.724184352927337, 0.7243955474821183, 0.7245978296126715, 0.7248042975926694, 0.7249901187746675, 0.7251695648697157, 0.7252822382302593, 0.7253958512859984, 0.7255103100674136, 0.7256377370331873, 0.7257524213023837, 0.7259044652696605, 0.7260789554426191, 0.7262115825357819, 0.7262821187946285, 0.7263700154900904, 0.7264613295472561, 0.7265323346761148, 0.7265962392920877, 0.7266415464152133, 0.7266457017322763, 0.726637234486383, 0.7266540280275791, 0.7267057633084055, 0.726826596757309, 0.7268987257675721, 0.7269758489080589, 0.727045259734497, 0.7270700788758816, 0.7270924161031278, 0.7271125196076493, 0.7270817846367188, 0.727116187827791, 0.7270596424636866, 0.7270341952071523, 0.7270234997075213, 0.7270260807891036, 0.7270528178250275, 0.7271012952198591, 0.7271449248752075, 0.7271719845337712, 0.7271841311952284, 0.7272082997304494, 0.7272544654746484, 0.7272960146444276, 0.7273089948347289, 0.7273206770059999, 0.7273189839288939, 0.7273296671907485, 0.7273392821264177, 0.7273601425997699, 0.7273789170257868, 0.7274080210404521, 0.7274464216849008, 0.727431124631245, 0.7274051502517049, 0.7273695662788688, 0.727375191305726, 0.7273436327361474, 0.7273152300235267, 0.727277460550918, 0.7272678820880701, 0.7272470544402572, 0.7271906589548158, 0.7271643170804185, 0.727116195330961, 0.7270596492165395, 0.7269965506823103, 0.7269519690327539, 0.7268741949457436, 0.7267919912361842, 0.7267180078975808, 0.7266148017990878, 0.726509709279194, 0.7264151260112897], "moving_var_accuracy_train": [0.025288309212824406, 0.05121534572671475, 0.0735800635787171, 0.09037460377397658, 0.10208674888028332, 0.10934989919497022, 0.11306764356180768, 0.11403106566417846, 0.11288777127807029, 0.11016824819855735, 0.10626205656944464, 0.10155098051623623, 0.09631938306417871, 0.0908221578932762, 0.08519400616478645, 0.0795691028855006, 0.0740261435760961, 0.06862974177742466, 0.06345652611492307, 0.05852326778837333, 0.05384920726696368, 0.049455661013297764, 0.045344630735152755, 0.04151435931562996, 0.03796335780756176, 0.03467169548634318, 0.031631846792012086, 0.02883452783588142, 0.026262749650758827, 0.023899909472823038, 0.021737593810297242, 0.019761751568127275, 0.01795538501110525, 0.016304852701915618, 0.01480107175395787, 0.013431806807371426, 0.012184455392033316, 0.01104938845867919, 0.010017482288846996, 0.009080041149996528, 0.00822760538750736, 0.007454361719250717, 0.006751362872408194, 0.006114551254489989, 0.005536594221119778, 0.0050138221885181996, 0.004540697415303732, 0.004111701831124005, 0.0037225747319158215, 0.003370481529823069, 0.00305144149927499, 0.0027626952145927575, 0.0025009570664981753, 0.002264110659279613, 0.0020497485950480526, 0.0018560722332359007, 0.0016813828088631892, 0.0015228079548722225, 0.0013795220335771987, 0.001249828127471615, 0.0011327782265251518, 0.0010268405718319232, 0.000931390307934742, 0.0008454261614892773, 0.0007676387349836638, 0.0006978030016189029, 0.0006346338242881946, 0.0005773977173102753, 0.0005253476333383735, 0.000478039474167238, 0.00043553235265121187, 0.0003969911000806952, 0.0003621456401874431, 0.00033064486929919047, 0.00030202183013613683, 0.0002763736038106427, 0.0002532133297512931, 0.00023198369971942466, 0.00021259973296886882, 0.0001952084552713716, 0.00017938811531677002, 0.00016500163406408028, 0.0001518716151191883, 0.0001397709666947591, 0.000128706765821286, 0.00011878558738657453, 0.00010967676290678986, 0.00010114423920983581, 9.358904828124017e-05, 8.668043996509913e-05, 8.036634345044293e-05, 7.44339106664803e-05, 6.893991852214421e-05, 6.409330390792266e-05, 5.970126195734967e-05, 5.5741265509028365e-05, 5.209262418129817e-05, 4.87152925738612e-05, 4.5686385447768615e-05, 4.293282138298244e-05, 4.0319745384676357e-05, 3.783365227716224e-05, 3.556468424370198e-05, 3.358081206016924e-05, 3.172624063869216e-05, 3.008154171335315e-05, 2.8537825565573777e-05, 2.7245175371880576e-05, 2.5864830891171054e-05, 2.4580462825944296e-05, 2.3356065812809342e-05, 2.2149167658546457e-05, 2.1196676003047778e-05, 2.0306613241953066e-05, 1.946091608194144e-05, 1.8751657319716456e-05, 1.822472806667972e-05, 1.7788892812956215e-05, 1.7365905122500872e-05, 1.683232172986054e-05, 1.6341044362380602e-05, 1.595019944764246e-05, 1.5492160158533656e-05, 1.52132407769956e-05, 1.4913047198342685e-05, 1.4438802334770596e-05, 1.4019625138023435e-05, 1.359336891090681e-05, 1.33207557798634e-05, 1.3033000175872866e-05, 1.2736361183912437e-05, 1.2464022959471399e-05, 1.2186445932199148e-05, 1.1907649200187121e-05, 1.1591653115282605e-05, 1.120098361782823e-05, 1.0794536153722238e-05, 1.0392542838998336e-05, 1.00798383987414e-05, 9.760621859243737e-06, 9.462972111142197e-06, 9.129990746828775e-06, 8.774527231739215e-06, 8.53319683221667e-06, 8.289204939556651e-06, 8.100417513988708e-06], "duration": 60765.984344, "accuracy_train": [0.5300766109496124, 0.6153032282438169, 0.6618698305993909, 0.6825367986341824, 0.6964615560977299, 0.7049232953234588, 0.7118751297757475, 0.7179659381921374, 0.7232890870131967, 0.7279844456556848, 0.7313555509413068, 0.7347481052740864, 0.7379106681432264, 0.741746803190753, 0.7447458846668512, 0.747767136166482, 0.7501387879521964, 0.7520454099760059, 0.7546953586424879, 0.7566481231543005, 0.7583222302971576, 0.7602982462970653, 0.762134392880214, 0.7639247574635474, 0.7659941399040235, 0.7673659777016426, 0.7688769639396457, 0.770620465058601, 0.772085308808601, 0.7732246317252677, 0.7748289844038391, 0.7764565885705058, 0.7776885569513659, 0.7787348739156515, 0.7801303236895534, 0.7814552980227945, 0.7825016149870802, 0.7835711834394611, 0.7846640033799372, 0.7857568233204135, 0.7865473739156515, 0.7876401938561278, 0.7882443720584165, 0.7893368315107051, 0.7900572671534699, 0.7912194810700444, 0.7922657980343301, 0.7930098456533776, 0.793637635831949, 0.7945208318913806, 0.7951947645579549, 0.7959620636650978, 0.796520459867571, 0.7972176440222407, 0.7978683252007198, 0.7986592362841455, 0.7995892958079549, 0.7999849315937615, 0.8007046462601514, 0.8012862939507198, 0.8020535930578626, 0.8026348802602437, 0.8034722943198597, 0.804332238891196, 0.8049600290697674, 0.8059365915697674, 0.8066108847245294, 0.8072154234150055, 0.8076800926887228, 0.80814476196244, 0.8089578430693982, 0.8095158787836839, 0.8101433084740679, 0.8107710986526393, 0.8112826313907345, 0.8120735424741602, 0.8127245841408268, 0.8131194989502584, 0.8135612772240679, 0.8142584613787375, 0.8147699941168327, 0.8152815268549279, 0.8157465566168327, 0.8160953289382613, 0.8165138557239755, 0.8171183944144518, 0.8175136697120708, 0.8177225726167405, 0.8183736142834073, 0.8187921410691216, 0.8192103073666482, 0.8194428222476007, 0.8197450915928387, 0.8203260183070322, 0.8207677965808416, 0.8212328263427464, 0.8216048501522702, 0.8219536224736989, 0.8224179312592286, 0.8228364580449428, 0.8231154759020857, 0.8233712422711333, 0.8237432660806571, 0.8242315473306571, 0.8245567076758029, 0.8249984859496124, 0.8253240067829457, 0.8258584305209486, 0.8259746879614249, 0.8263002087947582, 0.8265792266519011, 0.8267884900447582, 0.827346525759044, 0.8276720465923773, 0.8279739554494279, 0.8284153732350499, 0.8289494364848652, 0.8293912147586747, 0.8297399870801033, 0.82990274749677, 0.8302515198181986, 0.8306929376038206, 0.8309022009966777, 0.8314602367109634, 0.8317625060562015, 0.831809009032392, 0.8321577813538206, 0.8324135477228681, 0.8329250804609634, 0.8332040983181063, 0.8334827556870616, 0.8338082765203949, 0.8340872943775378, 0.8343659517464931, 0.8345752151393503, 0.8346914725798265, 0.8348774844845883, 0.8350867478774455, 0.8354587716869692, 0.8356680350798265, 0.835923801448874, 0.8360633103774455, 0.8362028193060169, 0.8366213460917312, 0.8368306094845883, 0.8371557698297342], "end": "2016-01-30 04:59:04.292000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0], "moving_var_accuracy_valid": [0.024565920638236035, 0.049566751853592175, 0.07060329151951905, 0.08640513527324337, 0.09710082213123168, 0.10362033831289677, 0.1067877629217659, 0.10736179821946885, 0.10596553003715395, 0.10298535548936909, 0.09902552038687809, 0.09432004097634634, 0.08920367197963111, 0.08376562561363862, 0.07824094794036728, 0.07271252451151175, 0.06731949646331503, 0.062123468110213395, 0.057204785905864086, 0.05255581662643331, 0.04818115230542904, 0.04409231764754057, 0.0402935468240934, 0.036771641526895826, 0.03351147247457765, 0.030506330880020496, 0.027739652906145985, 0.02520353244305464, 0.022879921372018403, 0.02075602602716929, 0.01881674092777438, 0.017043122985144876, 0.015425594737979102, 0.01395774799099953, 0.01262249050062243, 0.011408240245427866, 0.010306295244727898, 0.009305936743660896, 0.008402467035903648, 0.007586659595981226, 0.006852645172859494, 0.006187293233613284, 0.005586532447538565, 0.0050421556373603515, 0.004548292185394259, 0.004102961177983627, 0.0037009801422250234, 0.003338002869452357, 0.003009795823948948, 0.002713027653174878, 0.002445554026322187, 0.00220493468802894, 0.001987238825777883, 0.0017905658595136868, 0.0016135784544166502, 0.0014538966454669942, 0.0013096206245973325, 0.0011795606135159998, 0.0010623405033865034, 0.0009568842918073336, 0.0008623050774709268, 0.0007769730337477385, 0.0007002748714668558, 0.0006311938323322433, 0.0005687181790771821, 0.0005126007914123506, 0.0004618426552011714, 0.0004161637309062166, 0.0003751093321728368, 0.0003381577933462053, 0.00030490371145125184, 0.00027496787662436363, 0.000247872517221651, 0.0002234535280425563, 0.00020149183647918045, 0.00018165341843637506, 0.0001637778847019904, 0.00014751435380737683, 0.00013287908976454863, 0.00011970908810188129, 0.00010788431797614979, 9.721425851294467e-05, 8.770088897351733e-05, 7.920482146029786e-05, 7.144264882683537e-05, 6.434316221846039e-05, 5.797837845827237e-05, 5.225558492576961e-05, 4.7075401988110855e-05, 4.24046159887835e-05, 3.818262900855838e-05, 3.436452150764159e-05, 3.092871460515459e-05, 2.7838381351872258e-05, 2.5078632070224732e-05, 2.2702175364567323e-05, 2.0478781175204373e-05, 1.848443486687081e-05, 1.6679352145625093e-05, 1.5016960839074218e-05, 1.351975532065622e-05, 1.2171417146637033e-05, 1.0962777177916275e-05, 9.877151676128135e-06, 8.918212912330615e-06, 8.03221968688367e-06, 7.230027261606493e-06, 6.507084493285049e-06, 5.862809865766544e-06, 5.297679399476802e-06, 4.785043380961519e-06, 4.3131290689595615e-06, 3.88314403452461e-06, 3.50008669392477e-06, 3.169259507969349e-06, 2.867870558756428e-06, 2.5825998709430863e-06, 2.325568141979242e-06, 2.0930371263721e-06, 1.8847606024895723e-06, 1.6971165651319066e-06, 1.5313213427550187e-06, 1.3813615201299236e-06, 1.2508487611436705e-06, 1.1390353704760304e-06, 1.027237832083349e-06, 9.305860644074882e-07, 8.48923430071984e-07, 7.643158554090722e-07, 6.968477596928073e-07, 6.344234104814889e-07, 5.838198669835908e-07, 5.262636028399758e-07, 4.775413607767949e-07, 4.5841128170264324e-07, 4.1881520265322207e-07, 3.97775007325568e-07, 3.867746740984294e-07, 3.839300318855113e-07, 3.6342473999143046e-07, 3.8152154348489653e-07, 4.0418643792417733e-07, 4.130296036498443e-07, 4.6759013218020697e-07, 5.202310586006736e-07, 5.487219038477752e-07], "accuracy_test": 0.7028918207908164, "start": "2016-01-29 12:06:18.308000", "learning_rate_per_epoch": [0.0008986589382402599, 0.00044932946912012994, 0.00029955297941341996, 0.00022466473456006497, 0.00017973178182728589, 0.00014977648970670998, 0.00012837984832003713, 0.00011233236728003249, 9.985099313780665e-05, 8.986589091364294e-05, 8.169626380549744e-05, 7.488824485335499e-05, 6.912760727573186e-05, 6.418992416001856e-05, 5.991059515508823e-05, 5.616618364001624e-05, 5.2862287702737376e-05, 4.992549656890333e-05, 4.729783904622309e-05, 4.493294545682147e-05, 4.279328277334571e-05, 4.084813190274872e-05, 3.907212521880865e-05, 3.7444122426677495e-05, 3.5946355637861416e-05, 3.456380363786593e-05, 3.3283664379268885e-05, 3.209496208000928e-05, 3.098823799518868e-05, 2.9955297577544115e-05, 2.8988997655687854e-05, 2.808309182000812e-05, 2.7232088541495614e-05, 2.6431143851368688e-05, 2.5675968572613783e-05, 2.4962748284451663e-05, 2.428807783871889e-05, 2.3648919523111545e-05, 2.3042535758577287e-05, 2.2466472728410736e-05, 2.191850944655016e-05, 2.1396641386672854e-05, 2.089904410240706e-05, 2.042406595137436e-05, 1.9970197172369808e-05, 1.9536062609404325e-05, 1.9120401702821255e-05, 1.8722061213338748e-05, 1.833997703215573e-05, 1.7973177818930708e-05, 1.7620763173908927e-05, 1.7281901818932965e-05, 1.695582795946393e-05, 1.6641832189634442e-05, 1.6339252397301607e-05, 1.604748104000464e-05, 1.5765945136081427e-05, 1.549411899759434e-05, 1.5231506949930917e-05, 1.4977648788772058e-05, 1.4732113413629122e-05, 1.4494498827843927e-05, 1.4264427591115236e-05, 1.404154591000406e-05, 1.3825521818944253e-05, 1.3616044270747807e-05, 1.341281949862605e-05, 1.3215571925684344e-05, 1.3024042345932685e-05, 1.2837984286306892e-05, 1.2657167644647416e-05, 1.2481374142225832e-05, 1.2310396414250135e-05, 1.2144038919359446e-05, 1.1982118849118706e-05, 1.1824459761555772e-05, 1.167089521914022e-05, 1.1521267879288644e-05, 1.1375429494364653e-05, 1.1233236364205368e-05, 1.1094554793089628e-05, 1.095925472327508e-05, 1.082721610146109e-05, 1.0698320693336427e-05, 1.0572457540547475e-05, 1.044952205120353e-05, 1.0329412361897994e-05, 1.021203297568718e-05, 1.0097291124111507e-05, 9.985098586184904e-06, 9.875372597889509e-06, 9.768031304702163e-06, 9.662999218562618e-06, 9.560200851410627e-06, 9.459567081648856e-06, 9.361030606669374e-06, 9.26452503335895e-06, 9.169988516077865e-06, 9.077362847165205e-06, 8.986588909465354e-06, 8.897613042790908e-06, 8.810381586954463e-06, 8.72484361025272e-06, 8.640950909466483e-06, 8.558656190871261e-06, 8.477913979731966e-06, 8.398681529797614e-06, 8.320916094817221e-06, 8.244576747529209e-06, 8.169626198650803e-06, 8.096026249404531e-06, 8.02374052000232e-06, 7.952733540150803e-06, 7.882972568040714e-06, 7.814425771357492e-06, 7.74705949879717e-06, 7.680845556023996e-06, 7.615753474965459e-06, 7.551755516033154e-06, 7.488824394386029e-06, 7.426933279930381e-06, 7.366056706814561e-06, 7.306170118681621e-06, 7.247249413921963e-06, 7.189271400420694e-06, 7.132213795557618e-06, 7.076054316712543e-06, 7.02077295500203e-06, 6.9663483373005874e-06, 6.9127609094721265e-06, 6.85999157212791e-06, 6.8080221353739034e-06, 6.7568339545687195e-06, 6.706409749313025e-06, 6.656732693954837e-06, 6.607785962842172e-06, 6.559554094565101e-06, 6.512021172966342e-06, 6.465172191383317e-06, 6.418992143153446e-06, 6.373467385856202e-06, 6.328583822323708e-06, 6.284328264882788e-06, 6.240687071112916e-06, 6.1976475080882665e-06, 6.155198207125068e-06], "accuracy_train_first": 0.5300766109496124, "accuracy_train_last": 0.8371557698297342, "batch_size_eval": 1024, "accuracy_train_std": [0.01840326133018469, 0.01488648188252701, 0.014870709219377493, 0.014608797880866003, 0.014664473849742687, 0.014263150535057223, 0.01315047109555614, 0.013047056246553503, 0.013132608659047959, 0.013596279855563637, 0.013499679337812617, 0.013652597276064092, 0.01311274632516599, 0.013178542044111667, 0.01307940405833669, 0.013580375280833903, 0.014150856283405568, 0.014144915807303279, 0.014396775006876295, 0.0147303539543336, 0.014785947140279667, 0.014492710648091416, 0.014525006068316176, 0.014561141568882843, 0.014341411546096939, 0.014501627767950161, 0.014803958367502016, 0.014987681960850088, 0.015046625133764813, 0.014940257884910631, 0.014903527042982131, 0.014906459720545003, 0.014810180624451818, 0.014931576514383168, 0.015105208596388711, 0.014776984152173472, 0.014287824075594065, 0.014003469195223786, 0.01390010417777848, 0.013849196449192067, 0.01362160634419266, 0.013622023690538599, 0.0135496825922248, 0.014011747351204615, 0.014089565109772283, 0.013863851072778646, 0.01362429575281685, 0.013665638303831263, 0.013641832430637662, 0.013719063872957345, 0.013768785394661448, 0.013751151868733557, 0.013750920553178256, 0.013638017754679628, 0.013833941672620243, 0.013761471178136682, 0.013794217969573308, 0.01392533929883109, 0.013740689318234611, 0.013747874510569916, 0.013503690024979281, 0.013445531891699133, 0.013609143991849848, 0.012992915282252944, 0.012865843376395524, 0.012722583901127012, 0.012751811304786833, 0.01278869612486706, 0.012907528139459643, 0.012875239164289922, 0.012735663871622482, 0.012741358825159492, 0.012942734556635381, 0.012879385256469431, 0.013075676276003386, 0.013382953718040559, 0.013222322455745318, 0.012949484812419804, 0.012993508710568005, 0.013084501508474119, 0.012895056025706085, 0.012940932568976916, 0.013021870384214467, 0.012939575721021772, 0.013130968110727623, 0.013251611635092168, 0.013125346893366903, 0.013356667362332084, 0.013262708680138282, 0.013161103273399758, 0.013136390739871731, 0.013108871471211694, 0.013084712124006694, 0.012848418702618821, 0.012994167688271921, 0.013088039447256875, 0.013006022813148445, 0.012824888452236435, 0.012579030601325135, 0.012419778565775991, 0.012442193446042296, 0.012435780342400334, 0.012450083450696531, 0.012443652521762183, 0.012423279868282393, 0.012352945021383418, 0.012241210411962912, 0.012062748509493413, 0.012000104818454038, 0.011785298160660571, 0.01201939402917957, 0.012141159826813897, 0.012090537884416446, 0.01204505419747981, 0.01193485382566307, 0.011755385544016317, 0.011768261414820524, 0.011566174030152006, 0.011619786781387401, 0.011585226372702475, 0.011603860810434567, 0.011374440447817545, 0.011433912960072047, 0.011369967842161715, 0.011136081648603743, 0.011175777151278933, 0.011045462111472936, 0.011098034248330871, 0.011326122098680226, 0.011354759099267416, 0.011316588622915178, 0.011215528113876588, 0.011122926245635455, 0.011063656791857918, 0.011133257082481843, 0.011020877715462299, 0.010982583088821867, 0.010958376578521804, 0.010945711194224283, 0.010937301542506486, 0.010877126932820658, 0.010758862309812586, 0.010766875936494464, 0.010801096835783995, 0.010674713485179907, 0.010939176255504768], "accuracy_test_std": 0.009354948085136696, "error_valid": [0.47754935758659633, 0.3954122152673193, 0.3551069512424698, 0.33477121376129515, 0.32486292827560237, 0.3173754588667168, 0.31184111445783136, 0.3071921474962349, 0.3032858974962349, 0.3023093349962349, 0.2987384106739458, 0.29728386201054224, 0.29457772496234935, 0.2949542309864458, 0.2939776684864458, 0.29447624482304224, 0.2937541180346386, 0.29313347138554224, 0.29081413544804224, 0.2896037274096386, 0.2888713055346386, 0.2878947430346386, 0.2865519695971386, 0.2855857021837349, 0.2850974209337349, 0.2843547039721386, 0.2839884930346386, 0.2831340008471386, 0.2826457195971386, 0.28202507294804224, 0.28153679169804224, 0.2819132977221386, 0.2820456631212349, 0.2811808758471386, 0.2811808758471386, 0.2814250164721386, 0.2814250164721386, 0.2817912274096386, 0.2809367352221386, 0.2800822430346386, 0.27836296357304224, 0.2783835537462349, 0.2776408367846386, 0.2777629070971386, 0.2783732586596386, 0.27775261201054224, 0.27738640107304224, 0.27714226044804224, 0.27726433076054224, 0.2775187664721386, 0.2771525555346386, 0.27640983857304224, 0.2767863445971386, 0.2770304852221386, 0.27653190888554224, 0.27653190888554224, 0.27689811982304224, 0.27689811982304224, 0.2768878247364458, 0.2765216137989458, 0.27565682652484935, 0.27565682652484935, 0.27516854527484935, 0.27492440464984935, 0.27516854527484935, 0.27468026402484935, 0.27492440464984935, 0.27468026402484935, 0.27431405308734935, 0.27406991246234935, 0.273815476750753, 0.27358163121234935, 0.27370370152484935, 0.27358163121234935, 0.27333749058734935, 0.27333749058734935, 0.27321542027484935, 0.27370370152484935, 0.27358163121234935, 0.27345956089984935, 0.27321542027484935, 0.27321542027484935, 0.27272713902484935, 0.272350633000753, 0.272594773625753, 0.273083054875753, 0.272838914250753, 0.272716843938253, 0.2728286191641567, 0.2728286191641567, 0.2729506894766567, 0.2733169004141567, 0.2734389707266567, 0.2731948301016567, 0.2728286191641567, 0.27208590220256024, 0.27245211314006024, 0.27233004282756024, 0.27233004282756024, 0.2727065488516567, 0.2727065488516567, 0.2727065488516567, 0.2731948301016567, 0.27257418345256024, 0.273449265813253, 0.2731948301016567, 0.2730727597891567, 0.2729506894766567, 0.2727065488516567, 0.2724624082266567, 0.2724624082266567, 0.2725844785391567, 0.2727065488516567, 0.27257418345256024, 0.27233004282756024, 0.27233004282756024, 0.27257418345256024, 0.27257418345256024, 0.27269625376506024, 0.27257418345256024, 0.27257418345256024, 0.27245211314006024, 0.27245211314006024, 0.27233004282756024, 0.27220797251506024, 0.2727065488516567, 0.2728286191641567, 0.2729506894766567, 0.27257418345256024, 0.27294039439006024, 0.27294039439006024, 0.27306246470256024, 0.27281832407756024, 0.27294039439006024, 0.2733169004141567, 0.2730727597891567, 0.2733169004141567, 0.273449265813253, 0.273571336125753, 0.273449265813253, 0.27382577183734935, 0.27394784214984935, 0.27394784214984935, 0.27431405308734935, 0.27443612339984935, 0.27443612339984935], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.09616461438202822, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.0008986589125366844, "optimization": "nesterov_momentum", "nb_data_augmentation": 0, "learning_rate_decay_method": "lin", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 3.802596797054689e-07, "rotation_range": [0, 0], "momentum": 0.8633098083837847}, "accuracy_valid_max": 0.7279140977974398, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7255638766001506, "accuracy_valid_std": [0.014060430441663973, 0.01809653264434238, 0.017180701971456304, 0.012665604825724862, 0.014531906781597074, 0.014696220128572537, 0.014482673067662856, 0.015091794564599949, 0.014413616396087578, 0.014671974360145458, 0.015005742634571316, 0.014601236476818383, 0.014348137606192943, 0.014485015636111242, 0.014892944712832725, 0.014658820384302825, 0.014377183196406632, 0.014102744458601896, 0.014070098027663035, 0.013593790838520834, 0.01377736886088354, 0.01499094445809588, 0.015257231784737663, 0.015857522947685474, 0.015536730783986744, 0.01472829050490765, 0.015020615659023262, 0.015155460698190296, 0.01477079527723497, 0.013684783250183092, 0.013633944131042935, 0.013631911979440282, 0.013640401595437885, 0.012994600942717663, 0.012678857281751603, 0.012392538560802132, 0.01227656259022651, 0.012577769933860516, 0.012731479755829457, 0.012410887388079836, 0.012601453684669129, 0.01385882319572564, 0.013725250771524457, 0.013717720923579367, 0.013698514510620135, 0.013094654741389608, 0.013313082604517896, 0.013338464875933254, 0.013236582724056435, 0.013809602276488074, 0.014179929430982282, 0.013172197009084226, 0.013660539804544338, 0.013261057992293034, 0.012630675878505583, 0.012488302305010851, 0.012251534673487097, 0.012406240329821183, 0.012332696450160415, 0.012443713772927016, 0.012057595056417575, 0.01220499394637576, 0.012495438305702806, 0.012041622889061986, 0.012599943762642046, 0.012685657014170194, 0.012545853813737141, 0.012429343998997824, 0.012223888667848421, 0.012810033907154725, 0.012279546221973178, 0.013173308104818418, 0.012762301132985238, 0.013263492459208858, 0.013218884644467438, 0.013371313588741518, 0.013302803096471723, 0.0136032811507166, 0.01342429762182433, 0.01305134792769217, 0.01348967606670488, 0.014179028412157, 0.014305337089589608, 0.013655229882696008, 0.013523434454189074, 0.013323189233624137, 0.013597944415723612, 0.013402128660115687, 0.012724404393906503, 0.012620929554099805, 0.012855460683466682, 0.013016113712044225, 0.013039547718754983, 0.013119324883738388, 0.013121069547907835, 0.012910561578911458, 0.012994219168931443, 0.013062190306665354, 0.01330631869614149, 0.013921717292052013, 0.014058054973055307, 0.014058054973055307, 0.013539658733618462, 0.013333329732294594, 0.014248664602025533, 0.013827153421192746, 0.013672735639113368, 0.014119374143200579, 0.013740721312896468, 0.013664625050099211, 0.013812135736537107, 0.013633497442242192, 0.01371466975400365, 0.013563796106058646, 0.01372961066600796, 0.013252456593729148, 0.013144234157567273, 0.013044090126139158, 0.012835159527260472, 0.013044090126139158, 0.012878538457255657, 0.012818727659455742, 0.012920618529211864, 0.012998149312645682, 0.012722880161425825, 0.01275074031174329, 0.012705653466920305, 0.012450336159429209, 0.012578845664994977, 0.012527466639115466, 0.012431944120013383, 0.012373761608827083, 0.012344651143117674, 0.012248399144386406, 0.012597237002823095, 0.013274594675450942, 0.012997783619012226, 0.01331447469478412, 0.013758546470048373, 0.013746190263997631, 0.014204853963496253, 0.014280516746094514, 0.014569756648758432, 0.014366819222403631, 0.014338080232084336, 0.014288108106641629], "accuracy_valid": [0.5224506424134037, 0.6045877847326807, 0.6448930487575302, 0.6652287862387049, 0.6751370717243976, 0.6826245411332832, 0.6881588855421686, 0.6928078525037651, 0.6967141025037651, 0.6976906650037651, 0.7012615893260542, 0.7027161379894578, 0.7054222750376506, 0.7050457690135542, 0.7060223315135542, 0.7055237551769578, 0.7062458819653614, 0.7068665286144578, 0.7091858645519578, 0.7103962725903614, 0.7111286944653614, 0.7121052569653614, 0.7134480304028614, 0.7144142978162651, 0.7149025790662651, 0.7156452960278614, 0.7160115069653614, 0.7168659991528614, 0.7173542804028614, 0.7179749270519578, 0.7184632083019578, 0.7180867022778614, 0.7179543368787651, 0.7188191241528614, 0.7188191241528614, 0.7185749835278614, 0.7185749835278614, 0.7182087725903614, 0.7190632647778614, 0.7199177569653614, 0.7216370364269578, 0.7216164462537651, 0.7223591632153614, 0.7222370929028614, 0.7216267413403614, 0.7222473879894578, 0.7226135989269578, 0.7228577395519578, 0.7227356692394578, 0.7224812335278614, 0.7228474444653614, 0.7235901614269578, 0.7232136554028614, 0.7229695147778614, 0.7234680911144578, 0.7234680911144578, 0.7231018801769578, 0.7231018801769578, 0.7231121752635542, 0.7234783862010542, 0.7243431734751506, 0.7243431734751506, 0.7248314547251506, 0.7250755953501506, 0.7248314547251506, 0.7253197359751506, 0.7250755953501506, 0.7253197359751506, 0.7256859469126506, 0.7259300875376506, 0.726184523249247, 0.7264183687876506, 0.7262962984751506, 0.7264183687876506, 0.7266625094126506, 0.7266625094126506, 0.7267845797251506, 0.7262962984751506, 0.7264183687876506, 0.7265404391001506, 0.7267845797251506, 0.7267845797251506, 0.7272728609751506, 0.727649366999247, 0.727405226374247, 0.726916945124247, 0.727161085749247, 0.727283156061747, 0.7271713808358433, 0.7271713808358433, 0.7270493105233433, 0.7266830995858433, 0.7265610292733433, 0.7268051698983433, 0.7271713808358433, 0.7279140977974398, 0.7275478868599398, 0.7276699571724398, 0.7276699571724398, 0.7272934511483433, 0.7272934511483433, 0.7272934511483433, 0.7268051698983433, 0.7274258165474398, 0.726550734186747, 0.7268051698983433, 0.7269272402108433, 0.7270493105233433, 0.7272934511483433, 0.7275375917733433, 0.7275375917733433, 0.7274155214608433, 0.7272934511483433, 0.7274258165474398, 0.7276699571724398, 0.7276699571724398, 0.7274258165474398, 0.7274258165474398, 0.7273037462349398, 0.7274258165474398, 0.7274258165474398, 0.7275478868599398, 0.7275478868599398, 0.7276699571724398, 0.7277920274849398, 0.7272934511483433, 0.7271713808358433, 0.7270493105233433, 0.7274258165474398, 0.7270596056099398, 0.7270596056099398, 0.7269375352974398, 0.7271816759224398, 0.7270596056099398, 0.7266830995858433, 0.7269272402108433, 0.7266830995858433, 0.726550734186747, 0.726428663874247, 0.726550734186747, 0.7261742281626506, 0.7260521578501506, 0.7260521578501506, 0.7256859469126506, 0.7255638766001506, 0.7255638766001506], "seed": 50827558, "model": "residualv3", "loss_std": [0.29884737730026245, 0.2693201005458832, 0.2598007917404175, 0.2569904327392578, 0.25470930337905884, 0.25252097845077515, 0.25040489435195923, 0.24856311082839966, 0.24698269367218018, 0.24547596275806427, 0.24413730204105377, 0.24283123016357422, 0.24170967936515808, 0.24062328040599823, 0.23955996334552765, 0.23860788345336914, 0.2376946061849594, 0.23680570721626282, 0.23599742352962494, 0.2351798415184021, 0.2344098687171936, 0.23363910615444183, 0.23289507627487183, 0.23220603168010712, 0.23151859641075134, 0.23083871603012085, 0.2301938533782959, 0.22955584526062012, 0.22893579304218292, 0.22835330665111542, 0.22777555882930756, 0.22724229097366333, 0.22669048607349396, 0.22614158689975739, 0.22563976049423218, 0.22511857748031616, 0.22460146248340607, 0.22410009801387787, 0.2235911786556244, 0.22309184074401855, 0.22257058322429657, 0.22209516167640686, 0.22160178422927856, 0.22112472355365753, 0.220676988363266, 0.22019943594932556, 0.21975091099739075, 0.21933187544345856, 0.21890929341316223, 0.21846286952495575, 0.21805785596370697, 0.21762718260288239, 0.21721315383911133, 0.21678213775157928, 0.21637652814388275, 0.2159692645072937, 0.21556247770786285, 0.2151794582605362, 0.21476846933364868, 0.21438036859035492, 0.2139904648065567, 0.2136159986257553, 0.21324065327644348, 0.212858647108078, 0.2124856859445572, 0.21210899949073792, 0.2117450088262558, 0.2114044725894928, 0.21105778217315674, 0.210694819688797, 0.21032845973968506, 0.20998451113700867, 0.20964691042900085, 0.20929725468158722, 0.20894624292850494, 0.2086019515991211, 0.2082545906305313, 0.2079128921031952, 0.20755775272846222, 0.20720361173152924, 0.2068633735179901, 0.2065228819847107, 0.206169992685318, 0.20582354068756104, 0.2054896503686905, 0.2051556557416916, 0.2048141211271286, 0.20449167490005493, 0.2041696459054947, 0.2038467526435852, 0.20352771878242493, 0.2032128870487213, 0.20290431380271912, 0.202591672539711, 0.20227348804473877, 0.20196415483951569, 0.20165292918682098, 0.20134472846984863, 0.2010355442762375, 0.20073887705802917, 0.2004362940788269, 0.20012986660003662, 0.1998288929462433, 0.19952961802482605, 0.19923192262649536, 0.19894035160541534, 0.1986476182937622, 0.19835957884788513, 0.1980840563774109, 0.19779826700687408, 0.1975233256816864, 0.19724522531032562, 0.19697193801403046, 0.19669756293296814, 0.19642582535743713, 0.19614854454994202, 0.1958613097667694, 0.19559119641780853, 0.19532231986522675, 0.19505512714385986, 0.194788858294487, 0.19452811777591705, 0.1942662000656128, 0.1940091997385025, 0.19374331831932068, 0.19347725808620453, 0.19322074949741364, 0.19297261536121368, 0.1927071362733841, 0.19244737923145294, 0.19218780100345612, 0.1919270008802414, 0.19166959822177887, 0.19140873849391937, 0.1911529302597046, 0.19090159237384796, 0.19065259397029877, 0.1904093474149704, 0.19016000628471375, 0.18991971015930176, 0.18967752158641815, 0.18944238126277924, 0.18920911848545074, 0.1889779418706894, 0.18873894214630127, 0.18850289285182953]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:23 2016", "state": "available"}], "summary": "4d3a6aaa5cc06a11e7e7027bdbe11c39"}