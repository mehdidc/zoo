{"content": {"hp_model": {"f0": 32, "f1": 32, "f2": 64, "f3": 64, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.12817250241473668, 0.12018896897072223, 0.12025698639599805, 0.11759380962205052, 0.1158618627135919, 0.11856417440143502, 0.11494627721195771, 0.11302590731143755, 0.11012309322185564, 0.10687657876269128, 0.10947466642867901, 0.07653292316376954, 0.07782055883958096, 0.08142239654052644, 0.07741799678801578, 0.08293462774900012, 0.08069897763070047, 0.07857967717514472, 0.08691232749696771, 0.09121827703215167, 0.0853985870484506, 0.08391971180149604, 0.08343941855926588, 0.09019397566984579, 0.08814304905732372, 0.08766900855150775, 0.07744839969160805, 0.08581577394545056, 0.08090391968702548, 0.07920801308934078, 0.08470492081319529, 0.08822920349689686, 0.08193596020080815, 0.07827814360400713, 0.06901615856150728, 0.07192953953824241, 0.08266807933672392, 0.07113832413278216, 0.0781075342080759, 0.07703463298462754, 0.08115132074695001, 0.07891938973044284, 0.07647942307044878, 0.06589851392129575, 0.06340248838213376, 0.06860937759830053, 0.0656263642633588, 0.07931163339370322, 0.07964990347831641, 0.07166536144579475, 0.0727304168946299, 0.07408994980662023, 0.0751113776879735, 0.06991488827019313, 0.08023630528670796, 0.07289795300859638, 0.07774730180960229, 0.06889627914299992, 0.07884692743783518, 0.07304960331156438], "moving_avg_accuracy_train": [0.0512848268072289, 0.1088540097891566, 0.16098395143072286, 0.20923984845632526, 0.2548562438817771, 0.30133974599962343, 0.3410241072430346, 0.3815240120307793, 0.41957407694215915, 0.4553251594587866, 0.48687519245869104, 0.4482097929417376, 0.414893425846359, 0.3855816999785906, 0.35901760001085203, 0.3347004597386825, 0.3137868896684287, 0.29473171350279065, 0.2789680677549212, 0.26680450646135684, 0.2537300422610043, 0.23954397327586774, 0.22922615350852193, 0.22076136948297095, 0.21355957364913167, 0.20728738887457995, 0.19944456866182075, 0.19467330456672302, 0.18917199444137603, 0.181561741533383, 0.17753866225956277, 0.17379082012999206, 0.16940354911096875, 0.16406193290469115, 0.1575602012106076, 0.1515345086497878, 0.1492316790197488, 0.1440529576539185, 0.14098990586443028, 0.14015098681413185, 0.13767109144597167, 0.1354321261266757, 0.13270640221882743, 0.1278530247981495, 0.12384501900508153, 0.12080257282746495, 0.11652540289411606, 0.11609744844807794, 0.1163641155008605, 0.11381091178209975, 0.11252959470027532, 0.11169879260976587, 0.1106992823246929, 0.10751244897174168, 0.10743514985770004, 0.10683847222132763, 0.10716036671606233, 0.10565225549626332, 0.10533740645266108, 0.10482343237366004], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234423, "moving_var_accuracy_train": [0.023671201145827183, 0.051131978494104544, 0.07047655798467203, 0.08438658656591473, 0.09467562769382389, 0.10465450864669995, 0.10836269452770793, 0.11228860566528463, 0.11409001205659819, 0.11418426996093473, 0.11172448420549681, 0.11400715386319774, 0.11259626132478417, 0.10906923065243061, 0.10451317025105163, 0.0993837630250938, 0.09338178344033517, 0.08731150274463316, 0.08081678521554873, 0.07406667670407455, 0.0681984835608038, 0.0631898361839829, 0.05782896920834749, 0.05269094540490575, 0.04788864363350592, 0.0434538419867704, 0.03966204624810034, 0.035900726272876826, 0.032583033363446354, 0.02984597357101427, 0.027007042715503818, 0.024432755329607106, 0.022162713119595653, 0.020203237580892597, 0.018563366457999997, 0.01703381054973767, 0.015378156713508772, 0.01408171343702206, 0.01275798266970564, 0.011488518469291659, 0.010395015551695695, 0.009400630687835216, 0.008527433756448035, 0.007886687832291149, 0.007242596042997432, 0.006601644747390933, 0.006106127916400535, 0.005497163429831435, 0.00494808708870165, 0.004511948022896928, 0.004075529181784812, 0.0036741883526286846, 0.0033157607046555163, 0.0030755877955653053, 0.00276808279238606, 0.0024944787309631763, 0.0022459634024585232, 0.0020418366572742238, 0.0018385451608291165, 0.0016570681689311697], "duration": 30602.601308, "accuracy_train": [0.5128482680722891, 0.626976656626506, 0.6301534262048193, 0.643542921686747, 0.6654038027108434, 0.719691265060241, 0.6981833584337349, 0.7460231551204819, 0.7620246611445783, 0.7770849021084337, 0.7708254894578314, 0.10022119728915663, 0.1150461219879518, 0.1217761671686747, 0.11994070030120482, 0.11584619728915663, 0.12556475903614459, 0.1232351280120482, 0.1370952560240964, 0.1573324548192771, 0.13605986445783133, 0.11186935240963855, 0.13636577560240964, 0.14457831325301204, 0.1487434111445783, 0.15083772590361447, 0.12885918674698796, 0.15173192771084337, 0.13966020331325302, 0.11306946536144578, 0.1413309487951807, 0.14006024096385541, 0.12991810993975902, 0.11598738704819277, 0.09904461596385543, 0.09730327560240964, 0.1285062123493976, 0.09744446536144578, 0.11342243975903614, 0.13260071536144577, 0.11535203313253012, 0.11528143825301204, 0.10817488704819277, 0.0841726280120482, 0.08777296686746988, 0.09342055722891567, 0.0780308734939759, 0.11224585843373494, 0.11876411897590361, 0.09083207831325302, 0.10099774096385543, 0.10422157379518072, 0.10170368975903614, 0.07883094879518072, 0.1067394578313253, 0.1014683734939759, 0.1100574171686747, 0.09207925451807229, 0.10250376506024096, 0.1001976656626506], "end": "2016-01-20 10:59:55.449000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0], "accuracy_valid": [0.5094818376068376, 0.610176282051282, 0.6116452991452992, 0.6235309829059829, 0.6487713675213675, 0.7037927350427351, 0.6870993589743589, 0.7232905982905983, 0.7403846153846154, 0.7479967948717948, 0.7441239316239316, 0.09895833333333333, 0.1171207264957265, 0.1312767094017094, 0.12005876068376069, 0.11738782051282051, 0.12246260683760683, 0.11672008547008547, 0.13541666666666666, 0.15718482905982906, 0.13020833333333334, 0.109375, 0.13408119658119658, 0.1452991452991453, 0.15197649572649571, 0.14463141025641027, 0.1267361111111111, 0.15384615384615385, 0.14129273504273504, 0.11444978632478632, 0.13955662393162394, 0.13835470085470086, 0.13528311965811965, 0.11591880341880342, 0.09815705128205128, 0.0968215811965812, 0.1282051282051282, 0.09615384615384616, 0.11538461538461539, 0.12540064102564102, 0.11458333333333333, 0.11351495726495726, 0.10737179487179487, 0.08266559829059829, 0.08400106837606838, 0.09081196581196581, 0.07665598290598291, 0.1140491452991453, 0.12005876068376069, 0.09001068376068376, 0.09895833333333333, 0.10430021367521368, 0.10336538461538461, 0.08039529914529915, 0.10657051282051282, 0.09815705128205128, 0.11351495726495726, 0.0921474358974359, 0.10296474358974358, 0.09748931623931624], "accuracy_test": 0.7498, "start": "2016-01-20 02:29:52.847000", "learning_rate_per_epoch": [0.0011312024435028434, 0.001120387576520443, 0.0011096760863438249, 0.0010990670416504145, 0.0010885593947023153, 0.0010781522141769528, 0.0010678445687517524, 0.0010576355271041393, 0.0010475240414962173, 0.0010375091806054115, 0.0010275901295244694, 0.0010177658405154943, 0.0010080354986712337, 0.0009983981726691127, 0.0009888530476018786, 0.000979399192146957, 0.0009700356749817729, 0.0009607616811990738, 0.0009515763376839459, 0.0009424788295291364, 0.0009334682836197317, 0.0009245438850484788, 0.0009157048189081252, 0.0009069502702914178, 0.0008982794242911041, 0.0008896914659999311, 0.0008811855805106461, 0.0008727610111236572, 0.0008644170011393726, 0.0008561527938582003, 0.0008479675743728876, 0.0008398605859838426, 0.0008318311301991343, 0.000823878450319171, 0.0008160017896443605, 0.0008082004496827722, 0.0008004736737348139, 0.0007928207633085549, 0.0007852410199120641, 0.0007777337450534105, 0.0007702982402406633, 0.0007629338069818914, 0.0007556398049928248, 0.0007484155357815325, 0.0007412603008560836, 0.000734173518139869, 0.0007271544891409576, 0.0007202025735750794, 0.0007133170729503036, 0.0007064974051900208, 0.0006997429300099611, 0.0006930530653335154, 0.0006864271708764136, 0.0006798646063543856, 0.0006733647896908224, 0.0006669270806014538, 0.0006605509552173316, 0.0006542357732541859, 0.0006479809526354074, 0.000641785969492048], "accuracy_train_last": 0.1001976656626506, "error_valid": [0.49051816239316237, 0.38982371794871795, 0.3883547008547008, 0.37646901709401714, 0.35122863247863245, 0.2962072649572649, 0.3129006410256411, 0.2767094017094017, 0.2596153846153846, 0.2520032051282052, 0.25587606837606836, 0.9010416666666666, 0.8828792735042735, 0.8687232905982906, 0.8799412393162394, 0.8826121794871795, 0.8775373931623932, 0.8832799145299145, 0.8645833333333334, 0.842815170940171, 0.8697916666666666, 0.890625, 0.8659188034188035, 0.8547008547008547, 0.8480235042735043, 0.8553685897435898, 0.8732638888888888, 0.8461538461538461, 0.8587072649572649, 0.8855502136752137, 0.8604433760683761, 0.8616452991452992, 0.8647168803418803, 0.8840811965811965, 0.9018429487179487, 0.9031784188034188, 0.8717948717948718, 0.9038461538461539, 0.8846153846153846, 0.874599358974359, 0.8854166666666666, 0.8864850427350427, 0.8926282051282052, 0.9173344017094017, 0.9159989316239316, 0.9091880341880342, 0.923344017094017, 0.8859508547008547, 0.8799412393162394, 0.9099893162393162, 0.9010416666666666, 0.8956997863247863, 0.8966346153846154, 0.9196047008547008, 0.8934294871794872, 0.9018429487179487, 0.8864850427350427, 0.9078525641025641, 0.8970352564102564, 0.9025106837606838], "accuracy_train_std": [0.1249632707364248, 0.12251232811200782, 0.12003592934259574, 0.11954032913102132, 0.12102481600358682, 0.11463650127119558, 0.11216585198970472, 0.10905346598576807, 0.1077403556586875, 0.10691486451721478, 0.10656976398123652, 0.07416078241101214, 0.08076882100978335, 0.08164089169223582, 0.08058619457067738, 0.0794135707481607, 0.08257099870627443, 0.0830248307423016, 0.0859463013570248, 0.09076254195418897, 0.0852099009179066, 0.07758443992357826, 0.08687083265336763, 0.08853277167641992, 0.08746575789689671, 0.08735131204977081, 0.08153219261230465, 0.0914961929563236, 0.08411581584762567, 0.07895101265793975, 0.08645926920770909, 0.08841981652241537, 0.08355168017540097, 0.07734713189932772, 0.07460972619975573, 0.07467352628391165, 0.08339387655817837, 0.07238636987142646, 0.0800116826526917, 0.08368505126041412, 0.07962333283283575, 0.08041430950260547, 0.07801687461061438, 0.06938744895375834, 0.0708771809098515, 0.07081715446526332, 0.06915774886121048, 0.07779860361093434, 0.08052196290448879, 0.07211656918351772, 0.0750357118452652, 0.07703916342346291, 0.07649837535640094, 0.06800688914653386, 0.07877438235281504, 0.07642631782961307, 0.07912744812892203, 0.07242072438451573, 0.07696711217335785, 0.07582973810648339], "accuracy_test_std": 0.11034020119611891, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.5501778302241526, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0011421216358070108, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "optimization": "adam", "nb_data_augmentation": 2, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 8.348959599765972e-06, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.009560472968027013}, "accuracy_valid_max": 0.7479967948717948, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234423\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -4], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.09748931623931624, "loss_train": [2.7790474891662598, 1.6262239217758179, 1.4361664056777954, 1.3578170537948608, 1.2887414693832397, 1.2040693759918213, 1.1352450847625732, 1.0724157094955444, 1.0225831270217896, 0.9858479499816895, 0.9488819241523743, 515614408704.0, 238934240.0, 50301616.0, 85107576.0, 4590122.5, 580761616384.0, 657908800.0, 162290576.0, 45156136.0, 16895806.0, 482053292032.0, 245377680.0, 95493368.0, 309407514624.0, 148366864.0, 47800836.0, 15147134.0, 144867377152.0, 79795360.0, 29354018.0, 9544670.0, 52605145088.0, 175556784.0, 54672656.0, 6469913.5, 1881889024.0, 8275100.0, 3040210.25, 103896.4765625, 49759.6171875, 2236653568.0, 1331488.875, 18596126720.0, 24318102.0, 10961332.0, 1864545.0, 162376220672.0, 50040384.0, 12181142528.0, 14679204.0, 6596704.5, 3049019.25, 1169451.625, 1780990720.0, 2305550.5, 1221534.875, 484178.375, 4229920512.0, 1948999.625], "accuracy_train_first": 0.5128482680722891, "model": "residualv2", "loss_std": [16.397541046142578, 0.2821584641933441, 0.279982328414917, 0.2794128358364105, 0.2744641602039337, 0.271993488073349, 0.27144855260849, 0.258871465921402, 0.26261594891548157, 0.2513110041618347, 0.25225648283958435, 17959250558976.0, 275135200.0, 36853992.0, 761706304.0, 8530615.0, 10680224710656.0, 453329408.0, 116561344.0, 33084224.0, 22120234.0, 10485341618176.0, 140097168.0, 235791024.0, 5678844346368.0, 117215224.0, 39003764.0, 15383850.0, 2356217118720.0, 137958064.0, 27099044.0, 6029625.0, 679513882624.0, 3834693632.0, 404429216.0, 13975587.0, 35631910912.0, 268944672.0, 18047172.0, 189825.984375, 37770.85546875, 43614261248.0, 1797123.375, 615123255296.0, 44821252.0, 30188874.0, 1481177.5, 7976996831232.0, 138466208.0, 169941975040.0, 12687355.0, 9507375.0, 3777914.75, 1781182.625, 24607397888.0, 1527094.875, 1139587.75, 1094549.5, 138627022848.0, 10286099.0]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:03 2016", "state": "available"}], "summary": "8a57d7bc60880f3e52498f6411b786df"}