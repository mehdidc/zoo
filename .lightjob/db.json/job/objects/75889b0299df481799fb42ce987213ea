{"content": {"hp_model": {"f0": 16, "f1": 16, "f2": 64, "f3": 16, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.00945310059085576, 0.006998819617655582, 0.0091784428541881, 0.00890890216990456, 0.011516843318294006, 0.00945310059085576, 0.006998819617655582, 0.00945310059085576, 0.006998819617655582, 0.006998819617655582, 0.00945310059085576, 0.007644216363663867, 0.00945310059085576, 0.011137684696428037, 0.007644216363663867, 0.007644216363663867, 0.00945310059085576, 0.007644216363663867, 0.009969818980935349, 0.009969818980935349, 0.009969818980935349, 0.009969818980935349, 0.007644216363663867, 0.0091784428541881, 0.0091784428541881, 0.0091784428541881, 0.008861289945655016, 0.008861289945655016, 0.008861289945655016, 0.007223387546041698, 0.008861289945655016, 0.006998819617655582, 0.006998819617655582, 0.006998819617655582, 0.00945310059085576, 0.009969818980935349, 0.0091784428541881, 0.0091784428541881, 0.0091784428541881, 0.007528012911450952, 0.0091784428541881, 0.0091784428541881, 0.0091784428541881, 0.00945310059085576, 0.0091784428541881, 0.0091784428541881, 0.0091784428541881, 0.0091784428541881, 0.0091784428541881, 0.0091784428541881, 0.0091784428541881, 0.0091784428541881], "moving_avg_accuracy_train": [0.01002620388635105, 0.01888978470203488, 0.027017925815856866, 0.03380090188737195, 0.040437967331478974, 0.04642037448468213, 0.051644538240532854, 0.05650628830283062, 0.060721860676866496, 0.06451587581349878, 0.06809049211849995, 0.07133809002043733, 0.07423048490474464, 0.07678767805671202, 0.07916555736482819, 0.08130564874213275, 0.08320128775427052, 0.08493780609263084, 0.08651938193408758, 0.08794280019139863, 0.08922387662297859, 0.09037452026259103, 0.0913937153501193, 0.09227146339913284, 0.09306143664324502, 0.093772412562946, 0.0943913285025724, 0.09494835284823616, 0.09544967475933355, 0.09587328713297569, 0.09628211561559913, 0.09652010525835816, 0.0967342959368413, 0.0969270675474761, 0.09726056467907954, 0.09760986466189141, 0.09786599777972774, 0.09809651758578043, 0.09830398541122787, 0.09846992431011985, 0.09864005146313333, 0.09879316590084547, 0.09893096889478639, 0.0990640758916588, 0.0991747878865184, 0.09927442868189204, 0.09936410539772832, 0.09944481444198096, 0.09951745258180833, 0.09958282690765297, 0.09964166380091315, 0.0996946170048473], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 463064538, "moving_var_accuracy_train": [0.0009047228793361285, 0.001521318175287942, 0.001963786459454977, 0.0021814866929901955, 0.0023597937630754125, 0.002445917144888138, 0.0024469524129308233, 0.0024149866946520117, 0.0023334274791534204, 0.0022296356889510323, 0.0021216730556077516, 0.002004427779240989, 0.0018792785348177945, 0.0017502038126842355, 0.0016260722214515157, 0.0015046849192352839, 0.0013865574526908037, 0.0012750411708768788, 0.0011700494930697073, 0.001071279619579955, 0.000978922069033906, 0.0008929456891989406, 0.0008129999479170224, 0.000738633927863244, 0.0006703870546146378, 0.0006078977299787258, 0.000550555469443766, 0.0004982924075943487, 0.0004507250797618309, 0.0004072675987735723, 0.00036804510545005267, 0.00033175034653559255, 0.00029898821070277487, 0.00026942383767729805, 0.00024348243694065778, 0.00022023228754852332, 0.00019879949636014403, 0.0001793978011529728, 0.00016184540712503847, 0.00014590868787602398, 0.00013157830832215387, 0.00011863147376926162, 0.00010693923337858721, 9.640476729427603e-05, 8.687460487710054e-05, 7.827649898231469e-05, 7.052122630435183e-05, 6.352772922233421e-05, 5.7222442994319025e-05, 5.153866291720389e-05, 4.641595264556009e-05, 4.179959375726611e-05], "duration": 45364.334838, "accuracy_train": [0.10026203886351052, 0.09866201204318938, 0.10017119584025472, 0.09484768653100775, 0.10017155632844223, 0.10026203886351052, 0.09866201204318938, 0.10026203886351052, 0.09866201204318938, 0.09866201204318938, 0.10026203886351052, 0.10056647113787376, 0.10026203886351052, 0.0998024164244186, 0.10056647113787376, 0.10056647113787376, 0.10026203886351052, 0.10056647113787376, 0.10075356450719822, 0.10075356450719822, 0.10075356450719822, 0.10073031301910298, 0.10056647113787376, 0.10017119584025472, 0.10017119584025472, 0.10017119584025472, 0.09996157195921003, 0.09996157195921003, 0.09996157195921003, 0.0996857984957549, 0.09996157195921003, 0.09866201204318938, 0.09866201204318938, 0.09866201204318938, 0.10026203886351052, 0.10075356450719822, 0.10017119584025472, 0.10017119584025472, 0.10017119584025472, 0.09996337440014766, 0.10017119584025472, 0.10017119584025472, 0.10017119584025472, 0.10026203886351052, 0.10017119584025472, 0.10017119584025472, 0.10017119584025472, 0.10017119584025472, 0.10017119584025472, 0.10017119584025472, 0.10017119584025472, 0.10017119584025472], "end": "2016-01-28 00:42:09.754000", "learning_rate_per_epoch": [0.0014859155053272843, 0.0013660733820870519, 0.0012558967573568225, 0.001154606114141643, 0.001061484683305025, 0.0009758737287484109, 0.0008971674833446741, 0.0008248090744018555, 0.0007582865073345602, 0.0006971291149966419, 0.0006409041816368699, 0.0005892139161005616, 0.0005416925996541977, 0.000498003966640681, 0.00045783890527673066, 0.00042091324576176703, 0.00038696572300978005, 0.0003557561431080103, 0.00032706366619095206, 0.00030068529304116964, 0.00027643440989777446, 0.00025413939147256315, 0.00023364252410829067, 0.0002147987688658759, 0.00019747480109799653, 0.00018154805002268404, 0.00016690582560840994, 0.00015344451821874827, 0.0001410689001204446, 0.0001296913978876546, 0.00011923151760129258, 0.00010961524822050706, 0.0001007745522656478, 9.264687832910568e-05, 8.517471724189818e-05, 7.830520189600065e-05, 7.198972161859274e-05, 6.618360202992335e-05, 6.084575579734519e-05, 5.593842070084065e-05, 5.142687223269604e-05, 4.727918712887913e-05, 4.3466021452331915e-05, 3.9960395952221006e-05, 3.673750688903965e-05, 3.3774551411625e-05, 3.105056384811178e-05, 2.8546272005769424e-05, 2.624395528982859e-05, 2.412732646916993e-05, 2.2181407985044643e-05, 2.0392431906657293e-05], "accuracy_valid": [0.10110951618975904, 0.10628647402108433, 0.10111981127635541, 0.08889071912650602, 0.09769007671310241, 0.10110951618975904, 0.10628647402108433, 0.10110951618975904, 0.10628647402108433, 0.10628647402108433, 0.10110951618975904, 0.09700913027108433, 0.10110951618975904, 0.09892107492469879, 0.09700913027108433, 0.09700913027108433, 0.10110951618975904, 0.09700913027108433, 0.09490304969879518, 0.09490304969879518, 0.09490304969879518, 0.09490304969879518, 0.09700913027108433, 0.10111981127635541, 0.10111981127635541, 0.10111981127635541, 0.09928728586219879, 0.09928728586219879, 0.09928728586219879, 0.10245228962725904, 0.09928728586219879, 0.10628647402108433, 0.10628647402108433, 0.10628647402108433, 0.10110951618975904, 0.09490304969879518, 0.10111981127635541, 0.10111981127635541, 0.10111981127635541, 0.10122129141566265, 0.10111981127635541, 0.10111981127635541, 0.10111981127635541, 0.10110951618975904, 0.10111981127635541, 0.10111981127635541, 0.10111981127635541, 0.10111981127635541, 0.10111981127635541, 0.10111981127635541, 0.10111981127635541, 0.10111981127635541], "accuracy_test": 0.09968909438775511, "start": "2016-01-27 12:06:05.419000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0], "accuracy_train_last": 0.10017119584025472, "batch_size_eval": 1024, "accuracy_train_std": [0.00974888953230617, 0.009190611826159848, 0.009090994206928382, 0.009315900395818371, 0.00909277901447879, 0.00974888953230617, 0.009190611826159848, 0.00974888953230617, 0.009190611826159848, 0.009190611826159848, 0.00974888953230617, 0.007962645482326159, 0.00974888953230617, 0.011551492110979233, 0.007962645482326159, 0.007962645482326159, 0.00974888953230617, 0.007962645482326159, 0.008155165795315701, 0.008155165795315701, 0.008155165795315701, 0.008184792045636607, 0.007962645482326159, 0.009090994206928382, 0.009090994206928382, 0.009090994206928382, 0.008977726714783488, 0.008977726714783488, 0.008977726714783488, 0.008347175051911888, 0.008977726714783488, 0.009190611826159848, 0.009190611826159848, 0.009190611826159848, 0.00974888953230617, 0.008155165795315701, 0.009090994206928382, 0.009090994206928382, 0.009090994206928382, 0.010586953715662744, 0.009090994206928382, 0.009090994206928382, 0.009090994206928382, 0.00974888953230617, 0.009090994206928382, 0.009090994206928382, 0.009090994206928382, 0.009090994206928382, 0.009090994206928382, 0.009090994206928382, 0.009090994206928382, 0.009090994206928382], "accuracy_test_std": 0.007448442678108315, "error_valid": [0.898890483810241, 0.8937135259789156, 0.8988801887236446, 0.911109280873494, 0.9023099232868976, 0.898890483810241, 0.8937135259789156, 0.898890483810241, 0.8937135259789156, 0.8937135259789156, 0.898890483810241, 0.9029908697289156, 0.898890483810241, 0.9010789250753012, 0.9029908697289156, 0.9029908697289156, 0.898890483810241, 0.9029908697289156, 0.9050969503012049, 0.9050969503012049, 0.9050969503012049, 0.9050969503012049, 0.9029908697289156, 0.8988801887236446, 0.8988801887236446, 0.8988801887236446, 0.9007127141378012, 0.9007127141378012, 0.9007127141378012, 0.897547710372741, 0.9007127141378012, 0.8937135259789156, 0.8937135259789156, 0.8937135259789156, 0.898890483810241, 0.9050969503012049, 0.8988801887236446, 0.8988801887236446, 0.8988801887236446, 0.8987787085843374, 0.8988801887236446, 0.8988801887236446, 0.8988801887236446, 0.898890483810241, 0.8988801887236446, 0.8988801887236446, 0.8988801887236446, 0.8988801887236446, 0.8988801887236446, 0.8988801887236446, 0.8988801887236446, 0.8988801887236446], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "momentum": 0.7631079526190927, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0016162710457812296, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "l2_decay": 1.943000991731142e-05, "optimization": "santa_sss", "nb_data_augmentation": 4, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.08065207406111403}, "accuracy_valid_max": 0.10628647402108433, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop', 'santa_sss'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.10111981127635541, "loss_train": [113006.4453125, 119824.7578125, 125337.3046875, 134105.6875, 143641.421875, 154298.078125, 164737.25, 178642.5, 189935.546875, 200289.8125, 211743.546875, 226936.78125, 235873.96875, 241661.1875, 260668.65625, 259652.953125, 278608.84375, 296493.03125, 298735.09375, 329318.5625, 324828.65625, 355129.84375, 355640.96875, 373499.65625, 389673.25, 406752.375, 415836.5625, 447304.125, 466307.84375, 450448.9375, 515886.8125, 542823.9375, 504839.75, 553557.25, 627337.0625, 626121.75, 606320.8125, 641102.25, 707396.5, 741956.875, 764494.3125, 781946.3125, 802110.1875, 851509.9375, 916778.6875, 973517.75, 1017883.9375, 1043240.4375, 1054809.75, 1066658.375, 1094519.25, 1155521.5], "accuracy_train_first": 0.10026203886351052, "model": "residualv3", "loss_std": [44508.7890625, 10644.3203125, 3278.156982421875, 4040.623291015625, 4720.0439453125, 5110.87841796875, 5359.15966796875, 7352.302734375, 9464.9150390625, 5999.2451171875, 4495.6025390625, 9208.3271484375, 12602.7470703125, 6084.58642578125, 8442.041015625, 14599.3310546875, 9194.6884765625, 19048.263671875, 11020.7197265625, 16354.083984375, 6691.63916015625, 13797.3408203125, 5054.42041015625, 12235.7861328125, 2664.943359375, 4419.59765625, 3798.4384765625, 16376.6396484375, 7874.7236328125, 9317.369140625, 22696.908203125, 7915.7705078125, 7738.86474609375, 28339.62109375, 11151.2744140625, 7143.74951171875, 2647.378662109375, 21258.515625, 14107.7294921875, 7479.2529296875, 6071.91259765625, 4779.21240234375, 8131.17041015625, 19425.880859375, 17867.025390625, 15277.9462890625, 10401.732421875, 4974.27001953125, 2489.916259765625, 5558.10107421875, 11462.0703125, 23576.94921875]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:18 2016", "state": "available"}], "summary": "97043f485d086560e7d1b19d0292cfef"}