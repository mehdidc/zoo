{"content": {"hp_model": {"f0": 64, "f1": 16, "f2": 64, "f3": 64, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.016897195647537975, 0.01902055202035446, 0.014380871363632865, 0.014306937352622192, 0.016281546451213765, 0.015082033028825433, 0.010468398754478457, 0.009380153837449973, 0.011375330453044879, 0.014156341745445757, 0.010728579794276763, 0.008742459331822109, 0.00915199909712761, 0.00410936082267993, 0.008264972965551903, 0.012624603854533645, 0.013426105603503635, 0.01345568637986225, 0.009854017866047124, 0.01105708537405281, 0.011140839366580672, 0.013884186846659347, 0.008657299763020305, 0.010745540813301088, 0.011047216701998491, 0.011846705227567455, 0.010487002992478029, 0.00995446808886001, 0.011373569227973206, 0.011820382664224404, 0.011836317399604697, 0.01191944890808825, 0.010332274094575374, 0.009946703352171644, 0.010482277259966538, 0.00998193655924737, 0.010764043231626002, 0.010484256915483192, 0.01185810266748786, 0.013292394651695034, 0.014054683472479523, 0.01468539464289633, 0.015276071760048363, 0.014793529888288429, 0.014337703681604332, 0.01346920724153346, 0.012915129338345743, 0.012890229655604967, 0.012392124274909879, 0.013089356112753966, 0.012658018965518703, 0.01267321430709649, 0.01250804307555286, 0.012344959527481623, 0.013205589622572388, 0.013219485406916675, 0.013066945751099505, 0.013344131675678954, 0.013778091038613067, 0.013939225419653494, 0.013905104157278341, 0.013875170997454634], "moving_avg_accuracy_train": [0.04993563483411774, 0.10054308446670818, 0.149772284118044, 0.19695394375879588, 0.24220238892818208, 0.28537626384004267, 0.32613439854753895, 0.36455320940799363, 0.4006180181275856, 0.43448051956325817, 0.46630270757670905, 0.4961258170446749, 0.524101107940798, 0.5503040080305776, 0.5749767163660395, 0.5980282917417095, 0.6198301108464237, 0.6402098907478463, 0.6599696008471111, 0.6787509369221914, 0.6961584443396991, 0.7124740617285882, 0.7280952965441014, 0.7431052855947023, 0.7575117110830819, 0.7713841578630627, 0.785039054011511, 0.7979817913117719, 0.8101834961033983, 0.8215813041504044, 0.8321531543843581, 0.8420375543044495, 0.85118001605516, 0.8596268677165322, 0.867438333653443, 0.8746593151990437, 0.8813326207996174, 0.8874339629901429, 0.8930926177247203, 0.8983319274096587, 0.9031635635665795, 0.9075887299697037, 0.9116690359825156, 0.9154250528000079, 0.918824069126227, 0.9219552273841007, 0.924798846453092, 0.9273813190544604, 0.9297241455861683, 0.9318768672920864, 0.9338375322666891, 0.9356509588688315, 0.9372923794548166, 0.938804535214346, 0.940191088083646, 0.9414645983517395, 0.9426363342299284, 0.9437048474131556, 0.9446967001637651, 0.9455940179369327, 0.9464201690744409, 0.9471753308422459], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 685651421, "moving_var_accuracy_train": [0.022442108636577186, 0.04324792339775607, 0.060734757942780215, 0.074696263206604, 0.08565343299816613, 0.09386394097249443, 0.0994285767787547, 0.10276976435226175, 0.10419882176886236, 0.10409896062330448, 0.10280292941064476, 0.10052739719462475, 0.09751820958166667, 0.09394571638153472, 0.09002982757284224, 0.08580922096125974, 0.08150617271160591, 0.07709357429991918, 0.07289823215879017, 0.06878305620579718, 0.06463194241563273, 0.06056454251109503, 0.056704295054438164, 0.05306156349068678, 0.049623312999788186, 0.046392984716779974, 0.04343179194452614, 0.0405962427894856, 0.03787655290893504, 0.0352580878725291, 0.0327381552415985, 0.030343651973461363, 0.02806154823788406, 0.025897537140998683, 0.02385695442765048, 0.021940542155222585, 0.020147285008448156, 0.018467593896336322, 0.016909017867349094, 0.015465169374386393, 0.014128754808523533, 0.012892118206929237, 0.011752746460660008, 0.010704440775593571, 0.009737976505907358, 0.008852416223639283, 0.008039950125961128, 0.007295977595996388, 0.006615779361815819, 0.005995909322322413, 0.005430916254373877, 0.004917421273308711, 0.0044499274998387, 0.0040255142852245315, 0.003640265616436355, 0.0032908355104191754, 0.0029741086440913745, 0.0026869732634868092, 0.0024271298840481534, 0.0021916635083177203, 0.0019786398888040043, 0.001785908323583594], "duration": 35934.451505, "accuracy_train": [0.49935634834117754, 0.5560101311600222, 0.5928350809800664, 0.6215888805255629, 0.6494383954526578, 0.6739411380467885, 0.6929576109150055, 0.7103225071520857, 0.7252012966039129, 0.7392430324843116, 0.7527023996977666, 0.7645338022563677, 0.7758787260059062, 0.7861301088385935, 0.7970310913851975, 0.8054924701227391, 0.816046482788852, 0.8236279098606497, 0.8378069917404946, 0.8477829615979143, 0.8528260110972684, 0.8593146182285898, 0.8686864098837209, 0.8781951870501107, 0.8871695404784975, 0.8962361788828904, 0.9079331193475452, 0.9144664270141197, 0.9199988392280363, 0.9241615765734589, 0.9272998064899409, 0.9309971535852714, 0.9334621718115541, 0.9356485326688816, 0.9377415270856404, 0.9396481491094499, 0.9413923712047803, 0.9423460427048725, 0.9440205103359173, 0.9454857145741048, 0.9466482889788667, 0.947415227597822, 0.948391790097822, 0.9492292041574382, 0.9494152160622, 0.9501356517049648, 0.9503914180740125, 0.9506235724667773, 0.9508095843715393, 0.9512513626453488, 0.9514835170381136, 0.9519717982881136, 0.9520651647286821, 0.9524139370501107, 0.9526700639073459, 0.952926190764581, 0.9531819571336286, 0.9533214660622, 0.9536233749192506, 0.9536698778954411, 0.9538555293120154, 0.9539717867524916], "end": "2016-01-24 18:45:58.387000", "learning_rate_per_epoch": [0.0005646948120556772, 0.0005481783882714808, 0.0005321450298652053, 0.0005165806505829096, 0.0005014715134166181, 0.0004868042597081512, 0.0004725659964606166, 0.00045874417992308736, 0.0004453266446944326, 0.00043230154551565647, 0.00041965741547755897, 0.0004073831078130752, 0.0003954677958972752, 0.0003839010023511946, 0.0003726725117303431, 0.00036177242873236537, 0.0003511911490932107, 0.00034091935958713293, 0.00033094800892286, 0.00032126830774359405, 0.0003118717286270112, 0.00030274997698143125, 0.0002938950201496482, 0.0002852990583050996, 0.00027695452445186675, 0.00026885405532084405, 0.0002609904913697392, 0.00025335693499073386, 0.00024594663409516215, 0.00023875308397691697, 0.00023176994000095874, 0.00022499103215523064, 0.00021841040870640427, 0.00021202224888838828, 0.00020582093566190451, 0.00019980099750682712, 0.00019395713752601296, 0.0001882842043414712, 0.00018277719209436327, 0.00017743125499691814, 0.0001722416782286018, 0.00016720387793611735, 0.00016231343033723533, 0.00015756601351313293, 0.0001529574510641396, 0.00014848368300590664, 0.00014414076576940715, 0.00013992487220093608, 0.00013583229156211019, 0.00013185941497795284, 0.000128002735436894, 0.00012425886234268546, 0.00012062448513461277, 0.0001170964096672833, 0.00011367152910679579, 0.00011034681665478274, 0.00010711934737628326, 0.00010398627637187019, 0.00010094484605360776, 9.799237159313634e-05, 9.512624819763005e-05, 9.234395838575438e-05], "accuracy_valid": [0.4827660250376506, 0.5277805558170181, 0.5627456113516567, 0.5887068782944277, 0.6119517131024097, 0.6313211831701807, 0.650233257247741, 0.6612813558923193, 0.6677819677146084, 0.6753400320030121, 0.6820950795368976, 0.6827569065323795, 0.6827466114457832, 0.6809052616716867, 0.6759812688253012, 0.6700395331325302, 0.6657464820218373, 0.662928569747741, 0.6641801581325302, 0.6646684393825302, 0.6578119117093373, 0.6575677710843373, 0.6586061041039157, 0.6586972891566265, 0.6636109869164157, 0.6664494893637049, 0.6751782520707832, 0.6735707478350903, 0.6785962208207832, 0.6798375141189759, 0.6790947971573795, 0.6805596409073795, 0.6804272755082832, 0.6811596973832832, 0.6808037815323795, 0.6810376270707832, 0.6811596973832832, 0.6791962772966867, 0.6789521366716867, 0.6783520801957832, 0.6784844455948795, 0.6789830219314759, 0.6780064594314759, 0.6779858692582832, 0.6767445759600903, 0.6773652226091867, 0.6778637989457832, 0.6779858692582832, 0.6781079395707832, 0.6790947971573795, 0.6798375141189759, 0.6793492328689759, 0.6804478656814759, 0.6804478656814759, 0.6803155002823795, 0.6814244281814759, 0.6809258518448795, 0.6808037815323795, 0.6804375705948795, 0.6803052051957832, 0.6800610645707832, 0.6798066288591867], "accuracy_test": 0.30116589604591837, "start": "2016-01-24 08:47:03.936000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0], "accuracy_train_last": 0.9539717867524916, "batch_size_eval": 1024, "accuracy_train_std": [0.021575685102624056, 0.02274011039893723, 0.02051475119427674, 0.02078586983410851, 0.021086471536195455, 0.02049212076224471, 0.02123535850927236, 0.021617878948717674, 0.02141486637514674, 0.021402925947835532, 0.022338756379748265, 0.023307774431751083, 0.02314449735939833, 0.025104342214233414, 0.02649043074136881, 0.027964772273486715, 0.028982490246595098, 0.027648274561869024, 0.02808512183746734, 0.026202456733262918, 0.02652237897968604, 0.024508361627810477, 0.02257285596708413, 0.022046427033889968, 0.020216407000612807, 0.019254967571822313, 0.016160102382884293, 0.015030756426515047, 0.013908064434907096, 0.012611341339472672, 0.011950774201418405, 0.011215905371281608, 0.010528393220126747, 0.009836377207285339, 0.00903170591334634, 0.008510510155716593, 0.007771124303975094, 0.007364105387783608, 0.006975149834568448, 0.006661113431868026, 0.006482725771611426, 0.006112514488421594, 0.006311959887478642, 0.006426405245382657, 0.006493724355669349, 0.006195943776199924, 0.006020225400866353, 0.006011605868379191, 0.005728174269204463, 0.005935509779094549, 0.005954081907619213, 0.0060694637341240434, 0.006064437386308037, 0.0061429340763368015, 0.006187577471517503, 0.006243001033953488, 0.006334347870362687, 0.006427655936402119, 0.006171366018548178, 0.0061268018153472865, 0.006032461992529824, 0.0060342010030261985], "accuracy_test_std": 0.014689314067625628, "error_valid": [0.5172339749623494, 0.4722194441829819, 0.4372543886483433, 0.4112931217055723, 0.3880482868975903, 0.3686788168298193, 0.34976674275225905, 0.3387186441076807, 0.3322180322853916, 0.32465996799698793, 0.31790492046310237, 0.3172430934676205, 0.3172533885542168, 0.31909473832831325, 0.3240187311746988, 0.3299604668674698, 0.3342535179781627, 0.33707143025225905, 0.3358198418674698, 0.3353315606174698, 0.3421880882906627, 0.3424322289156627, 0.34139389589608427, 0.3413027108433735, 0.33638901308358427, 0.33355051063629515, 0.3248217479292168, 0.3264292521649097, 0.3214037791792168, 0.32016248588102414, 0.3209052028426205, 0.3194403590926205, 0.3195727244917168, 0.3188403026167168, 0.3191962184676205, 0.3189623729292168, 0.3188403026167168, 0.32080372270331325, 0.32104786332831325, 0.3216479198042168, 0.3215155544051205, 0.32101697806852414, 0.32199354056852414, 0.3220141307417168, 0.3232554240399097, 0.32263477739081325, 0.3221362010542168, 0.3220141307417168, 0.3218920604292168, 0.3209052028426205, 0.32016248588102414, 0.32065076713102414, 0.31955213431852414, 0.31955213431852414, 0.3196844997176205, 0.31857557181852414, 0.3190741481551205, 0.3191962184676205, 0.3195624294051205, 0.3196947948042168, 0.3199389354292168, 0.32019337114081325], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.8056026946763135, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0005817088539791763, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "optimization": "nesterov_momentum", "nb_data_augmentation": 0, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 3.499578977225171e-06, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.02924840981643395}, "accuracy_valid_max": 0.6827569065323795, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.6798066288591867, "loss_train": [1.7686982154846191, 1.4916038513183594, 1.3610596656799316, 1.2617783546447754, 1.1811139583587646, 1.1141057014465332, 1.0557430982589722, 1.0027682781219482, 0.9523134827613831, 0.9040496945381165, 0.8566256165504456, 0.8091707825660706, 0.7614554762840271, 0.712756872177124, 0.6635370850563049, 0.6127861738204956, 0.5612517595291138, 0.5083780288696289, 0.4559592306613922, 0.4049060642719269, 0.3562313914299011, 0.3124799132347107, 0.2750861942768097, 0.2440623790025711, 0.21914556622505188, 0.19995473325252533, 0.18548347055912018, 0.17444273829460144, 0.1668434888124466, 0.16138781607151031, 0.157359316945076, 0.15438759326934814, 0.1521337479352951, 0.15036039054393768, 0.1489347219467163, 0.14775779843330383, 0.14677834510803223, 0.145938441157341, 0.14521969854831696, 0.14459702372550964, 0.1440490484237671, 0.1435701549053192, 0.14314310252666473, 0.14276544749736786, 0.14242789149284363, 0.142124205827713, 0.14184726774692535, 0.14159804582595825, 0.1413680613040924, 0.1411604881286621, 0.1409698873758316, 0.14079423248767853, 0.14063188433647156, 0.1404813826084137, 0.14034268260002136, 0.14021319150924683, 0.14009371399879456, 0.1399812549352646, 0.13987576961517334, 0.13977676630020142, 0.13968390226364136, 0.1395963430404663], "accuracy_train_first": 0.49935634834117754, "model": "residualv3", "loss_std": [0.30018195509910583, 0.26014891266822815, 0.2649315595626831, 0.2663666009902954, 0.2668036222457886, 0.26532602310180664, 0.2620369791984558, 0.25800812244415283, 0.25332799553871155, 0.2477666437625885, 0.24202720820903778, 0.23529770970344543, 0.22751805186271667, 0.2191847264766693, 0.20982243120670319, 0.19830948114395142, 0.18566401302814484, 0.17083092033863068, 0.15453502535820007, 0.1364833116531372, 0.11800744384527206, 0.09956327080726624, 0.08154226839542389, 0.06551742553710938, 0.05100573971867561, 0.039466291666030884, 0.029416760429739952, 0.020772602409124374, 0.015422778204083443, 0.011831149458885193, 0.00962996855378151, 0.008040054701268673, 0.0069328052923083305, 0.006136117968708277, 0.005494358949363232, 0.004979206249117851, 0.004556435160338879, 0.0041989837773144245, 0.0038983935955911875, 0.0036381734535098076, 0.003399528795853257, 0.003193582408130169, 0.003012725617736578, 0.002851181896403432, 0.0027108683716505766, 0.002585441805422306, 0.002470291219651699, 0.002368217334151268, 0.00227374117821455, 0.0021894793026149273, 0.0021134617272764444, 0.0020438916981220245, 0.0019793647807091475, 0.0019202659605070949, 0.00186606973875314, 0.001815634430386126, 0.0017703714547678828, 0.001727228402160108, 0.0016873507993295789, 0.0016502877697348595, 0.0016157376812770963, 0.0015828177565708756]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:11 2016", "state": "available"}], "summary": "9d6a9cecaac1a47393281108275b5c73"}