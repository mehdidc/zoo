{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 32, "f3": 64, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.5359824895858765, 1.1158373355865479, 0.8529998660087585, 0.7297981381416321, 0.6502432227134705, 0.5905988216400146, 0.5486589670181274, 0.5165311694145203, 0.48633959889411926, 0.4647001028060913, 0.44407084584236145, 0.4267263114452362, 0.41242948174476624, 0.40020978450775146, 0.3872644901275635, 0.3764773905277252, 0.3648177981376648, 0.35628843307495117, 0.34772399067878723, 0.3385038673877716, 0.3308050036430359, 0.32445985078811646, 0.31806713342666626, 0.3133384585380554, 0.3072977662086487, 0.3011188805103302, 0.2967752516269684, 0.2905080318450928, 0.28673020005226135, 0.28221842646598816, 0.2778720259666443, 0.27343103289604187, 0.27039361000061035, 0.2665404677391052, 0.26172348856925964, 0.25766775012016296, 0.25722581148147583, 0.25258663296699524, 0.2520543336868286, 0.24942275881767273, 0.24487575888633728, 0.24267637729644775, 0.24081814289093018, 0.23664763569831848, 0.23380327224731445, 0.231538787484169, 0.23170022666454315, 0.2278737723827362, 0.22480066120624542, 0.22487851977348328, 0.22253385186195374, 0.2199854850769043, 0.21778281033039093, 0.21605515480041504, 0.2137773036956787, 0.21353863179683685, 0.21054884791374207, 0.20974421501159668, 0.20763197541236877, 0.20660506188869476, 0.20614616572856903, 0.20348887145519257, 0.2038707137107849, 0.19914057850837708, 0.19849741458892822, 0.19812053442001343, 0.19638922810554504, 0.1962122768163681, 0.1936403065919876, 0.1922069787979126, 0.19398079812526703, 0.1899915635585785, 0.18917864561080933, 0.188937246799469, 0.18597294390201569, 0.18594244122505188, 0.18509767949581146, 0.18524757027626038, 0.18289624154567719, 0.1836562603712082, 0.1806483268737793, 0.1813288778066635, 0.1792663037776947, 0.1771940439939499, 0.17719078063964844, 0.17633146047592163, 0.17305602133274078, 0.17531323432922363, 0.17543719708919525, 0.17088265717029572, 0.1709408462047577, 0.17142347991466522, 0.1697748452425003, 0.17102086544036865, 0.16927514970302582, 0.16785991191864014, 0.1664072871208191, 0.1667342185974121, 0.16678866744041443, 0.1647963672876358, 0.1645316481590271, 0.1648126095533371, 0.16390648484230042, 0.1632290482521057, 0.1628904491662979, 0.1612434834241867, 0.16110146045684814, 0.15845228731632233, 0.15846329927444458, 0.15867622196674347, 0.15817159414291382, 0.1582726240158081, 0.15846163034439087, 0.1574041098356247, 0.15572984516620636, 0.15442092716693878, 0.15534211695194244, 0.15477651357650757, 0.15376421809196472, 0.1541929543018341, 0.15259230136871338, 0.15306763350963593, 0.15348944067955017, 0.15047910809516907, 0.15098534524440765, 0.14911437034606934, 0.15023604035377502, 0.14989182353019714, 0.14884056150913239, 0.1479262113571167, 0.14800423383712769, 0.14673253893852234, 0.14690053462982178, 0.14558957517147064, 0.1457938849925995, 0.14523187279701233, 0.14521411061286926, 0.14479465782642365, 0.14550960063934326, 0.14177575707435608, 0.14332562685012817, 0.143018439412117, 0.14266720414161682, 0.1422639936208725, 0.14094513654708862, 0.14481601119041443, 0.14022785425186157, 0.1399890035390854, 0.1399531066417694, 0.14003217220306396, 0.14070577919483185, 0.1386483907699585, 0.1387755125761032, 0.13866737484931946, 0.13819147646427155, 0.13938404619693756, 0.13569550216197968, 0.1379968374967575, 0.13578912615776062, 0.13596929609775543, 0.13647763431072235, 0.13593846559524536, 0.13428254425525665, 0.13464942574501038, 0.1350145936012268, 0.13458676636219025, 0.13637302815914154, 0.1330878883600235, 0.13208161294460297, 0.13161523640155792, 0.13348069787025452, 0.13214918971061707, 0.13237974047660828, 0.13074474036693573, 0.13182756304740906, 0.1301109790802002, 0.13064688444137573, 0.12964554131031036, 0.12919937074184418, 0.12941476702690125, 0.12862420082092285, 0.12847287952899933, 0.1276216357946396, 0.12871764600276947, 0.12935717403888702, 0.12833304703235626, 0.12711220979690552, 0.12726902961730957, 0.12584982812404633, 0.1282348334789276, 0.1271471530199051, 0.12605245411396027, 0.12624062597751617, 0.12607496976852417, 0.12581591308116913, 0.12419508397579193, 0.1254984587430954, 0.12444425374269485, 0.12507601082324982, 0.124546580016613, 0.12491388618946075, 0.12425143271684647, 0.12366501241922379, 0.12222659587860107, 0.12029555439949036, 0.12235849350690842, 0.12306039780378342, 0.12284617871046066, 0.12279079109430313, 0.12051690369844437, 0.12322268635034561, 0.12161564826965332, 0.12087935954332352, 0.12106166779994965, 0.11860885471105576, 0.12123662233352661, 0.1201883926987648, 0.1197780966758728, 0.11962325870990753, 0.12087684124708176, 0.11928616464138031], "moving_avg_accuracy_train": [0.05660941176470587, 0.1213861176470588, 0.18648279999999995, 0.24879216705882348, 0.307762362117647, 0.36276259649411763, 0.4134981015505882, 0.46049417374847057, 0.5034941681383294, 0.5425306336774376, 0.5784210997214585, 0.6113389897493127, 0.6413062672449696, 0.6687003464028256, 0.6938656058801901, 0.7167613982333476, 0.737475846645307, 0.7566059090395998, 0.7740841416650516, 0.7901792569103111, 0.8050366253369271, 0.8182317863326461, 0.8304815488758521, 0.8417675116353257, 0.8521460545894403, 0.8616138020716727, 0.8703206571586231, 0.8784344737957019, 0.8856945558278965, 0.8922827473039303, 0.8986003549264785, 0.9044485547279483, 0.9098954639610358, 0.9147953293296381, 0.9192593258084389, 0.9235051579334773, 0.9273358186107178, 0.9309857661614107, 0.9343624836629166, 0.9373685882378014, 0.9403705529434331, 0.9429052623549722, 0.9454288537665338, 0.9478271448604687, 0.9499879597861866, 0.9519326932193326, 0.9536617768385758, 0.9552485403311888, 0.9569566274745405, 0.9584797882564982, 0.9599941623720248, 0.9612394520171753, 0.9626543303448696, 0.9638477208397943, 0.9649641252264031, 0.9659830068214098, 0.9669776473157394, 0.9678681178782832, 0.9686554237375137, 0.96949811665788, 0.9701788932273862, 0.9709610039046476, 0.971726079984771, 0.9725275896333527, 0.973263065964135, 0.9738426417206627, 0.9743595540191847, 0.9748859515584427, 0.9753691211084807, 0.9758345619388091, 0.9763005175096341, 0.9768022304645531, 0.9772137721239801, 0.9777018066762879, 0.9780798613027768, 0.9784977575254403, 0.9788432758905433, 0.9792318894779596, 0.9795934064125166, 0.9797752422418531, 0.980143600370609, 0.9804115932747246, 0.9807327868884286, 0.9809889199642916, 0.9812570867913918, 0.9815690251710761, 0.9818403579480861, 0.9821622045062186, 0.9824730428791262, 0.9827316209441547, 0.9829078706144451, 0.9830970835530006, 0.9832273751977005, 0.9834128729720482, 0.9836268797924904, 0.9837959565191237, 0.984004596161329, 0.9842911953687254, 0.9844103111259705, 0.9845975153074911, 0.9847871755414479, 0.9849061050461267, 0.9850743180709258, 0.9852562980285391, 0.9854436094021558, 0.9855674837560578, 0.9857283824392755, 0.9859367206659363, 0.986079519187578, 0.9862198025629377, 0.9863154693654674, 0.9864227459583325, 0.9865051772448522, 0.9866828948144847, 0.986708722980095, 0.9868237330350267, 0.9868943009079947, 0.9869625178760187, 0.987092148441358, 0.9871358747736928, 0.9873258167080883, 0.987435587978456, 0.9875508527100222, 0.9876734144978435, 0.9877413671657062, 0.9877719363314884, 0.9878700368159866, 0.9879418566637997, 0.9880347298209492, 0.9880830215447366, 0.988185307625557, 0.9883291298041779, 0.9884609227061131, 0.9885889480825606, 0.988697112097834, 0.9887544597115799, 0.9888272490345397, 0.988876288836968, 0.9889580717179771, 0.9890387351344148, 0.9891725086797969, 0.9892270225176996, 0.9893207908541649, 0.9893675352981602, 0.9893672523565795, 0.9893905271209216, 0.9894726508794176, 0.9895771504973582, 0.9896500236829164, 0.9897203154322718, 0.9898212250655152, 0.9898273378530813, 0.9898822511265968, 0.9898916730727606, 0.9899566234125434, 0.9900009610712891, 0.9900196884935719, 0.9900906608206853, 0.9901286535621462, 0.9902122587941669, 0.9902380917382796, 0.9903248707997457, 0.9904076778374182, 0.9904610277007352, 0.9905019837541911, 0.9904611971434779, 0.990464489193836, 0.9904580402744524, 0.9905557656587718, 0.9905684243870123, 0.9906056995953699, 0.9906721884593623, 0.990739087260485, 0.9907851785344365, 0.9908219547986399, 0.9908527004952465, 0.9909227245633689, 0.9909669226952673, 0.9909855245433877, 0.9910657956184608, 0.9910815689977911, 0.9910934120980119, 0.9911252473587989, 0.9911562520346837, 0.991179450360627, 0.9912120935598585, 0.9912250018509315, 0.9912648546070149, 0.9912771926757251, 0.9912835910552115, 0.9912940554791021, 0.9912822969900155, 0.9913281849380728, 0.9913671311501479, 0.9913974768586624, 0.9914247879963256, 0.9913928974319871, 0.9914183135711413, 0.9914317763316742, 0.9914933045808598, 0.9915180917698327, 0.9915851061222611, 0.9915960072747408, 0.9916340536060902, 0.9916753541278343, 0.9917078187150508, 0.991748801549428, 0.9917833331591911, 0.9917908821962131, 0.9918259116236506, 0.9918597910495208, 0.9918879295916275, 0.9919038425148177, 0.9919463994398064, 0.9919399947899434, 0.9919765835462432, 0.9920259840151482, 0.9920304444371628, 0.9920038705816818, 0.9919940717588078, 0.9919876057593977], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.056066666666666654, 0.12020666666666664, 0.1841326666666666, 0.24523939999999994, 0.30186212666666656, 0.3541959139999999, 0.40212298926666656, 0.4458040236733332, 0.4855036213059999, 0.5210732591753999, 0.5535792665911933, 0.583141339932074, 0.6098005392721999, 0.6339538186783132, 0.6558384368104819, 0.6755612597961004, 0.6935784671498236, 0.7099939537681745, 0.7246478917246905, 0.7380364358855548, 0.750459458963666, 0.7614935130672993, 0.7713041617605694, 0.7802004122511792, 0.788167037692728, 0.7956036672567885, 0.8023366338644431, 0.8082896371446654, 0.8137806734301988, 0.8186692727538455, 0.8234823454784609, 0.8275741109306147, 0.83128336650422, 0.834555029853798, 0.8376195268684182, 0.8402309075149097, 0.8425944834300854, 0.8450417017537435, 0.8473508649117024, 0.8493224450871988, 0.851350200578479, 0.8528285138539644, 0.8542389958019013, 0.8556284295550445, 0.8567722532662067, 0.858135027939586, 0.8590148584789606, 0.8600733726310645, 0.8610793687012914, 0.8620914318311623, 0.8629089553147127, 0.8635513931165747, 0.8642495871382505, 0.8647846284244254, 0.8653728322486495, 0.8658222156904511, 0.8663866607880727, 0.8668813280425988, 0.8671931952383388, 0.8676738757145049, 0.8679064881430544, 0.868275839328749, 0.8687815887292073, 0.8691567631896199, 0.8694010868706579, 0.8697676448502587, 0.8701908803652327, 0.8705051256620427, 0.8707479464291719, 0.8708331517862548, 0.8708165032742959, 0.8711348529468663, 0.871314700985513, 0.871436564220295, 0.8716529077982655, 0.8718209503517723, 0.8717988553165951, 0.8719523031182689, 0.871997072806442, 0.8720506988591311, 0.8721656289732179, 0.8724823994092294, 0.8725408261349732, 0.8724734101881425, 0.8723860691693283, 0.872534128919062, 0.8727207160271558, 0.8727819777577736, 0.8729037799819961, 0.8731334019837964, 0.87327339511875, 0.8732927222735417, 0.8733367833795208, 0.8732831050415688, 0.8733281278707452, 0.873368648417004, 0.8734184502419703, 0.8734099385511065, 0.8735089446959958, 0.8734647168930629, 0.8734649118704233, 0.8734650873500477, 0.873478578615043, 0.8734773874202054, 0.8736496486781848, 0.8736846838103665, 0.8736628820959965, 0.8738299272197302, 0.8739002678310904, 0.8739102410479813, 0.8739592169431831, 0.8740566285821981, 0.8741442990573116, 0.8742098691515805, 0.8741888822364225, 0.8743033273461137, 0.8744329946115024, 0.8744830284836854, 0.8746347256353169, 0.8747445864051184, 0.8748967944312732, 0.8748337816548125, 0.8750437368226646, 0.8750326964737314, 0.8750494268263582, 0.8750511508103891, 0.8751727023960169, 0.8752420988230818, 0.8753445556074403, 0.8753834333800296, 0.8755517567086932, 0.8758232477044905, 0.8759742562673748, 0.8761501639739706, 0.8762018142432403, 0.8763016328189163, 0.8762581362036912, 0.8763256559166553, 0.8762264236583232, 0.8762837812924908, 0.8762554031632418, 0.8763365295135842, 0.8763428765622258, 0.8763352555726698, 0.8763817300154028, 0.8763835570138624, 0.8764518679791428, 0.8764600145145619, 0.8763606797297724, 0.8765246117567952, 0.8767788172477824, 0.8769942688563375, 0.8770948419707038, 0.8773186911069667, 0.8776534886629367, 0.8776348064633097, 0.8776979924836453, 0.8777281932352808, 0.877768707245086, 0.8779118365205775, 0.8779606528685198, 0.8780712542483345, 0.878144128823501, 0.878129715941151, 0.8781967443470359, 0.8780704032456655, 0.8781300295877656, 0.878197026628989, 0.8782306572994235, 0.8781675915694811, 0.878470832412533, 0.8785570825046131, 0.8786080409208185, 0.8785472368287366, 0.8787991798125296, 0.8788392618312767, 0.878675335648149, 0.878767802083334, 0.878784355208334, 0.8789059196875005, 0.8790019943854172, 0.8789417949468754, 0.8788609487855212, 0.8788281872403024, 0.8786787018496055, 0.8787841649979783, 0.8787724151648472, 0.8788285069816958, 0.8789056562835262, 0.8788150906551736, 0.8786402482563228, 0.8787362234306906, 0.8788092677542881, 0.8789550076455259, 0.87888617354764, 0.8790242228595426, 0.879068467240255, 0.8791216205162296, 0.8790494584646067, 0.879064512618146, 0.8791180613563314, 0.8790329218873649, 0.8791029630319618, 0.8790993333954323, 0.8790427333892225, 0.8788451267169668, 0.8788406140452701, 0.8788098859740765, 0.8790222307100022, 0.8789733409723354, 0.8790626735417685, 0.8791430728542583, 0.8792420989021658, 0.8791978890119492, 0.8792114334440876, 0.8792769567663455, 0.8792025944230444, 0.8792956683140732, 0.8792594348159992, 0.879320158001066, 0.8793748088676261], "moving_var_accuracy_train": [0.028841629503114183, 0.06372166117752248, 0.09548769754000774, 0.1208810427954478, 0.14009029366338427, 0.15330649633024612, 0.1611426699572379, 0.1649060801797712, 0.1650564678195451, 0.16226543181366446, 0.1576320186080112, 0.15162110410218319, 0.14454133317648024, 0.13684112001499413, 0.12885662057456246, 0.12068891428441635, 0.11248181821308025, 0.10452726997665807, 0.09682394052037692, 0.08947302108116291, 0.08251239154212446, 0.07582816285123853, 0.06959585670739907, 0.0637826276353332, 0.05837379225645348, 0.053343157212294, 0.04869112542061098, 0.04441451906233112, 0.04044744627612575, 0.03679334005083715, 0.03347321554040574, 0.03043370695462637, 0.02765735564090518, 0.025107698202488513, 0.022776273763304385, 0.020660890200880026, 0.018726866831809436, 0.016974079202733774, 0.015379291272225188, 0.013922692127438959, 0.012611529043539786, 0.01140819890539431, 0.010324695637367447, 0.009343992275171928, 0.00845161513794358, 0.007640491517283186, 0.006903349937015885, 0.0062356753087477014, 0.005638365833076482, 0.005095409418678081, 0.004606508437466268, 0.004159814310422512, 0.0037618498055198703, 0.003398482452828275, 0.003069851436335402, 0.0027722093700436536, 0.00250389222045593, 0.002260639438815149, 0.0020401541495774426, 0.0018425299168420175, 0.0016624480357961123, 0.0015017085062198775, 0.0013568057282732837, 0.0012269069148968816, 0.0011090845523054633, 0.0010011992695929087, 0.0009034841275528872, 0.0008156295641216304, 0.0007361676830362235, 0.0006645006312314323, 0.0006000045994541345, 0.0005422695825109225, 0.000489566923096826, 0.0004427538303053605, 0.0003997647749803111, 0.00036136003275852774, 0.0003262984759482862, 0.0002950278130363783, 0.00026670128217848375, 0.00024032873238011006, 0.00021751704854128373, 0.00019641172545706198, 0.00017769904094871395, 0.00016051957422680207, 0.00014511483782853502, 0.0001314791040201624, 0.00011899378690106599, 0.00010802667507379543, 9.809359201306221e-05, 8.888599635318123e-05, 8.027697223436044e-05, 7.257148883597564e-05, 6.546712316648563e-05, 5.923009566842828e-05, 5.3719276374347655e-05, 4.860463119231422e-05, 4.413594257577871e-05, 4.046160026932367e-05, 3.6543137315007976e-05, 3.320423223371636e-05, 3.020754804944557e-05, 2.7314091288249187e-05, 2.4837342754832806e-05, 2.265165882410597e-05, 2.0702262897870885e-05, 1.8770140308075686e-05, 1.7126121753618975e-05, 1.580415292845014e-05, 1.4407260395652524e-05, 1.314364918470846e-05, 1.191165350019403e-05, 1.0824062556565181e-05, 9.80281055388428e-06, 9.10678130950036e-06, 8.202107025799487e-06, 7.500942137838023e-06, 6.795666346311164e-06, 6.1579817042176086e-06, 5.693420285027539e-06, 5.141286185779857e-06, 4.951859013178731e-06, 4.565120698043985e-06, 4.228182253326767e-06, 3.940556554499683e-06, 3.5880589846766488e-06, 3.2376633512786307e-06, 3.0005103616798385e-06, 2.7468821403709296e-06, 2.549822736203981e-06, 2.3158292778608376e-06, 2.1784083310412404e-06, 2.146730869506118e-06, 2.0883821035599084e-06, 2.027058366334671e-06, 1.929647617501682e-06, 1.766281594972777e-06, 1.6373380053078174e-06, 1.4952483247769747e-06, 1.4059194489345888e-06, 1.3238867848035785e-06, 1.352556359319971e-06, 1.2440465500938698e-06, 1.1987744033957743e-06, 1.0985623504560387e-06, 9.88706835913878e-07, 8.947115842190925e-07, 8.659392311828856e-07, 8.776268394121628e-07, 8.376586660316756e-07, 7.983611696755074e-07, 8.101698394398287e-07, 7.29489151042303e-07, 6.836794444116628e-07, 6.161104575961284e-07, 5.924663315775822e-07, 5.509121502672364e-07, 4.989773823487588e-07, 4.944132850568989e-07, 4.5796299218462804e-07, 4.7507520635724903e-07, 4.3357375473530427e-07, 4.579918288422997e-07, 4.7390569535089726e-07, 4.5213099705929144e-07, 4.2201448218550436e-07, 3.947849624882084e-07, 3.5540400459942964e-07, 3.2023790119043283e-07, 3.7416636773488766e-07, 3.381919215673921e-07, 3.1687769983356775e-07, 3.2497685116523437e-07, 3.327582123734714e-07, 3.1860204094637297e-07, 2.9891427933056634e-07, 2.7753053213593634e-07, 2.939078099700502e-07, 2.8209830274282037e-07, 2.570027312499616e-07, 2.892934675653261e-07, 2.6260331626829974e-07, 2.3760531584704816e-07, 2.2296613872675396e-07, 2.0932113419458163e-07, 1.932324817143096e-07, 1.834994396474294e-07, 1.6664911148850807e-07, 1.642783798465823e-07, 1.4922059331742122e-07, 1.3466698732613712e-07, 1.221858260997868e-07, 1.1121160208022223e-07, 1.190417758643617e-07, 1.2078886519289034e-07, 1.1699773690089317e-07, 1.1201104737491103e-07, 1.0996301548183793e-07, 1.0478053509922124e-07, 9.593369487980325e-08, 1.2041185442233296e-07, 1.1390031161467583e-07, 1.429285913358969e-07, 1.2970524833079263e-07, 1.2976243346008474e-07, 1.3213778798094852e-07, 1.2840955399113873e-07, 1.30684933014385e-07, 1.2834832836841185e-07, 1.1602638717121607e-07, 1.154672955334898e-07, 1.142509054558108e-07, 1.0995181287726419e-07, 1.0123562170964949e-07, 1.0741188631922564e-07, 9.703987354611176e-08, 9.93845199795779e-08, 1.1140972493401113e-07, 1.0044781072154451e-07, 9.675855780550705e-08, 8.794685439241235e-08, 7.952845128852587e-08], "duration": 169743.216075, "accuracy_train": [0.5660941176470589, 0.7043764705882353, 0.7723529411764706, 0.8095764705882353, 0.8384941176470588, 0.857764705882353, 0.8701176470588236, 0.8834588235294117, 0.8904941176470588, 0.8938588235294118, 0.9014352941176471, 0.9076, 0.9110117647058823, 0.9152470588235294, 0.9203529411764706, 0.9228235294117647, 0.9239058823529411, 0.9287764705882353, 0.9313882352941176, 0.9350352941176471, 0.9387529411764706, 0.9369882352941177, 0.9407294117647059, 0.9433411764705882, 0.9455529411764706, 0.9468235294117647, 0.9486823529411764, 0.9514588235294118, 0.9510352941176471, 0.9515764705882352, 0.9554588235294118, 0.9570823529411765, 0.9589176470588235, 0.9588941176470588, 0.959435294117647, 0.9617176470588236, 0.9618117647058824, 0.963835294117647, 0.9647529411764706, 0.9644235294117647, 0.9673882352941177, 0.9657176470588236, 0.9681411764705883, 0.9694117647058823, 0.9694352941176471, 0.9694352941176471, 0.9692235294117647, 0.9695294117647059, 0.9723294117647059, 0.9721882352941177, 0.9736235294117647, 0.9724470588235294, 0.9753882352941177, 0.9745882352941176, 0.9750117647058824, 0.9751529411764706, 0.9759294117647059, 0.9758823529411764, 0.9757411764705882, 0.9770823529411765, 0.9763058823529411, 0.978, 0.9786117647058824, 0.9797411764705882, 0.9798823529411764, 0.9790588235294118, 0.9790117647058824, 0.9796235294117647, 0.9797176470588236, 0.9800235294117647, 0.9804941176470588, 0.9813176470588235, 0.9809176470588236, 0.9820941176470588, 0.9814823529411765, 0.9822588235294117, 0.9819529411764706, 0.9827294117647059, 0.9828470588235294, 0.9814117647058823, 0.9834588235294117, 0.9828235294117647, 0.9836235294117647, 0.9832941176470589, 0.9836705882352941, 0.9843764705882353, 0.9842823529411765, 0.9850588235294118, 0.9852705882352941, 0.9850588235294118, 0.9844941176470589, 0.9848, 0.9844, 0.9850823529411765, 0.9855529411764706, 0.9853176470588235, 0.9858823529411764, 0.9868705882352942, 0.9854823529411765, 0.9862823529411765, 0.9864941176470589, 0.9859764705882353, 0.9865882352941177, 0.9868941176470588, 0.9871294117647059, 0.9866823529411765, 0.9871764705882353, 0.9878117647058824, 0.9873647058823529, 0.9874823529411765, 0.9871764705882353, 0.9873882352941177, 0.9872470588235294, 0.9882823529411765, 0.9869411764705882, 0.9878588235294118, 0.9875294117647059, 0.9875764705882353, 0.9882588235294117, 0.9875294117647059, 0.989035294117647, 0.9884235294117647, 0.9885882352941177, 0.9887764705882353, 0.9883529411764705, 0.9880470588235294, 0.9887529411764706, 0.9885882352941177, 0.9888705882352942, 0.9885176470588235, 0.9891058823529412, 0.9896235294117647, 0.9896470588235294, 0.9897411764705882, 0.9896705882352941, 0.9892705882352941, 0.9894823529411765, 0.9893176470588235, 0.9896941176470588, 0.989764705882353, 0.9903764705882353, 0.9897176470588235, 0.990164705882353, 0.9897882352941176, 0.9893647058823529, 0.9896, 0.9902117647058823, 0.9905176470588235, 0.9903058823529411, 0.9903529411764705, 0.9907294117647059, 0.9898823529411764, 0.9903764705882353, 0.9899764705882353, 0.9905411764705883, 0.9904, 0.9901882352941177, 0.9907294117647059, 0.9904705882352941, 0.990964705882353, 0.9904705882352941, 0.9911058823529412, 0.9911529411764706, 0.9909411764705882, 0.9908705882352942, 0.9900941176470588, 0.9904941176470589, 0.9904, 0.9914352941176471, 0.9906823529411765, 0.9909411764705882, 0.9912705882352941, 0.9913411764705883, 0.9912, 0.9911529411764706, 0.9911294117647059, 0.9915529411764706, 0.9913647058823529, 0.9911529411764706, 0.9917882352941176, 0.9912235294117647, 0.9912, 0.9914117647058823, 0.9914352941176471, 0.9913882352941177, 0.9915058823529411, 0.9913411764705883, 0.9916235294117647, 0.9913882352941177, 0.9913411764705883, 0.9913882352941177, 0.9911764705882353, 0.9917411764705882, 0.9917176470588235, 0.9916705882352941, 0.9916705882352941, 0.9911058823529412, 0.9916470588235294, 0.9915529411764706, 0.9920470588235294, 0.9917411764705882, 0.9921882352941176, 0.9916941176470588, 0.9919764705882353, 0.9920470588235294, 0.992, 0.9921176470588235, 0.9920941176470588, 0.9918588235294118, 0.9921411764705882, 0.992164705882353, 0.9921411764705882, 0.9920470588235294, 0.9923294117647059, 0.9918823529411764, 0.9923058823529411, 0.9924705882352941, 0.9920705882352941, 0.991764705882353, 0.9919058823529412, 0.9919294117647058], "end": "2016-02-07 16:19:20.239000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0], "moving_var_accuracy_valid": [0.02829123999999999, 0.06248757239999998, 0.09301761644399997, 0.11732215052763997, 0.1344451340513884, 0.14565004831610462, 0.15175808437704474, 0.15375457084086785, 0.1525636362265418, 0.14869406484732992, 0.14333442302563743, 0.13686622634497816, 0.1295760198955895, 0.12186884606065856, 0.11399239005171032, 0.10609405876523764, 0.09840623073615744, 0.09099082147079703, 0.08382438040241807, 0.07705522039490299, 0.07073868187700624, 0.06476056683896281, 0.05915074960511138, 0.053947964099725305, 0.049124371778086165, 0.04470966573373508, 0.04064669471441969, 0.03690096947546676, 0.03348223584332149, 0.030349097889113778, 0.027522679121674335, 0.024921094110145862, 0.022552811891324166, 0.020393864731848496, 0.01843899853623719, 0.016656472462541306, 0.015041103636248363, 0.01359089317033636, 0.0122797939637134, 0.011086798722837755, 0.010015124981545729, 0.009033281174655444, 0.008147858191119002, 0.0073504471073964645, 0.0066271773907967705, 0.005981174045010731, 0.005390023556511806, 0.004861105270752465, 0.004384102996517026, 0.0039549111428749196, 0.0035654351304028357, 0.0032126061543259047, 0.0028957328129204495, 0.0026087359542296103, 0.0023509762124561363, 0.0021176961005104126, 0.0019087938748734324, 0.0017201167486203923, 0.0015489804240883624, 0.0013961618651610317, 0.00125703265552217, 0.0011325571726553188, 0.0010216034974943635, 0.0009207099506266401, 0.0008291762021140199, 0.0007474678646742996, 0.0006743332329170886, 0.000607788660584485, 0.0005475404518505788, 0.0004928517462414013, 0.00044356906617381523, 0.0004001242781826649, 0.00036040295821744404, 0.0003244963182276235, 0.00029246792729842287, 0.00026347527926668226, 0.00023713214505522936, 0.0002136308466002532, 0.00019228580086503994, 0.00017308310256027913, 0.00015589367268436746, 0.00014120739699810918, 0.00012711738043882847, 0.00011444654658392929, 0.00010307054800764396, 9.296078841230081e-05, 8.397804231123197e-05, 7.561401507685331e-05, 6.818613560559824e-05, 6.18420584184358e-05, 5.583423527709971e-05, 5.02541735996008e-05, 4.524622866918169e-05, 4.07475380779512e-05, 3.669102776647956e-05, 3.303670222185362e-05, 2.9755353995597994e-05, 2.678047063597043e-05, 2.4190643522906042e-05, 2.1789184057585895e-05, 1.9610265993972843e-05, 1.7649239671713448e-05, 1.5885953832622648e-05, 1.4297371219866655e-05, 1.3134699566885977e-05, 1.1832276754580161e-05, 1.065332691186738e-05, 9.839130880949442e-06, 8.899748007313396e-06, 8.010668392078443e-06, 7.231189297668017e-06, 6.593471614641553e-06, 6.003299463037076e-06, 5.441664452095188e-06, 4.901462062356332e-06, 4.529195004310508e-06, 4.2275979012997504e-06, 3.8273686064604884e-06, 3.6517399781323215e-06, 3.3951904789917994e-06, 3.2641769801261443e-06, 2.973494772089055e-06, 3.072875847450323e-06, 2.766685266446376e-06, 2.4925358820929104e-06, 2.243309042972067e-06, 2.151951230392452e-06, 1.9800988841576795e-06, 1.8765655296916394e-06, 1.7025123075360303e-06, 1.7872557635343174e-06, 2.2718964343721933e-06, 2.249939065514352e-06, 2.3034368501212514e-06, 2.0971029179497316e-06, 1.977066358604571e-06, 1.7963873225683617e-06, 1.6577787950604596e-06, 1.5806242853977996e-06, 1.4521709406338473e-06, 1.3142017105475635e-06, 1.24201490197184e-06, 1.118175977012783e-06, 1.0068810946478062e-06, 9.25631849629134e-07, 8.330987059765672e-07, 7.917863271768076e-07, 7.132049888131326e-07, 7.306910851544584e-07, 8.994853619931286e-07, 1.3911207106259506e-06, 1.6697832002241615e-06, 1.5938394422016898e-06, 1.8854314202325608e-06, 2.7056929095606827e-06, 2.438264839850745e-06, 2.2303706143584387e-06, 2.0155423215167186e-06, 1.8287605542795463e-06, 1.8302584043758086e-06, 1.668679886375994e-06, 1.6119058846906043e-06, 1.4985116295728936e-06, 1.3505300472143458e-06, 1.2559123072521564e-06, 1.273979741585968e-06, 1.1785794734775328e-06, 1.1011189579240392e-06, 1.001186260076461e-06, 9.368632107072595e-07, 1.6707719696899139e-06, 1.5706464781752436e-06, 1.4369526719971457e-06, 1.3265316433225076e-06, 1.7651558827329589e-06, 1.6030994085012003e-06, 1.6846356092843448e-06, 1.5931224230784833e-06, 1.4362762342960047e-06, 1.4256499142218358e-06, 1.3661580510175716e-06, 1.2621579975224573e-06, 1.1947671140216113e-06, 1.0849502722255518e-06, 1.1775681832892732e-06, 1.1599136459426492e-06, 1.0451648085558753e-06, 9.689649549566929e-07, 9.256365924173213e-07, 9.068921305257379e-07, 1.0913316973959336e-06, 1.0650996345105713e-06, 1.006608929948001e-06, 1.097109080035395e-06, 1.0300413693177804e-06, 1.0985557450372015e-06, 1.006318257555096e-06, 9.311138685209806e-07, 8.848687369188016e-07, 7.98421511075993e-07, 7.443865662196345e-07, 7.351864721807142e-07, 7.058196823905662e-07, 6.353562825035372e-07, 6.006527005798253e-07, 8.920230028011421e-07, 8.030039803736058e-07, 7.312015115697985e-07, 1.0638939422909574e-06, 9.790164061040917e-07, 9.529375371474119e-07, 9.158202284721931e-07, 9.124936291025885e-07, 8.388348957289824e-07, 7.566024709336527e-07, 7.195819756777098e-07, 6.973916010211732e-07, 7.056171836403851e-07, 6.468712627204458e-07, 6.153698832902526e-07, 5.807133499031239e-07], "accuracy_test": 0.8613, "start": "2016-02-05 17:10:17.023000", "learning_rate_per_epoch": [0.0016818189760670066, 0.0008409094880335033, 0.0005606063059531152, 0.00042045474401675165, 0.0003363637952134013, 0.0002803031529765576, 0.00024025986203923821, 0.00021022737200837582, 0.00018686878320295364, 0.00016818189760670066, 0.00015289263683371246, 0.0001401515764882788, 0.00012937068822793663, 0.00012012993101961911, 0.00011212126264581457, 0.00010511368600418791, 9.893052629195154e-05, 9.343439160147682e-05, 8.851679012877867e-05, 8.409094880335033e-05, 8.008661825442687e-05, 7.644631841685623e-05, 7.312256639124826e-05, 7.00757882441394e-05, 6.727276195306331e-05, 6.468534411396831e-05, 6.228958955034614e-05, 6.0064965509809554e-05, 5.7993758673546836e-05, 5.6060631322907284e-05, 5.425222479971126e-05, 5.2556843002093956e-05, 5.096421227790415e-05, 4.946526314597577e-05, 4.805197022506036e-05, 4.671719580073841e-05, 4.5454566134139895e-05, 4.425839506438933e-05, 4.3123563955305144e-05, 4.2045474401675165e-05, 4.10199754696805e-05, 4.004330912721343e-05, 3.911207022611052e-05, 3.8223159208428115e-05, 3.737375664059073e-05, 3.656128319562413e-05, 3.578338146326132e-05, 3.50378941220697e-05, 3.43228348356206e-05, 3.3636380976531655e-05, 3.2976844522636384e-05, 3.2342672056984156e-05, 3.1732433853903785e-05, 3.114479477517307e-05, 3.057852518395521e-05, 3.0032482754904777e-05, 2.9505596103263088e-05, 2.8996879336773418e-05, 2.8505406589829363e-05, 2.8030315661453642e-05, 2.7570802558329888e-05, 2.712611239985563e-05, 2.669553941814229e-05, 2.6278421501046978e-05, 2.5874138373183087e-05, 2.5482106138952076e-05, 2.5101775463554077e-05, 2.4732631572987884e-05, 2.4374188797082752e-05, 2.402598511253018e-05, 2.368759123783093e-05, 2.3358597900369205e-05, 2.3038615836412646e-05, 2.2727283067069948e-05, 2.2424253984354436e-05, 2.2129197532194667e-05, 2.1841804482392035e-05, 2.1561781977652572e-05, 2.1288848074618727e-05, 2.1022737200837582e-05, 2.0763196516782045e-05, 2.050998773484025e-05, 2.026287984335795e-05, 2.0021654563606717e-05, 1.978610634978395e-05, 1.955603511305526e-05, 1.933125349751208e-05, 1.9111579604214057e-05, 1.889684244815726e-05, 1.8686878320295364e-05, 1.848152714956086e-05, 1.8280641597812064e-05, 1.8084074326907285e-05, 1.789169073163066e-05, 1.7703358025755733e-05, 1.751894706103485e-05, 1.7338339603156783e-05, 1.71614174178103e-05, 1.6988071365631185e-05, 1.6818190488265827e-05, 1.6651672922307625e-05, 1.6488422261318192e-05, 1.6328340279869735e-05, 1.6171336028492078e-05, 1.6017324014683254e-05, 1.5866216926951893e-05, 1.5717934729764238e-05, 1.5572397387586534e-05, 1.542953214084264e-05, 1.5289262591977604e-05, 1.5151522347878199e-05, 1.5016241377452388e-05, 1.4883354197081644e-05, 1.4752798051631544e-05, 1.462451291445177e-05, 1.4498439668386709e-05, 1.4374521015270147e-05, 1.4252703294914681e-05, 1.4132932847132906e-05, 1.4015157830726821e-05, 1.3899330042477231e-05, 1.3785401279164944e-05, 1.3673325156560168e-05, 1.3563056199927814e-05, 1.34545516630169e-05, 1.3347769709071144e-05, 1.3242669410828967e-05, 1.3139210750523489e-05, 1.3037356438871939e-05, 1.2937069186591543e-05, 1.2838312613894232e-05, 1.2741053069476038e-05, 1.2645255083043594e-05, 1.2550887731777038e-05, 1.2457918273867108e-05, 1.2366315786493942e-05, 1.2276051165827084e-05, 1.2187094398541376e-05, 1.2099417290301062e-05, 1.201299255626509e-05, 1.1927793821087107e-05, 1.1843795618915465e-05, 1.1760971574403811e-05, 1.1679298950184602e-05, 1.1598751370911486e-05, 1.1519307918206323e-05, 1.1440945854701567e-05, 1.1363641533534974e-05, 1.1287375855317805e-05, 1.1212126992177218e-05, 1.1137874025735073e-05, 1.1064598766097333e-05, 1.099228120438056e-05, 1.0920902241196018e-05, 1.0850445505639073e-05, 1.0780890988826286e-05, 1.0712223229347728e-05, 1.0644424037309363e-05, 1.0577477951301262e-05, 1.0511368600418791e-05, 1.0446080523252022e-05, 1.0381598258391023e-05, 1.0317908163415268e-05, 1.0254993867420126e-05, 1.0192842637479771e-05, 1.0131439921678975e-05, 1.0070772077597212e-05, 1.0010827281803358e-05, 9.951591891876888e-06, 9.893053174891975e-06, 9.835198397922795e-06, 9.77801755652763e-06, 9.721497008285951e-06, 9.66562674875604e-06, 9.610394045012072e-06, 9.555789802107029e-06, 9.501802196609788e-06, 9.44842122407863e-06, 9.395636880071834e-06, 9.343439160147682e-06, 9.291817150369752e-06, 9.24076357478043e-06, 9.190267519443296e-06, 9.140320798906032e-06, 9.09091340872692e-06, 9.042037163453642e-06, 8.993684787128586e-06, 8.94584536581533e-06, 8.898513442545664e-06, 8.851679012877867e-06, 8.805334800854325e-06, 8.759473530517425e-06, 8.714087925909553e-06, 8.669169801578391e-06, 8.624712791061029e-06, 8.58070870890515e-06, 8.537152098142542e-06, 8.494035682815593e-06, 8.451351277471986e-06, 8.409095244132914e-06, 8.367258487851359e-06, 8.325836461153813e-06, 8.284822797577363e-06, 8.244211130659096e-06, 8.2039950939361e-06, 8.164170139934868e-06, 8.124728992697783e-06, 8.085668014246039e-06, 8.046980838116724e-06, 8.008662007341627e-06, 7.970706064952537e-06, 7.933108463475946e-06, 7.895863745943643e-06, 7.858967364882119e-06, 7.822413863323163e-06, 7.786198693793267e-06, 7.750318218313623e-06, 7.71476607042132e-06, 7.679538612137549e-06, 7.644631295988802e-06, 7.610040483996272e-06], "accuracy_train_first": 0.5660941176470589, "accuracy_train_last": 0.9919294117647058, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.43933333333333335, 0.3025333333333333, 0.24053333333333338, 0.20479999999999998, 0.18853333333333333, 0.17479999999999996, 0.1665333333333333, 0.1610666666666667, 0.1572, 0.15880000000000005, 0.1538666666666667, 0.15080000000000005, 0.15026666666666666, 0.1486666666666666, 0.1472, 0.14693333333333336, 0.14426666666666665, 0.14226666666666665, 0.14346666666666663, 0.14146666666666663, 0.13773333333333337, 0.1392, 0.14039999999999997, 0.13973333333333338, 0.14013333333333333, 0.13746666666666663, 0.13706666666666667, 0.13813333333333333, 0.13680000000000003, 0.1373333333333333, 0.13319999999999999, 0.13560000000000005, 0.1353333333333333, 0.136, 0.13480000000000003, 0.13626666666666665, 0.13613333333333333, 0.13293333333333335, 0.1318666666666667, 0.13293333333333335, 0.13039999999999996, 0.1338666666666667, 0.13306666666666667, 0.1318666666666667, 0.13293333333333335, 0.12960000000000005, 0.13306666666666667, 0.13039999999999996, 0.12986666666666669, 0.12880000000000003, 0.12973333333333337, 0.1306666666666667, 0.12946666666666662, 0.13039999999999996, 0.1293333333333333, 0.13013333333333332, 0.1285333333333334, 0.1286666666666667, 0.13, 0.128, 0.13, 0.12839999999999996, 0.1266666666666667, 0.12746666666666662, 0.12839999999999996, 0.12693333333333334, 0.126, 0.1266666666666667, 0.12706666666666666, 0.12839999999999996, 0.1293333333333333, 0.126, 0.12706666666666666, 0.12746666666666662, 0.12639999999999996, 0.1266666666666667, 0.12839999999999996, 0.1266666666666667, 0.12760000000000005, 0.12746666666666662, 0.12680000000000002, 0.1246666666666667, 0.12693333333333334, 0.12813333333333332, 0.12839999999999996, 0.12613333333333332, 0.12560000000000004, 0.1266666666666667, 0.126, 0.12480000000000002, 0.12546666666666662, 0.1265333333333334, 0.12626666666666664, 0.12719999999999998, 0.12626666666666664, 0.12626666666666664, 0.12613333333333332, 0.1266666666666667, 0.12560000000000004, 0.12693333333333334, 0.1265333333333334, 0.1265333333333334, 0.12639999999999996, 0.1265333333333334, 0.12480000000000002, 0.126, 0.1265333333333334, 0.1246666666666667, 0.12546666666666662, 0.126, 0.12560000000000004, 0.12506666666666666, 0.12506666666666666, 0.12519999999999998, 0.126, 0.1246666666666667, 0.12439999999999996, 0.12506666666666666, 0.124, 0.12426666666666664, 0.12373333333333336, 0.12573333333333336, 0.12306666666666666, 0.12506666666666666, 0.12480000000000002, 0.12493333333333334, 0.12373333333333336, 0.12413333333333332, 0.12373333333333336, 0.12426666666666664, 0.12293333333333334, 0.12173333333333336, 0.1226666666666667, 0.12226666666666663, 0.1233333333333333, 0.12280000000000002, 0.12413333333333332, 0.12306666666666666, 0.1246666666666667, 0.12319999999999998, 0.124, 0.12293333333333334, 0.12360000000000004, 0.12373333333333336, 0.12319999999999998, 0.12360000000000004, 0.12293333333333334, 0.12346666666666661, 0.12453333333333338, 0.122, 0.12093333333333334, 0.12106666666666666, 0.122, 0.1206666666666667, 0.11933333333333329, 0.12253333333333338, 0.12173333333333336, 0.122, 0.12186666666666668, 0.12080000000000002, 0.12160000000000004, 0.12093333333333334, 0.12119999999999997, 0.122, 0.12119999999999997, 0.12306666666666666, 0.1213333333333333, 0.12119999999999997, 0.12146666666666661, 0.12239999999999995, 0.11880000000000002, 0.1206666666666667, 0.12093333333333334, 0.122, 0.11893333333333334, 0.12080000000000002, 0.12280000000000002, 0.12039999999999995, 0.12106666666666666, 0.12, 0.12013333333333331, 0.12160000000000004, 0.12186666666666668, 0.12146666666666661, 0.1226666666666667, 0.12026666666666663, 0.1213333333333333, 0.1206666666666667, 0.12039999999999995, 0.122, 0.12293333333333334, 0.12039999999999995, 0.12053333333333338, 0.11973333333333336, 0.12173333333333336, 0.11973333333333336, 0.12053333333333338, 0.12039999999999995, 0.12160000000000004, 0.12080000000000002, 0.12039999999999995, 0.12173333333333336, 0.12026666666666663, 0.12093333333333334, 0.12146666666666661, 0.12293333333333334, 0.12119999999999997, 0.12146666666666661, 0.11906666666666665, 0.12146666666666661, 0.12013333333333331, 0.12013333333333331, 0.11986666666666668, 0.12119999999999997, 0.1206666666666667, 0.12013333333333331, 0.12146666666666661, 0.11986666666666668, 0.12106666666666666, 0.12013333333333331, 0.12013333333333331], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.04422451223478502, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "valid_ratio": 0.15, "learning_rate": 0.0016818189850796917, "optimization": "adam", "nb_data_augmentation": 2, "learning_rate_decay_method": "lin", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 3.850498719108783e-06, "rotation_range": [0, 0], "momentum": 0.6619144022220073}, "accuracy_valid_max": 0.8812, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8798666666666667, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.5606666666666666, 0.6974666666666667, 0.7594666666666666, 0.7952, 0.8114666666666667, 0.8252, 0.8334666666666667, 0.8389333333333333, 0.8428, 0.8412, 0.8461333333333333, 0.8492, 0.8497333333333333, 0.8513333333333334, 0.8528, 0.8530666666666666, 0.8557333333333333, 0.8577333333333333, 0.8565333333333334, 0.8585333333333334, 0.8622666666666666, 0.8608, 0.8596, 0.8602666666666666, 0.8598666666666667, 0.8625333333333334, 0.8629333333333333, 0.8618666666666667, 0.8632, 0.8626666666666667, 0.8668, 0.8644, 0.8646666666666667, 0.864, 0.8652, 0.8637333333333334, 0.8638666666666667, 0.8670666666666667, 0.8681333333333333, 0.8670666666666667, 0.8696, 0.8661333333333333, 0.8669333333333333, 0.8681333333333333, 0.8670666666666667, 0.8704, 0.8669333333333333, 0.8696, 0.8701333333333333, 0.8712, 0.8702666666666666, 0.8693333333333333, 0.8705333333333334, 0.8696, 0.8706666666666667, 0.8698666666666667, 0.8714666666666666, 0.8713333333333333, 0.87, 0.872, 0.87, 0.8716, 0.8733333333333333, 0.8725333333333334, 0.8716, 0.8730666666666667, 0.874, 0.8733333333333333, 0.8729333333333333, 0.8716, 0.8706666666666667, 0.874, 0.8729333333333333, 0.8725333333333334, 0.8736, 0.8733333333333333, 0.8716, 0.8733333333333333, 0.8724, 0.8725333333333334, 0.8732, 0.8753333333333333, 0.8730666666666667, 0.8718666666666667, 0.8716, 0.8738666666666667, 0.8744, 0.8733333333333333, 0.874, 0.8752, 0.8745333333333334, 0.8734666666666666, 0.8737333333333334, 0.8728, 0.8737333333333334, 0.8737333333333334, 0.8738666666666667, 0.8733333333333333, 0.8744, 0.8730666666666667, 0.8734666666666666, 0.8734666666666666, 0.8736, 0.8734666666666666, 0.8752, 0.874, 0.8734666666666666, 0.8753333333333333, 0.8745333333333334, 0.874, 0.8744, 0.8749333333333333, 0.8749333333333333, 0.8748, 0.874, 0.8753333333333333, 0.8756, 0.8749333333333333, 0.876, 0.8757333333333334, 0.8762666666666666, 0.8742666666666666, 0.8769333333333333, 0.8749333333333333, 0.8752, 0.8750666666666667, 0.8762666666666666, 0.8758666666666667, 0.8762666666666666, 0.8757333333333334, 0.8770666666666667, 0.8782666666666666, 0.8773333333333333, 0.8777333333333334, 0.8766666666666667, 0.8772, 0.8758666666666667, 0.8769333333333333, 0.8753333333333333, 0.8768, 0.876, 0.8770666666666667, 0.8764, 0.8762666666666666, 0.8768, 0.8764, 0.8770666666666667, 0.8765333333333334, 0.8754666666666666, 0.878, 0.8790666666666667, 0.8789333333333333, 0.878, 0.8793333333333333, 0.8806666666666667, 0.8774666666666666, 0.8782666666666666, 0.878, 0.8781333333333333, 0.8792, 0.8784, 0.8790666666666667, 0.8788, 0.878, 0.8788, 0.8769333333333333, 0.8786666666666667, 0.8788, 0.8785333333333334, 0.8776, 0.8812, 0.8793333333333333, 0.8790666666666667, 0.878, 0.8810666666666667, 0.8792, 0.8772, 0.8796, 0.8789333333333333, 0.88, 0.8798666666666667, 0.8784, 0.8781333333333333, 0.8785333333333334, 0.8773333333333333, 0.8797333333333334, 0.8786666666666667, 0.8793333333333333, 0.8796, 0.878, 0.8770666666666667, 0.8796, 0.8794666666666666, 0.8802666666666666, 0.8782666666666666, 0.8802666666666666, 0.8794666666666666, 0.8796, 0.8784, 0.8792, 0.8796, 0.8782666666666666, 0.8797333333333334, 0.8790666666666667, 0.8785333333333334, 0.8770666666666667, 0.8788, 0.8785333333333334, 0.8809333333333333, 0.8785333333333334, 0.8798666666666667, 0.8798666666666667, 0.8801333333333333, 0.8788, 0.8793333333333333, 0.8798666666666667, 0.8785333333333334, 0.8801333333333333, 0.8789333333333333, 0.8798666666666667, 0.8798666666666667], "seed": 535116189, "model": "residualv3", "loss_std": [0.2919672727584839, 0.19547611474990845, 0.17500542104244232, 0.17075979709625244, 0.1616826355457306, 0.15480022132396698, 0.14952200651168823, 0.14422456920146942, 0.14131006598472595, 0.13657593727111816, 0.13186056911945343, 0.12933476269245148, 0.12663407623767853, 0.12627623975276947, 0.12187455594539642, 0.11924754083156586, 0.11727187037467957, 0.11542199552059174, 0.1133618876338005, 0.11042063683271408, 0.10891403257846832, 0.10926777124404907, 0.10681111365556717, 0.10624445229768753, 0.10151510685682297, 0.10226494818925858, 0.1000172346830368, 0.0987078994512558, 0.09805884957313538, 0.09538889676332474, 0.09758170694112778, 0.09432613849639893, 0.09532025456428528, 0.0934320017695427, 0.08835946023464203, 0.09111778438091278, 0.09095273911952972, 0.08956267684698105, 0.08784517645835876, 0.0890917032957077, 0.08512083441019058, 0.08706063777208328, 0.08501826971769333, 0.08566411584615707, 0.08374045789241791, 0.08254437148571014, 0.08451918512582779, 0.0823780968785286, 0.08219961822032928, 0.08237326145172119, 0.07896135747432709, 0.0814346894621849, 0.07969608157873154, 0.07862921059131622, 0.07748889923095703, 0.07962734252214432, 0.07553894817829132, 0.0775790810585022, 0.07735952734947205, 0.07645200192928314, 0.07510652393102646, 0.07456283271312714, 0.07449033111333847, 0.0739997923374176, 0.07335341721773148, 0.07205503433942795, 0.07220122218132019, 0.07346999645233154, 0.07155025005340576, 0.07216226309537888, 0.0714644193649292, 0.07106585800647736, 0.06961338967084885, 0.07196108251810074, 0.06894861906766891, 0.06866549700498581, 0.07095807790756226, 0.07014971226453781, 0.06903599202632904, 0.06927763670682907, 0.06969650089740753, 0.06701723486185074, 0.06722172349691391, 0.06768418103456497, 0.064765565097332, 0.06620537489652634, 0.06527060270309448, 0.06527742743492126, 0.0662214607000351, 0.06560665369033813, 0.0654616579413414, 0.06588036566972733, 0.06358514726161957, 0.0652567595243454, 0.06537960469722748, 0.06407886743545532, 0.06451572477817535, 0.062022965401411057, 0.06448677182197571, 0.06238609179854393, 0.06232818588614464, 0.061583586037158966, 0.06239408627152443, 0.06192226707935333, 0.06186253949999809, 0.06106429919600487, 0.06204614415764809, 0.060370948165655136, 0.061255574226379395, 0.060158636420965195, 0.05953797325491905, 0.061486490070819855, 0.05997435376048088, 0.06162125989794731, 0.05888015031814575, 0.060916557908058167, 0.05999700352549553, 0.05986902490258217, 0.05912631005048752, 0.060095809400081635, 0.06017237529158592, 0.06024676188826561, 0.05946938320994377, 0.05747116729617119, 0.05762602016329765, 0.05771047994494438, 0.05883467569947243, 0.05866057425737381, 0.05757490172982216, 0.0572473518550396, 0.0574432834982872, 0.058262523263692856, 0.05630137026309967, 0.05639534443616867, 0.058378227055072784, 0.056194789707660675, 0.05680002644658089, 0.05596194788813591, 0.056792568415403366, 0.05432383716106415, 0.0567387193441391, 0.05524822697043419, 0.05588074028491974, 0.05407525971531868, 0.05623014271259308, 0.05685805901885033, 0.05405329167842865, 0.05384964123368263, 0.05403011292219162, 0.05292303115129471, 0.054745350033044815, 0.05462135374546051, 0.05412626639008522, 0.05439195781946182, 0.05552675575017929, 0.05346845090389252, 0.05174488201737404, 0.05434737727046013, 0.052469298243522644, 0.05151788890361786, 0.05321145057678223, 0.0534706674516201, 0.05200521647930145, 0.05221887677907944, 0.05280662328004837, 0.05229628458619118, 0.0534326545894146, 0.05217831954360008, 0.05115485563874245, 0.05190417170524597, 0.05185938626527786, 0.051381904631853104, 0.052850764244794846, 0.050789207220077515, 0.05131494998931885, 0.052561577409505844, 0.051527366042137146, 0.048718638718128204, 0.049308475106954575, 0.05169433355331421, 0.052884671837091446, 0.05049756169319153, 0.05034486576914787, 0.051209643483161926, 0.05162717029452324, 0.05007455125451088, 0.049552321434020996, 0.04988538473844528, 0.0488588772714138, 0.04975369572639465, 0.05007156357169151, 0.05022675171494484, 0.05116043612360954, 0.0497576929628849, 0.05012201517820358, 0.048221275210380554, 0.04928181320428848, 0.04881725832819939, 0.04964854195713997, 0.049452681094408035, 0.04739091172814369, 0.04980301484465599, 0.04946794733405113, 0.048583101481199265, 0.04581946134567261, 0.047246843576431274, 0.04825401306152344, 0.04707103595137596, 0.04891626164317131, 0.04713725671172142, 0.0489068329334259, 0.046657148748636246, 0.047233946621418, 0.04707292467355728, 0.04620908200740814, 0.04714407026767731, 0.04713030159473419, 0.04714304208755493, 0.046843454241752625, 0.04739716649055481, 0.04640772566199303]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:44 2016", "state": "available"}], "summary": "674a0e2bb5b3904dc2994f2fb91deccf"}