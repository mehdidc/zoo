{"content": {"hp_model": {"f0": 64, "f1": 16, "f2": 32, "f3": 64, "nonlin": "very_leaky_rectify", "nbg1": 7, "nbg3": 1, "nbg2": 8, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.014141912176125955, 0.01323952906917377, 0.008626796657690977, 0.009657906639499305, 0.014101422900288856, 0.013891259143392532, 0.01621929386221552, 0.01118752592522093, 0.00882606667555314, 0.00812464495197829, 0.005229438888132733, 0.008353621247356722, 0.006930594439873739, 0.01431330284017749, 0.007701105507614703, 0.008686765417903964, 0.005419975344821309, 0.010281063857698494, 0.009042011696383457, 0.004917662851959449, 0.007121796684759303, 0.006879238058289171, 0.005241718498083125, 0.008535571949761926, 0.008187334381085177, 0.00613116556132371, 0.004418005838968907, 0.0027220635522267325, 0.008874190126588057, 0.008137068866068313, 0.007637409608832954, 0.009132329111603188, 0.0046395176755546245, 0.006773134263837971, 0.01037114225953931, 0.008294134260468367, 0.006050949111134291, 0.005801165664245386, 0.006151717337342946, 0.00406438577905246, 0.009791859067253356, 0.007484194296351777, 0.009314210730701598, 0.0031156166610419216, 0.005568588123030984, 0.0074791237067089195, 0.00875312406483915, 0.003960581143040633, 0.007982586215415545, 0.006095618029217581, 0.008766742781993228, 0.007832379216073411, 0.0049456739141953065, 0.004359517377362195, 0.006313233235795813, 0.0042831267200610455, 0.006407201056933476, 0.007857439989896655, 0.004027393954258795, 0.006578443774120391, 0.006561992564655114, 0.004459847576863521, 0.007485249123102288, 0.007591089780738396, 0.0044054123785010006, 0.0072468473706985, 0.008895491248704437, 0.004161702203184705, 0.0061043739019948275, 0.005898484528330426, 0.006504917263138508, 0.010014251027838704, 0.009051954344749057, 0.008030938831543388, 0.005277239411566984, 0.00675836762069082, 0.004702300913367013, 0.006463443251106784, 0.006785864420797124, 0.006216094025965967, 0.004655916197168809, 0.008380625203285396, 0.005047873058339203, 0.008416377440513633, 0.009862764346124441, 0.003644551758316671, 0.006809871478469915, 0.00596729683789496, 0.0069209908744187225, 0.004597614793239702, 0.009630866060787892, 0.004552972339853852, 0.00993234665114959, 0.00563744836954489, 0.008368915814863978, 0.006617299694346407, 0.006230054883927123, 0.0067040386644711325, 0.008030309229319322, 0.005889377206768677, 0.007053717740703788, 0.00797629073872561, 0.005659443125775731, 0.00787608660537999, 0.009917476920696213, 0.008535911898418432, 0.007725637253662462, 0.006364059589770028, 0.004343772444538095, 0.006582595129451809, 0.009120068377217091, 0.006307726994732835, 0.008063241826996305, 0.006954941179908562, 0.006571836042612155, 0.01059440272065356, 0.009322625258534153, 0.007793614661654519, 0.006311966101671912, 0.0069609974301578755, 0.0051631863397693335, 0.00799086586369886, 0.006624472697587681, 0.006673425567260439, 0.007457790221466639, 0.011746742971768951, 0.007988585933764876, 0.009986580013977139, 0.006810947691352458, 0.007576292454138845, 0.008686756453765439, 0.007173487623486813, 0.007555542826532321, 0.009287946601137208, 0.007220879074546488, 0.007505047517413707, 0.0053428153457693445, 0.005273877321464758, 0.008618016476559584, 0.00796998472560048, 0.0065209397869126955, 0.006332385225329581, 0.00718103823532704, 0.00959234895159769, 0.008991093603732542, 0.0094698031431182, 0.009025492766950664, 0.011025969769757948, 0.009122193676878611, 0.0076463969965139145, 0.007332703737662632, 0.007361995051807641, 0.009346496368495326, 0.010194926863839071, 0.00558873633147514, 0.007349573986677993, 0.009370956918662032, 0.00794286719750491, 0.008761972769549004, 0.004962924554169955, 0.01239380707794521, 0.010631087692199153, 0.008388775255326301, 0.004781840596184578, 0.011768887773068571, 0.009653281094297632, 0.011096217323812564, 0.006594372932486754, 0.012465422437523048, 0.00910651856112921, 0.009617873617264216, 0.009079015197480066, 0.006534974602041279, 0.009714358316666217, 0.008005370275103446, 0.00888952633221196, 0.005162031627159604, 0.010549207674814582], "moving_avg_accuracy_train": [0.05924423290997599, 0.12140085168939183, 0.18366037344413294, 0.24059076553631986, 0.29575933222627404, 0.3461571626733587, 0.3927006394315858, 0.4352173784484678, 0.47462845353620686, 0.5107194160914086, 0.5434383754720241, 0.5722041703133876, 0.5989137666633704, 0.6230639744723933, 0.6440159107910731, 0.6655300822742583, 0.6859851879149572, 0.704613707467869, 0.7218975948594634, 0.7368812150512117, 0.750368762323776, 0.7626984694131962, 0.7743366770757434, 0.7862942565707807, 0.7960472879723497, 0.805963978662241, 0.8142474034069895, 0.8222115851200927, 0.8288979347118579, 0.8360107944337323, 0.8419447969797924, 0.8474645078272174, 0.8529903193530044, 0.8577473829845644, 0.8629285728422542, 0.8677960405165005, 0.8716048469138168, 0.8755234151190298, 0.8792918338334557, 0.8828693144347446, 0.8860215095139722, 0.8883751785722649, 0.8915953128698926, 0.8936214668853673, 0.8958893252148261, 0.8979442404577399, 0.8987753210954285, 0.900562671236024, 0.9024711224125324, 0.9043747403761517, 0.9050044051005336, 0.9058014372798951, 0.9070581647163113, 0.9081940139019798, 0.9094114104249879, 0.909639750740924, 0.9106870690407702, 0.9118016444248992, 0.9135441595920438, 0.9140243977948919, 0.9146144339059528, 0.9148688457952117, 0.914960452471689, 0.9158685426008121, 0.9161811943277187, 0.9166206910009822, 0.9171511326866906, 0.918367747281163, 0.9181398349388441, 0.9190902046426341, 0.9192250296356428, 0.9184813807233889, 0.9187721668677813, 0.9184391049371402, 0.9190711931399009, 0.9203352199187956, 0.9191736323353694, 0.9191930135185914, 0.9195148347846264, 0.9196907579253036, 0.9206976959697519, 0.9215969287145079, 0.9224829680955027, 0.9234316103086545, 0.9235436297814342, 0.9242907665783462, 0.925551380246739, 0.9252700971673863, 0.926211924688789, 0.9262156846354693, 0.9268071149433786, 0.9272370596240592, 0.9262966022081649, 0.9271660782576512, 0.9272835420450275, 0.9277728729584188, 0.9288899611816799, 0.9293583033052525, 0.9293541287402312, 0.9292552207746152, 0.9302332306162198, 0.9309926759308436, 0.9314228436402232, 0.9317469992678953, 0.9320271135887525, 0.933118739393037, 0.9331176286216458, 0.93214017457385, 0.932801895396273, 0.9333998413829008, 0.9339424988732098, 0.9344193730168966, 0.9342439850069197, 0.9348999378812739, 0.9350205793598501, 0.9333668380882246, 0.9317855010401995, 0.931790011163662, 0.9317637712426169, 0.9323957391315059, 0.9330410959469452, 0.932787404951134, 0.9333239488667809, 0.9333674573635008, 0.933731991648607, 0.9334764601540121, 0.9345301081470088, 0.9359363735585445, 0.9356442348241832, 0.9363903164001351, 0.9367224622875764, 0.9365957832076744, 0.9368445673476858, 0.937152322626114, 0.9369803323635488, 0.9369673391558023, 0.9371766786010103, 0.9366976942957265, 0.9373430441733244, 0.9379891074251041, 0.9384029733933265, 0.9394614077123549, 0.94030017445427, 0.9392856623267648, 0.9391933428929533, 0.9387522906323125, 0.9392107820667279, 0.938635416357748, 0.9380897575315893, 0.9382403696106563, 0.9380827354389041, 0.9369041727546482, 0.9372359781339914, 0.9369464484730471, 0.9371925739745796, 0.9374166283676809, 0.937204220589283, 0.9372572663113624, 0.9375630268814535, 0.937735832749279, 0.9378683228351392, 0.9380618605278619, 0.9388103562072647, 0.9393701060758793, 0.9387556285755265, 0.9383745877394764, 0.9384919944024981, 0.938486125353998, 0.9385482004281867, 0.9385714077651668, 0.938571548273257, 0.9386134192626533, 0.9386464889043098, 0.9385461513949235, 0.9380209727114573, 0.9385294525963194, 0.9384383493736476, 0.9388330840768329], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 767006966, "moving_var_accuracy_train": [0.031588912197823345, 0.06320102830084767, 0.09176715791292467, 0.11176006801556346, 0.12797619796962242, 0.13803804999661803, 0.14373090205564884, 0.1456268697197509, 0.14504327830391844, 0.14226196867697538, 0.13767054453583116, 0.13135072865794678, 0.12463627862676323, 0.11742174359905781, 0.10963042195867016, 0.10283311593427419, 0.09631550646179615, 0.0898071514822155, 0.0835150312042818, 0.07718410795030875, 0.07110292253814479, 0.06536082537652839, 0.060043773737244684, 0.05532624972994145, 0.05064971935062723, 0.04646981420371529, 0.04244036891286098, 0.03876718573480882, 0.03529283259909762, 0.03221888429999543, 0.02931390734594572, 0.026656721481903775, 0.024265860670880074, 0.022042941493344466, 0.02008024989908286, 0.018285455083213074, 0.01658747263044191, 0.015066921958407874, 0.013688038579032207, 0.012434420028202378, 0.011280405029739702, 0.010202222349089412, 0.009275323498233295, 0.008384738849259785, 0.007592553596956269, 0.006871302327160679, 0.006190388349681678, 0.005600101099439293, 0.0050728706625334085, 0.004598197448442799, 0.004141946002584697, 0.0037334687449806676, 0.0033743361451275718, 0.0030485139109680715, 0.002757001008519352, 0.002481770161366353, 0.0022434650258204548, 0.0020302990278205655, 0.0018545963570080707, 0.001671212379890536, 0.0015072244254126846, 0.0013570845115559828, 0.0012214515864489616, 0.0011067280769475624, 0.0009969350291738454, 0.0008989799421887486, 0.0008116142634073078, 0.0007437741967099246, 0.000669864273360964, 0.0006110066691898048, 0.0005500696022794824, 0.000500039765393801, 0.0004507967980903563, 0.00040671549052810255, 0.00036963976093991546, 0.00034705565812579093, 0.0003244936637389424, 0.00029204767803741596, 0.00026377503057912517, 0.00023767606808404443, 0.00022303377930385507, 0.0002080079771366437, 0.0001942727714850416, 0.00018294479277369984, 0.00016476324875686668, 0.00015331084442087866, 0.00015228208136723893, 0.00013776595476708658, 0.00013197271101102298, 0.00011877556714471204, 0.0001100461187122643, 0.00010070517869704771, 9.859480218733823e-05, 9.553921937427578e-05, 8.61094771089512e-05, 7.96535320832594e-05, 8.291915376187171e-05, 7.660133748809625e-05, 6.894136058222469e-05, 6.21352695949628e-05, 6.45302718879448e-05, 6.326805937228777e-05, 5.8606651758795386e-05, 5.3691678421478864e-05, 4.902868687407463e-05, 5.485064025588723e-05, 4.936558733461626e-05, 5.3027776341126584e-05, 5.166586872846811e-05, 4.971713648193972e-05, 4.739571719984231e-05, 4.4702826020111055e-05, 4.0509392004492677e-05, 4.03309203644049e-05, 3.6428817625141885e-05, 5.739967760392406e-05, 7.416535157864328e-05, 6.674899949170178e-05, 6.0080296343639665e-05, 5.766671742255624e-05, 5.564841445340622e-05, 5.066280510026653e-05, 4.8187438951000606e-05, 4.3385731959481936e-05, 4.024312596869459e-05, 3.6806480474394354e-05, 4.311739926526934e-05, 5.660390100787856e-05, 5.17116162681186e-05, 5.1550194103080986e-05, 4.738806270767024e-05, 4.279368474046651e-05, 3.9071358201311005e-05, 3.601664218378343e-05, 3.26812038191605e-05, 2.9414602848272353e-05, 2.686754959332463e-05, 2.624562831636552e-05, 2.7369353665369592e-05, 2.8388997826535198e-05, 2.7091663400755193e-05, 3.4465045929953244e-05, 3.735030816304419e-05, 4.287839105843685e-05, 3.86672578533268e-05, 3.655127593754177e-05, 3.4788077902678936e-05, 3.4288681404040696e-05, 3.353950525472074e-05, 3.0389710714496573e-05, 2.757437643198299e-05, 3.731802879526802e-05, 3.457707920359118e-05, 3.187381810433105e-05, 2.923163615643958e-05, 2.6760275880407455e-05, 2.4490301871281838e-05, 2.2066596321832037e-05, 2.0701342425651033e-05, 1.8899964994680223e-05, 1.716795110087345e-05, 1.5788267537325947e-05, 1.9251652822355496e-05, 2.0146366778846735e-05, 2.1529973486920415e-05, 2.0683705206869187e-05, 1.8739393606879364e-05, 1.6865764257764095e-05, 1.5213867665507383e-05, 1.369732812336404e-05, 1.2327595488710348e-05, 1.111061455761658e-05, 1.000939551264848e-05, 9.099064503492275e-06, 1.0671471899248026e-05, 1.1931290849106889e-05, 1.0812859938826879e-05, 1.1133913318033073e-05], "duration": 159668.612841, "accuracy_train": [0.59244232909976, 0.6808104207041344, 0.7439960692368033, 0.7529642943660022, 0.7922764324358619, 0.7997376366971208, 0.8115919302556294, 0.8178680296004062, 0.8293281293258582, 0.8355380790882245, 0.8379090098975637, 0.8310963238856589, 0.8393001338132153, 0.8404158447535992, 0.8325833376591916, 0.8591576256229235, 0.8700811386812477, 0.8722703834440754, 0.8774525813838132, 0.8717337967769472, 0.8717566877768549, 0.8736658332179772, 0.8790805460386674, 0.8939124720261166, 0.883824570586471, 0.8952141948712625, 0.8887982261097268, 0.8938892205380213, 0.8890750810377446, 0.9000265319306018, 0.8953508198943337, 0.8971419054540422, 0.9027226230850868, 0.9005609556686047, 0.9095592815614618, 0.9116032495847176, 0.905884104489664, 0.9107905289659468, 0.913207602263289, 0.9150666398463455, 0.914391265227021, 0.9095582000968992, 0.9205765215485419, 0.91185685302464, 0.9163000501799556, 0.9164384776439645, 0.9062550468346253, 0.9166488225013842, 0.9196471830011074, 0.9215073020487264, 0.9106713876199704, 0.9129747268941492, 0.9183687116440569, 0.9184166565729974, 0.9203679791320598, 0.9116948135843485, 0.9201129337393872, 0.9218328228820598, 0.9292267960963455, 0.9183465416205242, 0.9199247589055003, 0.9171585527985419, 0.9157849125599853, 0.9240413537629198, 0.9189950598698781, 0.9205761610603543, 0.9219251078580657, 0.9293172786314139, 0.9160886238579733, 0.9276435319767442, 0.9204384545727206, 0.9117885405131044, 0.9213892421673128, 0.9154415475613695, 0.9247599869647471, 0.9317114609288483, 0.908719344084533, 0.9193674441675894, 0.9224112261789406, 0.921274066191399, 0.929760138369786, 0.9296900234173128, 0.9304573225244556, 0.931969390227021, 0.9245518050364526, 0.9310149977505537, 0.9368969032622739, 0.9227385494532114, 0.9346883723814139, 0.9262495241555924, 0.9321299877145626, 0.9311065617501846, 0.9178324854651162, 0.9349913627030271, 0.9283407161314139, 0.9321768511789406, 0.93894375519103, 0.9335733824174051, 0.9293165576550388, 0.9283650490840717, 0.9390353191906607, 0.9378276837624585, 0.93529435302464, 0.9346643999169435, 0.9345481424764673, 0.9429433716315985, 0.9331076316791252, 0.9233430881436876, 0.9387573827980805, 0.9387813552625508, 0.9388264162859912, 0.9387112403100776, 0.9326654929171282, 0.9408035137504615, 0.9361063526670359, 0.9184831666435955, 0.9175534676079733, 0.9318306022748246, 0.9315276119532114, 0.9380834501315062, 0.9388493072858989, 0.9305041859888336, 0.9381528441076044, 0.9337590338339794, 0.9370128002145626, 0.9311766767026578, 0.9440129400839794, 0.9485927622623662, 0.9330149862149317, 0.9431050505837025, 0.9397117752745479, 0.9354556714885567, 0.9390836246077889, 0.9399221201319674, 0.9354324200004615, 0.9368504002860835, 0.9390607336078812, 0.9323868355481728, 0.9431511930717055, 0.9438036766911223, 0.9421277671073275, 0.9489873165836102, 0.9478490751315062, 0.9301550531792175, 0.938362467988649, 0.9347828202865448, 0.9433372049764673, 0.9334571249769288, 0.9331788280961609, 0.9395958783222591, 0.9366640278931341, 0.9262971085963455, 0.9402222265480805, 0.9343406815245479, 0.9394077034883721, 0.9394331179055924, 0.9352925505837025, 0.9377346778100776, 0.9403148720122739, 0.9392910855597084, 0.9390607336078812, 0.9398036997623662, 0.94554681732189, 0.944407854893411, 0.9332253310723514, 0.9349452202150241, 0.9395486543696937, 0.9384333039174971, 0.9391068760958842, 0.9387802737979882, 0.9385728128460686, 0.9389902581672205, 0.9389441156792175, 0.9376431138104466, 0.9332943645602622, 0.9431057715600776, 0.9376184203696014, 0.9423856964055003], "end": "2016-01-26 06:21:35.737000", "learning_rate_per_epoch": [0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399, 0.0013492768630385399], "accuracy_valid": [0.5825827724962349, 0.6645360739834337, 0.7308334902108433, 0.7283714937876506, 0.7700901261295181, 0.7725624176393072, 0.7832943100527108, 0.7919318877070783, 0.7986766401543675, 0.7984427946159638, 0.8059714443712349, 0.7931834760918675, 0.8009562664721386, 0.7996223173945783, 0.7973441618034638, 0.8143840008471386, 0.8227465526167168, 0.8248820477221386, 0.8233157238328314, 0.8205286968185241, 0.8229803981551205, 0.8247511530496988, 0.8263983669051205, 0.8368464090737951, 0.8309252635542168, 0.8424719385353916, 0.8319738916603916, 0.8332960749246988, 0.8298986963478916, 0.839501070689006, 0.8392069253576807, 0.8399790568524097, 0.8411497552710843, 0.8434793862951807, 0.8469267695783133, 0.844505953501506, 0.8423910485692772, 0.8456766519201807, 0.8511904061558735, 0.8442015130835843, 0.8458384318524097, 0.8447000894201807, 0.8565012001129518, 0.8463987787085843, 0.8473959313817772, 0.8493284662085843, 0.8422998635165663, 0.8490843255835843, 0.8524625847138554, 0.8509050851844879, 0.8458399025790663, 0.8421366128576807, 0.8471620858433735, 0.8463987787085843, 0.8498682228915663, 0.8416174463478916, 0.8490740304969879, 0.8480768778237951, 0.8565820900790663, 0.8491358010165663, 0.8479959878576807, 0.8488710702183735, 0.8438147119728916, 0.8481180581701807, 0.8483827889683735, 0.8510889260165663, 0.8507418345256024, 0.8504270990210843, 0.8417498117469879, 0.8539980233433735, 0.8486166345067772, 0.8397863916603916, 0.8524611139871988, 0.8434279108621988, 0.8515566170933735, 0.8582704842808735, 0.836815523814006, 0.8466326242469879, 0.8479048028049698, 0.8460531579442772, 0.8537641778049698, 0.8567556358245482, 0.8515463220067772, 0.8538862481174698, 0.8475077066076807, 0.8551172463290663, 0.8624826454254518, 0.8474062264683735, 0.8586366952183735, 0.8524214043674698, 0.8574262871799698, 0.8586675804781627, 0.8449854103915663, 0.8533670816076807, 0.8519228280308735, 0.8552496117281627, 0.8603971550263554, 0.8552393166415663, 0.854771625564759, 0.8546392601656627, 0.8601118340549698, 0.8606104103915663, 0.8558084878576807, 0.855748188064759, 0.8606207054781627, 0.8621267295745482, 0.8549642907567772, 0.8497461525790663, 0.8597559182040663, 0.8586469903049698, 0.8578836831701807, 0.8530214608433735, 0.8520140130835843, 0.8581484139683735, 0.8581690041415663, 0.8449854103915663, 0.8428381494728916, 0.8505388742469879, 0.8544657144201807, 0.8619943641754518, 0.8566938653049698, 0.8532347162085843, 0.8563379494540663, 0.8545671945594879, 0.8572336219879518, 0.8528493858245482, 0.8633371376129518, 0.865321147872741, 0.8547510353915663, 0.8621664391942772, 0.8568262307040663, 0.8549039909638554, 0.8584940347326807, 0.8628076760165663, 0.8514448418674698, 0.8584234398531627, 0.8554834572665663, 0.8524214043674698, 0.8645872552710843, 0.8606913003576807, 0.8573851068335843, 0.8634180275790663, 0.8624311699924698, 0.846470844314759, 0.8545171898531627, 0.8562467644013554, 0.8620752541415663, 0.8540186135165663, 0.8511389307228916, 0.8590234963290663, 0.8522581537085843, 0.8493490563817772, 0.857335102127259, 0.8520346032567772, 0.8568056405308735, 0.8557378929781627, 0.8480268731174698, 0.8620649590549698, 0.8597044427710843, 0.8624414650790663, 0.8546289650790663, 0.858555805252259, 0.8632047722138554, 0.8601221291415663, 0.8524419945406627, 0.8545068947665663, 0.8579248635165663, 0.8558187829442772, 0.8562570594879518, 0.8575071771460843, 0.8570600762424698, 0.8589426063629518, 0.8579042733433735, 0.8566835702183735, 0.8603971550263554, 0.8544554193335843, 0.8519228280308735, 0.8612722373870482], "accuracy_test": 0.10210658482142858, "start": "2016-01-24 10:00:27.124000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0], "accuracy_train_last": 0.9423856964055003, "batch_size_eval": 1024, "accuracy_train_std": [0.019350487580845253, 0.017056651747066283, 0.01525466714604979, 0.018603417311073067, 0.017219012941441895, 0.019347415472095706, 0.020156576231938457, 0.020711972783932456, 0.022827381331121846, 0.020034860378246484, 0.02129212316739985, 0.018852021678176876, 0.022083496037314642, 0.021994063843222212, 0.021445894524134153, 0.019472149804929617, 0.02215229497388462, 0.01825159207559777, 0.018814607907106404, 0.01939633768503645, 0.01880294444220086, 0.01677269219181753, 0.01887706698897268, 0.01877926500891288, 0.018104379247573195, 0.01878168285282028, 0.017551521930617802, 0.017718980098999918, 0.019497336417727384, 0.01731905710556844, 0.019140901045754426, 0.018894298508599274, 0.017676212980040417, 0.017822439566305068, 0.01593649459899835, 0.01681808507699404, 0.017745805234176546, 0.017040689763112054, 0.017101362008497184, 0.016957758445159534, 0.01900375510290412, 0.0190006410330831, 0.016732604215052845, 0.018943624994232914, 0.01753061344620429, 0.018803420368615664, 0.019079340700521755, 0.016216485504984845, 0.01733507678416535, 0.016167034645538213, 0.018666120838490483, 0.019077804016119672, 0.016934264320968524, 0.01615415955519092, 0.017487372441321813, 0.0176552374023721, 0.01681889632056111, 0.016162733485645606, 0.015956129362700806, 0.016322645992276962, 0.01797687803843882, 0.017710649883073307, 0.01888548614858847, 0.01765168315815471, 0.01777980497658865, 0.017386565484843963, 0.017087198264747503, 0.017185955618012658, 0.016685984314136277, 0.016241485892547543, 0.016299093133796117, 0.017437606056742314, 0.0172725180625754, 0.01761883847042601, 0.018998683152287987, 0.017236848258844636, 0.01730192042419395, 0.01742354056389983, 0.018751447607848425, 0.018219235262740555, 0.01672466347396159, 0.017477468300371255, 0.017679558590763433, 0.01657128809127674, 0.017818892767699074, 0.016158355406662266, 0.015376655842261616, 0.01639198859562357, 0.015116250637563977, 0.016811244459897387, 0.01828124769507675, 0.016585506205997896, 0.01795490771738914, 0.01587420725601005, 0.017253308583971474, 0.01645044478064575, 0.015384741083758523, 0.016517848735059338, 0.017194211134148495, 0.016386727897487643, 0.01668200250293148, 0.015087476143644215, 0.01563052596881982, 0.01700378704810807, 0.01742415551396928, 0.013998429099042073, 0.015432733493940145, 0.017287272877650105, 0.01559354253225432, 0.01503667387188127, 0.01550458307084043, 0.015022710811619102, 0.016306972004844194, 0.016579498960306378, 0.017769177874103325, 0.018129596025824476, 0.018647974713835242, 0.015508901026167492, 0.015638776695690592, 0.015444992906009175, 0.01569860722096445, 0.015782270029146797, 0.015179492007158207, 0.01589123532381061, 0.015981295077406883, 0.0170725465767022, 0.013942200325147324, 0.014475557860160273, 0.015680111050868, 0.015364413505401102, 0.013539598425059021, 0.01638841544569524, 0.014963150744096368, 0.013746396845289157, 0.015247776908462629, 0.016226929375297676, 0.014534562743648147, 0.016708093050659335, 0.015224542620601068, 0.013734732450600936, 0.014743881675468026, 0.01268808672284962, 0.0148331535636894, 0.015470906393140561, 0.014946073849617837, 0.01603290192414189, 0.014628130864065331, 0.01527826048330364, 0.013932893957062698, 0.014216889332995494, 0.015157795465014962, 0.015452321902792146, 0.015519296865039504, 0.015754053612179613, 0.015060487379999992, 0.013947517074157803, 0.015143354533803142, 0.015146284552349395, 0.014028450995504236, 0.015170389588120213, 0.015427307220351377, 0.01418191204440911, 0.01386705632721572, 0.014960673539832705, 0.014966574220024426, 0.014492971857926659, 0.013695130358381194, 0.014216165909148367, 0.014741265949910123, 0.014020976172037094, 0.014417331212585689, 0.014368192555089181, 0.014596432353416141, 0.016017358443509256, 0.015831422819920744, 0.014259416412827953, 0.015579932826138971, 0.015112834642411203], "accuracy_test_std": 0.006985330608684999, "error_valid": [0.4174172275037651, 0.33546392601656627, 0.2691665097891567, 0.27162850621234935, 0.2299098738704819, 0.22743758236069278, 0.21670568994728923, 0.20806811229292166, 0.20132335984563254, 0.2015572053840362, 0.1940285556287651, 0.20681652390813254, 0.19904373352786142, 0.20037768260542166, 0.2026558381965362, 0.18561599915286142, 0.1772534473832832, 0.17511795227786142, 0.17668427616716864, 0.17947130318147586, 0.17701960184487953, 0.17524884695030118, 0.17360163309487953, 0.16315359092620485, 0.1690747364457832, 0.1575280614646084, 0.1680261083396084, 0.16670392507530118, 0.1701013036521084, 0.16049892931099397, 0.1607930746423193, 0.1600209431475903, 0.15885024472891573, 0.1565206137048193, 0.15307323042168675, 0.15549404649849397, 0.15760895143072284, 0.1543233480798193, 0.1488095938441265, 0.15579848691641573, 0.1541615681475903, 0.1552999105798193, 0.14349879988704817, 0.15360122129141573, 0.15260406861822284, 0.15067153379141573, 0.15770013648343373, 0.15091567441641573, 0.1475374152861446, 0.14909491481551207, 0.15416009742093373, 0.1578633871423193, 0.1528379141566265, 0.15360122129141573, 0.15013177710843373, 0.1583825536521084, 0.15092596950301207, 0.15192312217620485, 0.14341790992093373, 0.15086419898343373, 0.1520040121423193, 0.1511289297816265, 0.1561852880271084, 0.1518819418298193, 0.1516172110316265, 0.14891107398343373, 0.14925816547439763, 0.14957290097891573, 0.15825018825301207, 0.1460019766566265, 0.15138336549322284, 0.1602136083396084, 0.14753888601280118, 0.15657208913780118, 0.1484433829066265, 0.1417295157191265, 0.16318447618599397, 0.15336737575301207, 0.15209519719503017, 0.15394684205572284, 0.14623582219503017, 0.14324436417545183, 0.14845367799322284, 0.14611375188253017, 0.1524922933923193, 0.14488275367093373, 0.13751735457454817, 0.1525937735316265, 0.1413633047816265, 0.14757859563253017, 0.14257371282003017, 0.14133241952183728, 0.15501458960843373, 0.1466329183923193, 0.1480771719691265, 0.14475038827183728, 0.1396028449736446, 0.14476068335843373, 0.14522837443524095, 0.14536073983433728, 0.13988816594503017, 0.13938958960843373, 0.1441915121423193, 0.14425181193524095, 0.13937929452183728, 0.13787327042545183, 0.14503570924322284, 0.15025384742093373, 0.14024408179593373, 0.14135300969503017, 0.1421163168298193, 0.1469785391566265, 0.14798598691641573, 0.1418515860316265, 0.14183099585843373, 0.15501458960843373, 0.1571618505271084, 0.14946112575301207, 0.1455342855798193, 0.13800563582454817, 0.14330613469503017, 0.14676528379141573, 0.14366205054593373, 0.14543280544051207, 0.14276637801204817, 0.14715061417545183, 0.13666286238704817, 0.13467885212725905, 0.14524896460843373, 0.13783356080572284, 0.14317376929593373, 0.1450960090361446, 0.1415059652673193, 0.13719232398343373, 0.14855515813253017, 0.14157656014683728, 0.14451654273343373, 0.14757859563253017, 0.13541274472891573, 0.1393086996423193, 0.14261489316641573, 0.13658197242093373, 0.13756883000753017, 0.15352915568524095, 0.14548281014683728, 0.1437532355986446, 0.13792474585843373, 0.14598138648343373, 0.1488610692771084, 0.14097650367093373, 0.14774184629141573, 0.15065094361822284, 0.14266489787274095, 0.14796539674322284, 0.1431943594691265, 0.14426210702183728, 0.15197312688253017, 0.13793504094503017, 0.14029555722891573, 0.13755853492093373, 0.14537103492093373, 0.14144419474774095, 0.1367952277861446, 0.13987787085843373, 0.14755800545933728, 0.14549310523343373, 0.14207513648343373, 0.14418121705572284, 0.14374294051204817, 0.14249282285391573, 0.14293992375753017, 0.14105739363704817, 0.1420957266566265, 0.1433164297816265, 0.1396028449736446, 0.14554458066641573, 0.1480771719691265, 0.13872776261295183], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.9359093493354034, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0013492768800732991, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "optimization": "adam", "nb_data_augmentation": 2, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 1.829698365562883e-05, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.06013985922503809}, "accuracy_valid_max": 0.865321147872741, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8612722373870482, "loss_train": [1.752323865890503, 1.3400144577026367, 1.1695326566696167, 1.0723423957824707, 1.0022834539413452, 0.9552555680274963, 0.9181872010231018, 0.8850914239883423, 0.8560618162155151, 0.8325290679931641, 0.8139778971672058, 0.7974900603294373, 0.7770507335662842, 0.7648336291313171, 0.7506357431411743, 0.7394663095474243, 0.728543758392334, 0.7188680768013, 0.7092841863632202, 0.6988435983657837, 0.6933042407035828, 0.6866375207901001, 0.6791238188743591, 0.67181795835495, 0.6656193137168884, 0.6606720685958862, 0.6553825736045837, 0.6503996253013611, 0.6450720429420471, 0.6388487219810486, 0.6348973512649536, 0.6326208114624023, 0.6270772814750671, 0.6237197518348694, 0.6163727045059204, 0.6147847771644592, 0.6105444431304932, 0.6083267331123352, 0.6046032905578613, 0.6043218970298767, 0.6017698049545288, 0.5957673192024231, 0.5931161046028137, 0.5923671126365662, 0.5889585614204407, 0.5893043279647827, 0.5855793952941895, 0.5823209285736084, 0.5793516635894775, 0.5803143382072449, 0.5741605758666992, 0.5732021331787109, 0.57233726978302, 0.5727261304855347, 0.5702452659606934, 0.5687617063522339, 0.566369891166687, 0.5640426278114319, 0.5650805234909058, 0.5606674551963806, 0.562216579914093, 0.5583460927009583, 0.558122456073761, 0.5558295249938965, 0.5528431534767151, 0.5532561540603638, 0.5512350797653198, 0.5517277121543884, 0.5479235649108887, 0.5505077838897705, 0.5463391542434692, 0.5465925335884094, 0.5441388487815857, 0.5440038442611694, 0.5456764101982117, 0.5405646562576294, 0.5427665114402771, 0.5378262400627136, 0.5403404235839844, 0.538447916507721, 0.5353705883026123, 0.5350200533866882, 0.5364556908607483, 0.5330975651741028, 0.5319810509681702, 0.5338630080223083, 0.5334758162498474, 0.5336955189704895, 0.5300447344779968, 0.5319914221763611, 0.5322555899620056, 0.5265478491783142, 0.5272757411003113, 0.5281997323036194, 0.5277814269065857, 0.5275470614433289, 0.5265731811523438, 0.529028594493866, 0.5234478712081909, 0.5282580256462097, 0.5267748236656189, 0.5218821167945862, 0.5221652388572693, 0.5227291584014893, 0.5221582055091858, 0.5215736627578735, 0.5230115056037903, 0.5199823975563049, 0.5179501175880432, 0.5192395448684692, 0.5215139389038086, 0.5155264139175415, 0.5188404321670532, 0.5180513262748718, 0.5167801380157471, 0.5198104381561279, 0.5156095027923584, 0.5185577869415283, 0.5128069519996643, 0.5166342258453369, 0.5142320394515991, 0.5156879425048828, 0.5163940191268921, 0.5095052719116211, 0.5145280361175537, 0.5128961801528931, 0.5163862109184265, 0.5091343522071838, 0.5152530670166016, 0.5087264180183411, 0.5131189227104187, 0.5093895196914673, 0.5088282823562622, 0.5101388096809387, 0.5116041302680969, 0.5046818256378174, 0.5064401626586914, 0.5119017362594604, 0.5100093483924866, 0.5051853060722351, 0.5073592066764832, 0.5081108212471008, 0.5063380002975464, 0.5036036968231201, 0.5079893469810486, 0.5077307820320129, 0.5049914121627808, 0.5021103620529175, 0.5067427754402161, 0.5072463154792786, 0.5023363828659058, 0.506838858127594, 0.5050774216651917, 0.5024465918540955, 0.5026466250419617, 0.5056707859039307, 0.5028735399246216, 0.5008426308631897, 0.5045508742332458, 0.5028781890869141, 0.4994540214538574, 0.5034360289573669, 0.4982917606830597, 0.5034101605415344, 0.5021548271179199, 0.4964264929294586, 0.5019412636756897, 0.4990229904651642, 0.5009016394615173, 0.5002990365028381, 0.4983290433883667, 0.5041719675064087, 0.4944179356098175, 0.5002349019050598, 0.5010665059089661, 0.4973788857460022, 0.4985600411891937, 0.49697110056877136], "accuracy_train_first": 0.59244232909976, "model": "residualv5", "loss_std": [0.29407745599746704, 0.18359707295894623, 0.17497657239437103, 0.1707211583852768, 0.16831329464912415, 0.16309389472007751, 0.16066652536392212, 0.15674306452274323, 0.1568680852651596, 0.15166397392749786, 0.1500629037618637, 0.14879001677036285, 0.14543025195598602, 0.14451469480991364, 0.1408502161502838, 0.14317487180233002, 0.13875159621238708, 0.13720400631427765, 0.13666465878486633, 0.13262952864170074, 0.13417793810367584, 0.1340363472700119, 0.1317615658044815, 0.12969015538692474, 0.1292549967765808, 0.1285436451435089, 0.12733672559261322, 0.1255681812763214, 0.12648074328899384, 0.1249416247010231, 0.12342130392789841, 0.1222451776266098, 0.12227683514356613, 0.11929372698068619, 0.11966735124588013, 0.11957141757011414, 0.11678767949342728, 0.11395466327667236, 0.11451376974582672, 0.11417479068040848, 0.11417429894208908, 0.11159936338663101, 0.11358421295881271, 0.1136891171336174, 0.11224724352359772, 0.11117909103631973, 0.10891293734312057, 0.10937374085187912, 0.11144278943538666, 0.10939417034387589, 0.10655414313077927, 0.10723494738340378, 0.1079760193824768, 0.10575179755687714, 0.10736510902643204, 0.10462238639593124, 0.10411743819713593, 0.10311130434274673, 0.10364735126495361, 0.1032806932926178, 0.10199003666639328, 0.10098397731781006, 0.10043039917945862, 0.0989525094628334, 0.09978552162647247, 0.10182929784059525, 0.10032883286476135, 0.0979517325758934, 0.09933841228485107, 0.10192005336284637, 0.09894784539937973, 0.09882370382547379, 0.09795742481946945, 0.09678180515766144, 0.09493933618068695, 0.0970119759440422, 0.0980415940284729, 0.09695173054933548, 0.09485648572444916, 0.09356797486543655, 0.09271078556776047, 0.09368803352117538, 0.09435541927814484, 0.09473458677530289, 0.09459247440099716, 0.09346795827150345, 0.09387769550085068, 0.09469354152679443, 0.0941903218626976, 0.09603264927864075, 0.09379361569881439, 0.09446747601032257, 0.09277557581663132, 0.0921826958656311, 0.09657087922096252, 0.09088797122240067, 0.09121773391962051, 0.09578714519739151, 0.09040659666061401, 0.0933120846748352, 0.09198860824108124, 0.09083843231201172, 0.09230846166610718, 0.09187168627977371, 0.09092333167791367, 0.08981649577617645, 0.09017662703990936, 0.08883125334978104, 0.08869465440511703, 0.09074535220861435, 0.0918714627623558, 0.08864998817443848, 0.08943170309066772, 0.09061839431524277, 0.08843516558408737, 0.0885171964764595, 0.08525984734296799, 0.0878177210688591, 0.0883871540427208, 0.08776120841503143, 0.08609742671251297, 0.09001176804304123, 0.08780225366353989, 0.08710717409849167, 0.09070666879415512, 0.08542142808437347, 0.08775056153535843, 0.08644704520702362, 0.08796904236078262, 0.08679220825433731, 0.08916417509317398, 0.08564792573451996, 0.08701890707015991, 0.08715187758207321, 0.0870678573846817, 0.08566303551197052, 0.08698317408561707, 0.08751428872346878, 0.08588548749685287, 0.08571135252714157, 0.08716419339179993, 0.08564762771129608, 0.08550023287534714, 0.08372368663549423, 0.08717568218708038, 0.08489592373371124, 0.08694648742675781, 0.08360803127288818, 0.08481656759977341, 0.08702705800533295, 0.0851631686091423, 0.08680973201990128, 0.0833759605884552, 0.08472520858049393, 0.08185790479183197, 0.0838722512125969, 0.08343564718961716, 0.08493515849113464, 0.08474240452051163, 0.08658537268638611, 0.08090697973966599, 0.08499683439731598, 0.08393901586532593, 0.0877913385629654, 0.0834716260433197, 0.08543764054775238, 0.08598173409700394, 0.08225147426128387, 0.08341632038354874, 0.08288363367319107, 0.08184628933668137, 0.08786355704069138, 0.08187084645032883, 0.0846039429306984, 0.082572802901268, 0.08165348321199417, 0.08221572637557983, 0.08320844173431396]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:15 2016", "state": "available"}], "summary": "23695f66eb89f22238f092a6be22e018"}