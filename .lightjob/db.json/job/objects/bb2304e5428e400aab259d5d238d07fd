{"content": {"hp_model": {"f1": 193, "f2": 204, "f3": 132, "nonlin": "leaky_rectify", "ds2": 169, "ds1": 113, "do2": 0.46664886149169393, "do3": 0.11065607166865399, "do1": 0.2981706838990039, "do4": 0.9804121837052081, "do5": 0.8361417410643878}, "accuracy_valid_std": [0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465, 0.021354668899916465], "moving_avg_accuracy_train": [0.009982115963855419, 0.018966020331325294, 0.027051534262048184, 0.034328496799698786, 0.04087776308358433, 0.04677210273908132, 0.052077008429028605, 0.05685142354998116, 0.06114839715883846, 0.06501567340681004, 0.06849622202998445, 0.07162871579084143, 0.0744479601756127, 0.07698528012190686, 0.07926886807357159, 0.08132409723006984, 0.08317380347091827, 0.08483853908768185, 0.08633680114276909, 0.08768523699234759, 0.08889882925696826, 0.08999106229512685, 0.09097407202946958, 0.09185878079037804, 0.09265501867519566, 0.09337163277153152, 0.0940165854582338, 0.09459704287626583, 0.09511945455249468, 0.09558962506110064, 0.09601277851884599, 0.0963936166308168, 0.09673637093159054, 0.09704484980228692, 0.09732248078591366, 0.0975723486711777, 0.09779722976791536, 0.09799962275497925, 0.09818177644333675, 0.0983457147628585, 0.09849325925042807, 0.09862604928924068, 0.09874556032417203, 0.09885312025561024, 0.09894992419390464, 0.0990370477383696, 0.09911545892838808, 0.09918602899940468, 0.09924954206331962, 0.09930670382084308, 0.0993581494026142, 0.09940445042620821], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.0008967837520427152, 0.001533500215993043, 0.0019685300141089645, 0.002248264666667401, 0.0024094741997158203, 0.0024812159395135175, 0.002486372564975282, 0.002442890666202378, 0.0023647774393390857, 0.002262902125608303, 0.002145639881512005, 0.002019388547817075, 0.0018889829431449471, 0.0017580265814192118, 0.0016291568886741855, 0.0015042569017782522, 0.00138462393019733, 0.0012711036392410884, 0.0011641963779884077, 0.0010641412533534237, 0.0009709823836808053, 0.0008846209023995313, 0.0008048555853998915, 0.000731414413184556, 0.0006639789247890699, 0.0006022028541777683, 0.0005457262444727518, 0.0004941859973528125, 0.0004472236232526732, 0.00040449080369187095, 0.0003656532529619005, 0.00033039326667347595, 0.0002984112646024184, 0.00026942657106517157, 0.00024317762462628032, 0.0002194217678044293, 0.00019793473459301574, 0.00017850992742462793, 0.0001609575543778053, 0.00014510368089349333, 0.0001307892371864535, 0.00011786901221747887, 0.00010621065698296425, 9.569371353432678e-05, 8.620868120311785e-05, 7.76561276908073e-05, 6.994584975420756e-05, 6.299608599309641e-05, 5.673278257737755e-05, 5.108891151834834e-05, 4.600384019746742e-05, 4.142275024079334e-05], "duration": 32510.955241, "accuracy_train": [0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422, 0.09982115963855422], "end": "2016-01-17 14:19:41.171000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0], "accuracy_valid": [0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138, 0.1011584051724138], "accuracy_test": 0.0999599358974359, "start": "2016-01-17 05:17:50.216000", "learning_rate_per_epoch": [0.000255698716500774, 7.316206847463036e-06, 2.0933575228809786e-07, 5.9896416715332634e-09, 1.713792580071427e-10, 4.903607467993121e-12, 1.4030499039061756e-13, 4.014491477688075e-15, 1.148650659510818e-16, 3.28658895817657e-18, 9.403787930407463e-20, 2.6906688888767222e-21, 7.698704988774453e-23, 2.202800203381954e-24, 6.302785393752442e-26, 1.8033911109316425e-27, 5.159971970007941e-29, 1.4764024728813722e-30, 4.2243722853085284e-32, 1.2087029845879787e-33, 3.458414295728634e-35, 9.89542448180342e-37, 2.8313389614514005e-38, 8.101200694939276e-40, 2.3180279196861124e-41, 6.628141736256385e-43, 1.961817850054744e-44, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_train_last": 0.09982115963855422, "error_valid": [0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862, 0.8988415948275862], "accuracy_train_std": [0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428, 0.01753496219345428], "accuracy_test_std": 0.021298602211548123, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1.0, 1.2], "translation_range": [-3, 3], "momentum": 0.9156164272915779, "shear_range": [1, 1.1], "patience_check_each": 1, "learning_rate": 0.008936575332359387, "patience_threshold": 1, "do_flip": true, "batch_size": 256, "optimization": "nesterov_momentum", "nb_data_augmentation": 0, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 2.759660629412793e-09, "valid_ratio": 0.15, "rotation_range": [-90, 90], "learning_rate_decay": 0.9713873932718693}, "accuracy_valid_max": 0.1011584051724138, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.98, interval=[0.8, 1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256, 512],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1.0, 1.2)),\n        rotation_range=make_constant_param((-90, 90)),\n        shear_range=make_constant_param((1, 1.1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    instantiate = instantiate_random\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.1011584051724138, "loss_train": [2.3048255443573, 2.303119659423828, 2.303230047225952, 2.3031387329101562, 2.3028998374938965, 2.303118944168091, 2.3031346797943115, 2.3032939434051514, 2.3032453060150146, 2.302999258041382, 2.303252935409546, 2.302985191345215, 2.3029346466064453, 2.303014039993286, 2.3029704093933105, 2.3030946254730225, 2.303009271621704, 2.3031740188598633, 2.303175449371338, 2.3031225204467773, 2.303178548812866, 2.3032219409942627, 2.303382396697998, 2.303225517272949, 2.303023338317871, 2.303030490875244, 2.303173780441284, 2.3031694889068604, 2.302971124649048, 2.3033156394958496, 2.303044557571411, 2.3033857345581055, 2.303147315979004, 2.303133726119995, 2.3030571937561035, 2.3032240867614746, 2.303041458129883, 2.3032495975494385, 2.303028106689453, 2.303114175796509, 2.303194522857666, 2.3030571937561035, 2.3031187057495117, 2.3034186363220215, 2.3029801845550537, 2.303072452545166, 2.3031272888183594, 2.3030965328216553, 2.3029210567474365, 2.3032238483428955, 2.3032453060150146, 2.3030073642730713], "accuracy_train_first": 0.09982115963855422, "model": "vgg", "loss_std": [0.005486611742526293, 0.0045117903500795364, 0.0033749707508832216, 0.0033222688362002373, 0.004100431688129902, 0.002737571019679308, 0.0032512503676116467, 0.0020514929201453924, 0.0036348174326121807, 0.0035888031125068665, 0.002604556269943714, 0.0030159028246998787, 0.003742840839549899, 0.00449144234880805, 0.004112614784389734, 0.003071524202823639, 0.0026349173858761787, 0.003005699487403035, 0.002854723948985338, 0.002180888084694743, 0.003556847805157304, 0.002755644964054227, 0.0022450329270213842, 0.0029048174619674683, 0.0026206665206700563, 0.0023017104249447584, 0.0031005602795630693, 0.0027894661761820316, 0.003577884752303362, 0.0021247523836791515, 0.003192346543073654, 0.002099616453051567, 0.002596919657662511, 0.0028361044824123383, 0.003395186271518469, 0.0030806674621999264, 0.003465149784460664, 0.0027901495341211557, 0.003266853280365467, 0.003349430626258254, 0.002969218185171485, 0.0036168526858091354, 0.0031189618166536093, 0.0026787850074470043, 0.0039001309778541327, 0.0036038013640791178, 0.0031629728619009256, 0.0029314495623111725, 0.003932436928153038, 0.0029248076025396585, 0.0022529056295752525, 0.003912437707185745]}, "state": "available", "life": [{"dt": "Sun May 15 22:04:58 2016", "state": "available"}], "summary": "510cb9228caa83455a14d8f1bbc80428"}