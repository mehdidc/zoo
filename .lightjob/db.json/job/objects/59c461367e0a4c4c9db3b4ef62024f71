{"content": {"hp_model": {"f1": 224, "f2": 74, "f3": 194, "nonlin": "rectify", "ds2": 1422, "ds1": 1234, "do2": 0.5461878056063426, "do3": 0.15998919314016868, "do1": 0.8529291998072805, "do4": 0.9864631970174556, "do5": 0.473622281769461}, "accuracy_valid_std": [0.053627563504899764, 0.053627563504899764, 0.053627563504899764, 0.053627563504899764, 0.053627563504899764, 0.053627563504899764, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.053627563504899764, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.053627563504899764, 0.053627563504899764, 0.053627563504899764, 0.053627563504899764, 0.053627563504899764, 0.053627563504899764, 0.049225072286563046, 0.053627563504899764, 0.053627563504899764, 0.053627563504899764, 0.053627563504899764, 0.053627563504899764, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.053627563504899764, 0.053627563504899764, 0.049225072286563046, 0.053627563504899764, 0.053627563504899764, 0.049225072286563046, 0.049225072286563046, 0.053627563504899764, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046, 0.049225072286563046], "moving_avg_accuracy_train": [0.010057417168674697, 0.019109092620481924, 0.02725560052710843, 0.034587457643072285, 0.041186129047439755, 0.04712493331137048, 0.05248162296216114, 0.057302643647872735, 0.06164156226501317, 0.06554658902043956, 0.0690493472870703, 0.07221359554029097, 0.07506141896818957, 0.07762446005329832, 0.0799311970298962, 0.08199549449558129, 0.08385336221469786, 0.08552544316190278, 0.0870303160143872, 0.08838470158162318, 0.08960364859213556, 0.0907124667148497, 0.09169863721203943, 0.09258619065951018, 0.09338498876223386, 0.09410390705468517, 0.09475093351789135, 0.09534502314802992, 0.09587970381515465, 0.0963609164155669, 0.09678224194268492, 0.09716143491709113, 0.09751447440730973, 0.09782044413525345, 0.09809581689040281, 0.09835541818329024, 0.09858905934688894, 0.09878757058087474, 0.09897799650471498, 0.0991493798361712, 0.0993036248344818, 0.09944244533296132, 0.09956738378159288, 0.0996798283853613, 0.09978102852875287, 0.0998721086578053, 0.09995408077395249, 0.10002785567848496, 0.10009425309256417, 0.10015401076523547, 0.10020779267063964, 0.1002561963855034], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.0009103647609427731, 0.0015567237412121419, 0.001998341686745481, 0.002282312676991121, 0.002445963588017361, 0.0025187917939831607, 0.0025251597307188347, 0.002481823921715483, 0.002403077462439446, 0.0023000128218408655, 0.002180435378926829, 0.002052504044106237, 0.0019202445241840074, 0.0017873426882012058, 0.0016564977386939205, 0.001529199881066033, 0.0014073449451150483, 0.0012917731428495945, 0.0011829776092839364, 0.001081189090738177, 0.0009864426679942928, 0.0008988636998581976, 0.0008177301201181248, 0.0007430468682053673, 0.0006744848870650652, 0.0006116879899595488, 0.0005542869801603957, 0.0005020347645420999, 0.00045440423883006233, 0.00041104790504821573, 0.00037154075134160553, 0.00033568076201399627, 0.0003032344177474809, 0.00027375353324249444, 0.0002470606513067519, 0.00022296112165749618, 0.00020115630323169631, 0.0001813953332986938, 0.00016358215826105807, 0.00014748829265166154, 0.0001329535870620299, 0.00011983166853300986, 0.00010798898822322707, 9.73038835011541e-05, 8.766566837224098e-05, 7.897376184419075e-05, 7.11368605102025e-05, 6.407215908803122e-05, 5.7704620728595764e-05, 5.1966297470723994e-05, 4.679570016379172e-05, 4.213721642392605e-05], "duration": 107262.369203, "accuracy_train": [0.10057417168674698, 0.10057417168674698, 0.10057417168674698, 0.10057417168674698, 0.10057417168674698, 0.10057417168674698, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10057417168674698, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10057417168674698, 0.10057417168674698, 0.10057417168674698, 0.10057417168674698, 0.10057417168674698, 0.10057417168674698, 0.10069182981927711, 0.10057417168674698, 0.10057417168674698, 0.10057417168674698, 0.10057417168674698, 0.10057417168674698, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10057417168674698, 0.10057417168674698, 0.10069182981927711, 0.10057417168674698, 0.10057417168674698, 0.10069182981927711, 0.10069182981927711, 0.10057417168674698, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711, 0.10069182981927711], "end": "2016-01-18 05:32:38.197000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0], "accuracy_valid": [0.09655448717948718, 0.09655448717948718, 0.09655448717948718, 0.09655448717948718, 0.09655448717948718, 0.09655448717948718, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09655448717948718, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09655448717948718, 0.09655448717948718, 0.09655448717948718, 0.09655448717948718, 0.09655448717948718, 0.09655448717948718, 0.09615384615384616, 0.09655448717948718, 0.09655448717948718, 0.09655448717948718, 0.09655448717948718, 0.09655448717948718, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09655448717948718, 0.09655448717948718, 0.09615384615384616, 0.09655448717948718, 0.09655448717948718, 0.09615384615384616, 0.09615384615384616, 0.09655448717948718, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616, 0.09615384615384616], "accuracy_test": 0.10006009615384616, "start": "2016-01-16 23:44:55.828000", "learning_rate_per_epoch": [0.00021500249567907304, 0.00015202972281258553, 0.00012413175136316568, 0.00010750124783953652, 9.615204180590808e-05, 8.777440234553069e-05, 8.126330794766545e-05, 7.601486140629277e-05, 7.166749855969101e-05, 6.798975664423779e-05, 6.48256900603883e-05, 6.206587568158284e-05, 5.9630965552059934e-05, 5.746183524024673e-05, 5.551340655074455e-05, 5.375062391976826e-05, 5.214576594880782e-05, 5.0676575483521447e-05, 4.932495721732266e-05, 4.807602090295404e-05, 4.691739013651386e-05, 4.583868576446548e-05, 4.4831118430010974e-05, 4.3887201172765344e-05, 4.3000498408218846e-05, 4.2165458580711856e-05, 4.137725045438856e-05, 4.0631653973832726e-05, 3.992496203863993e-05, 3.925390774384141e-05, 3.86155879823491e-05, 3.800743070314638e-05, 3.742712942766957e-05, 3.6872625059913844e-05, 3.6342054954729974e-05, 3.5833749279845506e-05, 3.534619463607669e-05, 3.4878012229455635e-05, 3.442795423325151e-05, 3.399487832211889e-05, 3.357774767209776e-05, 3.317560549476184e-05, 3.278757503721863e-05, 3.241284503019415e-05, 3.205068060196936e-05, 3.170039053657092e-05, 3.136133818770759e-05, 3.103293784079142e-05, 3.071464379900135e-05, 3.0405944926314987e-05, 3.0106371923466213e-05, 2.9815482776029967e-05], "accuracy_train_last": 0.10069182981927711, "error_valid": [0.9034455128205128, 0.9034455128205128, 0.9034455128205128, 0.9034455128205128, 0.9034455128205128, 0.9034455128205128, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9034455128205128, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9034455128205128, 0.9034455128205128, 0.9034455128205128, 0.9034455128205128, 0.9034455128205128, 0.9034455128205128, 0.9038461538461539, 0.9034455128205128, 0.9034455128205128, 0.9034455128205128, 0.9034455128205128, 0.9034455128205128, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9034455128205128, 0.9034455128205128, 0.9038461538461539, 0.9034455128205128, 0.9034455128205128, 0.9038461538461539, 0.9038461538461539, 0.9034455128205128, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539, 0.9038461538461539], "accuracy_train_std": [0.053680978513186345, 0.053680978513186345, 0.053680978513186345, 0.053680978513186345, 0.053680978513186345, 0.053680978513186345, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.053680978513186345, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.053680978513186345, 0.053680978513186345, 0.053680978513186345, 0.053680978513186345, 0.053680978513186345, 0.053680978513186345, 0.0523971018570898, 0.053680978513186345, 0.053680978513186345, 0.053680978513186345, 0.053680978513186345, 0.053680978513186345, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.053680978513186345, 0.053680978513186345, 0.0523971018570898, 0.053680978513186345, 0.053680978513186345, 0.0523971018570898, 0.0523971018570898, 0.053680978513186345, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898, 0.0523971018570898], "accuracy_test_std": 0.051406220961245495, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1.0, 1.2], "translation_range": [-3, 3], "momentum": 0.7830279192355918, "shear_range": [1, 1.1], "patience_check_each": 1, "learning_rate": 0.00021500249910120587, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "optimization": "adam", "nb_data_augmentation": 3, "learning_rate_decay_method": "sqrt", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 1.4977180308033704e-09, "valid_ratio": 0.15, "rotation_range": [-90, 90], "learning_rate_decay": 0.8109932408203642}, "accuracy_valid_max": 0.09655448717948718, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.98, interval=[0.8, 1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256, 512],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1.0, 1.2)),\n        rotation_range=make_constant_param((-90, 90)),\n        shear_range=make_constant_param((1, 1.1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    instantiate = instantiate_random\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.09615384615384616, "loss_train": [2.3032894134521484, 2.3032286167144775, 2.3031325340270996, 2.303025245666504, 2.3029990196228027, 2.30299711227417, 2.3029613494873047, 2.302940607070923, 2.302900552749634, 2.302870988845825, 2.3028273582458496, 2.302781820297241, 2.3027234077453613, 2.302673101425171, 2.3026487827301025, 2.3026187419891357, 2.3026123046875, 2.3025994300842285, 2.302607774734497, 2.302605390548706, 2.3026046752929688, 2.30259108543396, 2.3026020526885986, 2.3026020526885986, 2.3025968074798584, 2.302600145339966, 2.3026015758514404, 2.3025882244110107, 2.3025856018066406, 2.3026041984558105, 2.3025827407836914, 2.3025946617126465, 2.3025906085968018, 2.3025856018066406, 2.302598714828491, 2.302595853805542, 2.302595615386963, 2.302591323852539, 2.302593469619751, 2.302589178085327, 2.3025906085968018, 2.302582263946533, 2.302593231201172, 2.3025877475738525, 2.302589178085327, 2.30259108543396, 2.3025882244110107, 2.3025875091552734, 2.302586793899536, 2.3025918006896973, 2.3025858402252197, 2.3025808334350586], "accuracy_train_first": 0.10057417168674698, "model": "vgg", "loss_std": [0.007632731460034847, 0.0023603595327585936, 0.0014009473379701376, 0.0010886747622862458, 0.0010596438078209758, 0.0010153851471841335, 0.0010009206598624587, 0.0009375998051837087, 0.0008789926650933921, 0.0008410209557041526, 0.0008303695940412581, 0.000807480770163238, 0.000799930130597204, 0.0007846963708288968, 0.0007935719913803041, 0.0008056213264353573, 0.0008051852346397936, 0.0007958224741742015, 0.0008036597864702344, 0.0007746255141682923, 0.0007806342327967286, 0.0007864185026846826, 0.0007801845204085112, 0.000789967889431864, 0.0007684247102588415, 0.000791793514508754, 0.0007986095733940601, 0.0007978380308486521, 0.0008018296211957932, 0.0007924719830043614, 0.0007950617000460625, 0.000783261435572058, 0.0007893014117144048, 0.0007910610293038189, 0.0007894541486166418, 0.0007865577354095876, 0.0007851387490518391, 0.0007703223964199424, 0.0007661456475034356, 0.0007808258524164557, 0.0007979958900250494, 0.0008046674192883074, 0.0008051600307226181, 0.0007912378641776741, 0.0007901237113401294, 0.0007896543247625232, 0.0007870387635193765, 0.000793910410720855, 0.0007895729504525661, 0.0007911399006843567, 0.0007843018393032253, 0.0007925439276732504]}, "state": "available", "life": [{"dt": "Sun May 15 22:04:59 2016", "state": "available"}], "summary": "1d6ced89eca625ceb9e376d821caf98a"}