{"content": {"hp_model": {"f0": 16, "f1": 64, "f2": 64, "f3": 32, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.0296874511076636, 0.028184145701093913, 0.03356798866379832, 0.02616061074635822, 0.030252884916015473, 0.027749152547021746, 0.025382316651505237, 0.025921282450721575, 0.02415422162331054, 0.027646964678162713, 0.022774766000375913, 0.025129442616800106, 0.0296874511076636, 0.027959222191227377, 0.02524290253259155, 0.029845016462784327, 0.030094139154775695, 0.023552177458347742, 0.025064377782769928, 0.025129442616800106, 0.02873086122391143, 0.024553910735587357, 0.027448058330260216, 0.02452396580376132, 0.02437443368899898, 0.02880276259816524, 0.026237135816671007, 0.024596731347305823, 0.02491918103448276, 0.030316389863437928, 0.02483275144201775, 0.023423561550952758, 0.024966825957107027, 0.023917574480428156, 0.030094139154775695, 0.029301441999363242, 0.02659259198114885, 0.026024320421839057, 0.027223717880732284, 0.02813904691576565, 0.026755838400722275, 0.026083165569605726, 0.026155408623068192, 0.030094139154775695, 0.026155408623068192, 0.02996030015473057, 0.026513329235597186, 0.02730357642094812, 0.0276289116056345, 0.025121860402747342, 0.02589887433570796, 0.025271636636979684, 0.029190704495289793, 0.02625096266583854, 0.0246066875231223], "moving_avg_accuracy_train": [0.009996234939759034, 0.018493975903614453, 0.027659732680722887, 0.03456996423192771, 0.044288325489457825, 0.05036871733810241, 0.055650463827183735, 0.0629101538902485, 0.06707659332050075, 0.07202885492218562, 0.07498221942996705, 0.07748493875203058, 0.07973267981658655, 0.0824992461722773, 0.08377963028998933, 0.08608973202002654, 0.08742051785416846, 0.08629565356875162, 0.087777628121515, 0.08899845341177315, 0.0920809122874633, 0.09335145434184951, 0.09611627125706214, 0.09566550633015111, 0.09588575916099143, 0.09745352737139831, 0.09799620174269222, 0.09732685265276035, 0.09451481874290601, 0.09585258762162746, 0.09506109768476592, 0.09552298490424115, 0.0963928437933351, 0.09674508802845942, 0.09701033826175806, 0.09826327657413647, 0.09922855283238548, 0.09996552435637585, 0.102417202342425, 0.10222113346360419, 0.10158580475579798, 0.10195292081636276, 0.10168562195761804, 0.10145681879800082, 0.10044611432783929, 0.10376746675047704, 0.10374698890073054, 0.10407447374559724, 0.10336440965417004, 0.10387604850803014, 0.10180922678975726, 0.10039383498427552, 0.10227557347379979, 0.1017901094999138, 0.10180264598968145], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.0008993224167377338, 0.0014592945884630386, 0.0020694650052907174, 0.002292280205583045, 0.002913071094811502, 0.002954504470627923, 0.002910125637339437, 0.003093440971911344, 0.0029403298324538565, 0.0028670209039521714, 0.002658820070799362, 0.002449310499764697, 0.002249850508827849, 0.0020937504625490235, 0.001899129867694124, 0.0017572460109528, 0.0015974603282846952, 0.0014491021724016828, 0.001323958192336859, 0.001204976102607178, 0.0011699924668293492, 0.0010675217141540893, 0.0010295674559104937, 0.0009284394114934424, 0.0008360320721295367, 0.0007745499393706447, 0.0006997454046929134, 0.0006338031180613558, 0.0006415906186467569, 0.000593538186937962, 0.0005398224751255435, 0.0004877602858446201, 0.0004457941476425801, 0.00040233141688892694, 0.00036273149437641907, 0.0003405870346704081, 0.00031491415549602005, 0.00028831088319097224, 0.0003135763193973777, 0.00028256467450481844, 0.00025794099015700084, 0.00023335985895862218, 0.00021066691118173597, 0.0001900713780362198, 0.00018025795196663827, 0.0002615145940082298, 0.00023536690868837897, 0.0002127954347320974, 0.00019605361038429662, 0.00017880421819688048, 0.00019936956451331312, 0.00019746261372920583, 0.00020958481004289847, 0.00019074740646807934, 0.00017167408029345266], "duration": 40328.597396, "accuracy_train": [0.09996234939759036, 0.09497364457831325, 0.1101515436746988, 0.09676204819277108, 0.1317535768072289, 0.10509224397590361, 0.10318618222891567, 0.12824736445783133, 0.10457454819277108, 0.1165992093373494, 0.1015625, 0.10000941265060241, 0.09996234939759036, 0.10739834337349398, 0.09530308734939759, 0.10688064759036145, 0.09939759036144578, 0.076171875, 0.10111539909638555, 0.09998588102409639, 0.1198230421686747, 0.1047863328313253, 0.1209996234939759, 0.0916086219879518, 0.09786803463855422, 0.11156344126506024, 0.10288027108433735, 0.09130271084337349, 0.06920651355421686, 0.10789250753012049, 0.08793768825301204, 0.09967996987951808, 0.10422157379518072, 0.09991528614457831, 0.09939759036144578, 0.10953972138554217, 0.10791603915662651, 0.10659826807228916, 0.12448230421686747, 0.10045651355421686, 0.09586784638554217, 0.10525696536144578, 0.09927993222891567, 0.09939759036144578, 0.09134977409638555, 0.13365963855421686, 0.10356268825301204, 0.10702183734939759, 0.0969738328313253, 0.10848079819277108, 0.0832078313253012, 0.08765530873493976, 0.11921121987951808, 0.09742093373493976, 0.10191547439759036], "end": "2016-01-19 01:19:29.576000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0], "accuracy_valid": [0.09994612068965517, 0.1019665948275862, 0.11462823275862069, 0.0902478448275862, 0.1333512931034483, 0.10210129310344827, 0.09711745689655173, 0.12890625, 0.10695043103448276, 0.1214978448275862, 0.10048491379310345, 0.09981142241379311, 0.09994612068965517, 0.1089709051724138, 0.08755387931034483, 0.10519935344827586, 0.10344827586206896, 0.07610452586206896, 0.10169719827586207, 0.09981142241379311, 0.11476293103448276, 0.10304418103448276, 0.12473060344827586, 0.09213362068965517, 0.09307650862068965, 0.1058728448275862, 0.10250538793103449, 0.08445581896551724, 0.07637392241379311, 0.10237068965517242, 0.0859375, 0.10075431034482758, 0.0972521551724138, 0.09496228448275862, 0.10344827586206896, 0.11408943965517242, 0.1015625, 0.10371767241379311, 0.12365301724137931, 0.09738685344827586, 0.08728448275862069, 0.10546875, 0.10331357758620689, 0.10344827586206896, 0.09981142241379311, 0.13267780172413793, 0.1015625, 0.10695043103448276, 0.09657866379310345, 0.10883620689655173, 0.08095366379310345, 0.08701508620689655, 0.11772629310344827, 0.1011584051724138, 0.10075431034482758], "accuracy_test": 0.13421474358974358, "start": "2016-01-18 14:07:20.979000", "learning_rate_per_epoch": [0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642, 0.001896734000183642], "accuracy_train_last": 0.10191547439759036, "error_valid": [0.9000538793103449, 0.8980334051724138, 0.8853717672413793, 0.9097521551724138, 0.8666487068965517, 0.8978987068965517, 0.9028825431034483, 0.87109375, 0.8930495689655172, 0.8785021551724138, 0.8995150862068966, 0.9001885775862069, 0.9000538793103449, 0.8910290948275862, 0.9124461206896551, 0.8948006465517242, 0.896551724137931, 0.923895474137931, 0.8983028017241379, 0.9001885775862069, 0.8852370689655172, 0.8969558189655172, 0.8752693965517242, 0.9078663793103449, 0.9069234913793104, 0.8941271551724138, 0.8974946120689655, 0.9155441810344828, 0.9236260775862069, 0.8976293103448276, 0.9140625, 0.8992456896551724, 0.9027478448275862, 0.9050377155172413, 0.896551724137931, 0.8859105603448276, 0.8984375, 0.8962823275862069, 0.8763469827586207, 0.9026131465517242, 0.9127155172413793, 0.89453125, 0.8966864224137931, 0.896551724137931, 0.9001885775862069, 0.8673221982758621, 0.8984375, 0.8930495689655172, 0.9034213362068966, 0.8911637931034483, 0.9190463362068966, 0.9129849137931034, 0.8822737068965517, 0.8988415948275862, 0.8992456896551724], "accuracy_train_std": [0.02573340177366352, 0.026325906585297914, 0.02649944303106533, 0.026019637795340073, 0.02915897074703564, 0.02829934184003278, 0.024097523030469158, 0.02975108666861693, 0.025671095602973683, 0.027890001009030784, 0.025818730741768926, 0.026266566073471973, 0.02573340177366352, 0.02802686856438241, 0.02680693311619749, 0.027334189871175224, 0.026798793218889963, 0.024019543943833873, 0.025611091942154423, 0.02626866359455362, 0.026961945759417363, 0.027435928922359226, 0.029534994301886365, 0.024964593763106908, 0.02522356570927106, 0.027777158938525344, 0.027214201426856408, 0.027679275108152202, 0.021602122849874065, 0.028217422805650854, 0.02536341492583863, 0.028177253413013862, 0.024640242420183853, 0.025283569212672025, 0.026798793218889963, 0.027410405826423137, 0.02482563176172862, 0.02747474351586334, 0.028546142305246217, 0.02784127561460611, 0.026602896649775404, 0.025984659387617858, 0.02789508325594494, 0.026798793218889963, 0.025592242303109667, 0.027978777360487546, 0.0280022301624753, 0.027833129843410916, 0.025713371258116804, 0.027372814944894994, 0.023498093577410777, 0.023503878123806485, 0.027924932691613977, 0.02650283844471443, 0.028916558477780387], "accuracy_test_std": 0.030121438223288437, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.7929431578707374, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0018967340439794472, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "optimization": "rmsprop", "nb_data_augmentation": 3, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 2.24736310196069e-07, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.07303842360456289}, "accuracy_valid_max": 0.1333512931034483, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.10075431034482758, "loss_train": [7079.32861328125, 5242.193359375, 16180.3349609375, 4215.60595703125, 9219.0166015625, 12169.9111328125, 17808.064453125, 391775.125, 32337.603515625, 19532.544921875, 20503.1171875, 289125.5625, 33399.59765625, 383875.46875, 52098.87109375, 52553.3984375, 81040.9765625, 327889.78125, 201081.125, 35580.375, 313882.0, 112091.78125, 295676.21875, 54832.8359375, 38217.890625, 570452.9375, 96126.7265625, 145225.203125, 328833.5625, 24214.62109375, 140630.171875, 85485.59375, 70283.9296875, 10940.4384765625, 205597.671875, 92770.484375, 273188.5625, 68835.578125, 72432.9140625, 35620.48046875, 496674.875, 76617.1640625, 27845.2734375, 568900.875, 113061.453125, 68937.875, 17545.501953125, 339519.71875, 52320.66015625, 276086.90625, 323454.03125, 164590.484375, 29134.55859375, 168976.1875, 111943.21875], "accuracy_train_first": 0.09996234939759036, "model": "residualv2", "loss_std": [64462.30078125, 73886.5, 179547.359375, 26428.68359375, 66057.7734375, 64816.46875, 121649.2890625, 5903233.0, 396324.375, 132057.890625, 110255.6875, 3361749.75, 330308.34375, 6185632.5, 351196.875, 421536.15625, 766452.75, 3450800.75, 1342950.625, 228516.4375, 3698967.0, 816492.5625, 3221672.75, 398917.71875, 305282.71875, 8575094.0, 632218.0, 2018720.75, 3623209.0, 143970.921875, 1314079.375, 921264.875, 784828.0, 75422.46875, 2215911.5, 556162.375, 2025675.375, 414473.0625, 652706.5, 165961.890625, 5696577.0, 429663.65625, 252896.84375, 9983398.0, 1030428.3125, 632285.0, 136294.53125, 4765790.5, 383150.4375, 2698258.0, 3321677.75, 1537565.625, 195453.109375, 1452251.75, 1190711.875]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:01 2016", "state": "available"}], "summary": "882a93019e7c972c84055b5a894f58d0"}