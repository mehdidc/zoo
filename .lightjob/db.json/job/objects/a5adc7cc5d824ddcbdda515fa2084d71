{"content": {"hp_model": {"f0": 16, "f1": 32, "f2": 64, "f3": 16, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.6935582160949707, 1.3170995712280273, 1.1225606203079224, 0.9820566177368164, 0.8772271275520325, 0.7995222210884094, 0.7404610514640808, 0.6897183060646057, 0.6491495370864868, 0.6112763285636902, 0.5796969532966614, 0.5507683157920837, 0.5254676938056946, 0.5010528564453125, 0.47876909375190735, 0.45887520909309387, 0.43854203820228577, 0.41927945613861084, 0.40129441022872925, 0.38481730222702026, 0.371626615524292, 0.3567715585231781, 0.34461936354637146, 0.3325297236442566, 0.3197363615036011, 0.3071916997432709, 0.299063503742218, 0.28903669118881226, 0.2791293263435364, 0.27197903394699097, 0.26273128390312195, 0.2564651370048523, 0.24860064685344696, 0.24385936558246613, 0.23546361923217773, 0.23098859190940857, 0.227750763297081, 0.2228233963251114, 0.2170788198709488, 0.21563075482845306, 0.2110617309808731, 0.20847123861312866, 0.20506204664707184, 0.20239457488059998, 0.19855055212974548, 0.1963803917169571, 0.19440826773643494, 0.19351454079151154, 0.1905606985092163, 0.18791145086288452, 0.1867872178554535, 0.1854831874370575, 0.1824248731136322, 0.18313716351985931, 0.18490903079509735, 0.18119822442531586, 0.1796145886182785, 0.1795250028371811, 0.17838625609874725, 0.1769832819700241, 0.17524287104606628, 0.17624586820602417, 0.173791766166687, 0.17428405582904816, 0.17281626164913177, 0.17286741733551025, 0.17487892508506775, 0.17429041862487793, 0.17261244356632233, 0.1734146773815155, 0.1734495759010315, 0.17168264091014862, 0.16991904377937317, 0.17148706316947937, 0.17140094935894012, 0.17262984812259674, 0.17029164731502533, 0.17132988572120667, 0.1709156185388565, 0.17035692930221558, 0.17095676064491272, 0.170054093003273, 0.16989845037460327, 0.1692558377981186, 0.16921298205852509, 0.16846758127212524, 0.16944772005081177, 0.1694924384355545, 0.16956180334091187, 0.16928018629550934, 0.17127199470996857, 0.16945737600326538, 0.16961711645126343, 0.16948489844799042, 0.1692892163991928, 0.16791900992393494, 0.16915936768054962, 0.1691650152206421], "moving_avg_accuracy_train": [0.044491217786775554, 0.10031550466904299, 0.1542351714986503, 0.20691479434509386, 0.25969679163169923, 0.3090672510978667, 0.35711823567684897, 0.4017402854538023, 0.4433463367637654, 0.48222142502122056, 0.5189271452278933, 0.552754916816215, 0.5840508075635341, 0.6131285675694546, 0.6404189488616047, 0.6658333692959039, 0.6894829834379728, 0.7112927593085997, 0.7311333984755618, 0.7496431602972101, 0.766650754306941, 0.7825479964692239, 0.7972532951058009, 0.8107669735894069, 0.8232592751115109, 0.8348046158266426, 0.8453140771571843, 0.8549770973034536, 0.8640156483589149, 0.8724642393981157, 0.8803771079786068, 0.8874080809951148, 0.8941567365468585, 0.9005165558958179, 0.9060426835634344, 0.9113859331738223, 0.9163623045862759, 0.9207597307467882, 0.9248847889567162, 0.9285995943968235, 0.9322335989429293, 0.9355576454082248, 0.9387330100317619, 0.9415140722334122, 0.9442472179470403, 0.9466141512833809, 0.9489953631622411, 0.9511013235699004, 0.9530036633832223, 0.9548249791116221, 0.9565130634898195, 0.9579812222052063, 0.9592676517680928, 0.9605463461127859, 0.9617692506361049, 0.9627838342011397, 0.9637225720953945, 0.964709234228786, 0.9654693830131333, 0.9662860504011888, 0.9669861738182958, 0.9675766852662926, 0.9682848929278324, 0.9688362853660846, 0.9692696874450168, 0.9697039631922556, 0.9701436034409517, 0.9705090527302545, 0.9708542331322936, 0.9711648954941288, 0.9715188963816852, 0.9718002947995337, 0.9720582036732164, 0.9722717204690546, 0.9724313335019756, 0.972621488207795, 0.9728112286335088, 0.9729145657011748, 0.9731029001632647, 0.9732049718636696, 0.9733572902630816, 0.9734967019713618, 0.9735663689373856, 0.9736778973318069, 0.9737759477379765, 0.973845591913053, 0.9739152471170504, 0.9739639859077909, 0.9740404029027907, 0.9740952273054334, 0.9741329435237641, 0.974132010888119, 0.9741544230041336, 0.9742396980752134, 0.9742583169189472, 0.9742634481342599, 0.974328520097089, 0.9743173303993495], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.043822948042168665, 0.0990408214890813, 0.15217326042451051, 0.20438110380977031, 0.2564923216008565, 0.3045978251806052, 0.35137501790727355, 0.39435957466323296, 0.43408636192582534, 0.4711548588751856, 0.5059142847440676, 0.5372557146563326, 0.5665485449226271, 0.5934918526103342, 0.6178639293504303, 0.6409524364059745, 0.6622294925112354, 0.6816159241430185, 0.6990037069640329, 0.7149090591591959, 0.7295565545045715, 0.7427840104057709, 0.7547894654928294, 0.7658008650937724, 0.7758708456495308, 0.7849592717208729, 0.7927949992927614, 0.800077028683892, 0.8071029583926864, 0.8132248055786437, 0.8190203773080534, 0.8242241848332722, 0.8288403993977612, 0.8332320736428496, 0.837199876020658, 0.8409916542318453, 0.8443777815420945, 0.8473286693799785, 0.8500200600191644, 0.8525776184468413, 0.8550136983755006, 0.8572713235021824, 0.8592034708488768, 0.8610634442647421, 0.8626662371688402, 0.8641066917652092, 0.8655028161692606, 0.8669322855877262, 0.8679349578196162, 0.8689085459984979, 0.8697502132830607, 0.8706775827680077, 0.8712924887419599, 0.8719903294761976, 0.8724820497759422, 0.8728767994293721, 0.873146624898709, 0.8735481592273622, 0.8739349836943097, 0.874418432566972, 0.8746317509725489, 0.8749478668673873, 0.875293406328992, 0.8757274916655958, 0.8758465252550603, 0.8760024836105783, 0.8763534541877734, 0.8765329913461798, 0.8764605821776763, 0.8765317502870924, 0.8767555225004766, 0.8768582317338627, 0.8770737698650698, 0.8771070037595868, 0.8772366295319716, 0.8772525479511389, 0.8774398319832089, 0.877473080759662, 0.8776138974483795, 0.8776795973119752, 0.8776888695555517, 0.8777582497310206, 0.8777108286076927, 0.8776671200880378, 0.8778495680001677, 0.877866257237425, 0.8778578929971161, 0.877884927257269, 0.8780089733587259, 0.8781572359437869, 0.8782418441453419, 0.878245778847901, 0.8781862259066351, 0.8782546985719957, 0.8782563183232298, 0.8782333620368405, 0.8781872578079306, 0.8780613442918213], "moving_var_accuracy_train": [0.017815216141352647, 0.04408085358044064, 0.06583874246153928, 0.08423115218457722, 0.1008814901041885, 0.112730321504874, 0.1222373634254729, 0.12793377301959774, 0.13071996726810348, 0.13124942292451747, 0.13025026969508058, 0.12752410590125757, 0.12358659031014499, 0.11883757642178769, 0.11365670297924738, 0.10810406757542453, 0.10232739905950078, 0.09637565606529351, 0.09028094912174647, 0.08433635575381918, 0.07850604446443574, 0.07292994079328859, 0.06758315898587797, 0.06246841864271464, 0.05762609515431563, 0.053063139668940364, 0.04875086469916969, 0.044716143854377596, 0.04097978811557945, 0.037524217518950485, 0.03433531716960456, 0.031346696686673885, 0.02862192618381121, 0.02612375928479268, 0.023786226139302577, 0.021664556372962506, 0.019720979187578414, 0.017922917480354995, 0.01628377067943715, 0.014779591626614089, 0.013420486365322738, 0.012177881292921456, 0.011050839628061008, 0.01001536442797994, 0.009081058754609262, 0.008223374239916462, 0.007452068346033038, 0.006746777134577389, 0.0061046694920077966, 0.005524057261649666, 0.004997298195295925, 0.004516967785888429, 0.004080165116482003, 0.003686864137878155, 0.0033316371833487274, 0.003007737883307803, 0.002714895154484012, 0.0024521671585248294, 0.002212150878241449, 0.001996938301021724, 0.0018016560261121862, 0.0016246287574329065, 0.0014666799045163891, 0.0013227482166534054, 0.0011921639312462708, 0.0010746448969434022, 0.0009689199591835249, 0.0008732299419126395, 0.0007869792933109427, 0.000709149963907398, 0.0006393628171721753, 0.0005761392010810663, 0.0005191239338570781, 0.0004676218452703154, 0.00042108894762578824, 0.0003793054821725169, 0.00034169894681761523, 0.00030762515908183815, 0.0002771818720001509, 0.00024955745248834754, 0.00022481051529270752, 0.00020250438438308737, 0.00018229762732017312, 0.00016417981183301553, 0.00014784835558906425, 0.00013310717283025657, 0.00011984012217422621, 0.00010787748918430923, 9.714229628000151e-05, 8.74551180881275e-05, 7.872240889744133e-05, 7.085017583598042e-05, 6.376967897888065e-05, 5.7458157620721594e-05, 5.171546181072727e-05, 4.654415259398981e-05, 4.19278465777087e-05, 3.773618880395735e-05], "duration": 83094.471008, "accuracy_train": [0.44491217786775566, 0.6027340866094499, 0.6395121729651163, 0.681031399963086, 0.734734767211148, 0.7534013862933739, 0.7895770968876891, 0.8033387334463824, 0.817800798553433, 0.8320972193383168, 0.8492786270879475, 0.857204861111111, 0.8657138242894058, 0.8748284076227391, 0.886032380490956, 0.8945631532045959, 0.9023295107165927, 0.9075807421442414, 0.9096991509782208, 0.9162310166920451, 0.9197191003945183, 0.9256231759297711, 0.9296009828349945, 0.9323900799418604, 0.9356899888104466, 0.9387126822628276, 0.9398992291320598, 0.9419442786198781, 0.9453626078580657, 0.9485015587509228, 0.9515929252030271, 0.9506868381436876, 0.9548946365125508, 0.9577549300364526, 0.9557778325719823, 0.9594751796673128, 0.9611496472983574, 0.960336566191399, 0.9620103128460686, 0.9620328433577889, 0.9649396398578812, 0.9654740635958842, 0.9673112916435955, 0.9665436320482651, 0.9688455293696937, 0.9679165513104466, 0.9704262700719823, 0.9700549672388336, 0.9701247217031194, 0.9712168206672205, 0.9717058228935955, 0.9711946506436876, 0.9708455178340717, 0.9720545952150241, 0.9727753913459765, 0.9719150862864526, 0.9721712131436876, 0.9735891934293098, 0.9723107220722591, 0.9736360568936876, 0.9732872845722591, 0.9728912882982651, 0.9746587618816908, 0.9737988173103543, 0.973170306155408, 0.9736124449174051, 0.9741003656792175, 0.9737980963339794, 0.973960856750646, 0.973960856750646, 0.9747049043696937, 0.9743328805601699, 0.9743793835363603, 0.9741933716315985, 0.9738678507982651, 0.9743328805601699, 0.9745188924649317, 0.9738445993101699, 0.9747979103220746, 0.9741236171673128, 0.9747281558577889, 0.9747514073458842, 0.9741933716315985, 0.9746816528815985, 0.9746584013935032, 0.9744723894887413, 0.9745421439530271, 0.9744026350244556, 0.9747281558577889, 0.9745886469292175, 0.9744723894887413, 0.9741236171673128, 0.9743561320482651, 0.9750071737149317, 0.9744258865125508, 0.9743096290720746, 0.9749141677625508, 0.9742166231196937], "end": "2016-02-01 07:27:09.613000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0], "moving_var_accuracy_valid": [0.017284056975959534, 0.04299677321035692, 0.06410460049436525, 0.08222507064338705, 0.09844277475607854, 0.1094257525524216, 0.11817612913167036, 0.12298756529405996, 0.12489276740051941, 0.12477015185523002, 0.12316709585031578, 0.11969095332579294, 0.11544448713830306, 0.11043351488686291, 0.10473614651980281, 0.09906024429030781, 0.09322863790983484, 0.08728827770157555, 0.08128046485429487, 0.07542924042493496, 0.06981725846147667, 0.06441022292189261, 0.059266379196329745, 0.054430999567241595, 0.049900540186057586, 0.04565388156354009, 0.04164108104641378, 0.037954224510251995, 0.03460307525368309, 0.031480060845028704, 0.028634352625562434, 0.026014633877841902, 0.023604955422206322, 0.021418041104060443, 0.019417928095038478, 0.01760553352356014, 0.015948172894655065, 0.0144317252564755, 0.013053744982982228, 0.011807240430682837, 0.010679926756383901, 0.00965780592165914, 0.008725624069817271, 0.007884197172805077, 0.007118897961365413, 0.006425682350226677, 0.005800656585368299, 0.005238981372196423, 0.0047241313994182115, 0.004260249124954915, 0.0038405998468205543, 0.003464279989592996, 0.0031212549748449157, 0.0028135123125736777, 0.002534337180994939, 0.002282305908495392, 0.0020547305697009785, 0.0018507085810846634, 0.00166698442149026, 0.001502389484653541, 0.0013525600788676078, 0.001218203434311573, 0.00109745766855615, 0.000989407772415625, 0.0008905945161328498, 0.000801753971597468, 0.0007226871975522317, 0.0006507085801182463, 0.0005856849098955719, 0.0005271620030041955, 0.00047489646873512145, 0.00042750176454121414, 0.000385169698261131, 0.0003466626688607209, 0.0003121476275424458, 0.0002809351453528203, 0.00025315730859555325, 0.00022785152706621866, 0.00020524483841798913, 0.00018475920282487877, 0.00016628405631289938, 0.00014969897316034235, 0.0001347493147107473, 0.0001212915771518863, 0.00010946200460246288, 9.851831091797867e-05, 8.866710947082429e-05, 7.980697618473998e-05, 7.196476548384573e-05, 6.49661250826223e-05, 5.853393950429347e-05, 5.268068489082219e-05, 4.744453537706087e-05, 4.274227839246903e-05, 3.846807416556868e-05, 3.462600966877488e-05, 3.118253910120783e-05, 2.8206973112938178e-05], "accuracy_test": 0.86640625, "start": "2016-01-31 08:22:15.142000", "learning_rate_per_epoch": [0.003791987895965576, 0.003465992631390691, 0.003168022958561778, 0.0028956695459783077, 0.0026467302814126015, 0.002419192111119628, 0.002211215440183878, 0.002021118300035596, 0.0018473637755960226, 0.0016885468503460288, 0.0015433833468705416, 0.00141069944947958, 0.0012894222745671868, 0.001178571255877614, 0.001077250111848116, 0.0009846393950283527, 0.0008999904384836555, 0.0008226187201216817, 0.0007518985657952726, 0.0006872582016512752, 0.0006281749811023474, 0.0005741710774600506, 0.0005248098750598729, 0.0004796922148671001, 0.00043845330947078764, 0.0004007596871815622, 0.0003663065726868808, 0.0003348153841216117, 0.00030603146296925843, 0.0002797220950014889, 0.0002556745312176645, 0.00023369431437458843, 0.00021360373648349196, 0.00019524032541085035, 0.00017845560796558857, 0.00016311387298628688, 0.00014909105084370822, 0.00013627376756630838, 0.00012455838441383094, 0.0001138501611421816, 0.00010406252113170922, 9.511631651548669e-05, 8.693921699887142e-05, 7.94650986790657e-05, 7.263352017616853e-05, 6.638924969593063e-05, 6.068179936846718e-05, 5.5465014156652614e-05, 5.0696715334197506e-05, 4.633834396372549e-05, 4.2354658944532275e-05, 3.8713449612259865e-05, 3.538527380442247e-05, 3.234321775380522e-05, 2.9562686904682778e-05, 2.702119672903791e-05, 2.469819810357876e-05, 2.257490632473491e-05, 2.063415195152629e-05, 1.8860244381357916e-05, 1.723883906379342e-05, 1.575682472321205e-05, 1.4402217857423238e-05, 1.3164066331228241e-05, 1.203235842694994e-05, 1.0997942808899097e-05, 1.0052454854303505e-05, 9.188250260194764e-06, 8.398340469284449e-06, 7.676339009776711e-06, 7.016407835180871e-06, 6.413210940081626e-06, 5.861870249646017e-06, 5.3579283303406555e-06, 4.897309736406896e-06, 4.47629054178833e-06, 4.091466053068871e-06, 3.7397246615000768e-06, 3.4182223771495046e-06, 3.1243594094121363e-06, 2.85575970337959e-06, 2.610251385704032e-06, 2.3858492568251677e-06, 2.1807388748129597e-06, 1.9932617760787252e-06, 1.8219020603282843e-06, 1.665273998696648e-06, 1.5221112334984355e-06, 1.3912560916651273e-06, 1.2716504897980485e-06, 1.1623272939687013e-06, 1.0624025890138e-06, 9.710684025776573e-07, 8.875861112755956e-07, 8.112807563520619e-07, 7.415353593387408e-07, 6.777859198336955e-07, 6.195169817146962e-07], "accuracy_train_first": 0.44491217786775566, "accuracy_train_last": 0.9742166231196937, "batch_size_eval": 1024, "accuracy_train_std": [0.020775956231318927, 0.02217543959884952, 0.022561660200768534, 0.02029579073630908, 0.020220144561988687, 0.019660313407731132, 0.017905168696878797, 0.017730377513355596, 0.015596944019976584, 0.016830901295271344, 0.016362195795033382, 0.016851596090639475, 0.015877418847591966, 0.016138712935117906, 0.015500537896214807, 0.017400088908464933, 0.014771848837359132, 0.01659455965661218, 0.015436145639088879, 0.01566595406067058, 0.0144336792313383, 0.013904156564275174, 0.012370869680450147, 0.013120943268663412, 0.012948014378215335, 0.012864901170258541, 0.012573471095793218, 0.01282166535300269, 0.01193671711942951, 0.011310847453691686, 0.010841098568797974, 0.010272809750157543, 0.0094362646071893, 0.009485970604580283, 0.009433012886471272, 0.008940799773375616, 0.008188533863574394, 0.008300537420030204, 0.008133562684764109, 0.008094868070800171, 0.0076991575957301465, 0.007440773388625128, 0.007168049823935071, 0.007719711014639357, 0.006791811322004423, 0.006284117507642666, 0.006698335184707355, 0.006556154316394245, 0.006477352660932197, 0.007006106389420473, 0.006069165070986131, 0.006835486254668144, 0.006304755916739311, 0.006594250889559082, 0.005877496686100704, 0.005822053387633214, 0.006497818281963621, 0.006017408370073227, 0.006169982636609925, 0.0055663055626395735, 0.005871517442488927, 0.006268677959072332, 0.005840722005025192, 0.005582165290260486, 0.00607515313521966, 0.005398977683734172, 0.005953954463531655, 0.005667569904753184, 0.005750030282623935, 0.0056584757496444225, 0.005706666019370959, 0.005712701018775467, 0.005702829722494798, 0.005810722501993715, 0.0057149879836236525, 0.005811220138410569, 0.00581709047404054, 0.005939926607803992, 0.0054478063842457475, 0.005976828206934513, 0.006029348618152891, 0.005673771693358114, 0.005838012284500451, 0.005616773532421761, 0.005994441255748712, 0.005733610496504319, 0.005799814641569282, 0.005839449645497126, 0.005995358804529389, 0.005717365295388593, 0.00598169920152537, 0.005579942301128285, 0.005934063376332571, 0.005731347415314572, 0.005846055520501602, 0.005947187972174001, 0.00566134614676552, 0.005683957795490569], "accuracy_test_std": 0.012140836146812542, "error_valid": [0.5617705195783133, 0.40399831748870485, 0.3696347891566265, 0.3257483057228916, 0.27450671827936746, 0.2624526426016567, 0.22763024755271077, 0.21877941453313254, 0.20837255271084332, 0.1952286685805723, 0.18125088243599397, 0.1806714161332832, 0.16981598268072284, 0.16401837820030118, 0.16278737998870485, 0.1512510000941265, 0.14627700254141573, 0.14390619117093373, 0.14450624764683728, 0.14194277108433728, 0.13861598738704817, 0.13816888648343373, 0.1371614387236446, 0.13509653849774095, 0.1334993293486446, 0.13324489363704817, 0.13668345256024095, 0.13438470679593373, 0.12966367422816272, 0.13167856974774095, 0.12881947712725905, 0.12894154743975905, 0.12961366952183728, 0.1272428581513554, 0.12708990257906627, 0.12488234186746983, 0.12514707266566272, 0.12611334007906627, 0.12575742422816272, 0.12440435570406627, 0.12306158226656627, 0.12241005035768071, 0.12340720303087349, 0.12219679499246983, 0.12290862669427716, 0.12292921686746983, 0.12193206419427716, 0.12020248964608427, 0.12304099209337349, 0.12232916039156627, 0.12267478115587349, 0.12097609186746983, 0.12317335749246983, 0.12172910391566272, 0.12309246752635539, 0.12357045368975905, 0.12442494587725905, 0.12283803181475905, 0.12258359610316272, 0.12123052757906627, 0.12344838337725905, 0.12220709007906627, 0.12159673851656627, 0.12036574030496983, 0.12308217243975905, 0.12259389118975905, 0.12048781061746983, 0.12185117422816272, 0.12419110033885539, 0.12282773672816272, 0.12123052757906627, 0.12221738516566272, 0.12098638695406627, 0.12259389118975905, 0.12159673851656627, 0.12260418627635539, 0.12087461172816272, 0.12222768025225905, 0.12111875235316272, 0.12172910391566272, 0.12222768025225905, 0.12161732868975905, 0.12271596150225905, 0.12272625658885539, 0.12050840079066272, 0.12198353962725905, 0.12221738516566272, 0.12187176440135539, 0.12087461172816272, 0.12050840079066272, 0.12099668204066272, 0.12171880882906627, 0.12234975056475905, 0.12112904743975905, 0.12172910391566272, 0.12197324454066272, 0.12222768025225905, 0.12307187735316272], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.08596950693776217, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.004148644767879916, "optimization": "rmsprop", "nb_data_augmentation": 2, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 6.095888702173893e-07, "rotation_range": [0, 0], "momentum": 0.8359452306470284}, "accuracy_valid_max": 0.8797975103539157, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8769281226468373, "accuracy_valid_std": [0.008053078198143186, 0.009737672974688687, 0.01436269093624198, 0.011111050900460597, 0.011280989157619856, 0.013327862182939418, 0.01567036691208745, 0.012713977961093512, 0.015408889021587144, 0.01353728455659505, 0.01281502656438488, 0.012099148155957782, 0.012471868883539499, 0.013204683875607585, 0.009564898711829714, 0.009827770897669964, 0.008067337637638013, 0.010049481056174587, 0.00905444776701303, 0.00998605681659738, 0.010132108666200346, 0.011229896700573403, 0.008270023366765335, 0.010479985678967766, 0.010314317400634349, 0.0091618480010704, 0.010197870587631124, 0.010488580650676878, 0.010591792214584525, 0.010496897407663873, 0.010842046786569312, 0.009310266169701905, 0.008713983703507273, 0.010485016428720595, 0.009624233755595702, 0.011260448814813102, 0.009595406641828813, 0.010226217749854445, 0.009939393049488862, 0.009794055355558927, 0.00960016777234066, 0.011759646994495845, 0.012215076043275595, 0.011165824579106186, 0.012469939809615352, 0.011929465630556748, 0.012285676546673636, 0.012522712654799147, 0.012117528186213629, 0.009915848098698499, 0.010617034548378498, 0.011144934871811648, 0.011470883130182848, 0.009987638779377462, 0.011004656460008089, 0.010255732049862461, 0.00949128260357672, 0.009317398235398249, 0.009707804777512227, 0.010163102067916567, 0.010865006190880438, 0.009936295361448754, 0.010605276430896999, 0.010712269689505923, 0.012239231361755646, 0.011096412646581896, 0.01196528976268437, 0.010197727944863184, 0.010241783519550232, 0.010346219794917514, 0.010909824465297006, 0.009603037372889625, 0.010888278743120651, 0.011160684795201055, 0.010717092607921004, 0.010941502469026242, 0.011287493464468426, 0.009789913062530785, 0.010837034873648418, 0.009371872781480039, 0.01006608290703225, 0.010308811513411285, 0.00917848715908403, 0.01110255478784758, 0.010191520256238864, 0.010266273716104628, 0.010605843012639199, 0.009507795345542427, 0.011423963858431002, 0.010903552431053171, 0.010864095647101035, 0.010354138671712854, 0.010187055470018214, 0.009788546750901636, 0.010454170055599203, 0.010217136707490498, 0.010160382557958108, 0.010963789598485058], "accuracy_valid": [0.43822948042168675, 0.5960016825112951, 0.6303652108433735, 0.6742516942771084, 0.7254932817206325, 0.7375473573983433, 0.7723697524472892, 0.7812205854668675, 0.7916274472891567, 0.8047713314194277, 0.818749117564006, 0.8193285838667168, 0.8301840173192772, 0.8359816217996988, 0.8372126200112951, 0.8487489999058735, 0.8537229974585843, 0.8560938088290663, 0.8554937523531627, 0.8580572289156627, 0.8613840126129518, 0.8618311135165663, 0.8628385612763554, 0.864903461502259, 0.8665006706513554, 0.8667551063629518, 0.863316547439759, 0.8656152932040663, 0.8703363257718373, 0.868321430252259, 0.871180522872741, 0.871058452560241, 0.8703863304781627, 0.8727571418486446, 0.8729100974209337, 0.8751176581325302, 0.8748529273343373, 0.8738866599209337, 0.8742425757718373, 0.8755956442959337, 0.8769384177334337, 0.8775899496423193, 0.8765927969691265, 0.8778032050075302, 0.8770913733057228, 0.8770707831325302, 0.8780679358057228, 0.8797975103539157, 0.8769590079066265, 0.8776708396084337, 0.8773252188441265, 0.8790239081325302, 0.8768266425075302, 0.8782708960843373, 0.8769075324736446, 0.876429546310241, 0.875575054122741, 0.877161968185241, 0.8774164038968373, 0.8787694724209337, 0.876551616622741, 0.8777929099209337, 0.8784032614834337, 0.8796342596950302, 0.876917827560241, 0.877406108810241, 0.8795121893825302, 0.8781488257718373, 0.8758088996611446, 0.8771722632718373, 0.8787694724209337, 0.8777826148343373, 0.8790136130459337, 0.877406108810241, 0.8784032614834337, 0.8773958137236446, 0.8791253882718373, 0.877772319747741, 0.8788812476468373, 0.8782708960843373, 0.877772319747741, 0.878382671310241, 0.877284038497741, 0.8772737434111446, 0.8794915992093373, 0.878016460372741, 0.8777826148343373, 0.8781282355986446, 0.8791253882718373, 0.8794915992093373, 0.8790033179593373, 0.8782811911709337, 0.877650249435241, 0.878870952560241, 0.8782708960843373, 0.8780267554593373, 0.877772319747741, 0.8769281226468373], "seed": 984683239, "model": "residualv3", "loss_std": [0.29416078329086304, 0.26550209522247314, 0.26224300265312195, 0.25728169083595276, 0.25332143902778625, 0.25358280539512634, 0.2465512454509735, 0.2408868372440338, 0.2370297610759735, 0.2296241670846939, 0.22879137098789215, 0.22012561559677124, 0.22024032473564148, 0.21328173577785492, 0.2123015820980072, 0.20728223025798798, 0.20391350984573364, 0.19713984429836273, 0.19395262002944946, 0.1888834536075592, 0.18706713616847992, 0.18123765289783478, 0.17806346714496613, 0.17361204326152802, 0.16850197315216064, 0.16663216054439545, 0.1599312126636505, 0.1605851948261261, 0.15524496138095856, 0.1537187546491623, 0.15073470771312714, 0.14809560775756836, 0.14563964307308197, 0.14226369559764862, 0.1407400369644165, 0.13722831010818481, 0.13687443733215332, 0.13253852725028992, 0.13067300617694855, 0.13006342947483063, 0.12896201014518738, 0.12549565732479095, 0.12544745206832886, 0.12371698021888733, 0.12349536269903183, 0.1182895302772522, 0.12031392008066177, 0.1214628666639328, 0.12018419802188873, 0.11776319891214371, 0.1157427653670311, 0.11614451557397842, 0.1161462664604187, 0.11368538439273834, 0.11447934061288834, 0.11340417712926865, 0.11254676431417465, 0.11467161029577255, 0.11317188292741776, 0.11077459156513214, 0.10826124250888824, 0.11177907884120941, 0.10908856242895126, 0.10918745398521423, 0.1060977429151535, 0.10887560248374939, 0.11000174283981323, 0.10760142654180527, 0.10856745392084122, 0.11014728993177414, 0.10861191153526306, 0.10722334682941437, 0.1065649539232254, 0.10857914388179779, 0.10877425968647003, 0.1081073135137558, 0.108001209795475, 0.1075780838727951, 0.10958579927682877, 0.10892130434513092, 0.10907279700040817, 0.10757339745759964, 0.1058233305811882, 0.10536964982748032, 0.1063758134841919, 0.10749734193086624, 0.10624411702156067, 0.10609298944473267, 0.10842029005289078, 0.10670562088489532, 0.10671112686395645, 0.10889014601707458, 0.10467522591352463, 0.10778406262397766, 0.10890810936689377, 0.10651406645774841, 0.10681071132421494, 0.1056622788310051]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:27 2016", "state": "available"}], "summary": "2e75f10c7e5817c1a807829dad50fc66"}