{"content": {"hp_model": {"f0": 16, "f1": 32, "f2": 16, "f3": 16, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.007367883758957342, 0.009800991297067704, 0.006786665886133108, 0.005057803953900054, 0.005057803953900054, 0.009052233443389342, 0.009052233443389342, 0.009800991297067704, 0.005057803953900054, 0.005057803953900054, 0.005057803953900054, 0.006786665886133108, 0.007153333853163134, 0.006786665886133108, 0.009800991297067704, 0.009052233443389342, 0.005057803953900054, 0.009800991297067704, 0.01626578336407896, 0.009800991297067704, 0.009800991297067704, 0.009800991297067704, 0.009052233443389342, 0.009052233443389342, 0.007153333853163134, 0.012819617480933836, 0.009052233443389342, 0.009052233443389342, 0.012819617480933836, 0.009800991297067704, 0.008741664219724795, 0.016477471963839002, 0.009135277005611847, 0.008627478127571727, 0.009800991297067704, 0.009800991297067704, 0.012819617480933836, 0.009800991297067704, 0.012819617480933836, 0.009135277005611847, 0.01626578336407896, 0.009052233443389342, 0.012819617480933836, 0.009800991297067704, 0.006786665886133108, 0.006786665886133108, 0.009052233443389342, 0.009135277005611847, 0.009135277005611847, 0.009052233443389342, 0.009135277005611847, 0.009135277005611847, 0.01626578336407896, 0.009052233443389342, 0.009800991297067704, 0.01626578336407896, 0.008741664219724795, 0.008627478127571727, 0.005057803953900054, 0.005057803953900054, 0.005057803953900054, 0.009052233443389342, 0.009135277005611847, 0.009052233443389342, 0.009135277005611847, 0.009135277005611847, 0.009800991297067704, 0.009800991297067704, 0.009052233443389342, 0.008741664219724795, 0.008627478127571727, 0.01626578336407896, 0.007153333853163134, 0.008627478127571727, 0.008627478127571727, 0.009800991297067704, 0.008627478127571727, 0.009135277005611847, 0.006786665886133108, 0.012819617480933836, 0.012819617480933836, 0.012819617480933836, 0.008627478127571727], "moving_avg_accuracy_train": [0.01077286504475821, 0.019761778591039125, 0.02789830375888242, 0.03507698113493216, 0.04153779077337693, 0.047326798615797444, 0.05253690567397591, 0.057349415157335056, 0.061582981393539536, 0.06539319100612356, 0.0688223796574492, 0.07205284471865148, 0.07481563541289929, 0.07744677489855657, 0.07976829745945764, 0.08173425463327008, 0.08352933692188107, 0.08524260328044969, 0.08668183991853613, 0.08807985597743925, 0.08933807043045205, 0.09047046343816358, 0.091373179460534, 0.09217864843423881, 0.09293118390573742, 0.09368333922663469, 0.09425779222372943, 0.0947747999211147, 0.09534259364047425, 0.09587453432718356, 0.0963415110058993, 0.09670805925239316, 0.096926561824293, 0.09722312344017489, 0.09756701114691413, 0.09787651008297944, 0.09813413278615252, 0.098386919558294, 0.09859350131393561, 0.09862345967968121, 0.09872461067784451, 0.09879493652981827, 0.09895839143949794, 0.09912875234630489, 0.09932858013862161, 0.09950842515170666, 0.09950036955629421, 0.09943964109780395, 0.09938498548516272, 0.09938927385640467, 0.09933965496790337, 0.0992949979682522, 0.0993289951375584, 0.09933888254356077, 0.09947119433996142, 0.0994875718720967, 0.09959324479632113, 0.0996231381150002, 0.09962933205543817, 0.09963490660183234, 0.0996399236935871, 0.0996187182439866, 0.09954615491672711, 0.09953432634481262, 0.0994771776538991, 0.09941876838564835, 0.09954309159784025, 0.09965498248881295, 0.09963227115968987, 0.09972347415515498, 0.09974034453795066, 0.09972980705028701, 0.09972490151137128, 0.09974162915854534, 0.09975668404100199, 0.09984721568765853, 0.09985171191720385, 0.09975584922262264, 0.09989296732730758, 0.09994894430604784, 0.09999932358691407, 0.10004466493969369, 0.1000294162440355], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 328969719, "moving_var_accuracy_train": [0.0010444915914531604, 0.001667247532990457, 0.0020963501559539384, 0.0023505158201832205, 0.002491142788822886, 0.002543642016137054, 0.0025335847545424786, 0.002488668506835026, 0.0024011094038384985, 0.0022916577390810983, 0.0021683259784304127, 0.00204541652119221, 0.0019095719808549898, 0.0017809208377063547, 0.0016513339569426736, 0.001520985449731788, 0.0013978877885645726, 0.0012845165442467424, 0.0011747075087257615, 0.0010748267979617445, 0.000981592050653503, 0.0008949736709033785, 0.0008128103697664392, 0.0007373683551982051, 0.0006687283064011572, 0.0006069471144018283, 0.0005492223691744857, 0.0004967058048894377, 0.00044993673177019133, 0.0004074897066407632, 0.00036870334094286645, 0.00033304222540164936, 0.0003001676932268261, 0.00027094246303227375, 0.0002449125455226638, 0.00022128339729322752, 0.0001997523826786166, 0.00018035225478028235, 0.00016270111349812988, 0.00014643907968142023, 0.00013188725543314308, 0.0001187430414189313, 0.00010710919484452367, 9.665948090718407e-05, 8.735291313570523e-05, 7.890871988071877e-05, 7.101843192620394e-05, 6.394978024461898e-05, 5.7581687344095773e-05, 5.1823684120837374e-05, 4.6663474015618576e-05, 4.201507484261732e-05, 3.78239696260431e-05, 3.4042452510615896e-05, 3.0795764962755235e-05, 2.7718602478509286e-05, 2.5047243132885653e-05, 2.2550561314111927e-05, 2.0295850466784075e-05, 1.8266545100213175e-05, 1.6440117131078937e-05, 1.4800152457805876e-05, 1.3367526140192004e-05, 1.2032032762194632e-05, 1.0858223241833336e-05, 9.803105701208288e-06, 8.961901480894873e-06, 8.178387476149392e-06, 7.365190968769285e-06, 6.703533749328656e-06, 6.0357418627368485e-06, 5.433167024279518e-06, 4.890066900660051e-06, 4.4035785382138635e-06, 3.96526052976453e-06, 3.642498288205174e-06, 3.2784304041057758e-06, 3.033294269606546e-06, 2.899177214337423e-06, 2.6374602922436724e-06, 2.3965569104846983e-06, 2.175403763883197e-06, 1.9599560919683606e-06], "duration": 98102.244306, "accuracy_train": [0.10772865044758213, 0.10066200050756736, 0.10112703026947212, 0.09968507751937986, 0.09968507751937986, 0.09942786919758213, 0.09942786919758213, 0.10066200050756736, 0.09968507751937986, 0.09968507751937986, 0.09968507751937986, 0.10112703026947212, 0.09968075166112958, 0.10112703026947212, 0.10066200050756736, 0.09942786919758213, 0.09968507751937986, 0.10066200050756736, 0.09963496966131415, 0.10066200050756736, 0.10066200050756736, 0.10066200050756736, 0.09949762366186785, 0.09942786919758213, 0.09970400314922481, 0.10045273711471021, 0.09942786919758213, 0.09942786919758213, 0.10045273711471021, 0.10066200050756736, 0.10054430111434108, 0.10000699347083795, 0.09889308497139167, 0.09989217798311185, 0.10066200050756736, 0.10066200050756736, 0.10045273711471021, 0.10066200050756736, 0.10045273711471021, 0.09889308497139167, 0.09963496966131415, 0.09942786919758213, 0.10042948562661498, 0.10066200050756736, 0.10112703026947212, 0.10112703026947212, 0.09942786919758213, 0.09889308497139167, 0.09889308497139167, 0.09942786919758213, 0.09889308497139167, 0.09889308497139167, 0.09963496966131415, 0.09942786919758213, 0.10066200050756736, 0.09963496966131415, 0.10054430111434108, 0.09989217798311185, 0.09968507751937986, 0.09968507751937986, 0.09968507751937986, 0.09942786919758213, 0.09889308497139167, 0.09942786919758213, 0.09896283943567738, 0.09889308497139167, 0.10066200050756736, 0.10066200050756736, 0.09942786919758213, 0.10054430111434108, 0.09989217798311185, 0.09963496966131415, 0.09968075166112958, 0.09989217798311185, 0.09989217798311185, 0.10066200050756736, 0.09989217798311185, 0.09889308497139167, 0.10112703026947212, 0.10045273711471021, 0.10045273711471021, 0.10045273711471021, 0.09989217798311185], "end": "2016-01-30 14:02:12.483000", "learning_rate_per_epoch": [0.0013251093914732337, 0.0009369938052259386, 0.0007650522165931761, 0.0006625546957366168, 0.0005926068988628685, 0.0005409736186265945, 0.0005008442676626146, 0.0004684969026129693, 0.0004417031304910779, 0.00041903636883944273, 0.0003995354927610606, 0.00038252610829658806, 0.0003675192128866911, 0.00035415036836639047, 0.00034214177867397666, 0.0003312773478683084, 0.00032138623646460474, 0.000312331278109923, 0.00030400094692595303, 0.0002963034494314343, 0.00028916256269440055, 0.00028251425828784704, 0.00027630440308712423, 0.00027048680931329727, 0.00026502186665311456, 0.0002598753198981285, 0.00025501742493361235, 0.0002504221338313073, 0.00024606662918813527, 0.00024193075660150498, 0.00023799666087143123, 0.00023424845130648464, 0.00023067192523740232, 0.0002272543788421899, 0.00022398435976356268, 0.00022085156524553895, 0.00021784663840662688, 0.0002149611245840788, 0.00021218731126282364, 0.00020951818441972136, 0.00020694731210824102, 0.00020446881535463035, 0.0002020772808464244, 0.0001997677463805303, 0.00019753564265556633, 0.00019537672051228583, 0.00019328706548549235, 0.00019126305414829403, 0.00018930133956018835, 0.00018739876395557076, 0.00018555241695139557, 0.00018375960644334555, 0.0001820177712943405, 0.00018032453954219818, 0.00017867771384771913, 0.00017707518418319523, 0.0001755150151439011, 0.00017399538774043322, 0.00017251454119104892, 0.00017107088933698833, 0.00016966286057140678, 0.00016828905791044235, 0.00016694808437023312, 0.0001656386739341542, 0.00016435958968941122, 0.0001631096820347011, 0.00016188787412829697, 0.00016069311823230237, 0.00015952442481648177, 0.00015838086255826056, 0.0001572615437908098, 0.0001561656390549615, 0.00015509231889154762, 0.0001540408266009763, 0.00015301044913940132, 0.00015200047346297652, 0.00015101023018360138, 0.0001500390935689211, 0.00014908645243849605, 0.00014815172471571714, 0.0001472343719797209, 0.00014633384125772864, 0.00014544965233653784], "accuracy_valid": [0.10424216396837349, 0.09490304969879518, 0.09398825771837349, 0.1014242516942771, 0.1014242516942771, 0.10478192065135541, 0.10478192065135541, 0.09490304969879518, 0.1014242516942771, 0.1014242516942771, 0.1014242516942771, 0.09398825771837349, 0.10339796686746988, 0.09398825771837349, 0.09490304969879518, 0.10478192065135541, 0.1014242516942771, 0.09490304969879518, 0.09983586690512047, 0.09490304969879518, 0.09490304969879518, 0.09490304969879518, 0.10478192065135541, 0.10478192065135541, 0.10339796686746988, 0.09447506824171686, 0.10478192065135541, 0.10478192065135541, 0.09447506824171686, 0.09490304969879518, 0.09676498964608433, 0.10032414815512047, 0.1080984092620482, 0.10233021931475904, 0.09490304969879518, 0.09490304969879518, 0.09447506824171686, 0.09490304969879518, 0.09447506824171686, 0.1080984092620482, 0.09983586690512047, 0.10478192065135541, 0.09447506824171686, 0.09490304969879518, 0.09398825771837349, 0.09398825771837349, 0.10478192065135541, 0.1080984092620482, 0.1080984092620482, 0.10478192065135541, 0.1080984092620482, 0.1080984092620482, 0.09983586690512047, 0.10478192065135541, 0.09490304969879518, 0.09983586690512047, 0.09676498964608433, 0.10233021931475904, 0.1014242516942771, 0.1014242516942771, 0.1014242516942771, 0.10478192065135541, 0.1080984092620482, 0.10478192065135541, 0.1080984092620482, 0.1080984092620482, 0.09490304969879518, 0.09490304969879518, 0.10478192065135541, 0.09676498964608433, 0.10233021931475904, 0.09983586690512047, 0.10339796686746988, 0.10233021931475904, 0.10233021931475904, 0.09490304969879518, 0.10233021931475904, 0.1080984092620482, 0.09398825771837349, 0.09447506824171686, 0.09447506824171686, 0.09447506824171686, 0.10233021931475904], "accuracy_test": 0.09998804209183673, "start": "2016-01-29 10:47:10.238000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0], "accuracy_train_last": 0.09989217798311185, "batch_size_eval": 1024, "accuracy_train_std": [0.009028871912139321, 0.007466823007291509, 0.010753546302365967, 0.008849863655634133, 0.008849863655634133, 0.009382570968623499, 0.009382570968623499, 0.007466823007291509, 0.008849863655634133, 0.008849863655634133, 0.008849863655634133, 0.010753546302365967, 0.009880224849752806, 0.010753546302365967, 0.007466823007291509, 0.009382570968623499, 0.008849863655634133, 0.007466823007291509, 0.009935740980447057, 0.007466823007291509, 0.007466823007291509, 0.007466823007291509, 0.009409034548464397, 0.009382570968623499, 0.009867381181348377, 0.009281461874563813, 0.009382570968623499, 0.009382570968623499, 0.009281461874563813, 0.007466823007291509, 0.008255014118665823, 0.010052821589812582, 0.009370287230243114, 0.008879193556885554, 0.007466823007291509, 0.007466823007291509, 0.009281461874563813, 0.007466823007291509, 0.009281461874563813, 0.009370287230243114, 0.009935740980447057, 0.009382570968623499, 0.009282322242536093, 0.007466823007291509, 0.010753546302365967, 0.010753546302365967, 0.009382570968623499, 0.009370287230243114, 0.009370287230243114, 0.009382570968623499, 0.009370287230243114, 0.009370287230243114, 0.009935740980447057, 0.009382570968623499, 0.007466823007291509, 0.009935740980447057, 0.008255014118665823, 0.008879193556885554, 0.008849863655634133, 0.008849863655634133, 0.008849863655634133, 0.009382570968623499, 0.009370287230243114, 0.009382570968623499, 0.009391087841877852, 0.009370287230243114, 0.007466823007291509, 0.007466823007291509, 0.009382570968623499, 0.008255014118665823, 0.008879193556885554, 0.009935740980447057, 0.009880224849752806, 0.008879193556885554, 0.008879193556885554, 0.007466823007291509, 0.008879193556885554, 0.009370287230243114, 0.010753546302365967, 0.009281461874563813, 0.009281461874563813, 0.009281461874563813, 0.008879193556885554], "accuracy_test_std": 0.007350288587607382, "error_valid": [0.8957578360316265, 0.9050969503012049, 0.9060117422816265, 0.8985757483057228, 0.8985757483057228, 0.8952180793486446, 0.8952180793486446, 0.9050969503012049, 0.8985757483057228, 0.8985757483057228, 0.8985757483057228, 0.9060117422816265, 0.8966020331325302, 0.9060117422816265, 0.9050969503012049, 0.8952180793486446, 0.8985757483057228, 0.9050969503012049, 0.9001641330948795, 0.9050969503012049, 0.9050969503012049, 0.9050969503012049, 0.8952180793486446, 0.8952180793486446, 0.8966020331325302, 0.9055249317582832, 0.8952180793486446, 0.8952180793486446, 0.9055249317582832, 0.9050969503012049, 0.9032350103539156, 0.8996758518448795, 0.8919015907379518, 0.897669780685241, 0.9050969503012049, 0.9050969503012049, 0.9055249317582832, 0.9050969503012049, 0.9055249317582832, 0.8919015907379518, 0.9001641330948795, 0.8952180793486446, 0.9055249317582832, 0.9050969503012049, 0.9060117422816265, 0.9060117422816265, 0.8952180793486446, 0.8919015907379518, 0.8919015907379518, 0.8952180793486446, 0.8919015907379518, 0.8919015907379518, 0.9001641330948795, 0.8952180793486446, 0.9050969503012049, 0.9001641330948795, 0.9032350103539156, 0.897669780685241, 0.8985757483057228, 0.8985757483057228, 0.8985757483057228, 0.8952180793486446, 0.8919015907379518, 0.8952180793486446, 0.8919015907379518, 0.8919015907379518, 0.9050969503012049, 0.9050969503012049, 0.8952180793486446, 0.9032350103539156, 0.897669780685241, 0.9001641330948795, 0.8966020331325302, 0.897669780685241, 0.897669780685241, 0.9050969503012049, 0.897669780685241, 0.8919015907379518, 0.9060117422816265, 0.9055249317582832, 0.9055249317582832, 0.9055249317582832, 0.897669780685241], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "momentum": 0.6396883953038677, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0013251093549236693, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "l2_decay": 6.964584605639821e-05, "optimization": "santa_sss", "nb_data_augmentation": 4, "learning_rate_decay_method": "sqrt", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.07337361979585219}, "accuracy_valid_max": 0.1080984092620482, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop', 'santa_sss'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.10233021931475904, "loss_train": [39732.328125, 42169.13671875, 56216.58203125, 69814.6875, 81710.640625, 92893.4375, 103061.8828125, 113645.0703125, 129703.65625, 144031.5, 159840.34375, 168735.1875, 176700.703125, 177054.6875, 180669.9375, 182351.625, 185385.828125, 190526.0, 195546.5, 206243.984375, 213692.765625, 221433.609375, 230583.109375, 238223.484375, 244569.828125, 253584.90625, 264244.59375, 273363.4375, 283153.03125, 291890.78125, 305214.75, 316821.59375, 325982.28125, 338666.09375, 348486.0625, 360978.5625, 376167.4375, 390433.46875, 405574.8125, 422321.25, 440340.53125, 459631.46875, 478694.09375, 500291.0, 523099.71875, 548639.8125, 575862.0625, 602881.0, 632619.0, 663255.6875, 696657.1875, 734551.9375, 773013.3125, 815307.0, 862026.3125, 910720.9375, 963247.4375, 1020790.6875, 1078727.5, 1151779.125, 1218206.25, 1272735.5, 1325687.125, 1380776.75, 1439369.0, 1515692.25, 1601639.25, 1653776.125, 1696329.375, 1736465.0, 1773959.375, 1808447.625, 1842539.375, 1875814.0, 1906456.625, 1940413.75, 1970356.75, 1996348.75, 2033002.625, 2060242.875, 2087661.375, 2115239.5, 2145336.75], "accuracy_train_first": 0.10772865044758213, "model": "residualv3", "loss_std": [10120.4501953125, 1374.87890625, 3743.091064453125, 3633.362548828125, 5504.2294921875, 5002.21728515625, 4168.7685546875, 6747.36962890625, 6710.11328125, 5031.24658203125, 7907.033203125, 8598.814453125, 4350.8134765625, 3715.539306640625, 3395.2841796875, 4319.10888671875, 4637.96044921875, 2404.9580078125, 3598.169677734375, 3472.027587890625, 2490.505859375, 3704.693115234375, 4161.779296875, 4567.66796875, 4518.1298828125, 5068.77099609375, 4615.1748046875, 4014.091796875, 3920.71826171875, 4150.060546875, 5796.73046875, 5062.10595703125, 5057.4794921875, 5862.77490234375, 5206.427734375, 4836.32275390625, 5050.9423828125, 3662.523193359375, 4003.937255859375, 3620.835205078125, 5389.89697265625, 6569.93896484375, 8678.064453125, 6847.6064453125, 6295.00048828125, 6586.26220703125, 7157.7666015625, 7901.52197265625, 12872.4033203125, 11546.4111328125, 9247.7041015625, 8765.19921875, 10834.5908203125, 16049.2001953125, 15215.0244140625, 16933.6015625, 14623.140625, 14720.5498046875, 19242.8984375, 21027.166015625, 15255.1953125, 10493.6826171875, 16004.7998046875, 20394.427734375, 20370.080078125, 25944.203125, 19136.708984375, 12475.8828125, 11113.5986328125, 10815.0654296875, 9190.744140625, 12853.025390625, 9655.8701171875, 9716.314453125, 13084.9736328125, 11328.154296875, 7375.76953125, 8410.6484375, 13695.2333984375, 10801.75, 6314.69580078125, 8869.990234375, 7291.97705078125]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:23 2016", "state": "available"}], "summary": "966d6e649bc439584692df3c21d683a9"}