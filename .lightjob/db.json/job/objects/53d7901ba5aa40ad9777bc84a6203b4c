{"content": {"hp_model": {"f0": 32, "f1": 32, "f2": 16, "f3": 64, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.06178609756755983, 0.07064725109718406, 0.0738930212769908, 0.07844201605719879, 0.07513274467776308, 0.07432751892032252, 0.07562310879147774, 0.076645279785262, 0.07718139053364761, 0.07765468596456662, 0.07836831585822876, 0.07867494454960307, 0.0795820283304532, 0.08084801775773046, 0.08146115748526317, 0.08190733191058087, 0.08098687441650058, 0.08266117537150922, 0.08310916938304391, 0.08412147163646252, 0.08413938478545166, 0.08381061699130672, 0.08380508403839193, 0.08521345687676166, 0.08474596853733815, 0.08463224914629354, 0.08497085184228811, 0.08572147275385299, 0.08581878737874321, 0.0861315052677351, 0.08624583269668383, 0.08560154903660883, 0.08599234883753507, 0.08611628465959605, 0.08640037339947203, 0.08570066470215496, 0.08612995226768387, 0.08532389340258166, 0.08531480034244543, 0.0850925028122609, 0.08596112948737511, 0.08577887678570445, 0.0860333005642327, 0.08618998122553907, 0.08684170844782924, 0.0864642369244629, 0.08638798728497596, 0.08603050195297782, 0.08610665390576872, 0.08614610209973651, 0.08608842501424491, 0.08605817310873876, 0.08616390481622122, 0.08613243705432529, 0.08613243705432529, 0.08613243705432529, 0.08617249434633219, 0.08613243705432529, 0.08613243705432529, 0.08613243705432529, 0.08613243705432529, 0.08626930020544406, 0.08626930020544406, 0.08598695627137143, 0.08598695627137143, 0.08598695627137143, 0.08598695627137143, 0.08598695627137143, 0.08598695627137143, 0.08598695627137143, 0.08598695627137143, 0.08607557961350175, 0.08607557961350175, 0.08607557961350175, 0.08607557961350175, 0.08607557961350175, 0.08635742727360271, 0.08607557961350175, 0.08607557961350175, 0.08607557961350175, 0.08607557961350175, 0.08607557961350175, 0.08607557961350175, 0.08607557961350175, 0.08601847725387997, 0.08607557961350175, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997, 0.08601847725387997], "moving_avg_accuracy_train": [0.015356739457831323, 0.03225338855421686, 0.050187688253012036, 0.06859230045180721, 0.08677778049698792, 0.10442718618222889, 0.1217235488893072, 0.1382715441509789, 0.15396716835033883, 0.16879447259964228, 0.1827296902493166, 0.19593733116414397, 0.20824542410194646, 0.21979098711343859, 0.23055614668522725, 0.24060482418537923, 0.24999454884515457, 0.2586029629365427, 0.26661879616096074, 0.27401659274968393, 0.2808322715771252, 0.28717581399772596, 0.2931226716039774, 0.2985172003773146, 0.30352993817090845, 0.3081567071550224, 0.3124149257467491, 0.31630379838291756, 0.31985320017113184, 0.3231959110275126, 0.326277298840424, 0.3290976111250563, 0.33168530859688805, 0.3340307084600908, 0.3361580404755275, 0.33811499621713137, 0.33991155382433386, 0.3415378683214186, 0.3430439082965056, 0.3444205227379394, 0.3456712415484828, 0.34683453908038153, 0.34788150685909036, 0.3488520158117355, 0.34975135865827284, 0.35055370773220457, 0.3512758218987431, 0.3519516094377845, 0.3525692308735241, 0.353153328117497, 0.35366489666116896, 0.35414648681432914, 0.3545916837654264, 0.35497118255755844, 0.35533390993433267, 0.3556768367119837, 0.3559784113239179, 0.3562310031734538, 0.35647245481393974, 0.3567015271036301, 0.3569076921643515, 0.35710500653225363, 0.35727552997541384, 0.357417235261005, 0.3575424168553864, 0.35765037396502847, 0.357749888526357, 0.357837098468902, 0.35792735323044556, 0.35800858251583473, 0.358081688872685, 0.3581474845938502, 0.3582043475802483, 0.35825552426800655, 0.35829923012433845, 0.35833621223238654, 0.35837184929228044, 0.3584039226461849, 0.35843278866469896, 0.3584587680813616, 0.358482149556358, 0.35850319288385474, 0.3585221318786018, 0.35853917697387416, 0.3585545175596193, 0.3585683240867899, 0.35858074996124345, 0.35859193324825167, 0.358601998206559, 0.35861105666903564, 0.35861920928526464, 0.3586265466398707, 0.35863315025901615, 0.35863909351624707, 0.3586444424477549, 0.35864925648611196, 0.3586535891206333, 0.3586574884917025, 0.35866099792566475, 0.35866415641623084, 0.3586669990577403, 0.3586695574350988, 0.35867185997472145, 0.35867393226038186], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.0021224650209814215, 0.0044796892750607565, 0.006926472298730524, 0.009282392820549835, 0.011330558698757848, 0.013001016518262007, 0.014393392332489093, 0.01541857842386296, 0.016093894152544464, 0.01646314529900273, 0.016564543387596612, 0.01647806505565215, 0.01619366091597718, 0.015773995051650475, 0.015239593491940087, 0.014624417418264622, 0.013955478039115697, 0.013226873373723419, 0.012482468276886231, 0.011726767998510731, 0.010972172499569135, 0.01023712002358987, 0.009531694059732164, 0.008840433119936215, 0.00818253766962851, 0.007556946823756892, 0.0069644439715555425, 0.006404109547823047, 0.00587708287052835, 0.00538993802629981, 0.004936398781351859, 0.004514346355662304, 0.004123177323947592, 0.003760367696217637, 0.003425060800130991, 0.0031170218020892594, 0.002834368195004309, 0.0025747354650947287, 0.002337675326244298, 0.002120963399503145, 0.0019229457374402548, 0.001742830514025724, 0.0015784127363900422, 0.001429048451395518, 0.0012934229642565264, 0.001169874544158826, 0.0010575801295685848, 0.0009559323157930385, 0.0008637721903547003, 0.0007804654976329809, 0.0007047742692435549, 0.0006363842039997874, 0.0005745295865272049, 0.0005183728018735516, 0.0004677196620349504, 0.00042200608480492675, 0.00038062400154350326, 0.00034313582517122074, 0.00030934693270633887, 0.00027888450646084084, 0.0002513785921051168, 0.00022659112953263093, 0.00020419372078137269, 0.00018395507219491562, 0.00016570059885957097, 0.00014923543161131432, 0.00013440101678143047, 0.00012102936526999578, 0.00010899974204082773, 9.815915160798849e-05, 8.83913373018969e-05, 7.95911652640201e-05, 7.166114933061709e-05, 6.451860587788459e-05, 5.808393710699545e-05, 5.228785248313703e-05, 4.7070497235164245e-05, 4.237270581192397e-05, 3.814293445395525e-05, 3.43347153793709e-05, 3.090616408179087e-05, 2.7819533068300997e-05, 2.504080793116916e-05, 2.2539341955507834e-05, 2.0287525762096082e-05, 1.8260488767619088e-05, 1.6435829512060597e-05, 1.4793372154029304e-05, 1.3314946669097935e-05, 1.1984190503870107e-05, 1.0786369639845487e-05, 9.708217206814476e-06, 8.737787956205393e-06, 7.86432706134347e-06, 7.078151854823602e-06, 6.370545244028969e-06, 5.733659665123131e-06, 5.160430544463436e-06, 4.644498335157713e-06, 4.1801382862058444e-06, 3.762197183082021e-06, 3.3860363724261957e-06, 3.0474804503820013e-06, 2.7427710546545253e-06], "duration": 25825.95243, "accuracy_train": [0.15356739457831325, 0.18432323042168675, 0.21159638554216867, 0.23423381024096385, 0.25044710090361444, 0.2632718373493976, 0.27739081325301207, 0.2872035015060241, 0.2952277861445783, 0.3022402108433735, 0.30814664909638556, 0.31480609939759036, 0.3190182605421687, 0.32370105421686746, 0.3274425828313253, 0.331042921686747, 0.33450207078313254, 0.33607868975903615, 0.3387612951807229, 0.3405967620481928, 0.3421733810240964, 0.34426769578313254, 0.34664439006024095, 0.3470679593373494, 0.348644578313253, 0.34979762801204817, 0.35073889307228917, 0.35130365210843373, 0.35179781626506024, 0.35328030873493976, 0.3540097891566265, 0.354480421686747, 0.3549745858433735, 0.3551393072289157, 0.3553040286144578, 0.35572759789156627, 0.3560805722891566, 0.3561746987951807, 0.35659826807228917, 0.3568100527108434, 0.3569277108433735, 0.3573042168674699, 0.3573042168674699, 0.3575865963855422, 0.35784544427710846, 0.35777484939759036, 0.35777484939759036, 0.3580336972891566, 0.3581278237951807, 0.358410203313253, 0.35826901355421686, 0.35848079819277107, 0.3585984563253012, 0.358386671686747, 0.3585984563253012, 0.3587631777108434, 0.3586925828313253, 0.3585043298192771, 0.35864551957831325, 0.3587631777108434, 0.3587631777108434, 0.3588808358433735, 0.35881024096385544, 0.3586925828313253, 0.3586690512048193, 0.3586219879518072, 0.35864551957831325, 0.3586219879518072, 0.35873964608433734, 0.35873964608433734, 0.35873964608433734, 0.35873964608433734, 0.3587161144578313, 0.3587161144578313, 0.3586925828313253, 0.3586690512048193, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253, 0.3586925828313253], "end": "2016-01-18 22:28:42.626000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0], "accuracy_valid": [0.15317841880341881, 0.18803418803418803, 0.2143429487179487, 0.23851495726495728, 0.25240384615384615, 0.2638888888888889, 0.2779113247863248, 0.28899572649572647, 0.2932692307692308, 0.3038194444444444, 0.30822649572649574, 0.3143696581196581, 0.3187767094017094, 0.32224893162393164, 0.3267895299145299, 0.3301282051282051, 0.3315972222222222, 0.3327991452991453, 0.3344017094017094, 0.33600427350427353, 0.33934294871794873, 0.34094551282051283, 0.34308226495726496, 0.34321581196581197, 0.34441773504273504, 0.3454861111111111, 0.3457532051282051, 0.3468215811965812, 0.3468215811965812, 0.34802350427350426, 0.34815705128205127, 0.34922542735042733, 0.3505608974358974, 0.35082799145299143, 0.3502938034188034, 0.3505608974358974, 0.3500267094017094, 0.3506944444444444, 0.35109508547008544, 0.35082799145299143, 0.35122863247863245, 0.35189636752136755, 0.35202991452991456, 0.35216346153846156, 0.3530982905982906, 0.3525641025641026, 0.35349893162393164, 0.35323183760683763, 0.35363247863247865, 0.35349893162393164, 0.35336538461538464, 0.35363247863247865, 0.35376602564102566, 0.3540331196581197, 0.3540331196581197, 0.3540331196581197, 0.35389957264957267, 0.3540331196581197, 0.3540331196581197, 0.3540331196581197, 0.3540331196581197, 0.35389957264957267, 0.35389957264957267, 0.3540331196581197, 0.3540331196581197, 0.3540331196581197, 0.3540331196581197, 0.3540331196581197, 0.3540331196581197, 0.3540331196581197, 0.3540331196581197, 0.35389957264957267, 0.35389957264957267, 0.35389957264957267, 0.35389957264957267, 0.35389957264957267, 0.35376602564102566, 0.35389957264957267, 0.35389957264957267, 0.35389957264957267, 0.35389957264957267, 0.35389957264957267, 0.35389957264957267, 0.35389957264957267, 0.35376602564102566, 0.35389957264957267, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566, 0.35376602564102566], "accuracy_test": 0.3545673076923077, "start": "2016-01-18 15:18:16.674000", "learning_rate_per_epoch": [0.000416586670326069, 0.0003749675815925002, 0.0003375064698047936, 0.00030378790688700974, 0.000273437995929271, 0.00024612018023617566, 0.00022153154714033008, 0.00019939943740610033, 0.00017947844753507525, 0.00016154766490217298, 0.00014540825213771313, 0.00013088124978821725, 0.00011780556087614968, 0.00010603619739413261, 9.544265776639804e-05, 8.590746438130736e-05, 7.732488302281126e-05, 6.959974416531622e-05, 6.264638068387285e-05, 5.638769653160125e-05, 5.075428634881973e-05, 4.5683682401431724e-05, 4.1119656088994816e-05, 3.7011599488323554e-05, 3.331395782879554e-05, 2.9985727451276034e-05, 2.6990004698745906e-05, 2.4293569367728196e-05, 2.1866520910407417e-05, 1.9681947378558107e-05, 1.7715623471303843e-05, 1.594574496266432e-05, 1.4352685866469983e-05, 1.2918781067128293e-05, 1.1628130778262857e-05, 1.0466422281751875e-05, 9.420774404134136e-06, 8.479591997456737e-06, 7.632438610016834e-06, 6.8699200710398145e-06, 6.1835808082832955e-06, 5.565810170082841e-06, 5.0097582970920485e-06, 4.509258360485546e-06, 4.058761078340467e-06, 3.653270596259972e-06, 3.2882905998121714e-06, 2.959774064947851e-06, 2.6640780106390594e-06, 2.3979234811122296e-06, 2.1583589386864332e-06, 1.9427282040851424e-06, 1.7486399883637205e-06, 1.5739421996840974e-06, 1.4166975006446592e-06, 1.275162389902107e-06, 1.1477673069748562e-06, 1.0330996929042158e-06, 9.298879035668506e-07, 8.369874535674171e-07, 7.533682264693198e-07, 6.781029924241011e-07, 6.103571195126278e-07, 5.493794219546544e-07, 4.944936904394126e-07, 4.450913024811598e-07, 4.006244580523344e-07, 3.606000973377377e-07, 3.245743585011951e-07, 2.921477744166623e-07, 2.629607536164258e-07, 2.366896723060563e-07, 2.1304319375303749e-07, 1.9175911347701913e-07, 1.7260143181374588e-07, 1.5535769648522546e-07, 1.3983668623041012e-07, 1.2586630759869877e-07, 1.1329164095741362e-07, 1.0197324229466176e-07, 9.178560844702588e-08, 8.261577022494748e-08, 7.436204185751194e-08, 6.693290544035335e-08, 6.024597354326033e-08, 5.422710103175632e-08, 4.8809543073957684e-08, 4.393322683426959e-08, 3.954408001050069e-08, 3.5593430425251427e-08, 3.20374695661485e-08, 2.8836767640427752e-08, 2.595583126208112e-08, 2.336271442970883e-08, 2.1028663255151514e-08, 1.8927794442902268e-08, 1.70368128493692e-08, 1.5334750358420024e-08, 1.3802732290457698e-08, 1.2423770456848615e-08, 1.1182573977919219e-08, 1.0065379640877836e-08, 9.05979824494807e-09, 8.154679598249004e-09], "accuracy_train_last": 0.3586925828313253, "error_valid": [0.8468215811965811, 0.811965811965812, 0.7856570512820513, 0.7614850427350427, 0.7475961538461539, 0.7361111111111112, 0.7220886752136753, 0.7110042735042735, 0.7067307692307692, 0.6961805555555556, 0.6917735042735043, 0.6856303418803419, 0.6812232905982907, 0.6777510683760684, 0.6732104700854701, 0.6698717948717949, 0.6684027777777778, 0.6672008547008548, 0.6655982905982907, 0.6639957264957265, 0.6606570512820513, 0.6590544871794872, 0.6569177350427351, 0.656784188034188, 0.6555822649572649, 0.6545138888888888, 0.6542467948717949, 0.6531784188034189, 0.6531784188034189, 0.6519764957264957, 0.6518429487179487, 0.6507745726495726, 0.6494391025641026, 0.6491720085470085, 0.6497061965811965, 0.6494391025641026, 0.6499732905982907, 0.6493055555555556, 0.6489049145299146, 0.6491720085470085, 0.6487713675213675, 0.6481036324786325, 0.6479700854700854, 0.6478365384615384, 0.6469017094017093, 0.6474358974358974, 0.6465010683760684, 0.6467681623931624, 0.6463675213675213, 0.6465010683760684, 0.6466346153846154, 0.6463675213675213, 0.6462339743589743, 0.6459668803418803, 0.6459668803418803, 0.6459668803418803, 0.6461004273504274, 0.6459668803418803, 0.6459668803418803, 0.6459668803418803, 0.6459668803418803, 0.6461004273504274, 0.6461004273504274, 0.6459668803418803, 0.6459668803418803, 0.6459668803418803, 0.6459668803418803, 0.6459668803418803, 0.6459668803418803, 0.6459668803418803, 0.6459668803418803, 0.6461004273504274, 0.6461004273504274, 0.6461004273504274, 0.6461004273504274, 0.6461004273504274, 0.6462339743589743, 0.6461004273504274, 0.6461004273504274, 0.6461004273504274, 0.6461004273504274, 0.6461004273504274, 0.6461004273504274, 0.6461004273504274, 0.6462339743589743, 0.6461004273504274, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743, 0.6462339743589743], "accuracy_train_std": [0.06583607459830046, 0.07140362159469554, 0.07351020996852353, 0.07604523179862999, 0.07556385607639671, 0.07663522083269517, 0.07850878525451672, 0.0788874711667947, 0.08020714766099152, 0.08091250456130533, 0.0807140106051809, 0.08185184624141763, 0.08161096137823466, 0.08169275193072598, 0.08143120287418584, 0.08120990346800705, 0.08107521657742467, 0.08160533295475708, 0.08175920640365977, 0.08170667335930021, 0.08194545915879894, 0.08172087700714604, 0.08181967516285113, 0.08165063092376168, 0.08187274778914576, 0.08202459053589663, 0.08166210490653346, 0.0819445131187043, 0.08174017266503426, 0.08197178172350389, 0.08180730611253056, 0.0823563359432831, 0.0819725923459348, 0.08192743183740032, 0.08196270220454464, 0.08226023550238344, 0.08228406504155496, 0.08263556755726728, 0.08289963244490549, 0.0833134669264667, 0.08332583169908415, 0.08345948408042696, 0.08348591296105541, 0.08371233830595314, 0.08377893242352465, 0.08349625933999978, 0.08370736385486964, 0.08375582239941856, 0.08381871221198509, 0.08396268670796994, 0.08382069409962667, 0.08384953517139658, 0.08392959945789238, 0.08380461633581658, 0.08377174097118295, 0.08380821072863137, 0.0838252126282382, 0.0837181293324112, 0.08383358843764502, 0.08383452967306826, 0.08374676769248052, 0.08379143667774915, 0.08379099060141271, 0.08389536390899294, 0.08381624469637972, 0.08385092198769553, 0.08380726919762133, 0.0838070610682863, 0.08386066537650297, 0.08388696786366572, 0.08388696786366572, 0.08385189604733562, 0.08386925222324866, 0.0838604837920118, 0.08385152623619455, 0.08383378989594026, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455, 0.08385152623619455], "accuracy_test_std": 0.08288041830797746, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.5041856006257863, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0004628251955944244, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "optimization": "adadelta", "nb_data_augmentation": 1, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 5.562746686808342e-07, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.09990497019556567}, "accuracy_valid_max": 0.3540331196581197, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -4], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.35376602564102566, "loss_train": [16.742977142333984, 3.6211202144622803, 2.8375346660614014, 2.520000696182251, 2.3428988456726074, 2.2422056198120117, 2.161731243133545, 2.1078176498413086, 2.065917491912842, 2.030593156814575, 2.0020017623901367, 1.9813299179077148, 1.9626091718673706, 1.9503633975982666, 1.9359837770462036, 1.919101595878601, 1.9131561517715454, 1.9014792442321777, 1.8939220905303955, 1.8860783576965332, 1.881585955619812, 1.879264235496521, 1.8709622621536255, 1.8672350645065308, 1.86357843875885, 1.8599876165390015, 1.85706627368927, 1.858839511871338, 1.8541321754455566, 1.8501445055007935, 1.847980260848999, 1.8477510213851929, 1.8439266681671143, 1.8437554836273193, 1.8403706550598145, 1.8418166637420654, 1.841334342956543, 1.8420437574386597, 1.84172523021698, 1.8386136293411255, 1.8345025777816772, 1.836728572845459, 1.8362845182418823, 1.8372421264648438, 1.8346308469772339, 1.8339005708694458, 1.8350145816802979, 1.8351917266845703, 1.8344700336456299, 1.835278034210205, 1.8334534168243408, 1.833177924156189, 1.8331941366195679, 1.836506962776184, 1.8308463096618652, 1.836286187171936, 1.8319162130355835, 1.8340271711349487, 1.832313060760498, 1.8319817781448364, 1.8327462673187256, 1.834794282913208, 1.8331722021102905, 1.833219051361084, 1.8321443796157837, 1.8313922882080078, 1.8321436643600464, 1.8307538032531738, 1.8337572813034058, 1.8308818340301514, 1.8336105346679688, 1.8317317962646484, 1.8351194858551025, 1.8335422277450562, 1.831718921661377, 1.8340352773666382, 1.832791805267334, 1.831818699836731, 1.8335559368133545, 1.8331654071807861, 1.8319191932678223, 1.8329291343688965, 1.83383047580719, 1.829969048500061, 1.8336386680603027, 1.8316600322723389, 1.8324941396713257, 1.8299565315246582, 1.8327710628509521, 1.8338346481323242, 1.8340986967086792, 1.8338348865509033, 1.8330340385437012, 1.8328138589859009, 1.830751895904541, 1.836901068687439, 1.8328207731246948, 1.8325999975204468, 1.8309316635131836, 1.832119107246399, 1.8286296129226685, 1.8310973644256592, 1.8323413133621216, 1.8338449001312256], "accuracy_train_first": 0.15356739457831325, "model": "residualv2", "loss_std": [25.002872467041016, 0.5327971577644348, 0.30540090799331665, 0.2489938884973526, 0.22300109267234802, 0.21351385116577148, 0.20227079093456268, 0.19623248279094696, 0.19044649600982666, 0.18441057205200195, 0.18866387009620667, 0.18438689410686493, 0.18292804062366486, 0.18153069913387299, 0.18112269043922424, 0.1782538741827011, 0.1819949448108673, 0.1813202053308487, 0.1778380572795868, 0.17895404994487762, 0.18014417588710785, 0.1785905510187149, 0.18009836971759796, 0.17954686284065247, 0.177824929356575, 0.18302172422409058, 0.1741359829902649, 0.1745760142803192, 0.18035770952701569, 0.17776532471179962, 0.17869077622890472, 0.1802642047405243, 0.17725342512130737, 0.17781351506710052, 0.17620505392551422, 0.17470383644104004, 0.1798478215932846, 0.17817285656929016, 0.1770150065422058, 0.17656326293945312, 0.17751799523830414, 0.1790238469839096, 0.1782372146844864, 0.17791558802127838, 0.17806680500507355, 0.17426742613315582, 0.17568236589431763, 0.17841209471225739, 0.17514191567897797, 0.17650994658470154, 0.17706210911273956, 0.17743651568889618, 0.180466890335083, 0.17815348505973816, 0.17935264110565186, 0.17371156811714172, 0.17864085733890533, 0.17525991797447205, 0.17643329501152039, 0.18100740015506744, 0.1753166764974594, 0.17680202424526215, 0.1774136871099472, 0.17568208277225494, 0.1744159758090973, 0.17636430263519287, 0.17652881145477295, 0.17785702645778656, 0.1777426153421402, 0.17555449903011322, 0.17621652781963348, 0.17874488234519958, 0.17653265595436096, 0.175882950425148, 0.17297959327697754, 0.17832355201244354, 0.1764107048511505, 0.17563806474208832, 0.17498108744621277, 0.17555424571037292, 0.17657537758350372, 0.17661230266094208, 0.1778751015663147, 0.17458634078502655, 0.17763295769691467, 0.1760813444852829, 0.17496266961097717, 0.17634999752044678, 0.17945636808872223, 0.17650899291038513, 0.1766490340232849, 0.17669326066970825, 0.1780104637145996, 0.17891019582748413, 0.17464204132556915, 0.17652027308940887, 0.1784973293542862, 0.17782630026340485, 0.17595863342285156, 0.1783488243818283, 0.1788322627544403, 0.17646577954292297, 0.17666442692279816, 0.17384138703346252]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:01 2016", "state": "available"}], "summary": "891f8b9187efdd3e8654a33be51685b5"}