{"content": {"hp_model": {"f0": 64, "f1": 64, "f2": 64, "f3": 16, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.5503636598587036, 1.1582388877868652, 0.9217361807823181, 0.8080870509147644, 0.725130558013916, 0.6588034629821777, 0.6045673489570618, 0.5584223866462708, 0.5189636945724487, 0.4847967326641083, 0.45451101660728455, 0.427474707365036, 0.403076171875, 0.3806287944316864, 0.3598783612251282, 0.34049832820892334, 0.322270929813385, 0.3049635887145996, 0.2884780466556549, 0.27283474802970886, 0.25798162817955017, 0.24374906718730927, 0.23018772900104523, 0.21727190911769867, 0.20498257875442505, 0.1932554990053177, 0.18204860389232635, 0.17134161293506622, 0.1610870659351349, 0.15129444003105164, 0.1418503373861313, 0.13292276859283447, 0.1244518831372261, 0.11640028655529022, 0.10876194387674332, 0.1015542522072792, 0.0947473794221878, 0.08825521171092987, 0.0821756049990654, 0.0763687863945961, 0.0708661675453186, 0.06572803109884262, 0.060865625739097595, 0.05629883334040642, 0.052002914249897, 0.04799458011984825, 0.04424664378166199, 0.040745291858911514, 0.037466686218976974, 0.0344633050262928, 0.031670913100242615, 0.029113994911313057, 0.02679024636745453, 0.02464607171714306, 0.022678427398204803, 0.020872721448540688, 0.0192212276160717, 0.017719030380249023, 0.016338787972927094, 0.015079034492373466, 0.01393843162804842, 0.012891514226794243, 0.011939453892409801, 0.011074652895331383, 0.010284620337188244, 0.009568222798407078, 0.008915828540921211, 0.008323040790855885, 0.00777984457090497, 0.007288304157555103, 0.0068392981775105], "moving_avg_accuracy_train": [0.04498588235294117, 0.10095082352941175, 0.1577569176470588, 0.2149741670588235, 0.26928380917647055, 0.3205460164941176, 0.36882553249176464, 0.41345121453670586, 0.45456021073009406, 0.49249713083355523, 0.5274309471619644, 0.5596925583281208, 0.5894244789658969, 0.6168890898928366, 0.6422990044329647, 0.6658832216367271, 0.6877207818259955, 0.7080498801139842, 0.7268072450437622, 0.7441335793629154, 0.7601696331913297, 0.7750491404604319, 0.788800697002624, 0.8016688625964792, 0.8136266822191842, 0.8247369551737364, 0.8351173773034215, 0.8447491689848441, 0.8537377814981244, 0.8621098857012531, 0.8699059559546571, 0.8771765368297796, 0.8839247654997429, 0.8902334654203568, 0.8961301188783211, 0.9016912246375477, 0.90687739629144, 0.911709656662296, 0.9162445733490076, 0.9204836454258715, 0.9244729279421078, 0.9282091645596617, 0.9317223657507544, 0.935020717410973, 0.9381374691992875, 0.9410931340440647, 0.9439485265220112, 0.9466548503403983, 0.9492176006004761, 0.9515876052463108, 0.9538547270746209, 0.9560433720142176, 0.9581119759892665, 0.9600890136844574, 0.9620236417277763, 0.9639059834373517, 0.9657106792112635, 0.96746431717249, 0.9691037678081822, 0.9706875086744229, 0.9722187578069806, 0.9736533526145178, 0.975048017353066, 0.976366745029524, 0.9776147764089245, 0.978813298768032, 0.97995785124417, 0.981042066119753, 0.9820366830371894, 0.9829883088511174, 0.9839035956130645], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.04417333333333332, 0.09968933333333332, 0.15486706666666664, 0.20944702666666665, 0.26118232399999997, 0.30953075826666665, 0.35468434910666663, 0.3961092475293333, 0.43433832277639994, 0.46901115716542663, 0.5004567081155507, 0.5290110373039956, 0.555189933573596, 0.5788709402162364, 0.6003705128612795, 0.619986794908485, 0.6380014487509698, 0.6542679705425394, 0.6687611734882855, 0.6818450561394569, 0.6938072171921779, 0.7045198288062935, 0.7139745125923308, 0.7225770613330977, 0.7303726885331213, 0.7373620863464759, 0.743612544378495, 0.7490912899406456, 0.753982160946581, 0.7583306115185895, 0.7622442170333972, 0.7658331286633908, 0.7691164824637184, 0.7720181675506799, 0.7748030174622785, 0.7771227157160506, 0.7791971108111122, 0.7811707330633344, 0.7828669930903343, 0.7843936271146341, 0.785647597736504, 0.7866695046295202, 0.7875358874999016, 0.7883022987499113, 0.7889120688749202, 0.7893941953207615, 0.7898681091220187, 0.7903079648764835, 0.7907838350555018, 0.7910787848832849, 0.7913175730616231, 0.7915324824221275, 0.7917392341799148, 0.7920053107619233, 0.7922181130190643, 0.7924763017171579, 0.7927086715454421, 0.7930111377242312, 0.7932966906184746, 0.7935670215566272, 0.7937436527342978, 0.793849287460868, 0.7938910253814478, 0.7938485895099697, 0.793757063892306, 0.7936080241697421, 0.7934738884194346, 0.7933931662441578, 0.7933205162864088, 0.7932684646577679, 0.7932482848586577], "moving_var_accuracy_train": [0.018213566499653975, 0.044580881617660884, 0.06916518441602157, 0.09171298864665223, 0.10908752482450913, 0.12182909743375508, 0.1306243926750831, 0.1354850168893605, 0.1371460613126765, 0.13638434434383642, 0.13372925361885601, 0.12972363225229688, 0.12470715297036637, 0.11902518135364333, 0.11293363703070852, 0.10664621103766583, 0.10027350124907856, 0.09396560125899506, 0.08773558978507537, 0.08166384755501942, 0.0758118580010077, 0.07022326983004835, 0.06490289061304147, 0.05990290872349524, 0.05519952290230806, 0.05079051409819914, 0.046681241160693346, 0.0428480597435729, 0.039290410163440696, 0.03599219830618904, 0.03293998687813425, 0.030121740306676102, 0.027519413587647513, 0.02512566948107795, 0.022926037231000063, 0.0209117665832878, 0.01906265731277174, 0.01736654824412027, 0.01581498264390698, 0.014395211968171912, 0.013098920146303865, 0.011914663308234636, 0.010834280220893028, 0.009848764311873932, 0.008951315156076193, 0.008134807232540436, 0.007394705905114412, 0.0067211530120926954, 0.006108146910943186, 0.005547884518040372, 0.005039354638695936, 0.004578530674870944, 0.004159189709034139, 0.0037784488405645804, 0.0034342890275020884, 0.0031227490175563415, 0.0028397864573280864, 0.0025834850264867724, 0.0023493267093199384, 0.0021369681545705494, 0.001944373854267123, 0.0017684590291967258, 0.0016091189338736014, 0.0014638584246481508, 0.0013314908230990514, 0.0012112698433966729, 0.0011019328623927075, 0.001002319273221356, 0.0009109907112112778, 0.0008280419652977594, 0.0007527775174773436], "duration": 24073.22795, "accuracy_train": [0.44985882352941176, 0.604635294117647, 0.6690117647058823, 0.7299294117647059, 0.7580705882352942, 0.7819058823529412, 0.8033411764705882, 0.8150823529411765, 0.8245411764705882, 0.8339294117647059, 0.841835294117647, 0.8500470588235294, 0.8570117647058824, 0.8640705882352941, 0.8709882352941176, 0.8781411764705882, 0.8842588235294118, 0.8910117647058824, 0.8956235294117647, 0.9000705882352941, 0.9044941176470588, 0.9089647058823529, 0.912564705882353, 0.9174823529411764, 0.9212470588235294, 0.9247294117647059, 0.9285411764705882, 0.931435294117647, 0.934635294117647, 0.9374588235294118, 0.9400705882352941, 0.9426117647058824, 0.9446588235294118, 0.9470117647058823, 0.9492, 0.9517411764705882, 0.9535529411764706, 0.9552, 0.9570588235294117, 0.958635294117647, 0.9603764705882353, 0.961835294117647, 0.9633411764705883, 0.9647058823529412, 0.9661882352941177, 0.9676941176470588, 0.9696470588235294, 0.9710117647058824, 0.9722823529411765, 0.9729176470588236, 0.9742588235294117, 0.9757411764705882, 0.9767294117647058, 0.9778823529411764, 0.9794352941176471, 0.9808470588235294, 0.9819529411764706, 0.9832470588235294, 0.9838588235294118, 0.9849411764705882, 0.986, 0.9865647058823529, 0.9876, 0.9882352941176471, 0.9888470588235294, 0.9896, 0.9902588235294117, 0.9908, 0.9909882352941176, 0.9915529411764706, 0.9921411764705882], "end": "2016-02-04 07:30:08.526000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0], "moving_var_accuracy_valid": [0.017561550399999994, 0.04354363166399999, 0.06659050879983999, 0.08674220622227038, 0.10215685451155901, 0.11297930892474681, 0.12003099892398732, 0.12347209891554285, 0.12427804877220153, 0.12267009289610122, 0.11930248767750269, 0.11471038634837112, 0.1094073592025845, 0.10351373396280507, 0.0973224451817999, 0.09105338735581953, 0.08486879839781857, 0.07876331613879721, 0.07277746090955672, 0.06704040668566767, 0.06162420569056202, 0.05649462554985977, 0.05164968240431941, 0.0471507487674229, 0.04298262012165634, 0.03912402324563063, 0.03556323495155785, 0.03227706133281512, 0.029264640772303906, 0.026508357896468333, 0.023995368879951302, 0.021711754572147305, 0.019637602824535708, 0.017749620529177192, 0.016044456977530652, 0.01448844027967457, 0.013078324286800854, 0.011805548521270966, 0.010650889351856648, 0.009606775919668336, 0.008660250308586118, 0.007803623921009454, 0.007030017102411319, 0.006332301868007463, 0.005702418057654897, 0.0051342682650774235, 0.004622862787188879, 0.004162317766232614, 0.003748124061454863, 0.0033740946139175607, 0.003037198330672831, 0.0027338941719046396, 0.002460889471318309, 0.0022154376949139183, 0.0019943014886283253, 0.0017954712923999021, 0.0016164101247937834, 0.0014555924844182066, 0.0013107671000750839, 0.0011803480994126772, 0.0010625940766277374, 0.0009564350972240818, 0.0008608072659878026, 0.0007747427466177154, 0.0006973438644041422, 0.0006278093935138454, 0.000565190385758056, 0.0005087299918084831, 0.00045790449477488336, 0.00041213842964579257, 0.00037092825169984247], "accuracy_test": 0.4055, "start": "2016-02-04 00:48:55.298000", "learning_rate_per_epoch": [0.001967550255358219, 0.0009837751276791096, 0.0006558500463142991, 0.0004918875638395548, 0.00039351003943011165, 0.00032792502315714955, 0.0002810785954352468, 0.0002459437819197774, 0.00021861668210476637, 0.00019675501971505582, 0.00017886819841805845, 0.00016396251157857478, 0.00015135001740418375, 0.0001405392977176234, 0.00013117001799400896, 0.0001229718909598887, 0.00011573825031518936, 0.00010930834105238318, 0.0001035552704706788, 9.837750985752791e-05, 9.369286999572068e-05, 8.943409920902923e-05, 8.554566011298448e-05, 8.198125578928739e-05, 7.870201079640538e-05, 7.567500870209187e-05, 7.287222979357466e-05, 7.02696488588117e-05, 6.784655852243304e-05, 6.558500899700448e-05, 6.346936424961314e-05, 6.148594547994435e-05, 5.9622732806019485e-05, 5.786912515759468e-05, 5.6215718359453604e-05, 5.465417052619159e-05, 5.317703107721172e-05, 5.17776352353394e-05, 5.045000580139458e-05, 4.9188754928763956e-05, 4.7989029553718865e-05, 4.684643499786034e-05, 4.575698039843701e-05, 4.4717049604514614e-05, 4.372333933133632e-05, 4.277283005649224e-05, 4.186277146800421e-05, 4.0990627894643694e-05, 4.0154085581889376e-05, 3.935100539820269e-05, 3.8579415559070185e-05, 3.7837504351045936e-05, 3.712358738994226e-05, 3.643611489678733e-05, 3.577363895601593e-05, 3.513482442940585e-05, 3.451842349022627e-05, 3.392327926121652e-05, 3.33483076246921e-05, 3.279250449850224e-05, 3.22549203701783e-05, 3.173468212480657e-05, 3.123095666524023e-05, 3.0742972739972174e-05, 3.0270002753240988e-05, 2.9811366403009742e-05, 2.9366421586018987e-05, 2.893456257879734e-05, 2.8515220037661493e-05, 2.8107859179726802e-05, 2.771197432593908e-05], "accuracy_train_first": 0.44985882352941176, "accuracy_train_last": 0.9921411764705882, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.5582666666666667, 0.4006666666666666, 0.34853333333333336, 0.29933333333333334, 0.2732, 0.2553333333333333, 0.23893333333333333, 0.23106666666666664, 0.22160000000000002, 0.2189333333333333, 0.21653333333333336, 0.21399999999999997, 0.20920000000000005, 0.20799999999999996, 0.20613333333333328, 0.20346666666666668, 0.19986666666666664, 0.19933333333333336, 0.20079999999999998, 0.20040000000000002, 0.19853333333333334, 0.19906666666666661, 0.2009333333333333, 0.19999999999999996, 0.19946666666666668, 0.19973333333333332, 0.20013333333333339, 0.2016, 0.20199999999999996, 0.20253333333333334, 0.20253333333333334, 0.20186666666666664, 0.20133333333333336, 0.20186666666666664, 0.20013333333333339, 0.20199999999999996, 0.2021333333333334, 0.20106666666666662, 0.20186666666666664, 0.20186666666666664, 0.20306666666666662, 0.2041333333333334, 0.20466666666666666, 0.20479999999999998, 0.2056, 0.2062666666666667, 0.20586666666666664, 0.20573333333333332, 0.2049333333333333, 0.2062666666666667, 0.20653333333333335, 0.20653333333333335, 0.20640000000000003, 0.2056, 0.20586666666666664, 0.20520000000000005, 0.20520000000000005, 0.2042666666666667, 0.2041333333333334, 0.20399999999999996, 0.20466666666666666, 0.20520000000000005, 0.20573333333333332, 0.20653333333333335, 0.20706666666666662, 0.20773333333333333, 0.20773333333333333, 0.20733333333333337, 0.20733333333333337, 0.20720000000000005, 0.2069333333333333], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.06499383955194062, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "valid_ratio": 0.15, "learning_rate": 0.0019675501998714195, "optimization": "adam", "nb_data_augmentation": 0, "learning_rate_decay_method": "lin", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 3.442076795618355e-07, "rotation_range": [0, 0], "momentum": 0.6241742892354704}, "accuracy_valid_max": 0.8014666666666667, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7930666666666667, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.4417333333333333, 0.5993333333333334, 0.6514666666666666, 0.7006666666666667, 0.7268, 0.7446666666666667, 0.7610666666666667, 0.7689333333333334, 0.7784, 0.7810666666666667, 0.7834666666666666, 0.786, 0.7908, 0.792, 0.7938666666666667, 0.7965333333333333, 0.8001333333333334, 0.8006666666666666, 0.7992, 0.7996, 0.8014666666666667, 0.8009333333333334, 0.7990666666666667, 0.8, 0.8005333333333333, 0.8002666666666667, 0.7998666666666666, 0.7984, 0.798, 0.7974666666666667, 0.7974666666666667, 0.7981333333333334, 0.7986666666666666, 0.7981333333333334, 0.7998666666666666, 0.798, 0.7978666666666666, 0.7989333333333334, 0.7981333333333334, 0.7981333333333334, 0.7969333333333334, 0.7958666666666666, 0.7953333333333333, 0.7952, 0.7944, 0.7937333333333333, 0.7941333333333334, 0.7942666666666667, 0.7950666666666667, 0.7937333333333333, 0.7934666666666667, 0.7934666666666667, 0.7936, 0.7944, 0.7941333333333334, 0.7948, 0.7948, 0.7957333333333333, 0.7958666666666666, 0.796, 0.7953333333333333, 0.7948, 0.7942666666666667, 0.7934666666666667, 0.7929333333333334, 0.7922666666666667, 0.7922666666666667, 0.7926666666666666, 0.7926666666666666, 0.7928, 0.7930666666666667], "seed": 109851638, "model": "residualv3", "loss_std": [0.24371851980686188, 0.1333230435848236, 0.10021544992923737, 0.09535825997591019, 0.09309311956167221, 0.08947250992059708, 0.08558487147092819, 0.08241239935159683, 0.08008094877004623, 0.07804474234580994, 0.07591524720191956, 0.07401416450738907, 0.07225575298070908, 0.0703972801566124, 0.06843400001525879, 0.06637642532587051, 0.06429687887430191, 0.06212673336267471, 0.05986186861991882, 0.05766759067773819, 0.05564127489924431, 0.0535254031419754, 0.05145854502916336, 0.04942028969526291, 0.04742487147450447, 0.04532759264111519, 0.043411098420619965, 0.04156602919101715, 0.03971671685576439, 0.037835657596588135, 0.036099281162023544, 0.034348659217357635, 0.03259741887450218, 0.03090607561171055, 0.029306158423423767, 0.02780500054359436, 0.026295151561498642, 0.024822745472192764, 0.02338387630879879, 0.02196277491748333, 0.020575977861881256, 0.019234629347920418, 0.017876772210001945, 0.01660372130572796, 0.015344614163041115, 0.014129937626421452, 0.01300079096108675, 0.011890123598277569, 0.010828071273863316, 0.009847777895629406, 0.00891629233956337, 0.008023486472666264, 0.007205856032669544, 0.006450580898672342, 0.005752048455178738, 0.005082534626126289, 0.004495487082749605, 0.003965714480727911, 0.0035070115700364113, 0.0031150986906141043, 0.0027695740573108196, 0.002474261214956641, 0.0022104086820036173, 0.0019751880317926407, 0.0017731348052620888, 0.0015847040340304375, 0.0014225754421204329, 0.0012808898463845253, 0.001152725308202207, 0.0010406551882624626, 0.0009381676791235805]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:35 2016", "state": "available"}], "summary": "83ff5888a535cf6bfad7b3eed9076630"}