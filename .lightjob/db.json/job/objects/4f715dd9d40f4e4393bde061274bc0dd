{"content": {"hp_model": {"f1": 41, "f2": 12, "f3": 10, "nonlin": "leaky_rectify", "ds2": 2896, "ds1": 1998, "do2": 0.6486777910138922, "do3": 0.09122433801608298, "do1": 0.7286445271562867, "do4": 0.43598591257983554, "do5": 0.5520928523743253}, "accuracy_valid_std": [0.011913931811762314, 0.012531754001280622, 0.013748532360217542, 0.014465939058946116, 0.013864829402119899, 0.013548895694396186, 0.013179717932262266, 0.01381420200326482, 0.013640520716049459, 0.013575444595305896, 0.01379446339060616, 0.013010282848252525, 0.013526611902540191, 0.01440661902168034, 0.014479386992554823, 0.014155860372729711, 0.012753435921356387, 0.012384904642838274, 0.01236209705182797, 0.012235497739553961, 0.01136120149079371, 0.010839583402026124, 0.010433365289223345, 0.010488251188176619, 0.010432432531160668, 0.009351261732627732, 0.008934019334032012, 0.008339087128280388, 0.008771329190635127, 0.008986151180350399, 0.008267596199792998, 0.0075952330294733255, 0.007965458941752343, 0.0071422576652735515, 0.006754307163454356, 0.007227585852114185, 0.00800931924911123, 0.008202603011210435, 0.008412284281072173, 0.00819310650671095, 0.008268773165590092, 0.008234572859025504, 0.0074412027640036755, 0.0071463440149920196, 0.007666647133947592, 0.008756894434416972, 0.008277007240062124, 0.00906271304068734, 0.008504325141812595, 0.00830986194856888, 0.009092729205803752, 0.009204418082146589], "moving_avg_accuracy_train": [0.009775037650602407, 0.01842902861445783, 0.026088196536144574, 0.032854376882530116, 0.03881922157379517, 0.044058157850150596, 0.04869083980609939, 0.052766127060429206, 0.056325640107398336, 0.05938801209063441, 0.06203119506831795, 0.06427592947714882, 0.06619265128847007, 0.0678118085993821, 0.06918433632378124, 0.07033019109501756, 0.07128851234696158, 0.07208981924479554, 0.07271451578417142, 0.07320614779009162, 0.07358508120385353, 0.073862585884673, 0.07405586419379606, 0.0742156956961032, 0.07436425037348084, 0.07446500530601227, 0.07453921260673635, 0.07461305866533982, 0.0746348100277215, 0.07462614830205778, 0.07460423377305683, 0.07457980437165476, 0.07460723432605555, 0.07458956435730542, 0.07458542719868332, 0.07458405691857402, 0.07457341101587324, 0.07458265500464735, 0.07464745049815852, 0.07475988918328243, 0.07488932195170117, 0.07504110888303707, 0.07520595507304662, 0.07540373305971786, 0.07562879650073402, 0.075864297874757, 0.07612095920173913, 0.07638960499843268, 0.07666433049256532, 0.07693982138909193, 0.0772136479851225, 0.07750950833721265], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.0008599622496362519, 0.0014479900610950482, 0.0018311567342589007, 0.0020600718291513363, 0.0021742789959544196, 0.002203869176128393, 0.0021766379374603155, 0.0021084458395620115, 0.0020116324537897013, 0.0018948723078841142, 0.0017682628233773475, 0.0016367860341353156, 0.001506171833239736, 0.0013791496834930812, 0.0012581892063319715, 0.00114418713410966, 0.0010380338372960422, 0.0009400092882670847, 0.0008495205713371499, 0.000766743832466641, 0.0006913617640085643, 0.0006229186672385983, 0.0005609630090577357, 0.00050509662313413, 0.000454785577250254, 0.0004093983835330933, 0.00036850810569111073, 0.0003317063742853411, 0.0002985399949526961, 0.0002686866706868498, 0.00024182232583739682, 0.0002176454644145329, 0.0001958876895946655, 0.00017630173068535965, 0.00015867171166155687, 0.0001428045573944094, 0.0001285251216721673, 0.00011567337856690667, 0.0001041438268140302, 9.384322625383872e-05, 8.460967920231971e-05, 7.635606473480709e-05, 6.896502665857235e-05, 6.24205691808207e-05, 5.663439423507696e-05, 5.147010288606968e-05, 4.691596792837677e-05, 4.2873906212269146e-05, 3.9265782465180015e-05, 3.602226132528329e-05, 3.309486423499814e-05, 3.057317794294855e-05], "duration": 2036.576781, "accuracy_train": [0.0977503765060241, 0.09631494728915663, 0.0950207078313253, 0.09375, 0.09250282379518072, 0.0912085843373494, 0.09038497740963855, 0.08944371234939759, 0.08836125753012049, 0.08694935993975904, 0.08581984186746988, 0.08447853915662651, 0.08344314759036145, 0.08238422439759036, 0.08153708584337349, 0.08064288403614457, 0.07991340361445783, 0.0793015813253012, 0.07833678463855422, 0.07763083584337349, 0.07699548192771084, 0.0763601280120482, 0.07579536897590361, 0.07565417921686747, 0.07570124246987951, 0.07537179969879518, 0.07520707831325302, 0.07527767319277108, 0.07483057228915663, 0.07454819277108433, 0.0744070030120482, 0.07435993975903614, 0.07485410391566265, 0.07443053463855422, 0.07454819277108433, 0.07457172439759036, 0.07447759789156627, 0.07466585090361445, 0.07523060993975904, 0.07577183734939759, 0.07605421686746988, 0.07640719126506024, 0.07668957078313253, 0.07718373493975904, 0.07765436746987951, 0.07798381024096386, 0.07843091114457831, 0.0788074171686747, 0.07913685993975904, 0.07941923945783133, 0.07967808734939759, 0.0801722515060241], "end": "2016-01-17 00:12:22.419000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0], "accuracy_valid": [0.09946986607142858, 0.09807477678571429, 0.09793526785714286, 0.095703125, 0.0947265625, 0.09347098214285714, 0.0927734375, 0.09137834821428571, 0.09040178571428571, 0.08830915178571429, 0.08747209821428571, 0.08523995535714286, 0.0849609375, 0.08426339285714286, 0.08286830357142858, 0.08119419642857142, 0.07993861607142858, 0.07826450892857142, 0.07756696428571429, 0.07700892857142858, 0.07589285714285714, 0.07547433035714286, 0.0751953125, 0.07589285714285714, 0.07505580357142858, 0.07435825892857142, 0.07407924107142858, 0.07352120535714286, 0.07380022321428571, 0.07268415178571429, 0.07282366071428571, 0.07254464285714286, 0.07366071428571429, 0.07352120535714286, 0.07338169642857142, 0.07254464285714286, 0.07338169642857142, 0.07407924107142858, 0.07393973214285714, 0.07380022321428571, 0.07407924107142858, 0.07366071428571429, 0.07296316964285714, 0.07310267857142858, 0.07449776785714286, 0.07505580357142858, 0.07533482142857142, 0.07533482142857142, 0.07505580357142858, 0.07505580357142858, 0.07533482142857142, 0.07603236607142858], "accuracy_test": 0.0962171052631579, "start": "2016-01-16 23:38:25.842000", "learning_rate_per_epoch": [0.00045791789307259023, 0.0003237968485336751, 0.0002643790212459862, 0.00022895894653629512, 0.00020478710939642042, 0.00018694419122766703, 0.00017307669622823596, 0.00016189842426683754, 0.00015263930254150182, 0.00014480635582003742, 0.00013806743663735688, 0.0001321895106229931, 0.00012700357183348387, 0.0001223837025463581, 0.00011823388922493905, 0.00011447947326814756, 0.00011106140300398692, 0.00010793228284455836, 0.00010505357204237953, 0.00010239355469821021, 9.992587729357183e-05, 9.762842091731727e-05, 9.548247908242047e-05, 9.347209561383352e-05, 9.158357715932652e-05, 8.980508573586121e-05, 8.812634041532874e-05, 8.653834811411798e-05, 8.503322169417515e-05, 8.360398351214826e-05, 8.22444781078957e-05, 8.094921213341877e-05, 7.971327431732789e-05, 7.853226998122409e-05, 7.740224828012288e-05, 7.631965127075091e-05, 7.528124115196988e-05, 7.428409298881888e-05, 7.332554378081113e-05, 7.240317791001871e-05, 7.151476165745407e-05, 7.065826503094286e-05, 6.983182538533583e-05, 6.903371831867844e-05, 6.826237222412601e-05, 6.751631008228287e-05, 6.679419311694801e-05, 6.609475531149656e-05, 6.541683978866786e-05, 6.475936970673501e-05, 6.412133370758966e-05, 6.350178591674194e-05], "accuracy_train_last": 0.0801722515060241, "error_valid": [0.9005301339285714, 0.9019252232142857, 0.9020647321428571, 0.904296875, 0.9052734375, 0.9065290178571429, 0.9072265625, 0.9086216517857143, 0.9095982142857143, 0.9116908482142857, 0.9125279017857143, 0.9147600446428571, 0.9150390625, 0.9157366071428571, 0.9171316964285714, 0.9188058035714286, 0.9200613839285714, 0.9217354910714286, 0.9224330357142857, 0.9229910714285714, 0.9241071428571429, 0.9245256696428571, 0.9248046875, 0.9241071428571429, 0.9249441964285714, 0.9256417410714286, 0.9259207589285714, 0.9264787946428571, 0.9261997767857143, 0.9273158482142857, 0.9271763392857143, 0.9274553571428571, 0.9263392857142857, 0.9264787946428571, 0.9266183035714286, 0.9274553571428571, 0.9266183035714286, 0.9259207589285714, 0.9260602678571429, 0.9261997767857143, 0.9259207589285714, 0.9263392857142857, 0.9270368303571429, 0.9268973214285714, 0.9255022321428571, 0.9249441964285714, 0.9246651785714286, 0.9246651785714286, 0.9249441964285714, 0.9249441964285714, 0.9246651785714286, 0.9239676339285714], "accuracy_train_std": [0.01359232049502838, 0.013589020235959377, 0.013375985896684857, 0.013257142809326128, 0.013376482662008598, 0.01316577153843346, 0.013139837733729025, 0.013190269067167764, 0.013003688375446364, 0.012600785005164742, 0.012960351726531509, 0.012862439570193727, 0.012977942692542911, 0.013181156095453481, 0.012912367618737998, 0.012932593153365476, 0.012988178875616745, 0.01311402154317286, 0.013487461244295866, 0.013263531924994536, 0.013229797688833892, 0.012993166090964339, 0.01264119326337319, 0.013201850670814499, 0.013088239046971088, 0.01292728273009695, 0.012988775737285853, 0.012874789201804446, 0.012448741968273978, 0.01240766233994973, 0.012299006691757939, 0.012362997910096919, 0.012493631726144176, 0.012559320897169752, 0.012725846177665884, 0.012610932140268039, 0.012440777250115487, 0.012063992722646593, 0.01213251047085684, 0.011678516511281203, 0.011578086342611177, 0.011763365709284396, 0.011921271556372685, 0.011510453673039383, 0.011602833936200036, 0.011760964738952075, 0.012014963677729426, 0.01239511534022754, 0.012910652134022978, 0.012625984054101069, 0.012348029021310247, 0.012525944690110365], "accuracy_test_std": 0.012543645938142764, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1.0, 1.2], "translation_range": [-3, 3], "momentum": 0.7156221669945995, "shear_range": [1, 1.1], "patience_check_each": 1, "learning_rate": 0.0004579178934149775, "patience_threshold": 1, "do_flip": true, "batch_size": 512, "optimization": "adadelta", "nb_data_augmentation": 0, "learning_rate_decay_method": "sqrt", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 4.655761392012528e-09, "valid_ratio": 0.15, "rotation_range": [-90, 90], "learning_rate_decay": 0.8564086698413744}, "accuracy_valid_max": 0.09946986607142858, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.98, interval=[0.8, 1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256, 512],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1.0, 1.2)),\n        rotation_range=make_constant_param((-90, 90)),\n        shear_range=make_constant_param((1, 1.1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    instantiate = instantiate_random\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.07603236607142858, "loss_train": [2.3053765296936035, 2.3049097061157227, 2.305060386657715, 2.304871082305908, 2.3053438663482666, 2.3048994541168213, 2.304564952850342, 2.3044254779815674, 2.304488182067871, 2.3040530681610107, 2.3050284385681152, 2.3050143718719482, 2.304368257522583, 2.3051843643188477, 2.3047096729278564, 2.3048653602600098, 2.304344892501831, 2.304532289505005, 2.304119110107422, 2.304487466812134, 2.3044052124023438, 2.304232358932495, 2.3045332431793213, 2.304612159729004, 2.304507255554199, 2.3041462898254395, 2.3046224117279053, 2.304530143737793, 2.304533004760742, 2.3046178817749023, 2.3044233322143555, 2.3045594692230225, 2.304258346557617, 2.3046607971191406, 2.30452299118042, 2.3046321868896484, 2.3041579723358154, 2.3040928840637207, 2.3039772510528564, 2.304382801055908, 2.3042895793914795, 2.3043594360351562, 2.3042378425598145, 2.3043956756591797, 2.304370403289795, 2.3041443824768066, 2.3047146797180176, 2.3037867546081543, 2.3044910430908203, 2.304485559463501, 2.3045849800109863, 2.3046443462371826], "accuracy_train_first": 0.0977503765060241, "model": "vgg", "loss_std": [0.0035497082863003016, 0.0024816389195621014, 0.0040867445059120655, 0.0016861142357811332, 0.004720286000519991, 0.002217082539573312, 0.0017935035284608603, 0.0018389130709692836, 0.0029104757122695446, 0.0025941061321645975, 0.004869807977229357, 0.004266488365828991, 0.002350639086216688, 0.003109127515926957, 0.00222970312461257, 0.0048845731653273106, 0.001703424728475511, 0.0018777624936774373, 0.0030852442141622305, 0.0018777773948386312, 0.0029376433230936527, 0.002002936555072665, 0.0036904355511069298, 0.0026266654022037983, 0.0019452390260994434, 0.002364309271797538, 0.0023665393237024546, 0.001747645204886794, 0.0014786678366363049, 0.0017759317997843027, 0.002017889404669404, 0.0029041466768831015, 0.002220141002908349, 0.002956391079351306, 0.0019408456282690167, 0.002740040887147188, 0.0020892040338367224, 0.001931942068040371, 0.0019037663005292416, 0.0021834897343069315, 0.0016065618256106973, 0.0015862606232985854, 0.0018530965317040682, 0.003761861240491271, 0.0028733019717037678, 0.0021860820706933737, 0.005117025226354599, 0.002460976829752326, 0.004598395898938179, 0.0022716945968568325, 0.003599391086027026, 0.0050455001182854176]}, "state": "available", "life": [{"dt": "Sun May 15 22:04:57 2016", "state": "available"}], "summary": "95a60ed43c8f17f65fcb9c64eba5c135"}