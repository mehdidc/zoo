{"content": {"hp_model": {"f0": 32, "f1": 64, "f2": 32, "f3": 64, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.01870840102459173, 0.017074417129666047, 0.019037353933230736, 0.018207365954095635, 0.018533666152165357, 0.015216397489614227, 0.015791482912603252, 0.012528571205499352, 0.012592553675599338, 0.006497519066792088, 0.007157087087917595, 0.009366668160267365, 0.010972877705721109, 0.014622059909112218, 0.01102847220833791, 0.009765965210360788, 0.012133708126093164, 0.008742303952289632, 0.009562453338849204, 0.00907014812507628, 0.010465627127936496, 0.010753537249667032, 0.012215726349629195, 0.008576714846180677, 0.008793532485560833, 0.011416815852663909, 0.012493024280717592, 0.008230892267979531, 0.010851581800720381, 0.01042227256892286, 0.011976410181173928, 0.01158306733684742, 0.011683725726380632, 0.011637837265758198, 0.0121781615662752, 0.012372611316391486, 0.01191175976091143, 0.011845712742370142, 0.011439771315373232, 0.011998418460765518, 0.012252529681970836, 0.012338615771957662, 0.011407780310980152, 0.011407780310980152, 0.011453446231046297, 0.011426758205544637, 0.0112317158900855, 0.011047885629931272, 0.011189180824313853, 0.011047885629931272, 0.01127956711097806, 0.01172829845005845, 0.011687570757742483, 0.011597245022165989, 0.011242891407068894, 0.01086466296654637, 0.01074408453766405], "moving_avg_accuracy_train": [0.04203229181086193, 0.09955572534549186, 0.15689196006800246, 0.2117512396287548, 0.2651554619998586, 0.31904246214423415, 0.36990496997881406, 0.4167995154608607, 0.46017630115060887, 0.5004337141499352, 0.5379510849945394, 0.5719794245213405, 0.6038140074764139, 0.6323139614145421, 0.6605168612540772, 0.6836303061156572, 0.70463752426978, 0.7258340037953214, 0.7464940814635005, 0.7655113644970138, 0.7833057545331006, 0.8005365781488658, 0.8157329657554908, 0.8322088693287513, 0.8472975992113523, 0.8611727860533216, 0.8742370550670371, 0.886229737209143, 0.8971370834287048, 0.9070374003834533, 0.9160034892141555, 0.9241264475844067, 0.9314673370521565, 0.938099714210036, 0.9440874548426039, 0.9494926974535817, 0.9543620661010807, 0.9587514733302582, 0.9626996146877086, 0.9662552670582234, 0.9694600044893058, 0.9723558939213276, 0.9749668447077663, 0.9773283261596086, 0.9794536594662667, 0.9813711097398782, 0.983103790432557, 0.9846701785023966, 0.9860799277652522, 0.9873487021018222, 0.9884952493023542, 0.9895294669316427, 0.9904602627980023, 0.9913003042265354, 0.9920586666610246, 0.9927435180008746, 0.9933598842067395], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 37899947, "moving_var_accuracy_train": [0.015900421993861064, 0.04409088844499185, 0.06926879390988615, 0.08942777950422057, 0.10615310025735927, 0.1216720692926627, 0.13278781469240075, 0.13930091878687031, 0.1423047367391524, 0.14266019677782213, 0.14106215513586387, 0.1373772906408388, 0.13276052762406598, 0.12679470123193828, 0.12127386314297409, 0.11395455882900041, 0.1065308318772745, 0.0999213653880373, 0.09377077813253035, 0.08764861380506811, 0.08173351527536875, 0.0762322752901304, 0.07068741952773444, 0.06606177616195938, 0.06150462647099433, 0.0570868511129909, 0.05291424212545635, 0.04891723773756496, 0.045096245777788986, 0.041468767682250426, 0.038045407654305786, 0.0348347089630387, 0.03183623599033432, 0.029048508232180154, 0.026466334749908272, 0.024082651104069205, 0.0218877827528895, 0.01987240654001256, 0.018025456267616993, 0.016336694614874827, 0.014795458231406971, 0.013391387988688734, 0.012113602765902703, 0.010952431841138996, 0.009897842032004613, 0.008941147368770105, 0.008074052273338133, 0.007288729190272341, 0.006577742808102203, 0.005934456622146231, 0.005352842094279039, 0.004827184339793713, 0.00435226333431783, 0.003923388027300915, 0.0035362252468092246, 0.00318682391434755, 0.0028715606886103857], "duration": 22710.083571, "accuracy_train": [0.42032291810861944, 0.6172666271571613, 0.672918072570598, 0.705484755675526, 0.7457934633397932, 0.8040254634436139, 0.8276675404900333, 0.8388504247992802, 0.8505673723583426, 0.8627504311438722, 0.8756074225959765, 0.8782344802625508, 0.8903252540720746, 0.8888135468576966, 0.914342959809893, 0.8916513098698781, 0.8937024876568845, 0.9166023195251938, 0.9324347804771133, 0.9366669117986341, 0.9434552648578812, 0.955613990690753, 0.9525004542151162, 0.9804920014880952, 0.9830961681547619, 0.9860494676310447, 0.9918154761904762, 0.9941638764880952, 0.9953031994047619, 0.9961402529761905, 0.9966982886904762, 0.9972330729166666, 0.9975353422619048, 0.9977911086309523, 0.9979771205357143, 0.9981398809523809, 0.9981863839285714, 0.9982561383928571, 0.9982328869047619, 0.9982561383928571, 0.9983026413690477, 0.9984188988095238, 0.9984654017857143, 0.9985816592261905, 0.9985816592261905, 0.9986281622023809, 0.9986979166666666, 0.9987676711309523, 0.9987676711309523, 0.9987676711309523, 0.9988141741071429, 0.9988374255952381, 0.9988374255952381, 0.9988606770833334, 0.9988839285714286, 0.9989071800595238, 0.9989071800595238], "end": "2016-01-24 13:39:18.090000", "learning_rate_per_epoch": [0.00016122001397889107, 0.00015233608428388834, 0.0001439416955690831, 0.00013600986858364195, 0.00012851512292400002, 0.00012143337517045438, 0.00011474185885163024, 0.0001084190807887353, 0.00010244471195619553, 9.679955837782472e-05, 9.14654738153331e-05, 8.642532338853925e-05, 8.166291081579402e-05, 7.716292748227715e-05, 7.291090878425166e-05, 6.889319774927571e-05, 6.509687955258414e-05, 6.150975241325796e-05, 5.81202948524151e-05, 5.491761112352833e-05, 5.189140938455239e-05, 4.903196531813592e-05, 4.63300893898122e-05, 4.3777097744168714e-05, 4.136478673899546e-05, 3.9085403841454536e-05, 3.693162580020726e-05, 3.489652954158373e-05, 3.2973577617667615e-05, 3.115658910246566e-05, 2.9439723221003078e-05, 2.781746479740832e-05, 2.6284600608050823e-05, 2.4836203010636382e-05, 2.3467619030270725e-05, 2.217445035057608e-05, 2.0952540580765344e-05, 1.9797964341705665e-05, 1.8707009076024406e-05, 1.7676171410130337e-05, 1.6702137145330198e-05, 1.5781775800860487e-05, 1.491213060944574e-05, 1.4090406693867408e-05, 1.3313962881511543e-05, 1.2580305337905884e-05, 1.1887074833794031e-05, 1.1232044926146045e-05, 1.0613110134727322e-05, 1.0028281394625083e-05, 9.475678780290764e-06, 8.953526958066504e-06, 8.460147910227533e-06, 7.99395638750866e-06, 7.553454452136066e-06, 7.137226020859089e-06, 6.743933681718772e-06], "accuracy_valid": [0.4109460302146084, 0.5998785179781627, 0.6430208137236446, 0.6615960913968373, 0.6895722538591867, 0.7256668274661144, 0.7320556640625, 0.7270198959902108, 0.7168968844126506, 0.712268507624247, 0.7099182864269578, 0.6972832737198795, 0.6928578572100903, 0.6891545674887049, 0.7014645496046686, 0.6887589420180723, 0.6838967196912651, 0.6954728092055723, 0.7006409426769578, 0.703845656061747, 0.705432570124247, 0.7104065676769578, 0.7062252917921686, 0.7222988634224398, 0.7271110810429217, 0.7238548922251506, 0.7275170016001506, 0.7311188111822289, 0.7302540239081325, 0.7285347444465362, 0.7281788285956325, 0.7287994752447289, 0.7284435593938253, 0.7285656297063253, 0.7284229692206325, 0.7285553346197289, 0.7281891236822289, 0.7284332643072289, 0.7283111939947289, 0.7275684770331325, 0.7279346879706325, 0.7273140413215362, 0.7270699006965362, 0.7270699006965362, 0.7274361116340362, 0.7274258165474398, 0.7279140977974398, 0.7277920274849398, 0.7279140977974398, 0.7277920274849398, 0.7276699571724398, 0.7277920274849398, 0.7277920274849398, 0.7279140977974398, 0.7280361681099398, 0.7281582384224398, 0.7280361681099398], "accuracy_test": 0.4881855867346939, "start": "2016-01-24 07:20:48.006000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0], "accuracy_train_last": 0.9989071800595238, "batch_size_eval": 1024, "accuracy_train_std": [0.01854904785522604, 0.023715167437973233, 0.02367067387612181, 0.024487600896216166, 0.0269875387093143, 0.028524485536747093, 0.030128385322821267, 0.031196572364406164, 0.03176607043854611, 0.031704053774266445, 0.031012055794748045, 0.0301377548504362, 0.02852655038560003, 0.026587629413219474, 0.023407671752194346, 0.025106378099182192, 0.02080902970940975, 0.01921711990461938, 0.017746379073621962, 0.01629355632421381, 0.014869998712953497, 0.013171167174735586, 0.01227909657713736, 0.008287744969585778, 0.006655817156330692, 0.006312597450463575, 0.004439268709926737, 0.0033457105852723263, 0.002672201990059271, 0.0024571883953911655, 0.002109103510128082, 0.0018931052612848654, 0.0017986495169097579, 0.0016652026850626747, 0.0016560871375673242, 0.0016753983942198495, 0.0016028355598599413, 0.001630425117025503, 0.0016539638433573974, 0.001658044688058693, 0.0016377038367690042, 0.0016222808354271214, 0.0015824683340005165, 0.001432752092913309, 0.001432752092913309, 0.0013655177511184917, 0.0012547188953898848, 0.0012436829538984683, 0.0012436829538984683, 0.0012066155827129019, 0.00119671774855448, 0.0011910573358320032, 0.0011910573358320032, 0.0011849137189584177, 0.0011782793395944873, 0.0011515943542633736, 0.0011515943542633736], "accuracy_test_std": 0.015602707409193936, "error_valid": [0.5890539697853916, 0.4001214820218373, 0.3569791862763554, 0.3384039086031627, 0.31042774614081325, 0.27433317253388556, 0.2679443359375, 0.2729801040097892, 0.28310311558734935, 0.287731492375753, 0.29008171357304224, 0.3027167262801205, 0.3071421427899097, 0.31084543251129515, 0.29853545039533136, 0.3112410579819277, 0.3161032803087349, 0.3045271907944277, 0.29935905732304224, 0.296154343938253, 0.294567429875753, 0.28959343232304224, 0.29377470820783136, 0.27770113657756024, 0.27288891895707834, 0.27614510777484935, 0.27248299839984935, 0.2688811888177711, 0.26974597609186746, 0.2714652555534638, 0.27182117140436746, 0.2712005247552711, 0.2715564406061747, 0.2714343702936747, 0.27157703077936746, 0.2714446653802711, 0.2718108763177711, 0.2715667356927711, 0.2716888060052711, 0.27243152296686746, 0.27206531202936746, 0.2726859586784638, 0.2729300993034638, 0.2729300993034638, 0.2725638883659638, 0.27257418345256024, 0.27208590220256024, 0.27220797251506024, 0.27208590220256024, 0.27220797251506024, 0.27233004282756024, 0.27220797251506024, 0.27220797251506024, 0.27208590220256024, 0.27196383189006024, 0.27184176157756024, 0.27196383189006024], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.9492808329575322, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0001706220411022592, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "optimization": "rmsprop", "nb_data_augmentation": 0, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 8.510363472144569e-07, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.05510439672926241}, "accuracy_valid_max": 0.7320556640625, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7280361681099398, "loss_train": [1.5090028047561646, 1.1156806945800781, 0.9473676681518555, 0.8310524821281433, 0.7350940108299255, 0.6516379714012146, 0.5762901306152344, 0.5046036243438721, 0.43542516231536865, 0.36872994899749756, 0.30557265877723694, 0.24678294360637665, 0.19504514336585999, 0.1522749811410904, 0.12247936427593231, 0.10292328894138336, 0.09081827849149704, 0.07999085634946823, 0.0712144672870636, 0.06589297205209732, 0.057592857629060745, 0.05277080833911896, 0.050380706787109375, 0.04734933748841286, 0.04396270588040352, 0.04237698018550873, 0.04020589962601662, 0.038818784058094025, 0.03823838755488396, 0.037959661334753036, 0.03779582306742668, 0.03768475353717804, 0.037599463015794754, 0.03753111511468887, 0.03747416287660599, 0.03742583841085434, 0.037384264171123505, 0.037347979843616486, 0.03731602802872658, 0.03728751838207245, 0.037262070924043655, 0.037238914519548416, 0.03721797466278076, 0.03719894215464592, 0.03718156740069389, 0.037165626883506775, 0.03715098649263382, 0.03713751211762428, 0.03712499514222145, 0.03711339458823204, 0.037102725356817245, 0.03709278255701065, 0.03708355128765106, 0.037074968218803406, 0.037066955119371414, 0.03705945238471031, 0.03705244138836861], "accuracy_train_first": 0.42032291810861944, "model": "residualv3", "loss_std": [0.3098697364330292, 0.14822763204574585, 0.13658630847930908, 0.12970897555351257, 0.1265869140625, 0.12340579181909561, 0.11914186179637909, 0.11411941051483154, 0.10699401795864105, 0.0985344648361206, 0.0892263874411583, 0.07745512574911118, 0.06441251188516617, 0.05168955400586128, 0.03823846951127052, 0.030887985602021217, 0.02659507840871811, 0.022716328501701355, 0.019807051867246628, 0.016567151993513107, 0.011315732263028622, 0.009886887855827808, 0.009112176485359669, 0.008046862669289112, 0.0042892456986010075, 0.0037688042502850294, 0.0022352200467139482, 0.0007628680905327201, 0.0004333731485530734, 0.00030206009978428483, 0.0002432844485156238, 0.0002110490167979151, 0.00018843149882741272, 0.00017165779718197882, 0.00015845340385567397, 0.00014755493612028658, 0.00013855744327884167, 0.00013091701839584857, 0.00012440471618901938, 0.00011870917660417035, 0.00011372272274456918, 0.00010933740122709423, 0.00010544312681304291, 0.00010195153299719095, 9.886870248010382e-05, 9.614991722628474e-05, 9.365109144710004e-05, 9.139732719631866e-05, 8.930778130888939e-05, 8.742154750507325e-05, 8.572777005610988e-05, 8.413173782173544e-05, 8.268088276963681e-05, 8.133521623676643e-05, 8.007510768948123e-05, 7.892720168456435e-05, 7.785140769556165e-05]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:11 2016", "state": "available"}], "summary": "c6a3c5ad6d322c1e75326528a45dd39d"}