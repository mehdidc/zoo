{"content": {"hp_model": {"f0": 32, "f1": 32, "f2": 16, "f3": 16, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.4790157079696655, 1.1103250980377197, 0.93326735496521, 0.8335943818092346, 0.762475311756134, 0.7058100700378418, 0.6584826707839966, 0.6186935305595398, 0.5830704569816589, 0.5505036115646362, 0.5202569365501404, 0.49223288893699646, 0.4645446538925171, 0.43864402174949646, 0.41345393657684326, 0.38924625515937805, 0.36553043127059937, 0.3423898220062256, 0.31994375586509705, 0.2985566556453705, 0.2780521810054779, 0.25781890749931335, 0.23724275827407837, 0.2184269279241562, 0.19999107718467712, 0.18315234780311584, 0.16661714017391205, 0.15258879959583282, 0.13788549602031708, 0.12373754382133484, 0.11304248124361038, 0.10424857586622238, 0.09426324814558029, 0.08652811497449875, 0.07967931777238846, 0.07218514382839203, 0.06549642235040665, 0.06153032183647156, 0.0558367557823658, 0.0532621368765831, 0.048857975751161575, 0.04568104073405266, 0.041077084839344025, 0.03886490687727928, 0.03826344013214111, 0.035322293639183044, 0.032445892691612244, 0.02993670478463173, 0.028639208525419235, 0.02719845063984394, 0.025574930012226105, 0.02349124662578106, 0.023448998108506203, 0.020477591082453728, 0.02126258797943592, 0.01860162615776062, 0.01782701164484024, 0.01738155260682106, 0.015902122482657433, 0.015283503569662571, 0.01466609537601471, 0.013515453785657883, 0.013367045670747757], "moving_avg_accuracy_train": [0.05141318579272793, 0.10670657631390731, 0.16506061068140915, 0.22181290500847864, 0.27550736648598995, 0.3256570108013075, 0.37217461349447867, 0.4150540766040101, 0.4544429392001613, 0.49074842610332714, 0.5240601306506172, 0.554663732526493, 0.5828625940814295, 0.6087436213796358, 0.6326038462087265, 0.6544454220668129, 0.6745259453247865, 0.6927539849342883, 0.709133679994754, 0.7238357698729548, 0.7374117727871451, 0.7500695203884601, 0.7616660702760629, 0.7724306669617734, 0.7824093754824658, 0.7917110476379845, 0.8005125609124382, 0.8085643474856924, 0.8158318456920881, 0.8225889050147674, 0.8286423566194646, 0.8346041767553217, 0.8400070893561831, 0.8453882909791196, 0.8500245423421711, 0.8545250145510603, 0.8582989270748211, 0.8629438369640076, 0.866779953596372, 0.8707301125083757, 0.8747433819422927, 0.877501958770904, 0.880714702545207, 0.8841061149849462, 0.8870377307843474, 0.8894994736942848, 0.8925563496452698, 0.8949938231559643, 0.8971897663179427, 0.8998545034066172, 0.9024500078982275, 0.9044375140586169, 0.9060401856005681, 0.9077617880895607, 0.910189848189104, 0.9120729771287299, 0.9139792375207849, 0.9161902367165193, 0.9178500369593654, 0.9195646021195565, 0.9209611542910912, 0.9225716180597949, 0.9240650330349155], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05086875823606927, 0.10506569735975149, 0.16182972367987572, 0.21665696403779175, 0.26811035531285293, 0.31516406587531764, 0.3584899973901955, 0.39788616778483554, 0.43379746982224054, 0.46631398366456467, 0.49595020460345457, 0.5229391567522959, 0.5474377627261626, 0.5690938240853235, 0.5888793070758875, 0.6061592804063259, 0.6212829808013108, 0.6345982538808183, 0.6461568125759443, 0.6561302102904883, 0.6651805399297377, 0.6731437606449717, 0.6802984522574324, 0.6867498817398969, 0.6924442459755458, 0.6973250331626297, 0.7020493904920746, 0.7057499366650057, 0.708997038019213, 0.71169867316684, 0.7140854347093428, 0.7165589919067067, 0.7188890266862921, 0.7211590154427381, 0.7228947705249702, 0.7242788451008617, 0.7254808316374622, 0.7269969251021047, 0.7279515177010809, 0.7288350651026596, 0.7298580733231919, 0.7301582811452401, 0.7309544000374931, 0.7318428349866806, 0.7327655262621089, 0.7337444918023136, 0.7348697014134978, 0.735262772923127, 0.7353103319918837, 0.7357855287908128, 0.736814438967078, 0.7377578127002647, 0.7377654463398768, 0.7382891299626663, 0.7392559330337942, 0.7393131851746919, 0.7397940172125691, 0.7403722209129989, 0.740797007010705, 0.7411232798130231, 0.7409979153106364, 0.7410955482430517, 0.7411641513630236], "moving_var_accuracy_train": [0.02378984106021806, 0.04892708827214512, 0.07468111938760288, 0.09620041365131951, 0.11252822902642708, 0.12391028754836014, 0.1309942450364017, 0.13444265574181655, 0.1349617326372012, 0.13332835478696461, 0.12998254624688166, 0.12541351565218753, 0.12002874622391907, 0.11405431976762165, 0.10777268075091229, 0.10128890259950192, 0.0947890590683779, 0.08830050601359021, 0.08188510510469575, 0.07564195761530644, 0.06973653254991073, 0.06420484646396703, 0.05899468154123128, 0.05413810226336223, 0.04962046365069445, 0.04543710722962377, 0.04159059622994485, 0.03801501801014149, 0.03468886498074702, 0.031630899138884186, 0.02879760771196946, 0.026237736634763323, 0.023876686152439906, 0.021749633515356165, 0.01976812360413312, 0.017973599494646664, 0.01630442128681498, 0.014868155849041437, 0.013513782381491224, 0.012302837942212838, 0.011217511131934463, 0.010164247733815175, 0.009240718463467568, 0.00842016172214857, 0.007655494890691407, 0.006944487005013908, 0.006334138719729909, 0.005754196341794956, 0.005222176204951214, 0.004763865998221911, 0.004348109190493446, 0.003948849898082378, 0.0035770819129165615, 0.0032460489577958566, 0.002974503344639223, 0.002708968581604612, 0.002470776181585011, 0.002267695220418352, 0.002065720129991883, 0.001885605720189568, 0.0017145983698809725, 0.0015664808748456424, 0.0014299053819523068], "duration": 25202.868707, "accuracy_train": [0.5141318579272794, 0.604347091004522, 0.6902469199889258, 0.7325835539521041, 0.7587575197835917, 0.7770038096391657, 0.7908330377330195, 0.8009692445897933, 0.8089427025655224, 0.8174978082318198, 0.8238654715762275, 0.8300961494093761, 0.8366523480758582, 0.841672867063492, 0.8473458696705426, 0.8510196047895902, 0.8552506546465486, 0.8568063414198044, 0.8565509355389442, 0.8561545787767626, 0.8595957990148578, 0.8639892488002953, 0.8660350192644887, 0.8693120371331673, 0.872217752168697, 0.8754260970376523, 0.8797261803825213, 0.8810304266449798, 0.8812393295496493, 0.8834024389188816, 0.8831234210617387, 0.8882605579780363, 0.888633302763935, 0.8938191055855482, 0.8917508046096345, 0.8950292644310631, 0.8922641397886674, 0.904748025966685, 0.9013050032876523, 0.9062815427164084, 0.9108628068475452, 0.9023291502284054, 0.909629396513935, 0.9146288269425988, 0.913422272978959, 0.9116551598837209, 0.9200682332041344, 0.916931084752215, 0.9169532547757475, 0.923837137204688, 0.9258095483227206, 0.9223250695021227, 0.9204642294781286, 0.9232562104904946, 0.9320423890849945, 0.9290211375853636, 0.9311355810492802, 0.9360892294781286, 0.9327882391449798, 0.9349956885612772, 0.9335301238349022, 0.9370657919781286, 0.9375057678110004], "end": "2016-02-01 16:47:00.910000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0], "moving_var_accuracy_valid": [0.023288675080316987, 0.04739558146567034, 0.07165541547574913, 0.0915441104955565, 0.10621676270934173, 0.11552155153767338, 0.12086362345859303, 0.12274578528860537, 0.1220778012859404, 0.11938593420946887, 0.11535209111237026, 0.11037251384396524, 0.10473689771153374, 0.09848407288270603, 0.0921588536289645, 0.08563034557077401, 0.079125847836432, 0.07280893152742553, 0.06673044088666104, 0.0609526147557472, 0.05559452947938417, 0.05060579248888155, 0.04600591974861813, 0.04177991625506124, 0.03789375668598925, 0.03431877976948076, 0.031087777762119198, 0.028102246363709234, 0.025386914732178766, 0.022913912751198924, 0.02067379115202596, 0.018661478403701044, 0.016844192121997635, 0.015206148550387398, 0.013712649306698113, 0.012358625337912967, 0.011135765748829192, 0.010042876028488053, 0.009046789648909431, 0.008149136588116015, 0.007343641841677903, 0.006610088780137884, 0.005954784149739516, 0.005366409584696003, 0.004837430858934167, 0.004362313134800926, 0.0039374766913427475, 0.003545119569113612, 0.00319062796898744, 0.0028735974800681084, 0.0025957656374186945, 0.002344198659681026, 0.0021097793181650074, 0.0019012695871795074, 0.0017195550020666387, 0.0015476290021287113, 0.0013949468969536823, 0.0012584610829310307, 0.0011342389636971673, 0.001021773152801243, 0.0009197372838472465, 0.0008278493451679499, 0.0007451067681437839], "accuracy_test": 0.3113879145408163, "start": "2016-02-01 09:46:58.041000", "learning_rate_per_epoch": [0.0006712560425512493, 0.00047464968520216644, 0.0003875498368870467, 0.00033562802127562463, 0.0003001948061864823, 0.0002740391355473548, 0.0002537109248805791, 0.00023732484260108322, 0.00022375200933311135, 0.00021226979151833802, 0.00020239131117705256, 0.00019377491844352335, 0.00018617292516864836, 0.0001794007112039253, 0.0001733175595290959, 0.00016781401063781232, 0.00016280349518638104, 0.00015821655688341707, 0.00015399669064208865, 0.00015009740309324116, 0.0001464800734538585, 0.00014311226550489664, 0.00013996654888615012, 0.0001370195677736774, 0.0001342512114206329, 0.00013164413394406438, 0.00012918328866362572, 0.00012685546244028956, 0.0001246491156052798, 0.00012255401816219091, 0.00012056114064762369, 0.00011866242130054161, 0.00011685067147482187, 0.00011511945922393352, 0.00011346297833370045, 0.00011187600466655567, 0.00011035380885004997, 0.00010889210534514859, 0.00010748698696261272, 0.00010613489575916901, 0.00010483257938176394, 0.00010357705468777567, 0.00010236558591714129, 0.00010119565558852628, 0.00010006494267145172, 9.897130075842142e-05, 9.791275078896433e-05, 9.688745922176167e-05, 9.589371620677412e-05, 9.492993558524176e-05, 9.399464033776894e-05, 9.308646258432418e-05, 9.220410720445216e-05, 9.134637366514653e-05, 9.051214146893471e-05, 8.970035560196266e-05, 8.891003380995244e-05, 8.814023021841422e-05, 8.739009354030713e-05, 8.665877976454794e-05, 8.594552491558716e-05, 8.524960139766335e-05, 8.457031071884558e-05], "accuracy_train_first": 0.5141318579272794, "accuracy_train_last": 0.9375057678110004, "batch_size_eval": 1024, "accuracy_train_std": [0.015618205731550991, 0.015610561655785199, 0.0163788709159591, 0.014845232507309413, 0.017079341307764468, 0.017752165761337153, 0.01954884920833659, 0.01856663741054357, 0.019242350501867896, 0.019398999894549504, 0.020581694511090123, 0.020664062554858285, 0.021480787483717234, 0.02210587124951204, 0.022527534551476696, 0.023162684797234483, 0.023851703531761508, 0.025197990968782745, 0.02591435979707373, 0.027017898678060696, 0.026633867799080467, 0.02625839708813154, 0.02677784503019943, 0.026977513058291828, 0.027212440735358705, 0.02671627980777455, 0.02775458322261177, 0.026233384524070126, 0.02642867530844322, 0.026493216219436913, 0.0255139440311387, 0.025489045966035573, 0.025267721890114114, 0.024087027749564824, 0.022410797448010496, 0.02178322451654045, 0.021708087962017297, 0.021227754518430897, 0.021888196589839336, 0.021228534453086687, 0.018854969118581904, 0.020713731728762765, 0.01988474977460681, 0.020097332557136863, 0.01867435952274792, 0.017751038921628527, 0.017160492444181857, 0.017166738751727178, 0.01867547088128058, 0.01635341454942741, 0.017449675007438697, 0.0180361881821185, 0.017134758529851593, 0.016833630799231423, 0.016302721276940647, 0.016166854902273063, 0.01597552362435486, 0.014220385462160793, 0.014905240380955309, 0.014867841020989942, 0.014899581397126412, 0.013622899695036933, 0.0151677659273462], "accuracy_test_std": 0.012251309253951034, "error_valid": [0.4913124176393072, 0.4071618505271084, 0.32729403943900603, 0.2898978727409638, 0.26880912321159633, 0.2613525390625, 0.25157661897590367, 0.24754829866340367, 0.24300081184111444, 0.2410373917545181, 0.2373238069465362, 0.23416027390813254, 0.2320747835090362, 0.23600162368222888, 0.2330513460090362, 0.23832095961972888, 0.24260371564382532, 0.24556428840361444, 0.24981615916792166, 0.25410921027861444, 0.2533664933170181, 0.25518725291792166, 0.25530932323042166, 0.25518725291792166, 0.25630647590361444, 0.25874788215361444, 0.25543139354292166, 0.26094514777861444, 0.26177904979292166, 0.2639866105045181, 0.26443371140813254, 0.2611789933170181, 0.26014066029743976, 0.258411085749247, 0.26148343373493976, 0.26326448371611444, 0.26370128953313254, 0.25935823371611444, 0.26345714890813254, 0.26321300828313254, 0.2609348526920181, 0.2671398484563253, 0.2618805299322289, 0.26016125047063254, 0.2589302522590362, 0.2574448183358433, 0.2550034120858433, 0.2611995834902108, 0.2642616363893072, 0.2599377000188253, 0.2539253694465362, 0.2537518237010542, 0.26216585090361444, 0.2569977174322289, 0.2520428393260542, 0.2601715455572289, 0.2558784944465362, 0.25442394578313254, 0.25537991810993976, 0.25594026496611444, 0.2601303652108433, 0.2580257553652108, 0.2582184205572289], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.028410124652587854, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.0006712560207351004, "optimization": "rmsprop", "nb_data_augmentation": 0, "learning_rate_decay_method": "sqrt", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 7.247712893493383e-08, "rotation_range": [0, 0], "momentum": 0.9814185146382693}, "accuracy_valid_max": 0.7679252164909638, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7417815794427711, "accuracy_valid_std": [0.014793914721327715, 0.012681525982015862, 0.018896058117701037, 0.01858675092148977, 0.019120327085170113, 0.016362431456536673, 0.019466020665797612, 0.020303608521239816, 0.018054075367438673, 0.016716005372856422, 0.018899647564486755, 0.01949425254090159, 0.020179493967362096, 0.01731525087591697, 0.019499572679197635, 0.01939538548347352, 0.017034805066253385, 0.017527732060975985, 0.018461905068758944, 0.01682468484148596, 0.018929191107031826, 0.01815118043066403, 0.01876552951279605, 0.01802596455182333, 0.016211310717411026, 0.015356690824163684, 0.016392033880581608, 0.015438053715875925, 0.015291808042732743, 0.0164602379150409, 0.021958948621370076, 0.019763345669402275, 0.024048691564723928, 0.023318322441204242, 0.022753304049469063, 0.01948622659625404, 0.023416662087216815, 0.01775546979739204, 0.019952220838622043, 0.02150669895544984, 0.020478128356518195, 0.020898738060314247, 0.019679654628478736, 0.022235386254397235, 0.020985664618542354, 0.021768119269876048, 0.019929682939873714, 0.015891396304761246, 0.018615167051407294, 0.019484509964465654, 0.01867973388882427, 0.02261268434868783, 0.015319234571885883, 0.019647077785198967, 0.023167513670368504, 0.018109088796780262, 0.019883394975306976, 0.01855593435825826, 0.021002604280879158, 0.015969124234219548, 0.025261221604650847, 0.01703494575673838, 0.016371094368372103], "accuracy_valid": [0.5086875823606928, 0.5928381494728916, 0.672705960560994, 0.7101021272590362, 0.7311908767884037, 0.7386474609375, 0.7484233810240963, 0.7524517013365963, 0.7569991881588856, 0.7589626082454819, 0.7626761930534638, 0.7658397260918675, 0.7679252164909638, 0.7639983763177711, 0.7669486539909638, 0.7616790403802711, 0.7573962843561747, 0.7544357115963856, 0.7501838408320783, 0.7458907897213856, 0.7466335066829819, 0.7448127470820783, 0.7446906767695783, 0.7448127470820783, 0.7436935240963856, 0.7412521178463856, 0.7445686064570783, 0.7390548522213856, 0.7382209502070783, 0.7360133894954819, 0.7355662885918675, 0.7388210066829819, 0.7398593397025602, 0.741588914250753, 0.7385165662650602, 0.7367355162838856, 0.7362987104668675, 0.7406417662838856, 0.7365428510918675, 0.7367869917168675, 0.7390651473079819, 0.7328601515436747, 0.7381194700677711, 0.7398387495293675, 0.7410697477409638, 0.7425551816641567, 0.7449965879141567, 0.7388004165097892, 0.7357383636106928, 0.7400622999811747, 0.7460746305534638, 0.7462481762989458, 0.7378341490963856, 0.7430022825677711, 0.7479571606739458, 0.7398284544427711, 0.7441215055534638, 0.7455760542168675, 0.7446200818900602, 0.7440597350338856, 0.7398696347891567, 0.7419742446347892, 0.7417815794427711], "seed": 390631747, "model": "residualv3", "loss_std": [0.3519042730331421, 0.2721668481826782, 0.26420271396636963, 0.2603665888309479, 0.2555868327617645, 0.25091537833213806, 0.24699531495571136, 0.2428710013628006, 0.23892439901828766, 0.23477032780647278, 0.23130208253860474, 0.22739483416080475, 0.2236897498369217, 0.21869869530200958, 0.21371448040008545, 0.20805174112319946, 0.2024003565311432, 0.1965203583240509, 0.19042034447193146, 0.18448208272457123, 0.17918965220451355, 0.1732986867427826, 0.16658540070056915, 0.15996302664279938, 0.15311403572559357, 0.14530938863754272, 0.13790790736675262, 0.13113020360469818, 0.12306992709636688, 0.1154128685593605, 0.10649481415748596, 0.10150086879730225, 0.09432580322027206, 0.0880453810095787, 0.08247789740562439, 0.07916627079248428, 0.07176391035318375, 0.06960118561983109, 0.06552430987358093, 0.060775164514780045, 0.05731125921010971, 0.05549248307943344, 0.051930543035268784, 0.04860415309667587, 0.0471431240439415, 0.045628756284713745, 0.04213718697428703, 0.03957579284906387, 0.03838985040783882, 0.0365084707736969, 0.03623213618993759, 0.0331292562186718, 0.03491882607340813, 0.031019285321235657, 0.03286432474851608, 0.028413018211722374, 0.02890769951045513, 0.02855679765343666, 0.025632450357079506, 0.027672117576003075, 0.025595253333449364, 0.02614128589630127, 0.024452636018395424]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:28 2016", "state": "available"}], "summary": "01d7bb3b8685eb6ac56c8d3954a68f21"}