{"content": {"hp_model": {"f1": 25, "f2": 164, "f3": 204, "nonlin": "very_leaky_rectify", "ds2": 3476, "ds1": 337, "do2": 0.4271675406017008, "do3": 0.14459016741290676, "do1": 0.24422595216220344, "do4": 0.2076573114763295, "do5": 0.5563145209841623}, "accuracy_valid_std": [0.009959022487485907, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821, 0.01005335838403821], "moving_avg_accuracy_train": [0.009177334337349395, 0.017439288403614455, 0.024875047063253008, 0.031567229856927705, 0.03759019437123493, 0.04301086243411144, 0.047889463690700296, 0.05228020482163027, 0.05623187183946724, 0.05978837215552052, 0.06298922243996846, 0.06586998769597162, 0.06846267642637446, 0.07079609628373701, 0.07289617415536331, 0.074786244239827, 0.0764873073158443, 0.07801826408425988, 0.07939612517583389, 0.08063620015825049, 0.08175226764242544, 0.0827567283781829, 0.08366074304036461, 0.08447435623632815, 0.08520660811269534, 0.08586563480142581, 0.08645875882128323, 0.0869925704391549, 0.0874730008952394, 0.08790538830571545, 0.08829453697514392, 0.08864477077762953, 0.08895998119986659, 0.08924367057987992, 0.08949899102189193, 0.08972877941970275, 0.08993558897773249, 0.09012171757995924, 0.09028923332196331, 0.09043999748976697, 0.09057568524079027, 0.09069780421671125, 0.09080771129504012, 0.09090662766553612, 0.0909956523989825, 0.09107577465908426, 0.09114788469317583, 0.09121278372385824, 0.09127119285147242, 0.09132376106632517, 0.09137107245969264, 0.09141365271372337], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.0007580111898554307, 0.0012965490358075515, 0.001664508693826304, 0.0019011256193392748, 0.0020374979712707844, 0.00209820095437471, 0.0021025876109243523, 0.002065836318941479, 0.001999793737026076, 0.001913652613806252, 0.0018144963353166814, 0.0017077359779267675, 0.0015974606938089118, 0.0014867182585046256, 0.001377739376256213, 0.0012721167229482523, 0.001170947590950732, 0.0010749472894964758, 0.00098453907123589, 0.000899925237770441, 0.0008211431736564904, 0.000748109328617947, 0.000680653578341108, 0.0006185459184008112, 0.0005615170618547195, 0.0005092742012573789, 0.00046151294605802746, 0.00041792624504259775, 0.00037821094134654013, 0.00034207247706652985, 0.00030922815954213833, 0.0002794093170355563, 0.00025236260382458236, 0.00022785066042111532, 0.00020565229113198667, 0.00018556228638870413, 0.00016739098948946577, 0.00015096368524962115, 0.00013611987043903165, 0.00012271245190377026, 0.0001106069072053931, 9.968043388337368e-05, 8.982110658783743e-05, 8.092705596422259e-05, 7.290567899628713e-05, 6.567288728573272e-05, 5.9152397270309645e-05, 5.3275064500930334e-05, 4.797826268653515e-05, 4.3205307172796887e-05, 3.890492176699856e-05, 3.5030747292598606e-05], "duration": 20060.483353, "accuracy_train": [0.09177334337349398, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875, 0.091796875], "end": "2016-01-17 05:19:15.679000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0], "accuracy_valid": [0.087890625, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142, 0.08803013392857142], "accuracy_test": 0.09107730263157894, "start": "2016-01-16 23:44:55.195000", "learning_rate_per_epoch": [1.0407145964563824e-05, 2.6764874405671435e-07, 6.883333458773677e-09, 1.7702410370912247e-10, 4.552668138313454e-12, 1.1708455114733257e-13, 3.0111555406769387e-15, 7.744025190052043e-17, 1.9915918007008084e-18, 5.121933372201318e-20, 1.3172478660124212e-21, 3.387670071884819e-23, 8.712337609441899e-25, 2.240620426175497e-26, 5.762379986194179e-28, 1.4819565990534143e-29, 3.811264426467694e-31, 9.801728135901146e-33, 2.520787483088412e-34, 6.482907307040387e-36, 1.6672602044908272e-37, 4.287824763196722e-39, 1.1027378135157715e-40, 2.8362280917934298e-42, 7.286752014489049e-44, 1.401298464324817e-45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_train_last": 0.091796875, "error_valid": [0.912109375, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286, 0.9119698660714286], "accuracy_train_std": [0.01149500084031496, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153, 0.011516994414538153], "accuracy_test_std": 0.014214876635599833, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1.0, 1.2], "translation_range": [-3, 3], "momentum": 0.6739426113993694, "shear_range": [1, 1.1], "patience_check_each": 1, "learning_rate": 0.0004046672536184563, "patience_threshold": 1, "do_flip": true, "batch_size": 512, "optimization": "adadelta", "nb_data_augmentation": 1, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 8.221411156727813e-10, "valid_ratio": 0.15, "rotation_range": [-90, 90], "learning_rate_decay": 0.9742822135390813}, "accuracy_valid_max": 0.08803013392857142, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.98, interval=[0.8, 1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256, 512],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1.0, 1.2)),\n        rotation_range=make_constant_param((-90, 90)),\n        shear_range=make_constant_param((1, 1.1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    instantiate = instantiate_random\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.08803013392857142, "loss_train": [2.3027660846710205, 2.302824020385742, 2.302764415740967, 2.3028180599212646, 2.3026862144470215, 2.302694320678711, 2.3028159141540527, 2.3028035163879395, 2.302818775177002, 2.302708148956299, 2.3028337955474854, 2.302852153778076, 2.302889585494995, 2.302748680114746, 2.3027453422546387, 2.3027114868164062, 2.30279541015625, 2.302750825881958, 2.3028416633605957, 2.3029799461364746, 2.302736282348633, 2.30277681350708, 2.302729368209839, 2.302828788757324, 2.3028855323791504, 2.3028125762939453, 2.302797317504883, 2.3027737140655518, 2.3027713298797607, 2.3026440143585205, 2.302795171737671, 2.302802085876465, 2.3027451038360596, 2.302690029144287, 2.302586793899536, 2.3026907444000244, 2.3026554584503174, 2.302633285522461, 2.302910327911377, 2.30279803276062, 2.302738666534424, 2.3027725219726562, 2.30279803276062, 2.3028948307037354, 2.30271577835083, 2.3029215335845947, 2.3028063774108887, 2.302750825881958, 2.3029773235321045, 2.3027055263519287, 2.302774429321289, 2.302760601043701], "accuracy_train_first": 0.09177334337349398, "model": "vgg", "loss_std": [0.00039702028152532876, 0.00054172397358343, 0.000696719391271472, 0.0005204755580052733, 0.0006242272793315351, 0.0009201993816532195, 0.0003986824303865433, 0.0005065446603111923, 0.0004566530406009406, 0.0006404001032933593, 0.0006710924208164215, 0.0004198543610982597, 0.000796126201748848, 0.0006016041152179241, 0.00045429368037730455, 0.0005089995684102178, 0.0010785139165818691, 0.0004302128800190985, 0.00040895791607908905, 0.0012880897847935557, 0.0007182087865658104, 0.0004921652725897729, 0.000606545596383512, 0.00038812769344076514, 0.0006934810080565512, 0.0006309588789008558, 0.0003985486109741032, 0.0007054460584186018, 0.00042013381607830524, 0.0014198891585692763, 0.000513486098498106, 0.0004934719181619585, 0.0007736659026704729, 0.0009147271630354226, 0.0014818712370470166, 0.0005895028589293361, 0.00144645303953439, 0.0014173001982271671, 0.0007601683028042316, 0.00047185682342387736, 0.000626700057182461, 0.0006133428541943431, 0.00041301906458102167, 0.0009078775183297694, 0.0006994015420787036, 0.000945401145145297, 0.00046126259258016944, 0.0011601519072428346, 0.0007038709009066224, 0.0017375206807628274, 0.0005415831110440195, 0.0009006342734210193]}, "state": "available", "life": [{"dt": "Sun May 15 22:04:57 2016", "state": "available"}], "summary": "1d932579bcee208e5c6f4b4e3990d193"}