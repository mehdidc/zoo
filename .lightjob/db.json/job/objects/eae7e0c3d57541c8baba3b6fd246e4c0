{"content": {"hp_model": {"f0": 16, "f1": 64, "f2": 32, "f3": 32, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.802022099494934, 1.5467009544372559, 1.4164113998413086, 1.3183022737503052, 1.238810658454895, 1.1744749546051025, 1.1203768253326416, 1.0755279064178467, 1.0385843515396118, 1.0070399045944214, 0.9787991642951965, 0.9540754556655884, 0.9327230453491211, 0.9153470396995544, 0.8980982303619385, 0.8819828629493713, 0.8708744049072266, 0.8573085069656372, 0.8454208374023438, 0.8349802494049072, 0.8268393278121948, 0.8196754455566406, 0.8122738599777222, 0.8051096200942993, 0.798052966594696, 0.7937988638877869, 0.7897685766220093, 0.7850016951560974, 0.7800696492195129, 0.7756991982460022, 0.7731224894523621, 0.7685983777046204, 0.7663969397544861, 0.763927698135376, 0.7629316449165344, 0.7609214186668396, 0.7584044337272644, 0.7566260695457458, 0.7541294693946838, 0.7530474662780762, 0.7532824277877808, 0.7508269548416138, 0.7495448589324951, 0.7508968114852905, 0.7489051818847656, 0.7482409477233887, 0.7455557584762573, 0.745632529258728, 0.7476598024368286, 0.7445233464241028, 0.7455730438232422, 0.7435644865036011, 0.7447646260261536, 0.7426296472549438, 0.7431185841560364, 0.7435034513473511, 0.741298496723175, 0.7431866526603699, 0.7422428131103516, 0.7409830689430237, 0.7416461110115051, 0.7406534552574158, 0.7433696985244751, 0.7413527965545654, 0.7408121824264526, 0.7435470819473267, 0.7408919334411621, 0.7394680380821228, 0.7416349053382874, 0.7404116988182068, 0.7387198209762573, 0.7395650148391724, 0.7398961186408997, 0.7407451868057251, 0.7400798201560974, 0.7389804720878601, 0.7407565712928772, 0.7419468760490417, 0.7404834032058716, 0.7405892610549927, 0.7396763563156128, 0.7399274110794067, 0.742432713508606, 0.7404136657714844, 0.741567850112915, 0.740639328956604, 0.7381725311279297, 0.7383286356925964, 0.7400649189949036, 0.7405611872673035, 0.7417048215866089, 0.7407001256942749, 0.741240918636322, 0.7405643463134766, 0.7388002872467041, 0.7390849590301514, 0.7385808825492859, 0.7403416633605957, 0.7418091297149658, 0.7404788732528687, 0.7400811910629272, 0.739044189453125], "moving_avg_accuracy_train": [0.047630588235294105, 0.09739694117647056, 0.14714195294117643, 0.19534540470588233, 0.24110968776470587, 0.28452342487058824, 0.3257393176776471, 0.364513621204, 0.40074225908359995, 0.43429626846935765, 0.465937229857716, 0.49506115393076794, 0.5220703326553382, 0.5471032993898044, 0.5700917929802357, 0.5911932019175064, 0.6108691758434028, 0.6289140229649449, 0.6454861500802151, 0.6605681233074878, 0.6746007227414449, 0.687408885761418, 0.6990985854205704, 0.7097393151138074, 0.719457148308309, 0.7285302570068899, 0.7367407607179656, 0.7443113905285219, 0.7512520161815521, 0.7576091675045734, 0.7633564860482337, 0.7685784845022339, 0.773398283110834, 0.77782551362328, 0.7817464916727167, 0.7853741954466215, 0.7887214817843122, 0.7918093336058809, 0.7946048708335282, 0.7971726190442929, 0.799542415963393, 0.8016328802494067, 0.8035942981068189, 0.8054183977079017, 0.8070577344076998, 0.8085801962610474, 0.8099645295761191, 0.8112433707361542, 0.8124013866037152, 0.8134600714727555, 0.8144434760901857, 0.8153097167164614, 0.8162187450448152, 0.8168980470109218, 0.8175682423098296, 0.8181525945494349, 0.8186785115650796, 0.8191565427615128, 0.8195985355441852, 0.8200598584603549, 0.8204844608496136, 0.8208618971175934, 0.8212015897587752, 0.8215920190181918, 0.8218822288810785, 0.8221104765812061, 0.8224006053936737, 0.8225181919131298, 0.822732255074758, 0.8228802060378705, 0.8230039501399657, 0.8231600257142044, 0.823359317260431, 0.8234892678873291, 0.8235662234515374, 0.8236448952240307, 0.823647464525157, 0.8237038945432296, 0.8237499756771419, 0.8238149781094277, 0.823948774416132, 0.824010367562754, 0.8240775661005962, 0.8241239271375954, 0.8241609461885417, 0.82423661627557, 0.8242270722950717, 0.8242537768302705, 0.8242636932648905, 0.8242326180560484, 0.824216415073973, 0.8241406559195169, 0.8241689432687417, 0.8242226371771616, 0.8242474322829749, 0.8242226890546773, 0.8242310083845038, 0.8242549663695828, 0.8242812344385069, 0.824307228641715, 0.8243212116598964, 0.824345561082142], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.04695999999999999, 0.09503733333333331, 0.14344026666666662, 0.19089623999999997, 0.23592661599999995, 0.2787606210666666, 0.3194312256266666, 0.3573414363973333, 0.3922739594242666, 0.42464656348184, 0.45499524046698936, 0.48308238308695706, 0.5086541447782613, 0.5320553969671018, 0.553383190603725, 0.5734582048766858, 0.5920990510556838, 0.6090891459501155, 0.624700231355104, 0.6388702082195936, 0.651849854064301, 0.6637048686578709, 0.6745343817920839, 0.6843876102795422, 0.693188849251588, 0.7014166309930958, 0.7088616345604529, 0.7155221377710743, 0.7217699239939669, 0.7275129315945702, 0.7324949717684465, 0.7371788079249352, 0.741354260465775, 0.7452588344191975, 0.7487062843106111, 0.7519689892128834, 0.7549454236249283, 0.7576375479291021, 0.7599537931361919, 0.7621184138225727, 0.7641065724403155, 0.7658692485296174, 0.767575657009989, 0.7690980913089901, 0.7704949488447578, 0.771685453960282, 0.7728235752309205, 0.7739278843744952, 0.7747617626037124, 0.7756855863433413, 0.7765303610423405, 0.7773439916047732, 0.7780095924442959, 0.7784886331998664, 0.7790397698798798, 0.7794557928918917, 0.7798568802693693, 0.7802045255757657, 0.7804507396848559, 0.780832332383037, 0.7811624324780666, 0.7814195225635933, 0.7816242369739006, 0.7817684799431772, 0.7819249652821929, 0.782065802087307, 0.7822192218785763, 0.7822772996907187, 0.7823562363883134, 0.7824139460828154, 0.7825058848078672, 0.7826419629937471, 0.7826444333610392, 0.7826866566916019, 0.7827779910224417, 0.7828201919201975, 0.7828981727281777, 0.7829683554553599, 0.7829648532431572, 0.7829750345855082, 0.7829575311269574, 0.7830084446809283, 0.7830542668795022, 0.7830955068582187, 0.7831459561723968, 0.7832446938884905, 0.7832935578329747, 0.7832842020496772, 0.7832224485113761, 0.7831802036602385, 0.7831421832942147, 0.7831879649647933, 0.7832025018016473, 0.7832422516214825, 0.783224693126001, 0.7831155571467342, 0.7831240014320607, 0.7831449346221879, 0.7831504411599691, 0.7831687303773056, 0.7832251906729084, 0.7831826716056176], "moving_var_accuracy_train": [0.020418056420761242, 0.04066645974427681, 0.05887090952908566, 0.07389597343446805, 0.08535570252601435, 0.09378290539890091, 0.09969336323795748, 0.10325504643974544, 0.10474216961927159, 0.10440079657008004, 0.10297107085128829, 0.10030779034687551, 0.09684247293056997, 0.09279807044927299, 0.08827450094236142, 0.08345447598036658, 0.07859332393172293, 0.07366454010730905, 0.06876980467070022, 0.06394001745148371, 0.059318240328200385, 0.054862857654896215, 0.05060641359249726, 0.04656479838888837, 0.04275824508796495, 0.039223312292274826, 0.03590769240375364, 0.03283275308493464, 0.029983028336540683, 0.027348445859380732, 0.024910886307423375, 0.022665221087363262, 0.02060777310627411, 0.018723399125739698, 0.01698942583294321, 0.015408925361689717, 0.013968871757959168, 0.012657798042010941, 0.0114623534933303, 0.010375458121862243, 0.009388455746616007, 0.008488940540334293, 0.007674670926403246, 0.006937149887954957, 0.0062676217224972046, 0.005661720561101574, 0.005112795913536374, 0.0046162352345961374, 0.004166680717882233, 0.0037600999689614226, 0.0033927937338395302, 0.0030602677158590693, 0.002761677936788911, 0.0024896632035604277, 0.002244739338852488, 0.0020233386128266245, 0.001823494049910064, 0.001643201269341928, 0.0014806393609871444, 0.00133449079438528, 0.0012026642996474293, 0.0010836799929101653, 0.0009763505134334065, 0.0008800873771495432, 0.0007928366353152394, 0.0007140218448972366, 0.0006433772329579278, 0.0005791639489681553, 0.0005216599614058361, 0.00046969097065262553, 0.00042285968701259334, 0.00038079295457519956, 0.00034307111320125617, 0.0003089159863700114, 0.00027807768716277373, 0.00025032562167658155, 0.0002252931189206979, 0.00020279246615108508, 0.0001825323307741004, 0.000164317125542518, 0.00014804652605345558, 0.00013327601688950733, 0.00011998905599194983, 0.00010800949450451962, 9.722087874526437e-05, 8.755032452937561e-05, 7.879611186451179e-05, 7.092291886786222e-05, 6.383151200215616e-05, 5.745705181938171e-05, 5.171370946709676e-05, 4.6593993565742246e-05, 4.1941795776303506e-05, 3.777356352088585e-05, 3.400174034424788e-05, 3.060707635594233e-05, 2.7546991621586937e-05, 2.4797458324869664e-05, 2.23239225953877e-05, 2.0097611623252764e-05, 1.8089610184104652e-05, 1.6285985214967467e-05], "duration": 137852.469388, "accuracy_train": [0.4763058823529412, 0.5452941176470588, 0.5948470588235294, 0.6291764705882353, 0.6529882352941176, 0.6752470588235294, 0.6966823529411764, 0.7134823529411765, 0.7268, 0.7362823529411765, 0.7507058823529412, 0.7571764705882353, 0.7651529411764706, 0.7724, 0.7769882352941176, 0.7811058823529412, 0.7879529411764706, 0.7913176470588236, 0.7946352941176471, 0.7963058823529412, 0.8008941176470589, 0.8026823529411765, 0.8043058823529412, 0.8055058823529412, 0.8069176470588235, 0.8101882352941177, 0.810635294117647, 0.8124470588235294, 0.8137176470588235, 0.8148235294117647, 0.8150823529411765, 0.8155764705882353, 0.8167764705882353, 0.8176705882352941, 0.8170352941176471, 0.8180235294117647, 0.8188470588235294, 0.8196, 0.819764705882353, 0.8202823529411765, 0.8208705882352941, 0.8204470588235294, 0.8212470588235294, 0.8218352941176471, 0.8218117647058824, 0.8222823529411765, 0.8224235294117647, 0.8227529411764706, 0.8228235294117647, 0.8229882352941177, 0.8232941176470588, 0.8231058823529411, 0.8244, 0.8230117647058823, 0.8236, 0.8234117647058824, 0.8234117647058824, 0.8234588235294118, 0.8235764705882352, 0.8242117647058823, 0.8243058823529412, 0.8242588235294117, 0.8242588235294117, 0.8251058823529411, 0.8244941176470588, 0.8241647058823529, 0.8250117647058823, 0.8235764705882352, 0.8246588235294118, 0.8242117647058823, 0.8241176470588235, 0.824564705882353, 0.8251529411764705, 0.8246588235294118, 0.8242588235294117, 0.8243529411764706, 0.8236705882352942, 0.8242117647058823, 0.8241647058823529, 0.8244, 0.8251529411764705, 0.824564705882353, 0.8246823529411764, 0.8245411764705882, 0.8244941176470588, 0.8249176470588235, 0.8241411764705883, 0.8244941176470588, 0.8243529411764706, 0.8239529411764706, 0.8240705882352941, 0.8234588235294118, 0.8244235294117647, 0.8247058823529412, 0.8244705882352941, 0.824, 0.8243058823529412, 0.8244705882352941, 0.8245176470588236, 0.8245411764705882, 0.8244470588235294, 0.824564705882353], "end": "2016-02-08 13:13:48.326000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0], "moving_var_accuracy_valid": [0.019847174399999997, 0.038665326784000004, 0.055884389703039994, 0.0705645753778624, 0.08175773070438855, 0.09009472554441073, 0.09597213566745269, 0.09930957882679477, 0.10036115142936033, 0.09975690572764001, 0.09807059490761641, 0.09536352364184444, 0.09171240624163172, 0.08746973305351997, 0.08281663278082542, 0.07816202528527912, 0.07347315307317281, 0.06872380768655166, 0.06404478080559309, 0.059447396924095314, 0.055018898087972036, 0.05078188061829863, 0.04675919774898557, 0.04295705297872155, 0.039358503947836916, 0.03603192108452624, 0.03292758167913526, 0.03003408423839001, 0.027381989308733708, 0.024940629604565626, 0.02266995316275612, 0.020600402736747986, 0.01869727209836044, 0.016964756168344104, 0.015375244748293961, 0.013933527462978365, 0.01261990717296338, 0.011423144255089153, 0.010329114756314536, 0.009338373525126252, 0.008440111144817368, 0.007624063273297797, 0.006887863415084974, 0.006219937329329452, 0.005615504495173585, 0.005066709767527031, 0.0045716966710144455, 0.004125502492074243, 0.0037192104189772797, 0.0033549704297966667, 0.003025896185445623, 0.0027292645191301806, 0.002460325287515322, 0.0022163580791732668, 0.0019974560360164454, 0.001799268108733513, 0.0016207891376195077, 0.0014597979391890918, 0.0013143637377578178, 0.001184237880867782, 0.001066794787435651, 0.0009607101665007709, 0.0008650163217587812, 0.0007787019438905748, 0.0007010521384534588, 0.0006311254396591855, 0.000568224734384445, 0.0005114326182363697, 0.00046034543543277726, 0.00041434086556905515, 0.000372982853574627, 0.0003358512236712157, 0.0003022661562285251, 0.0002720555858924669, 0.0002449251049431298, 0.00022044862269075943, 0.00019845848947940275, 0.0001786569710682151, 0.0001607913843508064, 0.00014471317885331436, 0.0001302446183075341, 0.00011724348618658222, 0.00010553803463286326, 9.499953779217774e-05, 8.552249021266937e-05, 7.705798342061694e-05, 6.937367424419032e-05, 6.243709459590127e-05, 5.622770663174545e-05, 5.0620997615599653e-05, 4.557190778813298e-05, 4.103358066156833e-05, 3.6932124472042975e-05, 3.32531324584311e-05, 2.9930593919460182e-05, 2.7044730485248798e-05, 2.434089919031601e-05, 2.191075305732455e-05, 1.9719950649217118e-05, 1.7750966043532415e-05, 1.6004559323995137e-05, 1.4420374231345168e-05], "accuracy_test": 0.7798, "start": "2016-02-06 22:56:15.856000", "learning_rate_per_epoch": [0.0009667303529568017, 0.0008713550050742924, 0.0007853891584090889, 0.000707904517184943, 0.0006380642880685627, 0.0005751143326051533, 0.0005183749017305672, 0.00046723324339836836, 0.0004211371124256402, 0.00037958871689625084, 0.0003421393921598792, 0.00030838471138849854, 0.0002779602073132992, 0.0002505372976884246, 0.00022581986559089273, 0.0002035409997915849, 0.00018346011347603053, 0.0001653603685554117, 0.000149046303704381, 0.00013434173888526857, 0.00012108789815101773, 0.00010914164886344224, 9.837398829404265e-05, 8.866863936418667e-05, 7.992079918039963e-05, 7.203599670901895e-05, 6.492909597000107e-05, 5.8523342886473984e-05, 5.274956492939964e-05, 4.75454144179821e-05, 4.2854695493588224e-05, 3.862675293930806e-05, 3.481592648313381e-05, 3.1381066946778446e-05, 2.8285083317314275e-05, 2.549454256950412e-05, 2.297931132488884e-05, 2.0712226614705287e-05, 1.8668806660571136e-05, 1.682698530203197e-05, 1.5166874618444126e-05, 1.367054574075155e-05, 1.2321841495577246e-05, 1.1106197234767023e-05, 1.0010485311795492e-05, 9.022874110087287e-06, 8.132697985274717e-06, 7.330344942602096e-06, 6.607150226045633e-06, 5.955304004601203e-06, 5.367767698771786e-06, 4.838196218770463e-06, 4.360871116659837e-06, 3.930637831217609e-06, 3.5428502087597735e-06, 3.193320935679367e-06, 2.878275381590356e-06, 2.5943113541870844e-06, 2.3383627194561996e-06, 2.1076652956253383e-06, 1.8997279767063446e-06, 1.7123052202805411e-06, 1.5433731732628075e-06, 1.3911076166550629e-06, 1.2538641840365017e-06, 1.130160853790585e-06, 1.0186618055740837e-06, 9.181629820886883e-07, 8.27579185624927e-07, 7.459321409442055e-07, 6.723402066199924e-07, 6.060087116566137e-07, 5.462213152895856e-07, 4.92332389967487e-07, 4.437600296114397e-07, 3.9997971157390566e-07, 3.6051864071851014e-07, 3.249507187774725e-07, 2.9289182634784083e-07, 2.6399581543046224e-07, 2.3795060144493618e-07, 2.144749515764488e-07, 1.9331535838773561e-07, 1.7424331133497617e-07, 1.5705286671163776e-07, 1.4155840233343042e-07, 1.2759258538608265e-07, 1.15004596068502e-07, 1.0365850755533756e-07, 9.343180096266224e-08, 8.421403663305682e-08, 7.590567463466869e-08, 6.84169947362534e-08, 6.166713717448147e-08, 5.55832002646639e-08, 5.0099490778166e-08, 4.515679208338952e-08, 4.070172821002416e-08, 3.668619186214528e-08, 3.3066818616589444e-08, 2.980452507017617e-08, 2.6864080737709628e-08], "accuracy_train_first": 0.4763058823529412, "accuracy_train_last": 0.824564705882353, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.5304, 0.4722666666666666, 0.4209333333333334, 0.382, 0.3588, 0.33573333333333333, 0.31453333333333333, 0.30146666666666666, 0.29333333333333333, 0.28400000000000003, 0.2718666666666667, 0.26413333333333333, 0.2612, 0.2573333333333333, 0.2546666666666667, 0.24586666666666668, 0.2401333333333333, 0.238, 0.2348, 0.23360000000000003, 0.23133333333333328, 0.22960000000000003, 0.22799999999999998, 0.22693333333333332, 0.22760000000000002, 0.22453333333333336, 0.2241333333333333, 0.22453333333333336, 0.22199999999999998, 0.2208, 0.22266666666666668, 0.22066666666666668, 0.22106666666666663, 0.21960000000000002, 0.22026666666666672, 0.21866666666666668, 0.21826666666666672, 0.2181333333333333, 0.21919999999999995, 0.21840000000000004, 0.21799999999999997, 0.21826666666666672, 0.21706666666666663, 0.21719999999999995, 0.2169333333333333, 0.21760000000000002, 0.2169333333333333, 0.2161333333333333, 0.21773333333333333, 0.21599999999999997, 0.21586666666666665, 0.21533333333333338, 0.21599999999999997, 0.21719999999999995, 0.21599999999999997, 0.2168, 0.21653333333333336, 0.21666666666666667, 0.21733333333333338, 0.21573333333333333, 0.21586666666666665, 0.21626666666666672, 0.21653333333333336, 0.2169333333333333, 0.21666666666666667, 0.21666666666666667, 0.21640000000000004, 0.21719999999999995, 0.2169333333333333, 0.21706666666666663, 0.21666666666666667, 0.2161333333333333, 0.21733333333333338, 0.2169333333333333, 0.21640000000000004, 0.2168, 0.21640000000000004, 0.21640000000000004, 0.21706666666666663, 0.2169333333333333, 0.21719999999999995, 0.21653333333333336, 0.21653333333333336, 0.21653333333333336, 0.21640000000000004, 0.21586666666666665, 0.21626666666666672, 0.2168, 0.21733333333333338, 0.21719999999999995, 0.21719999999999995, 0.21640000000000004, 0.21666666666666667, 0.21640000000000004, 0.2169333333333333, 0.21786666666666665, 0.2168, 0.21666666666666667, 0.2168, 0.21666666666666667, 0.21626666666666672, 0.21719999999999995], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.09865766660245445, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.0010725451873862956, "optimization": "nesterov_momentum", "nb_data_augmentation": 3, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 2.079718598267674e-05, "rotation_range": [0, 0], "momentum": 0.7654865460014593}, "accuracy_valid_max": 0.7846666666666666, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7828, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.4696, 0.5277333333333334, 0.5790666666666666, 0.618, 0.6412, 0.6642666666666667, 0.6854666666666667, 0.6985333333333333, 0.7066666666666667, 0.716, 0.7281333333333333, 0.7358666666666667, 0.7388, 0.7426666666666667, 0.7453333333333333, 0.7541333333333333, 0.7598666666666667, 0.762, 0.7652, 0.7664, 0.7686666666666667, 0.7704, 0.772, 0.7730666666666667, 0.7724, 0.7754666666666666, 0.7758666666666667, 0.7754666666666666, 0.778, 0.7792, 0.7773333333333333, 0.7793333333333333, 0.7789333333333334, 0.7804, 0.7797333333333333, 0.7813333333333333, 0.7817333333333333, 0.7818666666666667, 0.7808, 0.7816, 0.782, 0.7817333333333333, 0.7829333333333334, 0.7828, 0.7830666666666667, 0.7824, 0.7830666666666667, 0.7838666666666667, 0.7822666666666667, 0.784, 0.7841333333333333, 0.7846666666666666, 0.784, 0.7828, 0.784, 0.7832, 0.7834666666666666, 0.7833333333333333, 0.7826666666666666, 0.7842666666666667, 0.7841333333333333, 0.7837333333333333, 0.7834666666666666, 0.7830666666666667, 0.7833333333333333, 0.7833333333333333, 0.7836, 0.7828, 0.7830666666666667, 0.7829333333333334, 0.7833333333333333, 0.7838666666666667, 0.7826666666666666, 0.7830666666666667, 0.7836, 0.7832, 0.7836, 0.7836, 0.7829333333333334, 0.7830666666666667, 0.7828, 0.7834666666666666, 0.7834666666666666, 0.7834666666666666, 0.7836, 0.7841333333333333, 0.7837333333333333, 0.7832, 0.7826666666666666, 0.7828, 0.7828, 0.7836, 0.7833333333333333, 0.7836, 0.7830666666666667, 0.7821333333333333, 0.7832, 0.7833333333333333, 0.7832, 0.7833333333333333, 0.7837333333333333, 0.7828], "seed": 375750311, "model": "residualv3", "loss_std": [0.2748512923717499, 0.23785358667373657, 0.24430307745933533, 0.24588924646377563, 0.24642212688922882, 0.24690285325050354, 0.2440659999847412, 0.24317187070846558, 0.24272027611732483, 0.239348903298378, 0.23864981532096863, 0.23708023130893707, 0.2353755235671997, 0.23423676192760468, 0.23236402869224548, 0.23126102983951569, 0.23288394510746002, 0.22974757850170135, 0.2270783632993698, 0.22697868943214417, 0.22648978233337402, 0.2257278859615326, 0.22593995928764343, 0.2255161553621292, 0.22259877622127533, 0.22312884032726288, 0.22324977815151215, 0.2200566530227661, 0.21950332820415497, 0.22166630625724792, 0.22041034698486328, 0.21985404193401337, 0.2189679890871048, 0.21791362762451172, 0.2182196080684662, 0.21839632093906403, 0.21849559247493744, 0.21955084800720215, 0.2176325023174286, 0.2161964327096939, 0.2183094173669815, 0.2173130214214325, 0.21674077212810516, 0.21676543354988098, 0.21684867143630981, 0.21731309592723846, 0.21719570457935333, 0.21584650874137878, 0.21549303829669952, 0.21534204483032227, 0.21830280125141144, 0.21631655097007751, 0.2169923633337021, 0.21521218121051788, 0.2153296172618866, 0.21547552943229675, 0.2153635025024414, 0.21599479019641876, 0.2161637544631958, 0.21409444510936737, 0.217202290892601, 0.2154414802789688, 0.21458052098751068, 0.21511127054691315, 0.21644002199172974, 0.2138700783252716, 0.21624793112277985, 0.21549706161022186, 0.21460968255996704, 0.21459606289863586, 0.21369019150733948, 0.2174789160490036, 0.21475401520729065, 0.21525651216506958, 0.2147441953420639, 0.2145732343196869, 0.21711687743663788, 0.21592436730861664, 0.2153385728597641, 0.21592634916305542, 0.21391190588474274, 0.21354641020298004, 0.21436038613319397, 0.21669533848762512, 0.2144119292497635, 0.2151278704404831, 0.2142457664012909, 0.21474911272525787, 0.2156272530555725, 0.2141001969575882, 0.21563874185085297, 0.21602268517017365, 0.21475470066070557, 0.21564629673957825, 0.21474556624889374, 0.21423199772834778, 0.21509206295013428, 0.21481549739837646, 0.21592463552951813, 0.21655309200286865, 0.21464714407920837, 0.21452632546424866]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:45 2016", "state": "available"}], "summary": "8d6566fb3fcfb7f9ee6dce4de0accb13"}