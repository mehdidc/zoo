{"content": {"hp_model": {"f0": 64, "f1": 64, "f2": 32, "f3": 64, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.01036567438102231, 0.015400231291166112, 0.015868919469242054, 0.019676716891999686, 0.019580467077365996, 0.022158703989594564, 0.020026969290308182, 0.02095631224011224, 0.01556487461429866, 0.014894734748966746, 0.008817073402757817, 0.011080877354388091, 0.013311789000663349, 0.016353282568829793, 0.01272908194724473, 0.013948695325729857, 0.014385663928375229, 0.01400864075454482, 0.017138087822545764, 0.016998489393641354, 0.02324836870341966, 0.015310292468931681, 0.01295336414092968, 0.010207966006666028, 0.011228799035249362, 0.012930118550683224, 0.011682402324598641, 0.011465848401770175, 0.012134851386132276, 0.013363349612931352, 0.013542787665631726, 0.020233447613566543, 0.012046273420453262, 0.013637468262983227, 0.010523181397457046, 0.016904546266422966, 0.009339606660514872, 0.015369317054278051, 0.013257863875829076, 0.016082469559999698, 0.008601994312061403, 0.013211388731132388, 0.012274836488232084, 0.013526597282213839, 0.015394937692162176, 0.015265719891436583, 0.00866565525300265, 0.01891652056149505, 0.022695683794141743, 0.00742010851887623, 0.013433722505636354, 0.01217051741444295, 0.016214676413766622, 0.014337219175122186, 0.013093992994673797, 0.01741467529940043, 0.009775107358513368, 0.02202421157840532, 0.016016785567326348, 0.010760103182806085, 0.015158182828724302, 0.01747882142041184, 0.013236100645321798, 0.014523473839900516, 0.011686205590220905, 0.015153510972917261, 0.016163992264395674, 0.015485356885369424, 0.014643475688957339, 0.016291904288279552, 0.017970967295168245, 0.022900566042683812, 0.013624943514822822, 0.018239915173913813, 0.013105476063755556, 0.01669412486055976, 0.01434663149624385, 0.01435809498517389, 0.019134760397187856, 0.016602227427638415, 0.012983315612408192, 0.01751158446567766, 0.01270211874961961, 0.017856361624051256, 0.012945243463405547, 0.018285190943096993, 0.016537953862296298, 0.01642919197713141, 0.019392934325822432, 0.011899171578415375, 0.010291672999142625, 0.012770758838997524, 0.01758785571893096, 0.019032789470984465, 0.01097553700428278, 0.012065471473123117, 0.009989352037052729, 0.00874700370391842, 0.01335533885943188, 0.01191555244712774, 0.010824155625528005, 0.014794518342196467, 0.013332523841287686, 0.005017635696244585, 0.009599968143473405, 0.007510291124966031, 0.009679603328567524, 0.009358089832037455, 0.011573543070238194, 0.019608736430257553, 0.012788840198568916, 0.013677221397159862, 0.01116506391395088, 0.013486846677470353, 0.0111494797455934, 0.015094627912674519, 0.014479937849363711, 0.014809443564424813, 0.006020852265313492, 0.012709721261029497, 0.012499281363111006, 0.017708796759638372, 0.023670528743310038, 0.015605764333607722, 0.01606668731941952, 0.019625678055575847, 0.02351863378302127, 0.012109582474712393, 0.017393820759120354, 0.010805234068875739, 0.018587072812512033, 0.019201741442622856, 0.014101859061968869, 0.011597538962920446, 0.013665225290189584, 0.01627621422510646, 0.016875350621985384, 0.01638274262504456, 0.014045877547892825, 0.016637892744737932, 0.02038025442139897, 0.01497028527139137, 0.019500692958293143, 0.012720137153996114, 0.017190023224016474, 0.012335126683558685, 0.0147602666544031, 0.015692618897860597, 0.01898308133036088, 0.01733994630649621, 0.018959613020423084, 0.0169086638985083, 0.014867273010601288, 0.014275022637677316, 0.014240341288782935, 0.021386634826500554, 0.01597665192079262, 0.015221009968850159, 0.010478751042989455, 0.0140212349634703, 0.015977583155683456, 0.021794480925073936, 0.016267856934517808, 0.016528559588161615, 0.020036291674037435, 0.0198818349215009, 0.017516855088370233, 0.01632831699697121, 0.01943971929340982, 0.015856408688683585, 0.016354077223352123, 0.01446767252980692, 0.016013069489585672, 0.016552008911431288, 0.0165427841010275, 0.015007801492993831, 0.014057608143177785, 0.01074898283022148, 0.013279405180261349, 0.01419135473498609, 0.01600092177808023, 0.01439869849633726, 0.017891431548142312, 0.014997609370971382, 0.019193403458381556], "moving_avg_accuracy_train": [0.052069869099529334, 0.10705036849102527, 0.16352313450967837, 0.2188747874381402, 0.27049541030585256, 0.31946942141051093, 0.36573105845573706, 0.40863319716534974, 0.44735218699569557, 0.4815499845440496, 0.5090949099545394, 0.5413034507224206, 0.5653836494970778, 0.5872139385133168, 0.6088017966634155, 0.634836112082899, 0.6568093799985939, 0.6749001289680958, 0.6926975477227258, 0.7119976497933842, 0.7280286361867847, 0.7423244230445274, 0.7584964520913574, 0.7730981416978824, 0.7824498500283248, 0.7967344502910423, 0.806684334759677, 0.8154203784028031, 0.8236761643674324, 0.8340752983748106, 0.8422115988540978, 0.8481974168664362, 0.857388272090553, 0.8624236869911324, 0.871349767212285, 0.8772488609506356, 0.8836044704258932, 0.8862091800370506, 0.8901295451405806, 0.8930955482100406, 0.8987104458795774, 0.9037288684035614, 0.9036471695015589, 0.9087718441050205, 0.9133607276624033, 0.9166190444022075, 0.9205999192393954, 0.9245037573726725, 0.9271312218497372, 0.9297517783457804, 0.9327773445588214, 0.9351749775125, 0.9365380428149599, 0.9384064345121461, 0.9380929733122235, 0.939838099603648, 0.9415226816064153, 0.9432829099850872, 0.9451763242687399, 0.9447208025146234, 0.9464496814501304, 0.9464387384873802, 0.9477749346887069, 0.9503258812865121, 0.9517175026793633, 0.9535440573959691, 0.9552042687314, 0.9562381155178207, 0.9556364127065794, 0.9558318081538062, 0.9558752387206237, 0.9552771994081313, 0.9569105088197083, 0.9583991605782414, 0.9596134612228443, 0.9595949467208533, 0.9562143340739618, 0.9577447736189928, 0.9577363444702257, 0.9576963142994582, 0.959543477437388, 0.9610711016793911, 0.9602932722365812, 0.9588744303165407, 0.9604480329313428, 0.9613599703347294, 0.9624897424965314, 0.9626602193243053, 0.9632064544228365, 0.9639027512043901, 0.9650408428994273, 0.9662512094273601, 0.9659550750513922, 0.966378943065356, 0.9665510887874287, 0.9669384266717903, 0.967366157924877, 0.9674768566395875, 0.9681390272994567, 0.9684699139290533, 0.9684539970504984, 0.9684883918383427, 0.9682753507176775, 0.9693112562316886, 0.9681509733145459, 0.9690433513545383, 0.9696418784952934, 0.970575828219592, 0.9713582903000414, 0.9713998748105503, 0.9700467897842757, 0.9688569871439803, 0.9696369832200954, 0.9709131832980951, 0.9715827827135329, 0.971571691048169, 0.9724684084385994, 0.9718084293864523, 0.9706588818693186, 0.9700544416336603, 0.9701428498489395, 0.9709638873711977, 0.9715891051424758, 0.9725306561973035, 0.9732594335085439, 0.9741361861767464, 0.9744463910698229, 0.9752184709723921, 0.9753017926989809, 0.9752117687850721, 0.9745005958863545, 0.9746742702632045, 0.9754514279833312, 0.9755278742457677, 0.9765080981664752, 0.9749260024452042, 0.9752106680852353, 0.9748393293244231, 0.9752953866443802, 0.9761034747275888, 0.97598439983581, 0.975549422499885, 0.9761320721022866, 0.976516911767058, 0.9775189594296378, 0.9776978612902917, 0.9780425236720136, 0.9786387131191349, 0.9788055128631923, 0.9788207379530728, 0.9786159846923262, 0.977085589792215, 0.977447265447545, 0.9774727572432759, 0.9778724821130328, 0.9782810265719953, 0.9777560757351169, 0.97686255175449, 0.9768397383183821, 0.9771378597592459, 0.9771617760892921, 0.9765206694244383, 0.9771575452999163, 0.9769401469437895, 0.9762119211994382, 0.9767795102545128, 0.9756816258184395, 0.9752073156152408, 0.9752245759037997, 0.9756398194658285, 0.9762437284037971, 0.9766361838729873, 0.9769754068535826, 0.9769320794099648, 0.9770533397344723, 0.9756930881253661, 0.9766335391700186, 0.9771706642697203, 0.9778981453868144, 0.977785615333875, 0.9774611240005151, 0.977629461264777, 0.9772090502931073, 0.9770493525531562, 0.9770869140967053], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 9875248, "moving_var_accuracy_train": [0.02440144141237908, 0.04916699509118574, 0.07295285529824502, 0.09323181910563659, 0.10789083554232823, 0.11868783586120822, 0.12608030383402552, 0.1300376150033526, 0.13052629506435912, 0.1279990697723471, 0.12202766903793742, 0.11916141301971009, 0.11246397547498209, 0.10550663159427663, 0.09915028901042802, 0.09533533032363561, 0.09014721781732625, 0.08407797282009147, 0.07852090856703124, 0.07402126316976862, 0.06893206957550031, 0.06387818831488837, 0.05984418019482316, 0.05577864622962855, 0.0509878716449447, 0.04772553272244091, 0.04384398125864944, 0.04014644925959593, 0.03674522635068026, 0.034043981608542925, 0.031235377917091862, 0.028434310280874196, 0.026351125630542857, 0.02394421169647735, 0.02226686469985967, 0.02035337199227834, 0.018681578739268363, 0.01687448147476763, 0.015325356690195656, 0.013871995589048497, 0.012768539712697969, 0.011718346823091237, 0.010546572213177409, 0.009728275599981955, 0.008944968710712722, 0.008146021491433453, 0.007474045622514309, 0.0068638006298003375, 0.006239552693024431, 0.005677403270862579, 0.005192049401961779, 0.0047245822557906905, 0.004268845553380552, 0.0038733789858495246, 0.0034869254085792846, 0.0031656420596785414, 0.002874618202427117, 0.0026150420176901416, 0.002385802974766985, 0.002149090177906547, 0.0019610823614786515, 0.0017649752030666902, 0.0016045464653559774, 0.0015026577757240652, 0.0013698214890610289, 0.0012628660593497249, 0.0011613861685193876, 0.0010548671042675812, 0.0009526388102983239, 0.0008577185436956645, 0.000771963665253305, 0.0006979861579015521, 0.0006521968388169126, 0.0006069219114588733, 0.0005595004548123345, 0.0005035534944121568, 0.0005560550217858482, 0.0005215297264162133, 0.0004693773932295324, 0.0004224540756377243, 0.000410916772997091, 0.00039082781812018407, 0.00035719020408708356, 0.0003395891952249544, 0.00032791630240626955, 0.0003026093406149015, 0.00028383587279165765, 0.0002557138466517627, 0.00023282781703239173, 0.0002139084982011692, 0.00020417492273786566, 0.0001969423146515416, 0.0001780373433040562, 0.000161850585813005, 0.00014593223457835602, 0.00013268928685047592, 0.0001210669443892328, 0.00010907053779925661, 0.00010210971386445588, 9.288411613282248e-05, 8.359798464274664e-05, 7.524883319134962e-05, 6.813242854406318e-05, 7.097708779528521e-05, 7.599568704607401e-05, 7.55631654378133e-05, 7.123096153801629e-05, 7.195822417187231e-05, 7.027262392075654e-05, 6.326092497230933e-05, 7.341238427003697e-05, 7.881181874871863e-05, 7.640618178264112e-05, 8.342374335615475e-05, 7.911663941493122e-05, 7.120608269880303e-05, 7.132239313362588e-05, 6.81103049637204e-05, 7.319240991468065e-05, 6.91613009095569e-05, 6.231551493136094e-05, 6.215088695482689e-05, 5.945387361304268e-05, 6.148715175136325e-05, 6.0118483900637255e-05, 6.1024892681374625e-05, 5.5788447094434996e-05, 5.5574568768553035e-05, 5.0079594482793334e-05, 4.514457378019312e-05, 4.5182018429007576e-05, 4.093528168867482e-05, 4.2277520617378305e-05, 3.810236483500513e-05, 4.293967876404866e-05, 6.117295272901997e-05, 5.578496819564672e-05, 5.144750365361593e-05, 4.817464780003243e-05, 4.9234240172044636e-05, 4.443842562350939e-05, 4.169743060607443e-05, 4.058301257807661e-05, 3.785762542850078e-05, 4.310875854838749e-05, 3.908593557525723e-05, 3.624647143410031e-05, 3.5820801002419245e-05, 3.248912029373571e-05, 2.9242294494618953e-05, 2.669538012523416e-05, 4.510481906528705e-05, 4.17716206756838e-05, 3.76003070929617e-05, 3.5278296127185405e-05, 3.325264368900751e-05, 3.240753975036065e-05, 3.635225171092203e-05, 3.272171061563327e-05, 3.0249427095594796e-05, 2.722963230362125e-05, 2.820582887474007e-05, 2.9035743914157996e-05, 2.6557527929961628e-05, 2.8674589749589015e-05, 2.8706546793594797e-05, 3.668404422898308e-05, 3.504037132581019e-05, 3.153901545127942e-05, 2.9936958848407756e-05, 3.0225617011792827e-05, 2.858924696828958e-05, 2.6765972346536396e-05, 2.4106270518216805e-05, 2.182798006309188e-05, 3.629774201746511e-05, 4.0628001322208495e-05, 3.9161731544553985e-05, 4.000861737165411e-05, 3.612172274981973e-05, 3.345720210366839e-05, 3.0366518804154168e-05, 2.892057538964071e-05, 2.6258048163986276e-05, 2.3644941173571894e-05], "duration": 90551.526154, "accuracy_train": [0.5206986909952934, 0.6018748630144888, 0.6717780286775563, 0.7170396637942967, 0.7350810161152639, 0.7602355213524363, 0.7820857918627722, 0.7947524455518641, 0.7958230954688077, 0.7893301624792359, 0.7569992386489479, 0.8311803176333518, 0.7821054384689923, 0.7836865396594684, 0.8030925200143041, 0.8691449508582503, 0.8545687912398486, 0.8377168696936139, 0.8528743165143964, 0.8856985684293098, 0.8723075137273901, 0.8709865047642118, 0.9040447135128276, 0.9045133481566077, 0.866615225002307, 0.9252958526555003, 0.8962332949773901, 0.8940447711909376, 0.8979782380490956, 0.9276675044412146, 0.9154383031676817, 0.9020697789774824, 0.9401059691076044, 0.9077424210963455, 0.9516844892026578, 0.9303407045957919, 0.9408049557032114, 0.9096515665374677, 0.9254128310723514, 0.9197895758351791, 0.949244524905408, 0.9488946711194168, 0.9029118793835363, 0.9548939155361758, 0.9546606796788483, 0.9459438950604466, 0.9564277927740864, 0.9596383005721669, 0.9507784021433187, 0.9533367868101699, 0.9600074404761905, 0.9567536740956073, 0.9488056305370985, 0.9552219597868217, 0.9352718225129198, 0.9555442362264673, 0.9566839196313216, 0.9591249653931341, 0.9622170528216132, 0.9406211067275747, 0.9620095918696937, 0.9463402518226283, 0.959800700500646, 0.9732844006667589, 0.9642420952150241, 0.9699830498454227, 0.9701461707502769, 0.9655427365956073, 0.950221087405408, 0.9575903671788483, 0.9562661138219823, 0.9498948455956996, 0.9716102935239018, 0.9717970264050388, 0.970542167024271, 0.9594283162029347, 0.925788820251938, 0.971518729524271, 0.9576604821313216, 0.9573360427625508, 0.976167945678756, 0.9748197198574198, 0.953292807251292, 0.9461048530361758, 0.9746104564645626, 0.9695674069652085, 0.9726576919527501, 0.964194510774271, 0.9681225703096161, 0.9701694222383721, 0.9752836681547619, 0.977144508178756, 0.9632898656676817, 0.97019375519103, 0.9681004002860835, 0.9704244676310447, 0.9712157392026578, 0.9684731450719823, 0.9740985632382798, 0.9714478935954227, 0.9683107451435032, 0.9687979449289406, 0.9663579806316908, 0.9786344058577889, 0.9577084270602622, 0.9770747537144703, 0.9750286227620893, 0.9789813757382798, 0.9784004490240864, 0.9717741354051311, 0.9578690245478036, 0.9581487633813216, 0.9766569479051311, 0.9823989840000923, 0.9776091774524732, 0.971471866059893, 0.9805388649524732, 0.9658686179171282, 0.9603129542151162, 0.9646144795127353, 0.9709385237864526, 0.9783532250715209, 0.9772160650839794, 0.981004615690753, 0.9798184293097084, 0.9820269601905685, 0.9772382351075121, 0.982167190095515, 0.9760516882382798, 0.974401553559893, 0.9681000397978959, 0.9762373396548542, 0.9824458474644703, 0.9762158906076966, 0.9853301134528424, 0.9606871409537652, 0.977772658845515, 0.9714972804771133, 0.9793999025239941, 0.9833762674764673, 0.9749127258098007, 0.9716346264765596, 0.9813759185239018, 0.97998046875, 0.9865373883928571, 0.9793079780361758, 0.9811444851075121, 0.9840044181432264, 0.9803067105597084, 0.9789577637619971, 0.9767732053456073, 0.9633120356912146, 0.980702346345515, 0.9777021834048542, 0.9814700059408453, 0.9819579267026578, 0.9730315182032114, 0.9688208359288483, 0.976634417393411, 0.979820952727021, 0.9773770230597084, 0.970750709440753, 0.9828894281792175, 0.974983561738649, 0.9696578895002769, 0.9818878117501846, 0.9658006658937799, 0.9709385237864526, 0.9753799185008305, 0.9793770115240864, 0.981678908845515, 0.9801682830956996, 0.9800284136789406, 0.9765421324174051, 0.9781446826550388, 0.963450823643411, 0.98509759857189, 0.9820047901670359, 0.9844454754406607, 0.9767728448574198, 0.9745407020002769, 0.9791444966431341, 0.9734253515480805, 0.9756120728935955, 0.977424967988649], "end": "2016-01-24 11:51:17.478000", "learning_rate_per_epoch": [0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848, 0.0012417812831699848], "accuracy_valid": [0.5088508330195783, 0.5851991952183735, 0.6463181828878012, 0.6927887330572289, 0.7035721009036144, 0.7130126953125, 0.7262065841490963, 0.7294921875, 0.7211193406438253, 0.7144451830760542, 0.6868264071912651, 0.7386268707643072, 0.6983627870858433, 0.6966229174510542, 0.7082710725715362, 0.7507221267884037, 0.73583984375, 0.7290127306099398, 0.7370002470820783, 0.7548636930534638, 0.7462584713855422, 0.7419639495481928, 0.7721476727221386, 0.7645175428275602, 0.7334793274661144, 0.7770407803087349, 0.7595023649284638, 0.7463584807981928, 0.7641204466302711, 0.7774569959525602, 0.7646499082266567, 0.7589640789721386, 0.7819235928087349, 0.7634086149284638, 0.7895728421498494, 0.7696959713855422, 0.7740081419427711, 0.7529208631400602, 0.7588611281061747, 0.7591052687311747, 0.7795836666980422, 0.7848841655685241, 0.7565726774284638, 0.7870505459337349, 0.7967558711408133, 0.774425828313253, 0.7867858151355422, 0.7871123164533133, 0.7933084878576807, 0.7867446347891567, 0.7871726162462349, 0.7864607845444277, 0.7832869564194277, 0.7823206890060241, 0.767589890813253, 0.7840708537274097, 0.7839370176016567, 0.7897478586219879, 0.789940523814006, 0.7675487104668675, 0.7860533932605422, 0.7789130153426205, 0.7825442394578314, 0.7985972209149097, 0.7856974774096386, 0.7906317653426205, 0.7938158885542168, 0.7906626506024097, 0.7819544780685241, 0.7842944041792168, 0.787010836314006, 0.7744272990399097, 0.7968779414533133, 0.7977942041603916, 0.7923407497176205, 0.7831751811935241, 0.7606009977409638, 0.7978442088667168, 0.7879976939006024, 0.7807837796498494, 0.7987089961408133, 0.791405367564006, 0.7798586925828314, 0.7708151943712349, 0.7986575207078314, 0.8013239481362951, 0.791649508189006, 0.7820559582078314, 0.7925245905496988, 0.7899802334337349, 0.7910994564194277, 0.8016489787274097, 0.7823103939194277, 0.7855048122176205, 0.7827780849962349, 0.7861857586596386, 0.7935408626694277, 0.7924319347703314, 0.7880374035203314, 0.7914553722703314, 0.7895228374435241, 0.7863387142319277, 0.7893095820783133, 0.7980368740587349, 0.7774672910391567, 0.7964293698230422, 0.7907126553087349, 0.7957484233810241, 0.7973250423569277, 0.7928908014871988, 0.7772128553275602, 0.7861048686935241, 0.7955145778426205, 0.8028696818524097, 0.7936835231551205, 0.7954130977033133, 0.800804781626506, 0.7851488963667168, 0.7743743528802711, 0.7811911709337349, 0.7896346126694277, 0.7942438700112951, 0.7942953454442772, 0.7933481974774097, 0.7934599727033133, 0.7949865869728916, 0.8001444253576807, 0.7969897166792168, 0.7987604715737951, 0.7908450207078314, 0.7881300592996988, 0.7965632059487951, 0.7951792521649097, 0.7923201595444277, 0.8081598856362951, 0.7759524425828314, 0.8005709360881024, 0.789086031626506, 0.7933481974774097, 0.8031755929969879, 0.7904493952371988, 0.796654391001506, 0.7986178110881024, 0.7870402508471386, 0.8024328760353916, 0.7903758589043675, 0.8024225809487951, 0.8040094950112951, 0.7961969950112951, 0.7947321512612951, 0.7897066782756024, 0.7823206890060241, 0.7957793086408133, 0.7911303416792168, 0.7966646860881024, 0.7999002847326807, 0.791893648814006, 0.7835619823042168, 0.7903773296310241, 0.7962675898908133, 0.7924834102033133, 0.7823824595256024, 0.7956984186746988, 0.7876005977033133, 0.7915583231362951, 0.7985472162085843, 0.7841208584337349, 0.7813544215926205, 0.7910700418862951, 0.7958910838667168, 0.796044039439006, 0.7871726162462349, 0.7975191782756024, 0.7896654979292168, 0.7956881235881024, 0.7815779720444277, 0.8049242869917168, 0.7991663921310241, 0.801903414439006, 0.7985972209149097, 0.7874476421310241, 0.7970103068524097, 0.7838767178087349, 0.792870211314006, 0.7952307275978916], "accuracy_test": 0.569888178913738, "start": "2016-01-23 10:42:05.952000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0], "accuracy_train_last": 0.977424967988649, "batch_size_eval": 1024, "accuracy_train_std": [0.02409196359936391, 0.024270523099152893, 0.02558076496669396, 0.027897177440633133, 0.0258140554275897, 0.02373038868179283, 0.026672877851511664, 0.02964725470941994, 0.03040701822020473, 0.033480164711472735, 0.030676276163037895, 0.0309616657221709, 0.03128679123376248, 0.02908455620825861, 0.03446496981523591, 0.03038236004239383, 0.029094751548402124, 0.02846357462028251, 0.026564703082708693, 0.026336592257904093, 0.027888018492223714, 0.023475354626067334, 0.023124621457970583, 0.02017460299161213, 0.0246719056296497, 0.02000195605462287, 0.02190020521521614, 0.024242223182730862, 0.02034802439591784, 0.01853461063276228, 0.01905231470200862, 0.02060060699794675, 0.0176344183350473, 0.019807577030946124, 0.014591377737712172, 0.017396588472750534, 0.01398047484387095, 0.017504783711274993, 0.015678250131612264, 0.01603762212085745, 0.014187975052085347, 0.013570886014294131, 0.015296145755109904, 0.012748939668813568, 0.013127973071397642, 0.013990875606190202, 0.011789742011776573, 0.010062941277202671, 0.013817574075139354, 0.012017611707549343, 0.012711314428887194, 0.01185272243560276, 0.010871167476480322, 0.008977333024946877, 0.01405004931143679, 0.013081281980533021, 0.013046520675023474, 0.011159459160843231, 0.010996144626889944, 0.012859567103339131, 0.010879796438837352, 0.012659145290448147, 0.01056501007122354, 0.008833424645401992, 0.009706193062961421, 0.008676970714299305, 0.008207350064199325, 0.00996353523873645, 0.012298313398558858, 0.010261952042977338, 0.011536336377492136, 0.012783883807058612, 0.008383967709856796, 0.00728385974638001, 0.008509427255618016, 0.008937535660488731, 0.010440156534120065, 0.009585876888344518, 0.01098468178962918, 0.010766924107612489, 0.007149905810588944, 0.007493417169986024, 0.009225789192303258, 0.01337933761078967, 0.0074248459714527, 0.008252523152469934, 0.008014054473421826, 0.008299377242567069, 0.009336012967194465, 0.009665937405407502, 0.007247045354120128, 0.007121167557299641, 0.007895570069201857, 0.00790485963622901, 0.009205964292131009, 0.007978508424193682, 0.0075051470669430555, 0.008151524272455996, 0.007944891130568208, 0.007634911252339092, 0.007465346413533736, 0.008586347758111451, 0.00843980588016384, 0.005905938753112381, 0.00906850238756003, 0.006680859752856109, 0.007185132153380557, 0.006761734339866235, 0.006135576730778345, 0.0070133617716692425, 0.009612796022067799, 0.009781272315984786, 0.0065951898331082885, 0.006367252560031033, 0.007328766719301272, 0.009388295282534962, 0.005640887623043595, 0.008842866088963666, 0.008332834865238524, 0.006926234113051064, 0.006608006261640041, 0.007113407879110276, 0.005885225309788352, 0.005275457103527624, 0.0070844750811621384, 0.0066790632789478265, 0.005534289363718713, 0.006104700037137503, 0.007694995475737419, 0.007222499132769192, 0.00838422593440733, 0.006954531171883536, 0.006124348503955046, 0.0055241696015407874, 0.004020152003948939, 0.007628603209957582, 0.00648335452674141, 0.006804891727025553, 0.005971992815829306, 0.004388077511798219, 0.007036947494418715, 0.007937235306314743, 0.005270412422277949, 0.006024648566663039, 0.004791442901973783, 0.004934199959413789, 0.0061216391572109, 0.005125453769890824, 0.006817372310687935, 0.006621673853114949, 0.006727173892129486, 0.007409216288118791, 0.00552612380909404, 0.006876473475857383, 0.005512629991279864, 0.004677702041626367, 0.006830301928873607, 0.007162303453248947, 0.006444420128342666, 0.005228848391655063, 0.006309125888634521, 0.0081261096828002, 0.004918149075151592, 0.005598675088235234, 0.009399672303897544, 0.005850276368246972, 0.007378516184548605, 0.007104766439283966, 0.0054935721864358975, 0.006157569971986594, 0.005413850702174925, 0.00668577843563243, 0.0054204413378203505, 0.005632104998912231, 0.005889197966067643, 0.008994661759554642, 0.004972531189448673, 0.005877913796700268, 0.005188370897440455, 0.0071170285813312835, 0.007023778000193735, 0.005991718943723741, 0.005753291166042709, 0.0064059073500135014, 0.0064856331707727095], "accuracy_test_std": 0.09374175936113714, "error_valid": [0.49114916698042166, 0.4148008047816265, 0.3536818171121988, 0.3072112669427711, 0.29642789909638556, 0.2869873046875, 0.27379341585090367, 0.2705078125, 0.2788806593561747, 0.2855548169239458, 0.3131735928087349, 0.2613731292356928, 0.3016372129141567, 0.3033770825489458, 0.2917289274284638, 0.24927787321159633, 0.26416015625, 0.27098726939006024, 0.26299975291792166, 0.2451363069465362, 0.25374152861445776, 0.2580360504518072, 0.22785232727786142, 0.23548245717243976, 0.26652067253388556, 0.2229592196912651, 0.2404976350715362, 0.2536415192018072, 0.23587955336972888, 0.22254300404743976, 0.23535009177334332, 0.24103592102786142, 0.2180764071912651, 0.2365913850715362, 0.21042715785015065, 0.23030402861445776, 0.22599185805722888, 0.24707913685993976, 0.24113887189382532, 0.24089473126882532, 0.22041633330195776, 0.21511583443147586, 0.2434273225715362, 0.2129494540662651, 0.20324412885918675, 0.22557417168674698, 0.21321418486445776, 0.21288768354668675, 0.2066915121423193, 0.21325536521084332, 0.2128273837537651, 0.2135392154555723, 0.2167130435805723, 0.21767931099397586, 0.23241010918674698, 0.2159291462725903, 0.21606298239834332, 0.21025214137801207, 0.21005947618599397, 0.23245128953313254, 0.21394660673945776, 0.22108698465737953, 0.21745576054216864, 0.2014027790850903, 0.21430252259036142, 0.20936823465737953, 0.2061841114457832, 0.2093373493975903, 0.21804552193147586, 0.2157055958207832, 0.21298916368599397, 0.2255727009600903, 0.20312205854668675, 0.2022057958396084, 0.20765925028237953, 0.21682481880647586, 0.2393990022590362, 0.2021557911332832, 0.21200230609939763, 0.21921622035015065, 0.20129100385918675, 0.20859463243599397, 0.22014130741716864, 0.2291848056287651, 0.20134247929216864, 0.19867605186370485, 0.20835049181099397, 0.21794404179216864, 0.20747540945030118, 0.2100197665662651, 0.2089005435805723, 0.1983510212725903, 0.2176896060805723, 0.21449518778237953, 0.2172219150037651, 0.21381424134036142, 0.2064591373305723, 0.20756806522966864, 0.21196259647966864, 0.20854462772966864, 0.21047716255647586, 0.2136612857680723, 0.21069041792168675, 0.2019631259412651, 0.22253270896084332, 0.20357063017695776, 0.2092873446912651, 0.20425157661897586, 0.2026749576430723, 0.20710919851280118, 0.22278714467243976, 0.21389513130647586, 0.20448542215737953, 0.1971303181475903, 0.20631647684487953, 0.20458690229668675, 0.19919521837349397, 0.2148511036332832, 0.22562564711972888, 0.2188088290662651, 0.2103653873305723, 0.20575612998870485, 0.20570465455572284, 0.2066518025225903, 0.20654002729668675, 0.2050134130271084, 0.1998555746423193, 0.2030102833207832, 0.20123952842620485, 0.20915497929216864, 0.21186994070030118, 0.20343679405120485, 0.2048207478350903, 0.2076798404555723, 0.19184011436370485, 0.22404755741716864, 0.19942906391189763, 0.21091396837349397, 0.2066518025225903, 0.19682440700301207, 0.20955060476280118, 0.20334560899849397, 0.20138218891189763, 0.21295974915286142, 0.1975671239646084, 0.20962414109563254, 0.19757741905120485, 0.19599050498870485, 0.20380300498870485, 0.20526784873870485, 0.21029332172439763, 0.21767931099397586, 0.20422069135918675, 0.2088696583207832, 0.20333531391189763, 0.2000997152673193, 0.20810635118599397, 0.2164380176957832, 0.20962267036897586, 0.20373241010918675, 0.20751658979668675, 0.21761754047439763, 0.20430158132530118, 0.21239940229668675, 0.20844167686370485, 0.20145278379141573, 0.2158791415662651, 0.21864557840737953, 0.20892995811370485, 0.2041089161332832, 0.20395596056099397, 0.2128273837537651, 0.20248082172439763, 0.2103345020707832, 0.20431187641189763, 0.2184220279555723, 0.1950757130082832, 0.20083360786897586, 0.19809658556099397, 0.2014027790850903, 0.21255235786897586, 0.2029896931475903, 0.2161232821912651, 0.20712978868599397, 0.2047692724021084], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.8624359468338787, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0012417813366196293, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "optimization": "rmsprop", "nb_data_augmentation": 0, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 3.0700346590316543e-06, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.08418535918472}, "accuracy_valid_max": 0.8081598856362951, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import os\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7952307275978916, "loss_train": [1.5149935483932495, 1.108034372329712, 0.9486843347549438, 0.8476366996765137, 0.7731367945671082, 0.7093441486358643, 0.6546037793159485, 0.6049176454544067, 0.5603920817375183, 0.5254168510437012, 0.5007178783416748, 0.47279512882232666, 0.4548567235469818, 0.43555182218551636, 0.4221895933151245, 0.4100871682167053, 0.39821621775627136, 0.38768646121025085, 0.38506659865379333, 0.37811240553855896, 0.36592528223991394, 0.36602792143821716, 0.35861948132514954, 0.3536526560783386, 0.35468584299087524, 0.34310200810432434, 0.3462276756763458, 0.3426443338394165, 0.3382874131202698, 0.3381704092025757, 0.3328491747379303, 0.33153006434440613, 0.3309968113899231, 0.3294542729854584, 0.3285908102989197, 0.3231918513774872, 0.32475635409355164, 0.32023805379867554, 0.32234057784080505, 0.3187393546104431, 0.3200792968273163, 0.31772032380104065, 0.31300273537635803, 0.3163219392299652, 0.31491711735725403, 0.3122139275074005, 0.31144365668296814, 0.308342844247818, 0.31356966495513916, 0.3108907639980316, 0.30830252170562744, 0.30568942427635193, 0.3072929382324219, 0.3068736493587494, 0.3042147159576416, 0.3050157427787781, 0.30050763487815857, 0.3010093569755554, 0.2991254925727844, 0.2972635328769684, 0.30017897486686707, 0.2989243268966675, 0.29855382442474365, 0.30096229910850525, 0.29513320326805115, 0.29495084285736084, 0.2933233082294464, 0.29519373178482056, 0.2942073941230774, 0.290447860956192, 0.2933623492717743, 0.28880226612091064, 0.29032376408576965, 0.2912929356098175, 0.289019912481308, 0.29119232296943665, 0.2914283275604248, 0.2946518659591675, 0.28925663232803345, 0.28617992997169495, 0.28444063663482666, 0.2845700681209564, 0.2858017683029175, 0.284161239862442, 0.2871166169643402, 0.2871135175228119, 0.28250652551651, 0.28006038069725037, 0.28341901302337646, 0.27635955810546875, 0.2798100411891937, 0.28102031350135803, 0.28217169642448425, 0.28134140372276306, 0.281335711479187, 0.2787688672542572, 0.2764592468738556, 0.2786216735839844, 0.27703508734703064, 0.27504169940948486, 0.2762453556060791, 0.276040643453598, 0.27732259035110474, 0.274583101272583, 0.27697277069091797, 0.2735586166381836, 0.2747412323951721, 0.27013352513313293, 0.2710111439228058, 0.27401384711265564, 0.2747318148612976, 0.27367469668388367, 0.27013933658599854, 0.2708987593650818, 0.2706246078014374, 0.2727667987346649, 0.2674550414085388, 0.2674747109413147, 0.267057865858078, 0.26937904953956604, 0.2696276307106018, 0.26844486594200134, 0.27109891176223755, 0.2660561501979828, 0.268309623003006, 0.2644619047641754, 0.26534929871559143, 0.26730579137802124, 0.26326945424079895, 0.2618522644042969, 0.26326683163642883, 0.2640056312084198, 0.2605452835559845, 0.26262718439102173, 0.26045095920562744, 0.2627589702606201, 0.26376625895500183, 0.26564785838127136, 0.26318612694740295, 0.25786471366882324, 0.2562008798122406, 0.2624320983886719, 0.25871771574020386, 0.2587338387966156, 0.2581102252006531, 0.2588212192058563, 0.2611197531223297, 0.26077035069465637, 0.25989148020744324, 0.25563767552375793, 0.26008015871047974, 0.26195693016052246, 0.2582665979862213, 0.25997087359428406, 0.2542090117931366, 0.25377702713012695, 0.26074543595314026, 0.25705671310424805, 0.26098135113716125, 0.2571975886821747, 0.25629717111587524, 0.2570071518421173, 0.25160449743270874, 0.25668731331825256, 0.2527136504650116, 0.25453391671180725, 0.2563531994819641, 0.257088303565979, 0.25449833273887634, 0.2516516149044037, 0.2525026798248291, 0.2504606246948242, 0.25343748927116394, 0.2531335949897766, 0.25305286049842834, 0.2564444839954376, 0.25474902987480164, 0.2509166896343231, 0.24963997304439545, 0.25336581468582153, 0.2531243562698364, 0.2505953013896942, 0.24891601502895355, 0.2470325231552124, 0.2531489431858063], "accuracy_train_first": 0.5206986909952934, "model": "residualv3", "loss_std": [0.35494863986968994, 0.20570604503154755, 0.19606482982635498, 0.18685181438922882, 0.18162009119987488, 0.17473073303699493, 0.16888156533241272, 0.1617288440465927, 0.1547624170780182, 0.14936205744743347, 0.14427922666072845, 0.1354798525571823, 0.12930485606193542, 0.11996431648731232, 0.11657208204269409, 0.11215265095233917, 0.10759558528661728, 0.09938843548297882, 0.10551788657903671, 0.0982193797826767, 0.09125521034002304, 0.09192896634340286, 0.08953326940536499, 0.08834408223628998, 0.09526892006397247, 0.08132514357566833, 0.08595766127109528, 0.08320672065019608, 0.0849030464887619, 0.07854893058538437, 0.0791313424706459, 0.07765823602676392, 0.0744575709104538, 0.07290087640285492, 0.0773526281118393, 0.0720900222659111, 0.07427892833948135, 0.06904640793800354, 0.07715845108032227, 0.06709147244691849, 0.07341623306274414, 0.07109476625919342, 0.07011735439300537, 0.06951375305652618, 0.07109043747186661, 0.06676146388053894, 0.06601284444332123, 0.06534013897180557, 0.0701204463839531, 0.06684008240699768, 0.06583605706691742, 0.06402049958705902, 0.0695216953754425, 0.06634931266307831, 0.06650279462337494, 0.06368226557970047, 0.06353281438350677, 0.0634332224726677, 0.06267530471086502, 0.059736158698797226, 0.0675390288233757, 0.06036042049527168, 0.06323764473199844, 0.06413351744413376, 0.0586249977350235, 0.05934084579348564, 0.058953821659088135, 0.06126593053340912, 0.05960402637720108, 0.05931449681520462, 0.06288159638643265, 0.05701163038611412, 0.06172516942024231, 0.059107985347509384, 0.05898965522646904, 0.06177743896842003, 0.062372174113988876, 0.06572211533784866, 0.06148889660835266, 0.05641748011112213, 0.055304303765296936, 0.05860832333564758, 0.06099723279476166, 0.06162015721201897, 0.059304844588041306, 0.05945579335093498, 0.0573616549372673, 0.054130107164382935, 0.062073856592178345, 0.05190229415893555, 0.05758887901902199, 0.05575072392821312, 0.057543642818927765, 0.057771097868680954, 0.055941250175237656, 0.054938215762376785, 0.05568556860089302, 0.05719328671693802, 0.05693862959742546, 0.05464669689536095, 0.055603884160518646, 0.06091562658548355, 0.059987038373947144, 0.07914573699235916, 0.08012177050113678, 0.05504104867577553, 0.06028814613819122, 0.05543816462159157, 0.05403599888086319, 0.05470823869109154, 0.06785226613283157, 0.06285558640956879, 0.05364960432052612, 0.05490751191973686, 0.055599939078092575, 0.060208916664123535, 0.049824539572000504, 0.054653797298669815, 0.059125665575265884, 0.056856703013181686, 0.05745982751250267, 0.05824258178472519, 0.06025708094239235, 0.05146883428096771, 0.06045614555478096, 0.05214069038629532, 0.05178942531347275, 0.05634047091007233, 0.0528201200067997, 0.05728518217802048, 0.06919121742248535, 0.05238142982125282, 0.050593454390764236, 0.057408541440963745, 0.0515526607632637, 0.05312467738986015, 0.054028112441301346, 0.05627550929784775, 0.054293762892484665, 0.046007998287677765, 0.048949215561151505, 0.056095317006111145, 0.048258665949106216, 0.05277319625020027, 0.05272841826081276, 0.05469527468085289, 0.05778183415532112, 0.054336849600076675, 0.05408884584903717, 0.048674486577510834, 0.0554564893245697, 0.05700201913714409, 0.05243678390979767, 0.05585186928510666, 0.04880911111831665, 0.04994929954409599, 0.06569686532020569, 0.057477764785289764, 0.05951631814241409, 0.0547487847507, 0.05151015892624855, 0.05612590163946152, 0.047254692763090134, 0.05528119206428528, 0.05333613231778145, 0.05286635085940361, 0.05883351340889931, 0.061717208474874496, 0.053050097078084946, 0.05432835593819618, 0.05270294472575188, 0.0496419221162796, 0.05408225953578949, 0.05109192430973053, 0.053789399564266205, 0.06866231560707092, 0.05396941304206848, 0.05039041489362717, 0.046452898532152176, 0.054112836718559265, 0.05548642948269844, 0.0521966852247715, 0.051412731409072876, 0.05111289024353027, 0.05620618164539337]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:11 2016", "state": "available"}], "summary": "b33c27697c326ed1ff613de2cd6a004b"}