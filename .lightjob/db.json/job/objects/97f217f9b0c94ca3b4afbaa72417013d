{"content": {"hp_model": {"f0": 16, "f1": 16, "f2": 32, "f3": 64, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.4684715270996094, 1.0353293418884277, 0.8672822117805481, 0.7679916620254517, 0.6972596645355225, 0.6418820023536682, 0.5914593935012817, 0.5540178418159485, 0.5185344815254211, 0.48616939783096313, 0.4596971869468689, 0.43344470858573914, 0.41261667013168335, 0.3915777802467346, 0.3704391121864319, 0.35369497537612915, 0.3366600275039673, 0.32475581765174866, 0.3109685778617859, 0.2981477975845337, 0.2892090082168579, 0.277159184217453, 0.26969411969184875, 0.2615261971950531, 0.25096526741981506, 0.24360090494155884, 0.2397114634513855, 0.22999659180641174, 0.22208048403263092, 0.22042430937290192, 0.21275174617767334, 0.20931844413280487, 0.20429140329360962, 0.19867143034934998, 0.1959048956632614, 0.18964974582195282, 0.18786989152431488, 0.18238303065299988, 0.17925633490085602, 0.17575235664844513, 0.17033058404922485, 0.16857048869132996, 0.16569776833057404, 0.1622610241174698, 0.15783913433551788, 0.15966185927391052, 0.15483291447162628, 0.15269418060779572, 0.14837336540222168, 0.14758257567882538, 0.14523878693580627, 0.14384406805038452, 0.13999389111995697, 0.13903775811195374, 0.13740642368793488, 0.13304556906223297, 0.13189586997032166, 0.12969215214252472, 0.12938350439071655, 0.12832532823085785, 0.12485022842884064, 0.12135671824216843, 0.12200240790843964, 0.12079160660505295, 0.11910131573677063, 0.11771852523088455, 0.11491172760725021, 0.11612222343683243, 0.1147741973400116, 0.11105314642190933, 0.10957513004541397, 0.10871685296297073, 0.10903609544038773, 0.10739123076200485, 0.10630305856466293, 0.10533974319696426, 0.10340739786624908, 0.1034567728638649, 0.10085773468017578, 0.10109803080558777, 0.0978483110666275, 0.09784254431724548, 0.098418228328228, 0.09531250596046448, 0.09621245414018631, 0.09423326700925827, 0.09567193686962128, 0.09185128659009933, 0.0905030369758606, 0.0910867229104042, 0.0919625535607338, 0.08767219632863998, 0.08840788900852203, 0.08791428059339523, 0.08689241856336594, 0.08537071198225021, 0.08498767763376236, 0.08710993826389313, 0.08686474710702896, 0.08472774177789688, 0.08453948050737381, 0.08211150765419006, 0.08089428395032883, 0.08049201220273972, 0.07917924225330353, 0.08092699199914932, 0.08071111887693405, 0.07897941023111343, 0.07831394672393799, 0.07722992449998856, 0.07580485939979553, 0.07624513655900955, 0.07581310719251633, 0.07641173154115677, 0.07536139339208603, 0.07404696196317673, 0.07379082590341568, 0.07528026401996613, 0.07347200065851212, 0.07274439185857773, 0.073618084192276, 0.07225599139928818, 0.07162822037935257, 0.07224877923727036, 0.070512555539608, 0.07098875194787979, 0.0705670639872551, 0.06842053681612015, 0.06843779236078262, 0.06878139823675156, 0.06851900368928909, 0.06691326200962067, 0.06951022148132324, 0.06727082282304764, 0.06845420598983765, 0.06681745499372482, 0.06546016782522202, 0.0689377710223198, 0.06682167202234268, 0.06464424729347229, 0.0654882937669754, 0.06179139018058777, 0.06455159187316895, 0.06610623002052307, 0.06433052569627762, 0.062438976019620895, 0.06352993845939636, 0.06185305863618851, 0.06182736158370972, 0.06277435272932053, 0.06321736425161362, 0.062487173825502396, 0.06122802570462227, 0.06120636686682701, 0.059611622244119644, 0.06060769036412239, 0.060311172157526016, 0.05924570560455322, 0.06177311763167381, 0.05920281633734703, 0.058385949581861496], "moving_avg_accuracy_train": [0.04697680186415651, 0.10540813751614986, 0.1623409612633813, 0.21722539869993535, 0.26877630065580005, 0.31864072975642527, 0.36223276446004626, 0.40748457683833106, 0.4470304289205555, 0.48472770383488606, 0.5158418932958972, 0.548357345064268, 0.5792999009498216, 0.6098099198526247, 0.6375200168877572, 0.6645144276205392, 0.6873467705323963, 0.708509862634057, 0.7275637291184365, 0.7473507842185437, 0.7642478557194007, 0.7807501477129829, 0.7937821957704498, 0.8067662588911254, 0.8193285328497426, 0.83155272480171, 0.8422963339429861, 0.8525305933308488, 0.8606674603716564, 0.8685995773547474, 0.8766290146335768, 0.8844157969499811, 0.8904034130490952, 0.8956596619585175, 0.8997810969889024, 0.9057876355400584, 0.9115653998503475, 0.9119575567726125, 0.9165184766156078, 0.9195538081195601, 0.9239387151790511, 0.9263110418373641, 0.9296016987393604, 0.9326237077713859, 0.9359177916073426, 0.93868032330855, 0.9403340904193709, 0.9424200440631574, 0.9453622844485083, 0.9482545135179618, 0.9509295992935649, 0.9531697297285033, 0.9549625967854148, 0.9567855847247674, 0.9585702889011001, 0.9599580307693419, 0.961034901390036, 0.9618808881105747, 0.9626330116126401, 0.9633284879061564, 0.9628896065620155, 0.9641221093724991, 0.9654289274531063, 0.9653659396542704, 0.9667599632483672, 0.9680889892449591, 0.9683737624550147, 0.9696995546988082, 0.9703348401503928, 0.9712483578830002, 0.9720634402494621, 0.9730505637459721, 0.9739714188297082, 0.9743957206586699, 0.9730595596762285, 0.9738958098097961, 0.9740766646157766, 0.9744276267994555, 0.9751085050790429, 0.9752610242128421, 0.9757562201546531, 0.976150815326111, 0.9763013018363662, 0.9764880371646805, 0.9773139718779835, 0.9777435261771269, 0.978406709608233, 0.9786804150605234, 0.9789267499675848, 0.9786996616148831, 0.9792160421795852, 0.9800133530652166, 0.9801472484134569, 0.9803421950375967, 0.9807501979290936, 0.9814870631433363, 0.9819758196266217, 0.9823668723365786, 0.9816934651993585, 0.9821709541699173, 0.9826285960291344, 0.9819896145869814, 0.9825490236639975, 0.9829362704416545, 0.9830382907189177, 0.982741953312539, 0.9825751589479702, 0.9831923431270011, 0.9836849577726343, 0.9838702915334846, 0.9844741477968029, 0.9846572564171319, 0.9846384034682942, 0.9842192571679302, 0.9846674172761649, 0.9847846959723672, 0.9847949156977587, 0.9845926330554007, 0.9846941026367654, 0.9848343615314499, 0.9851884230711805, 0.9855349441938336, 0.9858165502208788, 0.984602970941685, 0.9851335592641832, 0.9852204998032503, 0.9856754203955536, 0.9862035036155498, 0.986448516683766, 0.9866202003201605, 0.9861539008607727, 0.9864504132294758, 0.9863498287517662, 0.9866941776468462, 0.9869924659083704, 0.9873259934615902, 0.9873657515928214, 0.9871528150859479, 0.9872680558238001, 0.9873601827926382, 0.9876197362764788, 0.9874440721726405, 0.9876510228422812, 0.988011700654491, 0.9879526250830895, 0.9875019647688558, 0.9876450695562744, 0.9879110836935318, 0.9882898971991786, 0.9886029636173652, 0.9889823796437331, 0.9892215114710265, 0.9894228873691896, 0.9894343898144412, 0.9895888291437206, 0.9897139096960337, 0.9896637217764487, 0.9896324314440419, 0.9898949137460662, 0.9899009580857453, 0.9900133908855133], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.045973444559487944, 0.10252053134412648, 0.15763654226280116, 0.21070083654932223, 0.26044153508565504, 0.3075152926746046, 0.3482194592373399, 0.39040152545592516, 0.4272808712160555, 0.46197389431658853, 0.49001025629682726, 0.5193061586133041, 0.546686683800543, 0.5737646798124314, 0.5979008836120618, 0.6214199596427985, 0.6410184510185036, 0.6587090099076172, 0.6748959790693404, 0.6914837060871052, 0.7056078787765875, 0.7197591814486275, 0.7307526898380268, 0.7412969085707151, 0.751185419426746, 0.7607727909818124, 0.7692478815184204, 0.7777899608364579, 0.7836995766221645, 0.7896399069870564, 0.7962313215029592, 0.8019488684754041, 0.8062492870683757, 0.8102398221698965, 0.8131638880044882, 0.8179135407138286, 0.821681562819027, 0.8218764524708593, 0.8256683700061529, 0.8278980432653268, 0.8304987756951947, 0.8318272807969855, 0.8342802596073472, 0.8365439752222902, 0.8394358114632389, 0.8419256593455294, 0.8432092264587927, 0.8441650063260911, 0.8459641201042502, 0.8478783502719125, 0.8498920671554893, 0.8516057265920488, 0.8529303525397717, 0.8545650575437012, 0.8564666266669665, 0.8572166248624686, 0.8579658949345802, 0.8585080196730499, 0.8586551645713323, 0.8588486301360364, 0.8586209466216798, 0.859614379538578, 0.8607159886950364, 0.8610441392137105, 0.8621217541891768, 0.863342954852714, 0.8632038306776835, 0.8645202251889814, 0.8648443110096916, 0.8661015202984061, 0.8671302048649511, 0.8683825222926126, 0.8691982551443002, 0.869772840868575, 0.8687212909684645, 0.8689447120410458, 0.8689719511155557, 0.8692964945205663, 0.8700300957273952, 0.8697350998500623, 0.8702345284945741, 0.870530470411683, 0.8710694908592196, 0.8713216461595927, 0.8726248636972479, 0.8735443532782008, 0.8744258695693566, 0.8747605145871951, 0.8752824511744093, 0.8745191368739864, 0.8747203258315426, 0.8757823611606623, 0.8757483939169606, 0.8758591602293307, 0.8759954710042139, 0.8770286775747262, 0.8770490661237296, 0.8775587855938114, 0.8766421095476079, 0.8765851145661152, 0.8772897725842778, 0.876133502168847, 0.8766828613834382, 0.8771936097424589, 0.8771629429982581, 0.8769491489337486, 0.8763559612617593, 0.87668570304974, 0.8775410526431093, 0.8776709541088435, 0.8789384148914833, 0.8791309521203319, 0.8787956583484342, 0.8781500380614071, 0.8784683291536097, 0.878731259510086, 0.8787574358463515, 0.8783486009119422, 0.8784018655854317, 0.8784181831684547, 0.8789018837239736, 0.8796647450503714, 0.8800196713830601, 0.8790950174036397, 0.8797816482404595, 0.8798991277123472, 0.8807393401293655, 0.8814568511936127, 0.881352834701887, 0.8815695431838819, 0.8815702978263371, 0.8818587982112486, 0.881386026682669, 0.8812330579564202, 0.8814667445835944, 0.8818622270341205, 0.8818072402117326, 0.8818442307989931, 0.882178580074139, 0.8823594831265895, 0.8824633197348644, 0.8822840999601731, 0.8826365269841105, 0.8832975671979736, 0.8834011336144714, 0.8835259640124369, 0.8835731581797173, 0.8842168659874986, 0.8847076652697728, 0.8848452383512293, 0.8851389230533804, 0.8854886885040665, 0.8856458155120936, 0.8854158713385197, 0.8856158716481919, 0.8858610251177853, 0.8860593081952386, 0.8861523137461966, 0.8864191242108088, 0.8859622762663846, 0.8862195583818395], "moving_var_accuracy_train": [0.019861379220457973, 0.048603230173095355, 0.07291502493428571, 0.09273423569540032, 0.10737827155802887, 0.11901859600800752, 0.12421912581362209, 0.13022675194393526, 0.13127894650172434, 0.13094081267525146, 0.1265595664800676, 0.12341890126537207, 0.11969398702141035, 0.11610233960031388, 0.11140275093955063, 0.10682075974288681, 0.10083052671419981, 0.09477836224851019, 0.0885679744757002, 0.0832349249739423, 0.07748103170429373, 0.0721838593032374, 0.0664939818620628, 0.06136185673195171, 0.056645967601858714, 0.05232624866157975, 0.04813245003184636, 0.04426186561562423, 0.04043155650121985, 0.03695466716959882, 0.03383944721977084, 0.03100120830738135, 0.028223751395596547, 0.025650029629417124, 0.023237902706862563, 0.021238818984475005, 0.01941538012985476, 0.017475226200334405, 0.01591492148862902, 0.01440634847581609, 0.01313876031751785, 0.011875535689729749, 0.01078543792637668, 0.00978908698104581, 0.008907837177806027, 0.008085737692627007, 0.007301778434275803, 0.006610761414284456, 0.00602759627922272, 0.005500121552212167, 0.005014514152152463, 0.004558226396227055, 0.004131333107158178, 0.003748109361685585, 0.003401964946490204, 0.0030791008992770244, 0.0027816276623527487, 0.0025099061378994238, 0.0022640067319707143, 0.002041959244247232, 0.0018394968713306235, 0.0016692187527982101, 0.0015176668389806068, 0.001365935862247766, 0.0012468319920510757, 0.0011380455837425208, 0.001024970887398757, 0.0009382933243222075, 0.000848096280334943, 0.0007707972841315431, 0.0006996967890954427, 0.0006384968253621585, 0.0005822789095931267, 0.0005256713070123558, 0.0004891721118501083, 0.00044654872923812443, 0.00040218823246192833, 0.00036307797930508945, 0.00033094253845910676, 0.0002980576433887701, 0.000270458850236968, 0.0002448143133573123, 0.00022053669772950036, 0.00019879685870211614, 0.00018505668618765605, 0.0001682116696321031, 0.0001553488130385353, 0.00014048816380620322, 0.00012698547540351528, 0.0001147510499425584, 0.00010567578493672173, 0.00010082954827816596, 9.090794512887275e-05, 8.215918829235675e-05, 7.544146669834944e-05, 7.278405312416337e-05, 6.765559391132876e-05, 6.226633451787742e-05, 6.012099561821993e-05, 5.61608575094456e-05, 5.24296964002711e-05, 5.086140231098743e-05, 4.8591708718921226e-05, 4.508217844828134e-05, 4.066763383620879e-05, 3.739121317836096e-05, 3.390247510099199e-05, 3.394047438850792e-05, 3.2730449651488285e-05, 2.9766542112537602e-05, 3.007166938202141e-05, 2.736626134536818e-05, 2.4632834113950216e-05, 2.3750703292534156e-05, 2.318326030679688e-05, 2.098872290936331e-05, 1.8890790603510692e-05, 1.736997594975363e-05, 1.5725643038259213e-05, 1.4330131752276313e-05, 1.4025354742296377e-05, 1.370351126406954e-05, 1.3046877727876287e-05, 2.4997161957086107e-05, 2.5031161473120185e-05, 2.2596073241807657e-05, 2.2199040625340696e-05, 2.2488983547980065e-05, 2.0780367825552315e-05, 1.896760848204795e-05, 1.9027764306271124e-05, 1.791626413878929e-05, 1.621569285931517e-05, 1.5661309027268542e-05, 1.4895961107210501e-05, 1.440753065530055e-05, 1.2981003970761443e-05, 1.2090981177320677e-05, 1.1001406908535175e-05, 9.977652623167426e-06, 9.586199459615087e-06, 8.905300410049591e-06, 8.400227586027295e-06, 8.731001185407771e-06, 7.889310375094693e-06, 8.928231807011688e-06, 8.219719447949624e-06, 8.034619194141796e-06, 8.522654323271544e-06, 8.552484130710148e-06, 8.992844407222755e-06, 8.608216243922369e-06, 8.112364890779196e-06, 7.3023191579221685e-06, 6.7867507999843886e-06, 6.248882021088411e-06, 5.646663264429918e-06, 5.090808702106064e-06, 5.20180046177964e-06, 4.681949221981082e-06, 4.32752450995609e-06], "duration": 90658.081424, "accuracy_train": [0.4697680186415652, 0.6312901583840901, 0.6747363749884644, 0.7111853356289222, 0.7327344182585824, 0.7674205916620525, 0.7545610767926357, 0.8147508882428941, 0.8029430976605758, 0.8240031780638611, 0.7958695984449982, 0.8409964109796051, 0.8577829039198044, 0.8844000899778516, 0.8869108902039498, 0.9074641242155776, 0.8928378567391103, 0.8989776915490033, 0.8990485274778516, 0.9254342801195091, 0.9163214992271133, 0.9292707756552234, 0.9110706282876523, 0.9236228269772055, 0.9323889984772978, 0.9415704523694168, 0.9389888162144703, 0.9446389278216132, 0.9338992637389257, 0.9399886302025655, 0.9488939501430418, 0.9544968377976191, 0.9442919579411223, 0.9429659021433187, 0.9368740122623662, 0.9598464825004615, 0.9635652786429494, 0.9154869690729974, 0.9575667552025655, 0.9468717916551311, 0.9634028787144703, 0.9476619817621816, 0.9592176108573275, 0.9598217890596161, 0.9655645461309523, 0.9635431086194168, 0.9552179944167589, 0.9611936268572352, 0.9718424479166666, 0.9742845751430418, 0.9750053712739941, 0.9733309036429494, 0.9710984002976191, 0.9731924761789406, 0.9746326264880952, 0.972447707583518, 0.9707267369762828, 0.9694947685954227, 0.9694021231312293, 0.9695877745478036, 0.9589396744647471, 0.9752146346668512, 0.9771902901785714, 0.9647990494647471, 0.9793061755952381, 0.9800502232142857, 0.970936721345515, 0.9816316848929494, 0.9760524092146549, 0.9794700174764673, 0.9793991815476191, 0.9819346752145626, 0.9822591145833334, 0.9782144371193245, 0.9610341108342562, 0.9814220610119048, 0.9757043578696014, 0.9775862864525655, 0.9812364095953304, 0.9766336964170359, 0.9802129836309523, 0.9797021718692323, 0.9776556804286637, 0.9781686551195091, 0.9847473842977114, 0.9816095148694168, 0.9843753604881875, 0.981143764131137, 0.981143764131137, 0.9766558664405685, 0.9838634672619048, 0.9871891510358989, 0.9813523065476191, 0.9820967146548542, 0.9844222239525655, 0.9881188500715209, 0.9863746279761905, 0.9858863467261905, 0.975632800964378, 0.9864683549049464, 0.9867473727620893, 0.9762387816076044, 0.9875837053571429, 0.9864214914405685, 0.9839564732142857, 0.9800749166551311, 0.9810740096668512, 0.9887470007382798, 0.9881184895833334, 0.985538295381137, 0.9899088541666666, 0.9863052340000923, 0.984468726928756, 0.9804469404646549, 0.9887008582502769, 0.9858402042381875, 0.9848868932262828, 0.9827720892741787, 0.9856073288690477, 0.9860966915836102, 0.988374976928756, 0.9886536342977114, 0.9883510044642857, 0.9736807574289406, 0.9899088541666666, 0.9860029646548542, 0.9897697057262828, 0.990956252595515, 0.9886536342977114, 0.9881653530477114, 0.9819572057262828, 0.9891190245478036, 0.9854445684523809, 0.9897933177025655, 0.9896770602620893, 0.9903277414405685, 0.9877235747739018, 0.9852363865240864, 0.9883052224644703, 0.9881893255121816, 0.9899557176310447, 0.9858630952380952, 0.9895135788690477, 0.991257800964378, 0.9874209449404762, 0.983446021940753, 0.9889330126430418, 0.9903052109288483, 0.99169921875, 0.9914205613810447, 0.9923971238810447, 0.9913736979166666, 0.9912352704526578, 0.9895379118217055, 0.9909787831072352, 0.9908396346668512, 0.9892120305001846, 0.9893508184523809, 0.9922572544642857, 0.9899553571428571, 0.9910252860834257], "end": "2016-02-04 12:49:27.204000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0], "moving_var_accuracy_valid": [0.01902201844197881, 0.045897973812245925, 0.06864814836730855, 0.08712570748371631, 0.10068037055328577, 0.11055578137984587, 0.11441166582196338, 0.11898443963398907, 0.11932677096384736, 0.11822654653414967, 0.1134782302185175, 0.10985465622949477, 0.10561642904230649, 0.10165374695025448, 0.09673137925994464, 0.0920365637700063, 0.08628981517083795, 0.08047743651803689, 0.07478785460201641, 0.06978544333035772, 0.0646023292847828, 0.059944430662145706, 0.05503770263630127, 0.05053455731081612, 0.046361145402283074, 0.04255229010206883, 0.03894350552829526, 0.03570585904714653, 0.03244958517104393, 0.02952221437753606, 0.02696101364766654, 0.024559125373338927, 0.022269655236678017, 0.020186009046578447, 0.01824435959096584, 0.016622956439603355, 0.015088442710910397, 0.013579940277606879, 0.012351353997196394, 0.01116096158306083, 0.010105739707300648, 0.00911105006881994, 0.008254099007334696, 0.007474808782069257, 0.00680259235546251, 0.00617812720220878, 0.005575142382796163, 0.005025849780909144, 0.004552396096299083, 0.004130134980882272, 0.003753616983978866, 0.003404684943561564, 0.003080008154317833, 0.002796057682934898, 0.0025489956008164167, 0.0022991585163740836, 0.002074295315505334, 0.0018695108770433483, 0.0016827546539288283, 0.0015148160488584821, 0.0013638010020170222, 0.0012363030824587135, 0.0011235946588151805, 0.001012204337799817, 0.0009214351903379784, 0.0008427136508497924, 0.0007586164855895143, 0.0006983508876149406, 0.0006294610834261157, 0.0005807401518441759, 0.0005321898640967877, 0.0004930855681437318, 0.0004497657920972591, 0.00040776055167839677, 0.00037693631124235906, 0.00033969193289918345, 0.00030572941731388654, 0.00027610443137812137, 0.0002533375248162567, 0.00022878697544342165, 0.00020815313863770997, 0.0001881260593386576, 0.00017192834079055402, 0.00015530774737105543, 0.0001550623561880184, 0.0001471652703745455, 0.00013944238208124903, 0.00012650602946480088, 0.00011630718672797626, 0.00010992030654624895, 9.929256886140692e-05, 9.951458333795445e-05, 8.957350896696127e-05, 8.072658065387001e-05, 7.282114823462633e-05, 7.514667576731247e-05, 6.763574942695535e-05, 6.321049992788461e-05, 6.445210469824436e-05, 5.803613007965813e-05, 5.670140337473959e-05, 6.306391449967017e-05, 5.947368296960954e-05, 5.587408964882908e-05, 5.029514472674501e-05, 4.567700137224612e-05, 4.427614576282254e-05, 4.0827098007206646e-05, 4.332899454838036e-05, 3.9147964610741485e-05, 4.9691279669435026e-05, 4.505578696292601e-05, 4.156200548789358e-05, 4.115723493429343e-05, 3.7953294415244165e-05, 3.478015632493092e-05, 3.130830749766039e-05, 2.9681790780235028e-05, 2.6739145831189022e-05, 2.4067627619711568e-05, 2.3766560904424902e-05, 2.6627521443803448e-05, 2.5098523614146178e-05, 3.028353608765469e-05, 3.149833963353543e-05, 2.847271850701718e-05, 3.1979058807720995e-05, 3.341455207280293e-05, 3.0170471740481003e-05, 2.7576087661950237e-05, 2.481848402112233e-05, 2.308572786785671e-05, 2.2788771345191125e-05, 2.072048909156371e-05, 1.9139925139888055e-05, 1.863358994396638e-05, 1.679744290529667e-05, 1.5130013346679868e-05, 1.4623116952127023e-05, 1.345533848638771e-05, 1.2206843008711016e-05, 1.1275236256603363e-05, 1.1265555895756081e-05, 1.4071767785277316e-05, 1.2761125030385397e-05, 1.1625256181652914e-05, 1.0482776168315242e-05, 1.3163736227671046e-05, 1.4015318024232071e-05, 1.2784123396481655e-05, 1.2281967395332079e-05, 1.2154793490241442e-05, 1.1161514211081164e-05, 1.0521231696617977e-05, 9.829109641776673e-06, 9.38710069048243e-06, 8.802236230673721e-06, 7.999862900187479e-06, 7.840567026408272e-06, 8.93490072268945e-06, 8.637157432817105e-06], "accuracy_test": 0.1406708386479592, "start": "2016-02-03 11:38:29.122000", "learning_rate_per_epoch": [0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663, 0.0012991601834073663], "accuracy_train_first": 0.4697680186415652, "accuracy_train_last": 0.9910252860834257, "batch_size_eval": 1024, "accuracy_train_std": [0.018737570273589216, 0.018530830436517598, 0.01870421403167927, 0.02242406320405555, 0.022342113602721432, 0.023544009546435637, 0.022032603117049517, 0.02271996764328196, 0.019689590520700514, 0.021116503576381677, 0.021540945197760026, 0.021377401196255, 0.02060819601567796, 0.019579994543550226, 0.020036066099434677, 0.017480096560240407, 0.019614819360564473, 0.019103755726195517, 0.017558472164843495, 0.01693195872702106, 0.01620242521703774, 0.018592567377995875, 0.016189438506217062, 0.01637590759668692, 0.014539904864470847, 0.014701251848112785, 0.01597003793111518, 0.014076318767610587, 0.013942291357098855, 0.014437632964782829, 0.012418948923494051, 0.012564175621785561, 0.011465339594949229, 0.012700345921574248, 0.013493098387123691, 0.009598215469645824, 0.010988855833221938, 0.014034256679651521, 0.010379746568448105, 0.012313872498380108, 0.009292082262918612, 0.013827561290542453, 0.01108338700026962, 0.010985017514205617, 0.008502958247258666, 0.009329178660567887, 0.011036723045439144, 0.009829692945398635, 0.007677393499395023, 0.008207551670696566, 0.007105423745284269, 0.00751587839428742, 0.008894507201499471, 0.007312306183283981, 0.008437086886397757, 0.007687355120315685, 0.00763886386516256, 0.008301887906590035, 0.008114305149672046, 0.00851990928044373, 0.00915957922209099, 0.007008529609429966, 0.007102520902375408, 0.0076419919526371305, 0.007052525524601517, 0.007236556422591856, 0.007875939255071737, 0.006040640903333356, 0.00713901095312555, 0.006001757519475667, 0.007467167526662592, 0.006172029706033598, 0.0060120723112895924, 0.006404626917265942, 0.009981585454590249, 0.006867381230696656, 0.006283497128845019, 0.005791319968292185, 0.005749065187967903, 0.006534956144819537, 0.007261354483631345, 0.006481485677001538, 0.006330736069795428, 0.006146037813878008, 0.006125244603962546, 0.005334359205738253, 0.00612173497816252, 0.005524120788586535, 0.006681270312017291, 0.007302171833498167, 0.006386841388825273, 0.004452207141704102, 0.005992752495928489, 0.005589325068120995, 0.0049351890757789426, 0.004678939543541471, 0.0051496665990951665, 0.005754590640261009, 0.006739960368206187, 0.005254101358802498, 0.004680713960615538, 0.006452427441815334, 0.00491195596957462, 0.005344581698986829, 0.006495785003807375, 0.00608308779629467, 0.005719870865212884, 0.0038504658272231233, 0.0045252079343938295, 0.004904035645607343, 0.00401329036651626, 0.004811017131596411, 0.005185814120138357, 0.005088825664040467, 0.004216018407439904, 0.0050223908017566566, 0.005040457151819955, 0.005719837254679555, 0.0051633488120775076, 0.004435386655642623, 0.004545926294245506, 0.00417650948007903, 0.004661039026866104, 0.007996716687235323, 0.0039159261357066, 0.0046241868258425885, 0.004405469740257341, 0.0034110680247177736, 0.004299736256907891, 0.004912296505398557, 0.006607902218903023, 0.0034414279298196886, 0.004872615486328256, 0.0032065012370638205, 0.004145105570526331, 0.0040429720949621585, 0.004704263763010273, 0.004618141040145271, 0.00453933214656131, 0.003877627647442064, 0.003631611551494076, 0.004373752625010229, 0.004165392311001422, 0.004235669673628101, 0.0042790951147806625, 0.00546003558184273, 0.004213278725564135, 0.003249925754433821, 0.0032615962248871777, 0.003312651436125638, 0.002871963039040245, 0.0034946143479140444, 0.0035443625052008648, 0.003530744959699509, 0.003153079785900476, 0.0035475138301327026, 0.0035027574658381497, 0.004453858808562404, 0.0032695428697706377, 0.004188366908183669, 0.004034074498966744], "accuracy_test_std": 0.009952347972216986, "error_valid": [0.5402655544051205, 0.3885556875941265, 0.3463193594691265, 0.31172051487198793, 0.29189217808734935, 0.26882088902484935, 0.28544304169804224, 0.22995987857680722, 0.24080501694277112, 0.22578889777861444, 0.25766248588102414, 0.21703072053840367, 0.20688858951430722, 0.1825333560805723, 0.1848732821912651, 0.1669083560805723, 0.18259512660015065, 0.18207596009036142, 0.17942129847515065, 0.15922675075301207, 0.1672745670180723, 0.15287909450301207, 0.17030573465737953, 0.1638051228350903, 0.15981798286897586, 0.1529408650225903, 0.1544763036521084, 0.14533132530120485, 0.16311388130647586, 0.15689711972891573, 0.14444594785391573, 0.1465932087725903, 0.15504694559487953, 0.15384536191641573, 0.16051951948418675, 0.1393395849021084, 0.14440623823418675, 0.17636954066265065, 0.14020437217620485, 0.1520348974021084, 0.14609463243599397, 0.15621617328689763, 0.14364293109939763, 0.14308258424322284, 0.13453766236822284, 0.1356657097138554, 0.14523866952183728, 0.14723297486822284, 0.1378438558923193, 0.1348935782191265, 0.1319844808923193, 0.13297133847891573, 0.13514801393072284, 0.13072259742093373, 0.1264192512236446, 0.13603339137801207, 0.13529067441641573, 0.13661285768072284, 0.1400205313441265, 0.1394101797816265, 0.14342820500753017, 0.13144472420933728, 0.12936952889683728, 0.13600250611822284, 0.1281797110316265, 0.12566623917545183, 0.1380482868975903, 0.12363222420933728, 0.13223891660391573, 0.12258359610316272, 0.12361163403614461, 0.12034662085843373, 0.12346014919051207, 0.12505588761295183, 0.14074265813253017, 0.12904449830572284, 0.1307828972138554, 0.12778261483433728, 0.12336749341114461, 0.13291986304593373, 0.1252706137048193, 0.12680605233433728, 0.12407932511295183, 0.12640895613704817, 0.11564617846385539, 0.11818024049322284, 0.11764048381024095, 0.12222768025225905, 0.12002011954066272, 0.1323506918298193, 0.12346897355045183, 0.11465932087725905, 0.12455731127635539, 0.12314394295933728, 0.12277773202183728, 0.11367246329066272, 0.12276743693524095, 0.11785373917545183, 0.13160797486822284, 0.12392784026731929, 0.11636830525225905, 0.13427293157003017, 0.11837290568524095, 0.11820965502635539, 0.12311305769954817, 0.12497499764683728, 0.1289827277861446, 0.12034662085843373, 0.11476080101656627, 0.12115993269954817, 0.10965443806475905, 0.11913621282003017, 0.12422198559864461, 0.12766054452183728, 0.11866705101656627, 0.11890236728162651, 0.12100697712725905, 0.12533091349774095, 0.12111875235316272, 0.12143495858433728, 0.11674481127635539, 0.11346950301204817, 0.11678599162274095, 0.1292268684111446, 0.11403867422816272, 0.11904355704066272, 0.11169874811746983, 0.11208554922816272, 0.11958331372364461, 0.11648008047816272, 0.11842291039156627, 0.11554469832454817, 0.12286891707454817, 0.12014366057981929, 0.11643007577183728, 0.11457843091114461, 0.11868764118975905, 0.11782285391566272, 0.11481227644954817, 0.11601238940135539, 0.11660215079066272, 0.11932887801204817, 0.11419162980045183, 0.11075307087725905, 0.11566676863704817, 0.11535056240587349, 0.11600209431475905, 0.10998976374246983, 0.11087514118975905, 0.11391660391566272, 0.11221791462725905, 0.11136342243975905, 0.11294004141566272, 0.11665362622364461, 0.11258412556475905, 0.11193259365587349, 0.11215614410768071, 0.11301063629518071, 0.11117958160768071, 0.11814935523343373, 0.11146490257906627], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.09473729790803159, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "valid_ratio": 0.15, "learning_rate": 0.001299160166103421, "optimization": "rmsprop", "nb_data_augmentation": 1, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 1.9338559108161425e-07, "rotation_range": [0, 0], "momentum": 0.9615683529182999}, "accuracy_valid_max": 0.890345561935241, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8885350974209337, "accuracy_valid_std": [0.015547688334553663, 0.014308671071282622, 0.02176178125416623, 0.015603535406100977, 0.009360166633325648, 0.014938984256557798, 0.01681743147254347, 0.016403391738029172, 0.019253404388831736, 0.012821438018286835, 0.023997340068901186, 0.021913765146620027, 0.0176256628824145, 0.010926075647048008, 0.00859752688771548, 0.015055575782869281, 0.016466849851948687, 0.016790713177552402, 0.020776227441657705, 0.007483750935750056, 0.0158139774158774, 0.015673861808760896, 0.012196445845280979, 0.015328728500075087, 0.015649600631342176, 0.013571376930098761, 0.012195548865821634, 0.01487010520942844, 0.015483343018365348, 0.012694235647972629, 0.01157778256666472, 0.01693788200013713, 0.016113192920245285, 0.010785259546041448, 0.009347915374607302, 0.01609557420624206, 0.016677613782930097, 0.015301996524899816, 0.015313703998916283, 0.010478149927065158, 0.015768305090048503, 0.014973852777763787, 0.013752733431408783, 0.00945053279290633, 0.016050375169072893, 0.012877757854806913, 0.014342220428346108, 0.014175224479381207, 0.0094712749294358, 0.014881883484904991, 0.013633031540780625, 0.014760031008856953, 0.011976518635857478, 0.013500468272824157, 0.01084988846688559, 0.01625921597824894, 0.012492864298727138, 0.013574917623559977, 0.014600845602438864, 0.006818547008944622, 0.009436669554996415, 0.011970957193438063, 0.01313546470383303, 0.012229616930650927, 0.012905396708328262, 0.01145982047450861, 0.0202083725441479, 0.009346744108420645, 0.012510778987838424, 0.012072277609640475, 0.009990304850599572, 0.014455906900765422, 0.018151761960389687, 0.011494601532469248, 0.0103050071204851, 0.014906153283722813, 0.011074804147552448, 0.009414990605337398, 0.010166622237433498, 0.014039559360334502, 0.012708028802895732, 0.006984075648760523, 0.008945465390970369, 0.011387141575531452, 0.01216522077906686, 0.015215141385273663, 0.012005709525103925, 0.011920385988616895, 0.00974427035634423, 0.014092922148095778, 0.00913304616166237, 0.009388889402433848, 0.01449611811942167, 0.011676139219500456, 0.014632596399677419, 0.012119646852926547, 0.010251845084802643, 0.01239590260446892, 0.014066494682135272, 0.014405046709838885, 0.00965176658004983, 0.010027369800184713, 0.016482812308879626, 0.01577539934702833, 0.013669739542530555, 0.013280579866322717, 0.012892582813238162, 0.012895592993903679, 0.010108538302116504, 0.010436427136976578, 0.010495520498048002, 0.015200919531487419, 0.015047172756589865, 0.0158678529713349, 0.0110280537526635, 0.014770133133432277, 0.011517162599511577, 0.011333693202937086, 0.012104891222273028, 0.011799449226558834, 0.012423551042655176, 0.0142151622516871, 0.010554548400099242, 0.007497384831832529, 0.011418053342303152, 0.011682656815220653, 0.010549769066497287, 0.013507215028045656, 0.015019227607097585, 0.00987858871439712, 0.007825959730069398, 0.01092601625583984, 0.01638938872926467, 0.015962715903887655, 0.013599515308933928, 0.012724975551553127, 0.010108752708979533, 0.010452109062594432, 0.00992741397447017, 0.01030491381882672, 0.01298744974788868, 0.013761334614650619, 0.010672122745899263, 0.011778511181371005, 0.009968912487141957, 0.009404028999988106, 0.011535721011220235, 0.013592116480260192, 0.009365790588313279, 0.013390241163519409, 0.009121271596686749, 0.010378377707168599, 0.00939529105038442, 0.017076018833291406, 0.01194204651329795, 0.009707564135177704, 0.01068934808285426, 0.009590128460381106, 0.008680335754384351, 0.013187899237479617, 0.008754118773727936], "accuracy_valid": [0.4597344455948795, 0.6114443124058735, 0.6536806405308735, 0.6882794851280121, 0.7081078219126506, 0.7311791109751506, 0.7145569583019578, 0.7700401214231928, 0.7591949830572289, 0.7742111022213856, 0.7423375141189759, 0.7829692794615963, 0.7931114104856928, 0.8174666439194277, 0.8151267178087349, 0.8330916439194277, 0.8174048733998494, 0.8179240399096386, 0.8205787015248494, 0.8407732492469879, 0.8327254329819277, 0.8471209054969879, 0.8296942653426205, 0.8361948771649097, 0.8401820171310241, 0.8470591349774097, 0.8455236963478916, 0.8546686746987951, 0.8368861186935241, 0.8431028802710843, 0.8555540521460843, 0.8534067912274097, 0.8449530544051205, 0.8461546380835843, 0.8394804805158133, 0.8606604150978916, 0.8555937617658133, 0.8236304593373494, 0.8597956278237951, 0.8479651025978916, 0.853905367564006, 0.8437838267131024, 0.8563570689006024, 0.8569174157567772, 0.8654623376317772, 0.8643342902861446, 0.8547613304781627, 0.8527670251317772, 0.8621561441076807, 0.8651064217808735, 0.8680155191076807, 0.8670286615210843, 0.8648519860692772, 0.8692774025790663, 0.8735807487763554, 0.8639666086219879, 0.8647093255835843, 0.8633871423192772, 0.8599794686558735, 0.8605898202183735, 0.8565717949924698, 0.8685552757906627, 0.8706304711031627, 0.8639974938817772, 0.8718202889683735, 0.8743337608245482, 0.8619517131024097, 0.8763677757906627, 0.8677610833960843, 0.8774164038968373, 0.8763883659638554, 0.8796533791415663, 0.8765398508094879, 0.8749441123870482, 0.8592573418674698, 0.8709555016942772, 0.8692171027861446, 0.8722173851656627, 0.8766325065888554, 0.8670801369540663, 0.8747293862951807, 0.8731939476656627, 0.8759206748870482, 0.8735910438629518, 0.8843538215361446, 0.8818197595067772, 0.882359516189759, 0.877772319747741, 0.8799798804593373, 0.8676493081701807, 0.8765310264495482, 0.885340679122741, 0.8754426887236446, 0.8768560570406627, 0.8772222679781627, 0.8863275367093373, 0.877232563064759, 0.8821462608245482, 0.8683920251317772, 0.8760721597326807, 0.883631694747741, 0.8657270684299698, 0.881627094314759, 0.8817903449736446, 0.8768869423004518, 0.8750250023531627, 0.8710172722138554, 0.8796533791415663, 0.8852391989834337, 0.8788400673004518, 0.890345561935241, 0.8808637871799698, 0.8757780144013554, 0.8723394554781627, 0.8813329489834337, 0.8810976327183735, 0.878993022872741, 0.874669086502259, 0.8788812476468373, 0.8785650414156627, 0.8832551887236446, 0.8865304969879518, 0.883214008377259, 0.8707731315888554, 0.8859613257718373, 0.8809564429593373, 0.8883012518825302, 0.8879144507718373, 0.8804166862763554, 0.8835199195218373, 0.8815770896084337, 0.8844553016754518, 0.8771310829254518, 0.8798563394201807, 0.8835699242281627, 0.8854215690888554, 0.881312358810241, 0.8821771460843373, 0.8851877235504518, 0.8839876105986446, 0.8833978492093373, 0.8806711219879518, 0.8858083701995482, 0.889246929122741, 0.8843332313629518, 0.8846494375941265, 0.883997905685241, 0.8900102362575302, 0.889124858810241, 0.8860833960843373, 0.887782085372741, 0.888636577560241, 0.8870599585843373, 0.8833463737763554, 0.887415874435241, 0.8880674063441265, 0.8878438558923193, 0.8869893637048193, 0.8888204183923193, 0.8818506447665663, 0.8885350974209337], "seed": 651172381, "model": "residualv3", "loss_std": [0.3477761149406433, 0.20202448964118958, 0.19481521844863892, 0.18632721900939941, 0.1815738081932068, 0.177093505859375, 0.1699841171503067, 0.16622230410575867, 0.16132478415966034, 0.15758419036865234, 0.1521085798740387, 0.1495712399482727, 0.14324140548706055, 0.13687895238399506, 0.13284753262996674, 0.12945374846458435, 0.12334665656089783, 0.12239241600036621, 0.12160230427980423, 0.11775995045900345, 0.11378391087055206, 0.11188248544931412, 0.11180607229471207, 0.1068119928240776, 0.10507318377494812, 0.10034952312707901, 0.10325076431035995, 0.09935342520475388, 0.09681931138038635, 0.09509158134460449, 0.09713225811719894, 0.09616022557020187, 0.09250915795564651, 0.08933521062135696, 0.08859217911958694, 0.08442386239767075, 0.08597074449062347, 0.08603765815496445, 0.08188849687576294, 0.08110080659389496, 0.08449256420135498, 0.08258318901062012, 0.08006592094898224, 0.07779494673013687, 0.07947523891925812, 0.0786631852388382, 0.07548398524522781, 0.07756686210632324, 0.07353626936674118, 0.07447035610675812, 0.07455580681562424, 0.07319935411214828, 0.07408478111028671, 0.07122652977705002, 0.07412239164113998, 0.07207979261875153, 0.07044673711061478, 0.06945168972015381, 0.0711027979850769, 0.06689590215682983, 0.06606866419315338, 0.06749171763658524, 0.06632474809885025, 0.06493108719587326, 0.06832679361104965, 0.06600823998451233, 0.0663626492023468, 0.06252395361661911, 0.065522201359272, 0.06320060044527054, 0.06310246139764786, 0.062157437205314636, 0.06119546294212341, 0.0639021173119545, 0.06459078937768936, 0.060507722198963165, 0.06116192787885666, 0.06054948642849922, 0.06027623265981674, 0.06024725362658501, 0.05958956852555275, 0.05660237744450569, 0.06177911534905434, 0.05659434571862221, 0.05679822713136673, 0.05682925879955292, 0.05635962262749672, 0.056102123111486435, 0.0551922470331192, 0.055497150868177414, 0.0557372160255909, 0.05484940856695175, 0.05554666742682457, 0.05890834704041481, 0.05382770299911499, 0.053496383130550385, 0.051058221608400345, 0.053853169083595276, 0.05492502078413963, 0.05366123467683792, 0.054436538368463516, 0.05379940941929817, 0.05195709690451622, 0.05146417394280434, 0.04878874868154526, 0.05189221724867821, 0.052294984459877014, 0.050055183470249176, 0.0518282987177372, 0.04994523152709007, 0.050171490758657455, 0.05090184882283211, 0.05243121460080147, 0.051179807633161545, 0.04848365858197212, 0.04866167902946472, 0.04866153001785278, 0.05039478838443756, 0.049381956458091736, 0.05036036670207977, 0.04837806895375252, 0.04895275831222534, 0.04714914411306381, 0.050383903086185455, 0.04728446155786514, 0.04778149724006653, 0.046603649854660034, 0.04703020304441452, 0.04706201329827309, 0.046361614018678665, 0.052275076508522034, 0.044196952134370804, 0.048049502074718475, 0.04574687033891678, 0.047778382897377014, 0.044892169535160065, 0.044515132904052734, 0.047941528260707855, 0.045815691351890564, 0.044238731265068054, 0.044689349830150604, 0.04247842729091644, 0.04502720385789871, 0.0463646724820137, 0.044241826981306076, 0.04318062961101532, 0.0443708598613739, 0.044462140649557114, 0.04352950677275658, 0.04443090409040451, 0.04514497146010399, 0.04478442668914795, 0.04425559937953949, 0.04377281293272972, 0.04212457686662674, 0.044080667197704315, 0.04398658871650696, 0.043298304080963135, 0.04309814050793648, 0.04144025221467018, 0.04082820564508438]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:37 2016", "state": "available"}], "summary": "1062c3b97b938c0f39a62af5213ffaa8"}