{"content": {"hp_model": {"f0": 64, "f1": 16, "f2": 64, "f3": 32, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.007878793339585716, 0.01154837112839373, 0.009436416840826556, 0.00973975633854351, 0.0115883867481443, 0.010769310958009728, 0.012797448964460901, 0.012400740176165296, 0.01115079840567627, 0.010704627871944839, 0.01101417246206539, 0.00969375876884485, 0.008343111624322063, 0.008280808994053954, 0.009241108218003946, 0.010311555227615211, 0.011442523995278352, 0.011044790874376792, 0.011103801100266231, 0.011369182046983175, 0.010666423150609013, 0.010609806606682998, 0.010020632644529116, 0.00995282260975957, 0.011672202305354271, 0.013276956443411092, 0.01408434039816313, 0.013682857926092909, 0.013736568077032866, 0.013530754221065441, 0.014234117093437837, 0.013532783741227985, 0.013941437126631416, 0.014752395698681595, 0.016087353195735135, 0.01755224758271378, 0.017332903944977298, 0.015595788238311611, 0.016070372760717485, 0.015556978957305864, 0.01592744840994905, 0.015545902104733998, 0.015441028540394456, 0.016591663413661303, 0.0166725559344128, 0.014723872799010246, 0.014303959017462226, 0.015214217294826153, 0.014085608276414559, 0.013652422445576455, 0.014310139155678284, 0.013702573201402998, 0.013420698173157322, 0.013737485047333652, 0.013599924385809432, 0.014868414188965047, 0.014592456428458552, 0.014642432795545881, 0.013799285169701015, 0.013507288051400768, 0.012958608876450424, 0.012937950800335241, 0.01289385975985896, 0.013784984360871617, 0.013323121045909747, 0.014648751724172484, 0.014889945515270741, 0.015498228886250371, 0.015502254863072324, 0.01479399316346026, 0.014911540257060103, 0.014243712351596218, 0.01390873399601838, 0.01392895882398384, 0.013794937417514964, 0.012909114370104677, 0.013112342668482081, 0.013686029350045517, 0.013581625803048475, 0.014224819563531034, 0.014327771005584418, 0.01382325891764481, 0.013385326912578538, 0.013622275761675722, 0.014461562929319863, 0.015136140279802878, 0.013772537460114484, 0.014356783071170621, 0.013833379109595872, 0.014414789287615767, 0.014290201941184695, 0.015762096917151656, 0.016179842957023533, 0.014351780185837233, 0.014788585238232165, 0.01481522048999927, 0.014274282186736785, 0.01434093722806859, 0.013981395566611573, 0.012978648021856404, 0.014302687129681928, 0.013559495837532217, 0.013483268338362622, 0.013623994361049808, 0.013046314396632919, 0.012090874167427285, 0.011811470058243304, 0.012219520721478512, 0.01175832597507749, 0.011452780215660449, 0.01259838155134326, 0.011838589076981659, 0.011120637203513247, 0.011041605726055738, 0.01049425203164866, 0.010787020274543665, 0.010960800654786674, 0.010264329779394578, 0.010808726318063719, 0.01068836510103164, 0.010547885887450202, 0.010597727583513385, 0.010722715343567744, 0.010612751732959445, 0.010601318386356145, 0.011106724782986388, 0.010676135177476842, 0.010669002724654899, 0.011216751470595789, 0.010576963454276972, 0.01055973545962776, 0.010192314847649826, 0.010877136309288032, 0.010651063778160674, 0.010882086818638139, 0.010904295137101781, 0.010767515895127405, 0.011529928192899256, 0.011880283048585943, 0.011876119027192295, 0.012063007176796535, 0.01236811680837548], "moving_avg_accuracy_train": [0.0417076001003599, 0.08418451623927184, 0.12521518459158126, 0.16435560679895136, 0.20107229902603296, 0.2354077075220546, 0.267302377661322, 0.29693974916636917, 0.32445959349230336, 0.3499992225463122, 0.3736775667472458, 0.39562273400662973, 0.4159126748686098, 0.4347500422562412, 0.45223137353841514, 0.4684457693494869, 0.48359429194965264, 0.4976952811516973, 0.510841648258473, 0.5230685458057339, 0.534421561968516, 0.5450158424757064, 0.5549180323952639, 0.5641925823418763, 0.572823273350952, 0.5808861531091107, 0.5884449421390543, 0.5955570610088514, 0.6022462143464122, 0.6085129181240264, 0.6144807614572033, 0.6201075147284726, 0.6254435629856917, 0.6305296024743134, 0.6353673104854646, 0.639930475039539, 0.6442047699013105, 0.6482701992650001, 0.6521173506482546, 0.6557982427348226, 0.6593202729567722, 0.6627016526493749, 0.6658983541941458, 0.6689799265820402, 0.6719741587704124, 0.6747991400244621, 0.6774996611745168, 0.6801648981416905, 0.6827890787490329, 0.6853043011170699, 0.6877865291875795, 0.6902135578510475, 0.6925513434695973, 0.6948436875798635, 0.6970463422564932, 0.6992147073214031, 0.7013057448083935, 0.7032992856895419, 0.7052770871408904, 0.7072291694590089, 0.7091162518786489, 0.7109610383336873, 0.7127794562622695, 0.7145578304265556, 0.7163210915422611, 0.7180451742773392, 0.7197107449817574, 0.7213143542633436, 0.7229040869917711, 0.7245091605104327, 0.7260839350105615, 0.7276360906916297, 0.7291562636914959, 0.7306266898901757, 0.7320709812070827, 0.7335196529161087, 0.7349513406387559, 0.7363723209736437, 0.7377628104178998, 0.7391165574653493, 0.7404394533580263, 0.7417439559042834, 0.7430040387018673, 0.7442520455113595, 0.7454868227339408, 0.7467073681794929, 0.7479429347137954, 0.7492153798625247, 0.7505070648713812, 0.7517509615876854, 0.752975064279969, 0.7541976283923005, 0.7554118683850657, 0.7566116412237924, 0.7578238981631519, 0.7590009599145278, 0.7601648750895571, 0.7613100549970835, 0.7624523601055332, 0.7636059206412146, 0.7647649968126043, 0.7659337234025694, 0.7670809084347285, 0.7682155733648345, 0.769348378944787, 0.7704678853655539, 0.7715893734359107, 0.7727103198420889, 0.7737750112278966, 0.7748052409905813, 0.7758116109829776, 0.776861467153506, 0.7779132945522197, 0.7789622097098623, 0.7800340804874456, 0.7810918061884704, 0.7821600167598689, 0.7831818601431751, 0.7842014645381414, 0.7852283544388401, 0.7862734630875641, 0.787295441079749, 0.7882989266298583, 0.7892578311475665, 0.7902138511658848, 0.791174214532362, 0.7921361978121915, 0.7930647617818952, 0.7940166546974672, 0.7949477630833868, 0.7958625265902475, 0.7967787836499842, 0.7976847952120807, 0.7986001509679583, 0.799526313744686, 0.8004180610616164, 0.8012996887063776, 0.8021930628878347, 0.8030784798594793, 0.8039427844494358, 0.8047903769958636, 0.8056438910912201], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 601863025, "moving_var_accuracy_train": [0.015655715155183873, 0.030328739281714916, 0.04244750706247828, 0.051990510211371174, 0.05892449858311817, 0.06364233121410444, 0.06643352794232808, 0.06769553925564892, 0.06774206181559687, 0.06683830950398455, 0.06520045441046704, 0.06301472226380138, 0.06041838533906508, 0.05757016449602798, 0.05456352053699921, 0.05147332816696221, 0.04839129498297558, 0.045341706552963656, 0.042362978610622305, 0.039472153962241, 0.03668495734994842, 0.034026610630138905, 0.03150642985395188, 0.02912994235896656, 0.026887347568717145, 0.02478370308179617, 0.0228195503980093, 0.02099283547157148, 0.019296254875774937, 0.017720073574324723, 0.016268602603336346, 0.014926685514384374, 0.013690277661976284, 0.012554060074897027, 0.01150928483661773, 0.010545758589684009, 0.009655609099803902, 0.008838797633023854, 0.008088123033612563, 0.007401251429227941, 0.006772768558264086, 0.006198395260067584, 0.005670525840957891, 0.0051889380522986, 0.004750733084649698, 0.0043474844479563105, 0.003978371333497714, 0.0036444655929686437, 0.0033419959484113555, 0.0030647334456162787, 0.0028137132068008874, 0.0025853560993204542, 0.0023760076637730906, 0.00218570047107463, 0.002010795612587477, 0.0018520323148212257, 0.001706181023287094, 0.0015713307681616768, 0.0014494029785741154, 0.0013387583091070986, 0.0012369321987230142, 0.001143868112432951, 0.0010592410950565575, 0.0009817805175647066, 0.0009115842736676658, 0.0008471779977974477, 0.0007874273299604474, 0.0007318286615163064, 0.000681391046695179, 0.0006364382910284389, 0.0005951136944618968, 0.0005572850103401594, 0.0005223548428518429, 0.0004895787374185358, 0.00045939466034952236, 0.0004323430417993596, 0.00040755630523603095, 0.0003849733407216685, 0.00036387715470079197, 0.0003439831188470193, 0.00032533528884807144, 0.0003081173020019873, 0.000291595849712689, 0.0002764539537102683, 0.00026253063144389134, 0.000249685148961422, 0.00023845625601147375, 0.00022918268031905036, 0.0002212804637460851, 0.00021307792873896593, 0.00020525598247637098, 0.00019818235130758516, 0.00019163352501709927, 0.00018542526629630694, 0.00018010884164990142, 0.00017456722678387888, 0.0001693027909174627, 0.00016417544501113568, 0.00015950164915713328, 0.00015552780142675515, 0.00015206613942383228, 0.00014915282206027236, 0.00014608184133633353, 0.00014306083773521158, 0.00014030399029943432, 0.00013755324290473325, 0.00013511753804183277, 0.0001329144718473644, 0.00012982513438574637, 0.0001263949812224638, 0.00012287050815457852, 0.00012050323914828911, 0.00011840998312362214, 0.00011647099188265074, 0.00011516405536892017, 0.00011371670275950251, 0.00011261469690717868, 0.00011075070231652091, 0.00010903197018498126, 0.00010761929897989413, 0.00010668763787064348, 0.00010541882523217175, 0.00010393979195245732, 0.0001018212936239414, 9.986493274037485e-05, 9.817911962738059e-05, 9.668991414068636e-05, 9.478100213910492e-05, 9.345780302964023e-05, 9.191468816364403e-05, 9.02543498086357e-05, 8.878465782342976e-05, 8.729390459695869e-05, 8.610539957562648e-05, 8.521485701902603e-05, 8.385029081239731e-05, 8.246066746722252e-05, 8.139765757334771e-05, 8.031356073910183e-05, 7.900540648316999e-05, 7.757058395769225e-05, 7.63699023606718e-05], "duration": 51219.494858, "accuracy_train": [0.4170760010035991, 0.4664767614894795, 0.49449119976236616, 0.5166194066652824, 0.5315225290697674, 0.5444263839862495, 0.5543544089147288, 0.563676092711794, 0.5721381924257106, 0.579855884032392, 0.5867826645556479, 0.5931292393410853, 0.5985221426264304, 0.6042863487449244, 0.6095633550779808, 0.6143753316491326, 0.6199309953511444, 0.6246041839700996, 0.6291589522194536, 0.6331106237310815, 0.6365987074335548, 0.6403643670404209, 0.6440377416712809, 0.6476635318613879, 0.650499492432632, 0.6534520709325398, 0.6564740434085456, 0.6595661308370248, 0.6624485943844591, 0.6649132521225545, 0.6681913514557954, 0.6707482941698967, 0.6734679973006644, 0.6763039578719084, 0.6789066825858251, 0.680998956026209, 0.6826734236572536, 0.684859063538206, 0.6867417130975453, 0.688926271513935, 0.6910185449543189, 0.6931340698827981, 0.6946686680970838, 0.6967140780730897, 0.6989222484657622, 0.7002239713109081, 0.7018043515250092, 0.7041520308462532, 0.7064067042151163, 0.707941302429402, 0.7101265818221668, 0.7120568158222591, 0.7135914140365449, 0.7154747845722591, 0.7168702343461609, 0.7187299929055925, 0.7201250821913068, 0.7212411536198782, 0.723077300203027, 0.7247979103220745, 0.7260999936554079, 0.7275641164290328, 0.729145217619509, 0.7305631979051311, 0.7321904415836102, 0.7335619188930418, 0.7347008813215209, 0.7357468377976191, 0.7372116815476191, 0.7389548221783868, 0.7402569055117202, 0.741605491821244, 0.7428378206902916, 0.7438605256782945, 0.745069603059247, 0.7465576982973422, 0.7478365301425802, 0.7491611439876339, 0.7502772154162053, 0.7513002808923958, 0.7523455163921189, 0.753484478820598, 0.7543447838801218, 0.7554841067967885, 0.7565998177371723, 0.757692277189461, 0.7590630335225176, 0.760667386201089, 0.762132229951089, 0.7629460320344224, 0.7639919885105205, 0.7652007054032853, 0.766340028319952, 0.767409596772333, 0.7687342106173864, 0.7695945156769103, 0.7706401116648209, 0.7716166741648209, 0.7727331060815799, 0.7739879654623477, 0.7751966823551125, 0.7764522627122554, 0.7774055737241602, 0.7784275577357882, 0.7795436291643596, 0.7805434431524548, 0.7816827660691216, 0.782798837497693, 0.7833572337001661, 0.7840773088547435, 0.7848689409145441, 0.7863101726882613, 0.7873797411406422, 0.7884024461286453, 0.7896809174856959, 0.790611337497693, 0.7917739119024548, 0.792378450592931, 0.7933779040928387, 0.7944703635451275, 0.7956794409260798, 0.7964932430094132, 0.7973302965808416, 0.7978879718069398, 0.7988180313307494, 0.7998174848306571, 0.8007940473306571, 0.8014218375092286, 0.8025836909376154, 0.803327738556663, 0.8040953981519934, 0.8050250971876154, 0.8058388992709486, 0.8068383527708564, 0.8078617787352345, 0.8084437869139904, 0.8092343375092286, 0.8102334305209486, 0.811047232604282, 0.811721525759044, 0.8124187099137136, 0.8133255179494279], "end": "2016-01-24 18:40:46.988000", "learning_rate_per_epoch": [0.00025787908816710114, 0.00018234805611427873, 0.0001488865673309192, 0.00012893954408355057, 0.00011532703501870856, 0.00010527869744691998, 9.746913565322757e-05, 9.117402805713937e-05, 8.595969848101959e-05, 8.154853276209906e-05, 7.775347330607474e-05, 7.44432836654596e-05, 7.152279431466013e-05, 6.892108649481088e-05, 6.658409984083846e-05, 6.446977204177529e-05, 6.254486652323976e-05, 6.078268779674545e-05, 5.916152076679282e-05, 5.766351750935428e-05, 5.627383143291809e-05, 5.498000973602757e-05, 5.377150955609977e-05, 5.263934872345999e-05, 5.157581836101599e-05, 5.057425005361438e-05, 4.962885577697307e-05, 4.8734567826613784e-05, 4.788694786839187e-05, 4.708206688519567e-05, 4.631645424524322e-05, 4.5587014028569683e-05, 4.489098864723928e-05, 4.422590063768439e-05, 4.3589523556875065e-05, 4.297984924050979e-05, 4.2395062337163836e-05, 4.183351484243758e-05, 4.12937042710837e-05, 4.077426638104953e-05, 4.0273949707625434e-05, 3.979160828748718e-05, 3.932619438273832e-05, 3.887673665303737e-05, 3.844234743155539e-05, 3.802219725912437e-05, 3.7615533074131235e-05, 3.72216418327298e-05, 3.68398723367136e-05, 3.646961340564303e-05, 3.61102975148242e-05, 3.5761397157330066e-05, 3.5422417568042874e-05, 3.509290036163293e-05, 3.477240898064338e-05, 3.446054324740544e-05, 3.415692117414437e-05, 3.386118260095827e-05, 3.35730001097545e-05, 3.329204992041923e-05, 3.3018033718690276e-05, 3.2750678656157106e-05, 3.248971188440919e-05, 3.223488602088764e-05, 3.198596459697001e-05, 3.174272205797024e-05, 3.1504947401117533e-05, 3.127243326161988e-05, 3.104499410255812e-05, 3.08224480249919e-05, 3.060461676795967e-05, 3.0391343898372725e-05, 3.0182465707184747e-05, 2.9977836675243452e-05, 2.977731310238596e-05, 2.958076038339641e-05, 2.938805118901655e-05, 2.9199058189988136e-05, 2.901366497098934e-05, 2.883175875467714e-05, 2.8653232220676728e-05, 2.8477981686592102e-05, 2.830590892699547e-05, 2.8136915716459043e-05, 2.797091474349145e-05, 2.7807818696601316e-05, 2.764754208328668e-05, 2.7490004868013784e-05, 2.7335128834238276e-05, 2.7182843041373417e-05, 2.7033074729843065e-05, 2.6885754778049886e-05, 2.674081588338595e-05, 2.6598198019200936e-05, 2.6457837520865723e-05, 2.6319674361729994e-05, 2.6183655791101046e-05, 2.604972178232856e-05, 2.5917825041688047e-05, 2.5787909180507995e-05, 2.5659928724053316e-05, 2.5533834559610114e-05, 2.5409583031432703e-05, 2.528712502680719e-05, 2.5166422346956097e-05, 2.504743133613374e-05, 2.4930113795562647e-05, 2.4814427888486534e-05, 2.470033723511733e-05, 2.458780727465637e-05, 2.4476799808326177e-05, 2.4367283913306892e-05, 2.4259225028799847e-05, 2.4152590412995778e-05, 2.4047349143074825e-05, 2.3943473934195936e-05, 2.384093022556044e-05, 2.3739694370306097e-05, 2.3639737264602445e-05, 2.3541033442597836e-05, 2.3443553800461814e-05, 2.3347276510321535e-05, 2.3252174287335947e-05, 2.315822712262161e-05, 2.3065407731337473e-05, 2.2973696104600094e-05, 2.2883070414536633e-05, 2.2793507014284842e-05, 2.2704987713950686e-05, 2.2617492504650727e-05, 2.2531001377501525e-05, 2.244549432361964e-05, 2.236095315311104e-05, 2.227736149507109e-05, 2.2194699340616353e-05, 2.2112950318842195e-05, 2.2032098058843985e-05, 2.195212618971709e-05, 2.1873020159546286e-05, 2.1794761778437532e-05, 2.1717338313465007e-05, 2.1640733393724076e-05], "accuracy_valid": [0.42481204113328314, 0.47053987434111444, 0.5022281508847892, 0.5238860716302711, 0.5374667615775602, 0.5480162838855422, 0.5559508541980422, 0.5604880459337349, 0.5657370693712349, 0.5743231715926205, 0.5803046169051205, 0.5878229715737951, 0.5950663003576807, 0.5965105539344879, 0.5990740304969879, 0.6031126458960843, 0.6072733316076807, 0.6091146813817772, 0.6108236657567772, 0.6135195077183735, 0.6144960702183735, 0.6163374199924698, 0.6181787697665663, 0.6216070336031627, 0.6239263695406627, 0.6257574242281627, 0.6274561135165663, 0.6290430275790663, 0.6301416603915663, 0.6319727150790663, 0.6327051369540663, 0.6349126976656627, 0.636021625564759, 0.638218891189759, 0.640782367752259, 0.6408941429781627, 0.6422369164156627, 0.6432340690888554, 0.6444547722138554, 0.6465402626129518, 0.6476388954254518, 0.6485036826995482, 0.6486257530120482, 0.6493581748870482, 0.6506906532379518, 0.652430522872741, 0.6534173804593373, 0.652674663497741, 0.6534173804593373, 0.6539056617093373, 0.6542718726468373, 0.6557573065700302, 0.6556352362575302, 0.6562455878200302, 0.6580869375941265, 0.6588193594691265, 0.6594400061182228, 0.6603047933923193, 0.6608033697289157, 0.6620343679405121, 0.6627770849021084, 0.6630315206137049, 0.6635198018637049, 0.6641301534262049, 0.6646081395896084, 0.6654626317771084, 0.6657067724021084, 0.6666833349021084, 0.6673039815512049, 0.6673039815512049, 0.6681687688253012, 0.6676701924887049, 0.6686467549887049, 0.6688908956137049, 0.6681584737387049, 0.6684129094503012, 0.6689011907003012, 0.6690232610128012, 0.6703660344503012, 0.6714749623493976, 0.6714646672628012, 0.6709557958396084, 0.6716985128012049, 0.6723088643637049, 0.6725530049887049, 0.6726750753012049, 0.6728074407003012, 0.6729089208396084, 0.6725427099021084, 0.6729089208396084, 0.6729089208396084, 0.6738854833396084, 0.6728883306664157, 0.6736413427146084, 0.6732648366905121, 0.6737531179405121, 0.6737531179405121, 0.6737531179405121, 0.6730206960655121, 0.6728986257530121, 0.6728883306664157, 0.6731427663780121, 0.6729089208396084, 0.6729089208396084, 0.6730309911521084, 0.6735192724021084, 0.6731530614646084, 0.6732751317771084, 0.6730309911521084, 0.6731530614646084, 0.6720338384789157, 0.6726441900414157, 0.6724103445030121, 0.6726544851280121, 0.6736413427146084, 0.6738854833396084, 0.6730206960655121, 0.6730309911521084, 0.6727868505271084, 0.6735192724021084, 0.6731633565512049, 0.6729295110128012, 0.6725633000753012, 0.6723191594503012, 0.6724412297628012, 0.6723191594503012, 0.6720750188253012, 0.6730515813253012, 0.6719529485128012, 0.6718308782003012, 0.6714749623493976, 0.671607327748494, 0.670752835560994, 0.670874905873494, 0.670508694935994, 0.671607327748494, 0.670996976185994, 0.6711396366716867, 0.6717602833207832, 0.6713940723832832, 0.6711499317582832, 0.6709057911332832], "accuracy_test": 0.5158183195153061, "start": "2016-01-24 04:27:07.493000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0], "accuracy_train_last": 0.8133255179494279, "batch_size_eval": 1024, "accuracy_train_std": [0.01236139504496559, 0.011764583640035376, 0.01208408434555205, 0.012590240220799331, 0.013320731126340444, 0.013060305143120706, 0.013922305189510601, 0.014555626732624758, 0.01406970830021615, 0.014106978154443115, 0.014126984239851937, 0.014260335085495332, 0.013984354762039894, 0.013630078740055236, 0.01350229347847494, 0.01313383538123757, 0.013223045262591963, 0.013455890912393449, 0.013388914795255972, 0.013391450027807865, 0.013319782716493402, 0.013123993371204382, 0.013252117800642674, 0.012501783382143104, 0.013153024940100762, 0.01313313033638275, 0.01262625726472823, 0.012504224271569664, 0.011973468244535608, 0.011761890512858553, 0.011699959049157355, 0.011815464276458505, 0.012155143791195028, 0.011368278453636466, 0.011697799853977372, 0.0118080645248501, 0.01160249143809082, 0.011963613776200853, 0.01216060729381166, 0.012342690181877732, 0.012535306046129843, 0.012207517989837083, 0.012159751360266716, 0.012218397970931511, 0.012439757277091902, 0.0127013791109395, 0.012778297518460243, 0.013053731033425015, 0.013392576130721407, 0.013377906057863105, 0.013660251421081245, 0.013898347523999563, 0.013688450317492286, 0.013545488412712966, 0.01288978661203471, 0.012769241604364063, 0.012598046476202378, 0.012311789870081411, 0.012348274150031707, 0.012042747760486349, 0.011676784970633782, 0.011866046588783711, 0.011982599737768506, 0.011969033478106867, 0.012393717182023997, 0.012104414420500085, 0.012635933620058475, 0.01265421519452594, 0.01209220458567337, 0.012148789352376475, 0.01185562885530445, 0.0121574877109161, 0.012010254979204797, 0.012046875990725405, 0.011875500955972128, 0.01175704498902939, 0.011189764952772062, 0.011259712835485446, 0.01132967953988563, 0.011489807297597854, 0.011657322888036954, 0.011390848772070347, 0.011264932236549861, 0.01160236865942334, 0.011642486605395885, 0.01192010002492126, 0.012141746357823748, 0.011956051643515, 0.011700883126832906, 0.011412246735859395, 0.011716908441320647, 0.011674289394420716, 0.011672745100387094, 0.01176599573961024, 0.012104920917394598, 0.012141258233507446, 0.012043210987467945, 0.011695633161553911, 0.011907110997350237, 0.011932877876130215, 0.012176935326075401, 0.012079599633168212, 0.012365538312811916, 0.012569818001942516, 0.012130961691800826, 0.012596746781863793, 0.012667513178675656, 0.012594347283989464, 0.01264124848915854, 0.012879977288034203, 0.012774976137394303, 0.012772493762607447, 0.01307722166568177, 0.013192814695412714, 0.013138862375773606, 0.013060084054336982, 0.012780543238123042, 0.012799652352152923, 0.012934815366514325, 0.012274737279327472, 0.012248536784527354, 0.01239002865216874, 0.012394874169415449, 0.01238757167619424, 0.012392081992605193, 0.012537745177080945, 0.01265572287450439, 0.012336768537738116, 0.012282173034648574, 0.012430557081068355, 0.012236344631034839, 0.012468319857558741, 0.01249345751540068, 0.012438350369446195, 0.012433002009962054, 0.01253059836903233, 0.0126000970632144, 0.012530502305680792, 0.012390460751502934, 0.012533727416414371, 0.012563123825357033, 0.012540763178581658], "accuracy_test_std": 0.0083527082253356, "error_valid": [0.5751879588667168, 0.5294601256588856, 0.4977718491152108, 0.4761139283697289, 0.46253323842243976, 0.45198371611445776, 0.44404914580195776, 0.4395119540662651, 0.4342629306287651, 0.4256768284073795, 0.4196953830948795, 0.41217702842620485, 0.4049336996423193, 0.40348944606551207, 0.40092596950301207, 0.39688735410391573, 0.3927266683923193, 0.39088531861822284, 0.38917633424322284, 0.3864804922816265, 0.3855039297816265, 0.3836625800075302, 0.38182123023343373, 0.3783929663968373, 0.3760736304593373, 0.3742425757718373, 0.37254388648343373, 0.37095697242093373, 0.36985833960843373, 0.36802728492093373, 0.36729486304593373, 0.3650873023343373, 0.36397837443524095, 0.36178110881024095, 0.35921763224774095, 0.3591058570218373, 0.3577630835843373, 0.3567659309111446, 0.3555452277861446, 0.35345973738704817, 0.35236110457454817, 0.35149631730045183, 0.35137424698795183, 0.35064182511295183, 0.34930934676204817, 0.34756947712725905, 0.3465826195406627, 0.34732533650225905, 0.3465826195406627, 0.3460943382906627, 0.3457281273531627, 0.3442426934299698, 0.3443647637424698, 0.3437544121799698, 0.3419130624058735, 0.3411806405308735, 0.34055999388177716, 0.3396952066076807, 0.33919663027108427, 0.33796563205948793, 0.3372229150978916, 0.33696847938629515, 0.33648019813629515, 0.33586984657379515, 0.3353918604103916, 0.3345373682228916, 0.3342932275978916, 0.3333166650978916, 0.33269601844879515, 0.33269601844879515, 0.3318312311746988, 0.33232980751129515, 0.33135324501129515, 0.33110910438629515, 0.33184152626129515, 0.3315870905496988, 0.3310988092996988, 0.3309767389871988, 0.3296339655496988, 0.32852503765060237, 0.3285353327371988, 0.3290442041603916, 0.32830148719879515, 0.32769113563629515, 0.32744699501129515, 0.32732492469879515, 0.3271925592996988, 0.3270910791603916, 0.3274572900978916, 0.3270910791603916, 0.3270910791603916, 0.3261145166603916, 0.32711166933358427, 0.3263586572853916, 0.32673516330948793, 0.32624688205948793, 0.32624688205948793, 0.32624688205948793, 0.32697930393448793, 0.32710137424698793, 0.32711166933358427, 0.32685723362198793, 0.3270910791603916, 0.3270910791603916, 0.3269690088478916, 0.3264807275978916, 0.3268469385353916, 0.3267248682228916, 0.3269690088478916, 0.3268469385353916, 0.32796616152108427, 0.32735580995858427, 0.32758965549698793, 0.32734551487198793, 0.3263586572853916, 0.3261145166603916, 0.32697930393448793, 0.3269690088478916, 0.3272131494728916, 0.3264807275978916, 0.32683664344879515, 0.3270704889871988, 0.3274366999246988, 0.3276808405496988, 0.3275587702371988, 0.3276808405496988, 0.3279249811746988, 0.3269484186746988, 0.3280470514871988, 0.3281691217996988, 0.32852503765060237, 0.32839267225150603, 0.32924716443900603, 0.32912509412650603, 0.32949130506400603, 0.32839267225150603, 0.32900302381400603, 0.32886036332831325, 0.3282397166792168, 0.3286059276167168, 0.3288500682417168, 0.3290942088667168], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.8735519262928957, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.00025787909666262135, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "optimization": "nesterov_momentum", "nb_data_augmentation": 0, "learning_rate_decay_method": "sqrt", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 6.944620824160196e-07, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.023024128369472797}, "accuracy_valid_max": 0.6738854833396084, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.6709057911332832, "loss_train": [1.8510016202926636, 1.577080488204956, 1.4821739196777344, 1.4205466508865356, 1.3730047941207886, 1.3351328372955322, 1.3040932416915894, 1.277466058731079, 1.253893256187439, 1.2327477931976318, 1.2134071588516235, 1.195569634437561, 1.1789486408233643, 1.163382649421692, 1.1487538814544678, 1.1348724365234375, 1.1217753887176514, 1.109302043914795, 1.0973966121673584, 1.0860651731491089, 1.0752447843551636, 1.0648343563079834, 1.0548832416534424, 1.0453646183013916, 1.0361881256103516, 1.027345061302185, 1.0187488794326782, 1.010434865951538, 1.0023651123046875, 0.9945657253265381, 0.9869800806045532, 0.9795722961425781, 0.9723917245864868, 0.9653661847114563, 0.9585236310958862, 0.9518402814865112, 0.9452896118164062, 0.9388862252235413, 0.9326068162918091, 0.9264484643936157, 0.9204244613647461, 0.914457380771637, 0.9086172580718994, 0.9028869867324829, 0.8971976637840271, 0.8916493058204651, 0.8861321210861206, 0.8806909322738647, 0.8753546476364136, 0.8700907230377197, 0.8648963570594788, 0.8598013520240784, 0.8547408580780029, 0.8497216105461121, 0.8447596430778503, 0.8398367762565613, 0.8349931836128235, 0.8302054405212402, 0.8254356980323792, 0.8207354545593262, 0.8160718083381653, 0.811453640460968, 0.8068786859512329, 0.8023408651351929, 0.7978362441062927, 0.7933775782585144, 0.7889317274093628, 0.7845013737678528, 0.7801299691200256, 0.7757896184921265, 0.7714684009552002, 0.7671682834625244, 0.7629022002220154, 0.7586514353752136, 0.7544582486152649, 0.7502499222755432, 0.7460728883743286, 0.7419111132621765, 0.7377966642379761, 0.7336989045143127, 0.7295923233032227, 0.7254934310913086, 0.7214435338973999, 0.7174171209335327, 0.7133938074111938, 0.7094036936759949, 0.7054228782653809, 0.701459527015686, 0.6974902153015137, 0.6935195922851562, 0.689599335193634, 0.6856840252876282, 0.6817622184753418, 0.6778727769851685, 0.6739969849586487, 0.6701498031616211, 0.666294276714325, 0.6624736785888672, 0.6586605310440063, 0.6548340320587158, 0.6510186195373535, 0.6472154855728149, 0.6434324383735657, 0.6396396160125732, 0.6358569860458374, 0.6320872902870178, 0.62831050157547, 0.6245762705802917, 0.6208134293556213, 0.6170498132705688, 0.6133091449737549, 0.6095668077468872, 0.6058354377746582, 0.6021121144294739, 0.5984121561050415, 0.5947243571281433, 0.591048002243042, 0.5873569846153259, 0.583671510219574, 0.5800066590309143, 0.5763379335403442, 0.5726779699325562, 0.5690264701843262, 0.5653680562973022, 0.5617102384567261, 0.5580581426620483, 0.554414689540863, 0.5507807731628418, 0.54715895652771, 0.5435592532157898, 0.5399318933486938, 0.5363221168518066, 0.5327155590057373, 0.529132604598999, 0.5255321860313416, 0.521954357624054, 0.5183884501457214, 0.5148204565048218, 0.5112598538398743, 0.5077118277549744, 0.5041730999946594, 0.5006245970726013], "accuracy_train_first": 0.4170760010035991, "model": "residualv3", "loss_std": [0.2829996645450592, 0.16034458577632904, 0.16431604325771332, 0.16730354726314545, 0.16986651718616486, 0.1717080920934677, 0.17273740470409393, 0.17331698536872864, 0.1736401468515396, 0.17370498180389404, 0.1736105978488922, 0.1735750436782837, 0.17348141968250275, 0.17339883744716644, 0.173319473862648, 0.17325054109096527, 0.17319905757904053, 0.17316648364067078, 0.17307887971401215, 0.17311908304691315, 0.17307284474372864, 0.17306694388389587, 0.1729949414730072, 0.1729511171579361, 0.17285755276679993, 0.17275848984718323, 0.17260053753852844, 0.17247436940670013, 0.1722950041294098, 0.17214028537273407, 0.17203234136104584, 0.1718934327363968, 0.17172856628894806, 0.17160385847091675, 0.17144350707530975, 0.17133048176765442, 0.17116300761699677, 0.17099732160568237, 0.1708156317472458, 0.17061452567577362, 0.17042496800422668, 0.17022758722305298, 0.1700405329465866, 0.1698526293039322, 0.16965904831886292, 0.16945601999759674, 0.16924330592155457, 0.16899418830871582, 0.16876208782196045, 0.1685296893119812, 0.16829076409339905, 0.16805066168308258, 0.1678064912557602, 0.1675540804862976, 0.16731253266334534, 0.16706886887550354, 0.16683150827884674, 0.16656167805194855, 0.16630953550338745, 0.16604521870613098, 0.16576838493347168, 0.16550324857234955, 0.16525958478450775, 0.1649733930826187, 0.1646832674741745, 0.164402574300766, 0.16411460936069489, 0.16385121643543243, 0.16354279220104218, 0.1632322072982788, 0.16289140284061432, 0.16259226202964783, 0.1622699499130249, 0.16191630065441132, 0.1615970879793167, 0.1612463891506195, 0.16089951992034912, 0.16056165099143982, 0.16021688282489777, 0.1598743498325348, 0.1595175862312317, 0.15913932025432587, 0.15881507098674774, 0.1584567278623581, 0.15809684991836548, 0.157746821641922, 0.15738022327423096, 0.1570267677307129, 0.15664798021316528, 0.15628458559513092, 0.15590228140354156, 0.15550896525382996, 0.1551121473312378, 0.15473651885986328, 0.15435707569122314, 0.15398132801055908, 0.1536017209291458, 0.15323521196842194, 0.1528548151254654, 0.152457132935524, 0.15205059945583344, 0.151635080575943, 0.1512226164340973, 0.15080592036247253, 0.1503942459821701, 0.14997558295726776, 0.14954820275306702, 0.1491309404373169, 0.14870762825012207, 0.14825637638568878, 0.14782211184501648, 0.1473972499370575, 0.14694471657276154, 0.14649656414985657, 0.14605143666267395, 0.14557166397571564, 0.14510351419448853, 0.14461840689182281, 0.14415375888347626, 0.14368392527103424, 0.14319507777690887, 0.14269278943538666, 0.14217843115329742, 0.1416914463043213, 0.14118890464305878, 0.14068345725536346, 0.1402020901441574, 0.1396670639514923, 0.1391269862651825, 0.13861395418643951, 0.13807512819766998, 0.13753502070903778, 0.13699959218502045, 0.13646842539310455, 0.13590456545352936, 0.13537932932376862, 0.13481442630290985, 0.13425001502037048, 0.1337030678987503, 0.13314172625541687, 0.13256965577602386, 0.13200809061527252]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:11 2016", "state": "available"}], "summary": "e59fb746f7ebe3d1fff732e2dae23205"}