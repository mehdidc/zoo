{"content": {"hp_model": {"f1": 115, "f2": 64, "f3": 77, "nonlin": "leaky_rectify", "ds2": 795, "ds1": 301, "do2": 0.9583909684719003, "do3": 0.0934810776244861, "do1": 0.36377724864124283, "do4": 0.20213358091385003, "do5": 0.5933922871453653}, "accuracy_valid_std": [0.08354451517690643, 0.10108538211739511, 0.098809174529168, 0.09891930684249226, 0.09903210812747015, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515, 0.09917238980086515], "moving_avg_accuracy_train": [0.013250658885542166, 0.03440535579819276, 0.05441173286897589, 0.07252571771460842, 0.08882359775037649, 0.10349168978256774, 0.11669297261153988, 0.1285741271576148, 0.13926716624908222, 0.14889090143140293, 0.15755226309549153, 0.16534748859317128, 0.17236319154108304, 0.17867732419420362, 0.1843600435820122, 0.18947449103103986, 0.1940774937351648, 0.19822019616887726, 0.20194862835921845, 0.2053042173305255, 0.20832424740470185, 0.21104227447146057, 0.21348849883154342, 0.215690100755618, 0.2176715424872851, 0.21945484004578553, 0.22105980784843587, 0.2225042788708212, 0.22380430279096797, 0.22497432431910008, 0.22602734369441901, 0.226975061132206, 0.2278280068262143, 0.22859565795082176, 0.2292865439629685, 0.22990834137390054, 0.2304679590437394, 0.23097161494659435, 0.23142490525916382, 0.23183286654047636, 0.23220003169365766, 0.2325304803315208, 0.23282788410559763, 0.2330955475022668, 0.23333644455926905, 0.23355325191057108, 0.2337483785267429, 0.23392399248129753, 0.2340820450403967, 0.23422429234358594, 0.23435231491645625, 0.23446753523203956, 0.23457123351606451, 0.234664561971687, 0.23474855758174723, 0.23482415363080145], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.0015802196481089783, 0.00544988849649306, 0.008507195758328968, 0.010609524205386316, 0.011939159827790272, 0.012681620159794741, 0.012981922958789898, 0.01295418716304036, 0.01268783821184118, 0.012252600900391996, 0.011702513483238093, 0.011079151999951374, 0.01041421759063628, 0.009731610272023489, 0.009049088941586318, 0.008379598201807479, 0.007732327086674364, 0.0071135522290955095, 0.006527307865567711, 0.005975916875110158, 0.00546041042243951, 0.004980858420416257, 0.004536628700953397, 0.004126589290146857, 0.0037492653631560993, 0.003402960178479871, 0.0030858474554597832, 0.002796041178724403, 0.0025316476205885473, 0.0022908034119163262, 0.002071702718967867, 0.0018726159621480507, 0.0016919020131455917, 0.001528015406073033, 0.00137950977680175, 0.0012450384873037513, 0.0011233531860009392, 0.0010133008908171713, 0.0009138200507026783, 0.0008239359372958619, 0.0007427556358136715, 0.0006694628389526948, 0.0006033125961009416, 0.0005436261297360956, 0.0004897857992911371, 0.00044123026821023075, 0.0003974499109562556, 0.0003579824822099388, 0.0003224090594918851, 0.00029035026220007815, 0.0002614627439925494, 0.00023543595108340248, 0.00021198913598204972, 0.0001908686141895046, 0.00017184525013313863, 0.0001547121579835182], "duration": 31121.161228, "accuracy_train": [0.1325065888554217, 0.2247976280120482, 0.23446912650602408, 0.2355515813253012, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914, 0.23550451807228914], "end": "2016-01-17 13:56:02.129000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0], "accuracy_valid": [0.13194444444444445, 0.2282318376068376, 0.23731303418803418, 0.23931623931623933, 0.23958333333333334, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035, 0.23971688034188035], "accuracy_test": 0.239, "start": "2016-01-17 05:17:20.968000", "learning_rate_per_epoch": [9.957222209777683e-05, 6.754646619810956e-06, 4.582126393870567e-07, 3.108361212866839e-08, 2.1086083989985127e-09, 1.4304094020367586e-10, 9.703419491524645e-12, 6.582475450128689e-13, 4.465331370721165e-14, 3.0291314856418063e-15, 2.05486156362504e-16, 1.3939493827149688e-17, 9.45608681237704e-19, 6.414693238764671e-20, 4.351513263202697e-21, 2.9519210414338816e-22, 2.0024845959470016e-23, 1.3584185773981955e-24, 9.215057710221454e-26, 6.25118688016599e-27, 4.240596329504397e-28, 2.8766788031289163e-29, 1.9514426856983866e-30, 1.3237934250782414e-31, 8.980172195375572e-33, 6.091848403745325e-34, 4.132506352571223e-35, 2.8033542127605307e-36, 1.9017016975197007e-37, 1.2900507805405342e-38, 8.751277065524202e-40, 5.936600944112088e-41, 4.027331786469524e-42, 2.7325320054333933e-43, 1.8216880036222622e-44, 1.401298464324817e-45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_train_last": 0.23550451807228914, "error_valid": [0.8680555555555556, 0.7717681623931624, 0.7626869658119658, 0.7606837606837606, 0.7604166666666666, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197, 0.7602831196581197], "accuracy_train_std": [0.08520866294264055, 0.10399253563606502, 0.10586278035123978, 0.10604368156381522, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857, 0.10592624121993857], "accuracy_test_std": 0.10737318100903968, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1.0, 1.2], "translation_range": [-3, 3], "momentum": 0.8357162746512363, "shear_range": [1, 1.1], "patience_check_each": 1, "learning_rate": 0.0014678232769045655, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "optimization": "rmsprop", "nb_data_augmentation": 2, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 2.7493168425429554e-08, "valid_ratio": 0.15, "rotation_range": [-90, 90], "learning_rate_decay": 0.932163343762738}, "accuracy_valid_max": 0.23971688034188035, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.98, interval=[0.8, 1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256, 512],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1.0, 1.2)),\n        rotation_range=make_constant_param((-90, 90)),\n        shear_range=make_constant_param((1, 1.1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    instantiate = instantiate_random\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.23971688034188035, "loss_train": [2.0825254917144775, 1.7755413055419922, 1.7310001850128174, 1.727908968925476, 1.7266051769256592, 1.7260273694992065, 1.7233860492706299, 1.7271090745925903, 1.7252452373504639, 1.7276511192321777, 1.7249137163162231, 1.7278003692626953, 1.7245105504989624, 1.7258946895599365, 1.7268717288970947, 1.7279797792434692, 1.7267634868621826, 1.7301982641220093, 1.7264338731765747, 1.7245858907699585, 1.7235989570617676, 1.728954792022705, 1.725361943244934, 1.72728431224823, 1.7263779640197754, 1.7256836891174316, 1.7260795831680298, 1.727542519569397, 1.7273317575454712, 1.7276989221572876, 1.7268352508544922, 1.729071021080017, 1.7281113862991333, 1.7291544675827026, 1.7282408475875854, 1.728548288345337, 1.7279459238052368, 1.729419469833374, 1.7272390127182007, 1.7282624244689941, 1.7277114391326904, 1.7263901233673096, 1.7259527444839478, 1.7283985614776611, 1.7266348600387573, 1.7292554378509521, 1.727051019668579, 1.724895715713501, 1.7302910089492798, 1.7275549173355103, 1.726147174835205, 1.7251193523406982, 1.7272758483886719, 1.7257417440414429, 1.7246958017349243, 1.7285767793655396], "accuracy_train_first": 0.1325065888554217, "model": "vgg", "loss_std": [0.3493594825267792, 0.20457075536251068, 0.20693176984786987, 0.2084786742925644, 0.20942655205726624, 0.20587405562400818, 0.20558303594589233, 0.20629936456680298, 0.20662550628185272, 0.2068016678094864, 0.20688682794570923, 0.20870238542556763, 0.204026460647583, 0.20749615132808685, 0.20539067685604095, 0.20621247589588165, 0.20688310265541077, 0.20585185289382935, 0.2036779671907425, 0.20815585553646088, 0.20330967009067535, 0.20631730556488037, 0.20656582713127136, 0.20453070104122162, 0.2072059065103531, 0.20751549303531647, 0.20565886795520782, 0.20709531009197235, 0.20754089951515198, 0.2089892476797104, 0.2067856788635254, 0.20767658948898315, 0.20832481980323792, 0.20807397365570068, 0.20660513639450073, 0.2050740122795105, 0.2072765827178955, 0.20611965656280518, 0.20687812566757202, 0.21082071959972382, 0.2071046680212021, 0.2063290774822235, 0.2077915370464325, 0.20986321568489075, 0.2051602452993393, 0.20885434746742249, 0.2061643749475479, 0.20692342519760132, 0.20813997089862823, 0.20694275200366974, 0.20515449345111847, 0.20672030746936798, 0.2074064463376999, 0.20856766402721405, 0.20575378835201263, 0.2108164131641388]}, "state": "available", "life": [{"dt": "Sun May 15 22:04:58 2016", "state": "available"}], "summary": "081bcf9140410dd80f7f9c08d52463e0"}