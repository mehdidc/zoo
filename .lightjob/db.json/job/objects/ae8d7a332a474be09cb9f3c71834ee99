{"content": {"hp_model": {"f0": 32, "f1": 16, "f2": 32, "f3": 32, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.6332401037216187, 1.3201744556427002, 1.159394383430481, 1.0480687618255615, 0.9631646275520325, 0.8931151032447815, 0.8314204216003418, 0.7750818729400635, 0.7243164777755737, 0.6758065223693848, 0.6285642981529236, 0.5837259292602539, 0.5411347150802612, 0.49844345450401306, 0.4563833773136139, 0.42130547761917114, 0.3933224380016327, 0.3704432249069214, 0.34903568029403687, 0.32277679443359375, 0.3064204156398773, 0.28480419516563416, 0.27322855591773987, 0.24930061399936676, 0.2323291152715683, 0.21940858662128448, 0.2107006460428238, 0.1987638920545578, 0.19177071750164032, 0.1797415316104889, 0.1670360267162323, 0.15997958183288574, 0.1536121517419815, 0.13928745687007904, 0.14223404228687286, 0.13461433351039886, 0.12588095664978027, 0.11841284483671188, 0.10660232603549957, 0.10102945566177368, 0.10478366166353226, 0.10723043233156204, 0.10649152845144272, 0.09517331421375275, 0.08331074565649033, 0.08246080577373505, 0.07799306511878967, 0.06959300488233566, 0.07999429851770401, 0.07094231992959976, 0.0797165110707283, 0.08092506974935532, 0.0836152583360672, 0.07747895270586014, 0.07171531766653061, 0.07585771381855011, 0.075668103992939, 0.07644616812467575, 0.06707597523927689, 0.06624656170606613, 0.05976857244968414, 0.05048253387212753, 0.04237626865506172, 0.0379020981490612, 0.03578455373644829, 0.03517776355147362, 0.03497133404016495, 0.034862883388996124, 0.03478068485856056, 0.034712232649326324, 0.03465244546532631, 0.034598395228385925, 0.03454861044883728, 0.03450189530849457, 0.034457728266716, 0.03441552445292473, 0.03437497839331627, 0.03433575481176376, 0.0342976450920105, 0.034260474145412445, 0.03422412648797035, 0.03418847545981407, 0.034153424203395844, 0.034118954092264175, 0.03408495709300041, 0.03405139595270157, 0.034018199890851974, 0.03398537263274193, 0.033952873200178146, 0.033920664340257645, 0.03388873115181923, 0.03385702520608902, 0.03382554650306702, 0.03379427641630173, 0.03376319631934166, 0.033732302486896515, 0.0337015762925148, 0.03367100656032562, 0.033640582114458084, 0.03361028805375099, 0.03358012065291405, 0.03355008736252785, 0.0335201658308506, 0.033490341156721115, 0.03346062824130058, 0.03343101218342781, 0.0334014967083931, 0.033372070640325546, 0.03334272652864456, 0.03331346437335014, 0.03328428417444229, 0.03325517103075981, 0.0332261361181736, 0.03319717198610306, 0.03316827863454819, 0.033139441162347794, 0.03311067819595337, 0.03308196738362312, 0.03305332362651825, 0.03302473574876785, 0.032996200025081635, 0.03296772018074989, 0.03293929621577263, 0.03291092440485954, 0.03288259729743004, 0.03285432234406471, 0.032826103270053864, 0.032797921448946, 0.032769788056612015, 0.03274170309305191], "moving_avg_accuracy_train": [0.050599239514119584, 0.10466514612749167, 0.15898537030788573, 0.21094713040588087, 0.2599791578022621, 0.30581395675763945, 0.3479300509305281, 0.3864599646670711, 0.4229292523227339, 0.4568692868138362, 0.4882984778664411, 0.5167495469887117, 0.5420812137368689, 0.5662094465875268, 0.588489614972102, 0.6058590134266728, 0.6259039195487065, 0.6416337139229702, 0.6595682467965462, 0.6668955163686912, 0.6792705231193729, 0.687978104493759, 0.7018062594317493, 0.7179313721721293, 0.7316280626992409, 0.7449689572010498, 0.7554246356549943, 0.768610787930211, 0.7786670340552869, 0.7883063508024899, 0.786547729726486, 0.7990391505753582, 0.8085333139715877, 0.8183543153828914, 0.8274489830221124, 0.8357340931985834, 0.8411639917183338, 0.8485752549680582, 0.8545620504845414, 0.8611708695743763, 0.8673141913528652, 0.8712781395117832, 0.8762199278988755, 0.8828691649793274, 0.8889116070719724, 0.8923992934947124, 0.8973445995584471, 0.9024998590562754, 0.9056424491127187, 0.9093890697480046, 0.9133166667876006, 0.9130389089543555, 0.9130490191317328, 0.9166013927353552, 0.9193683043512161, 0.9224048987269102, 0.9245591239531948, 0.9259722988306236, 0.9290298344572051, 0.9312608913342513, 0.9342476941235835, 0.9381493280196416, 0.9423722219641706, 0.9468308436273419, 0.9511040197908628, 0.9550684609273173, 0.9586783106286978, 0.9619388011039879, 0.964887193424606, 0.9675570225548291, 0.9699714945160774, 0.9721607953228676, 0.9741358163465978, 0.9759249610120027, 0.9775444918061051, 0.979009044967226, 0.9803224925146156, 0.9815162210513138, 0.9825952270319612, 0.9835686575633534, 0.9844517204880351, 0.9852557777154866, 0.9859887298154311, 0.9866576873006192, 0.987262074186098, 0.9878083475318384, 0.988299993543005, 0.9887471252506739, 0.9891565192340044, 0.9895272989678113, 0.9898656510258567, 0.9901655175804784, 0.9904446980748762, 0.9906982856686437, 0.9909265145030345, 0.9911319204539861, 0.9913167858098426, 0.9914877788789137, 0.9916439977898872, 0.9917892451073824, 0.9919222928419377, 0.9920443609518469, 0.9921565473995747, 0.9922598403513393, 0.9923528040079274, 0.9924411215964757, 0.9925229325749787, 0.9926012127532505, 0.9926739900625047, 0.9927418147896429, 0.9928028570440672, 0.9928577950730492, 0.992902589001514, 0.9929429035371322, 0.9929861620656173, 0.9930274198900634, 0.9930668770808743, 0.9931023885526041, 0.9931366740259706, 0.9931675309520003, 0.993199952483046, 0.9932314570097968, 0.9932598110838724, 0.9932853297505405, 0.9933082965505418, 0.9933312918193525, 0.9933519875612822, 0.9933752640266379, 0.993396212845458, 0.9934150667823961], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.049798510448042156, 0.10227833207831323, 0.15490185546874996, 0.2045152973221009, 0.25042883724350523, 0.29313350622999806, 0.3317843463543627, 0.36659451652879094, 0.3993804244391648, 0.4293048396383206, 0.4565339001021994, 0.480220124408621, 0.5007310327132408, 0.5199772477306969, 0.5371035287464073, 0.5502018166850197, 0.5638773652028881, 0.5736430607703251, 0.5848849176262746, 0.5900341800052133, 0.5963297019049179, 0.6010699962569713, 0.6085100892988194, 0.6178450978764676, 0.6250532579871642, 0.6323799457897279, 0.6379984318206949, 0.6453582271928423, 0.6499625882555611, 0.6544188955538754, 0.6528711077963042, 0.659352957624731, 0.6633463022048784, 0.66844486569674, 0.6727345741101232, 0.6760021676215506, 0.6773162310269408, 0.6807960160567769, 0.681924692877304, 0.684381078775944, 0.6867261034284701, 0.6885405683397646, 0.6915887199489357, 0.6939149583173704, 0.696251683965302, 0.6966660487013019, 0.6990197516248464, 0.7007311341901479, 0.7016221997526843, 0.7030142142936056, 0.7044298368213233, 0.7033274969644923, 0.7029132395967328, 0.7046889925384149, 0.7063380573282481, 0.7080887113092788, 0.7092186697152485, 0.7095946896036635, 0.7101915141768061, 0.7099504948186135, 0.711766121635698, 0.7139881822883933, 0.7161111366969787, 0.7181875465589074, 0.7203300176654414, 0.7223722229772105, 0.7241837346779835, 0.7257530600524291, 0.7272397245855898, 0.7285899296966845, 0.7297929072654196, 0.7308877941085312, 0.7318487782048317, 0.7326892498290023, 0.7334578813220057, 0.7341130285719587, 0.7347525187305761, 0.7353280598733318, 0.735870460964312, 0.7363718584861036, 0.7367864951619661, 0.7370864259827424, 0.7372576779627814, 0.7374626918871358, 0.7376594114503048, 0.7378486660884068, 0.7379945812001987, 0.7381381118320613, 0.7382794964319878, 0.7383945355406716, 0.738498070738487, 0.7386034594477707, 0.7387227233486262, 0.7388178538281461, 0.7389533288933736, 0.7390630494208283, 0.7391740049267876, 0.739261657850901, 0.7393904031162628, 0.7394940668238383, 0.7395751571294064, 0.7396481384044176, 0.7397016145206776, 0.7397497430253117, 0.7397930586794823, 0.7398198357369858, 0.739819521026239, 0.739843651849067, 0.7398531625583621, 0.7398617221967277, 0.7398317752688471, 0.7398170300650047, 0.7397793453190464, 0.739696600922684, 0.7396343379972078, 0.7395660943330291, 0.7395046750352684, 0.7394249836047837, 0.7393410542860974, 0.7392777249305299, 0.7392085214792691, 0.7391218243106343, 0.739043796858863, 0.7389735721522689, 0.7388981628850841, 0.7388058804821178, 0.7386984122569482, 0.7386016908542955, 0.738514641591908, 0.7384739478581691], "moving_var_accuracy_train": [0.023042547354665172, 0.047046392940531506, 0.06889793444155276, 0.08630836160973185, 0.09931478284415401, 0.10829076371725735, 0.11342557584094828, 0.11544400652976243, 0.11586968635578948, 0.11465005119152552, 0.11207519252436325, 0.10815284327972892, 0.10311279901391329, 0.09804106369698205, 0.09270461045648903, 0.086149413434903, 0.081150656444383, 0.07526242867945428, 0.07063101303604925, 0.06405111164689026, 0.05902426761091598, 0.05380423861034839, 0.050144775570215135, 0.047470471361203276, 0.04441181820764215, 0.04157245158185352, 0.03839909733105868, 0.03612405910437963, 0.03342180596909462, 0.030915873218361326, 0.02785212062932588, 0.026471228919806054, 0.024635358275174168, 0.02303989106614423, 0.021480318774740853, 0.019950074352993126, 0.0182204210991069, 0.016892720395806648, 0.015526023841231636, 0.014366509864967968, 0.013269522500737678, 0.012083986215723213, 0.011095379046316092, 0.010383752325453011, 0.00967397705089442, 0.008816054955055263, 0.00815455392812584, 0.0075782888397227886, 0.006909342806116219, 0.006344743021167348, 0.005849102885599602, 0.005264886941765003, 0.004738399167529682, 0.004378133474754145, 0.004009222326288606, 0.0036912882422822243, 0.0033639255949840506, 0.0030455066045934074, 0.002825092661104398, 0.002587381928091494, 0.002408932653403616, 0.002305044111593075, 0.002235035199834426, 0.002190445444068692, 0.0021357412103821705, 0.0020636182310636688, 0.0019745355417563138, 0.0018727591708357976, 0.0017637204092387413, 0.001651500256576155, 0.0015388173045834304, 0.0014280729163285973, 0.0013203719970933249, 0.0012171441450877112, 0.001119035650516355, 0.0010264363291204587, 0.0009393189963461075, 0.0008582119870854475, 0.0007828690735333608, 0.000713110269175045, 0.0006488174434180661, 0.0005897542713014136, 0.00053561381319859, 0.0004860799689316345, 0.0004407595236045209, 0.00039936930235846775, 0.00036160781432528413, 0.0003272463737687816, 0.0002960301672941888, 0.00026766444906378803, 0.00024192834319406112, 0.00021854478842988175, 0.0001973917853229629, 0.00017823136680008151, 0.00016087702572769943, 0.00014516904759710657, 0.00013095971963555936, 0.00011812689533903666, 0.00010653384493844479, 9.607033149375635e-05, 8.662261364141321e-05, 7.809445788838322e-05, 7.039828429102902e-05, 6.345448076688426e-05, 5.7186812863211946e-05, 5.153833154491373e-05, 4.6444735716255e-05, 4.185541222142188e-05, 3.7717539829960144e-05, 3.398718758946653e-05, 3.062200424194683e-05, 2.758696750100798e-05, 2.4846329215152924e-05, 2.237632364967668e-05, 2.0155532987289207e-05, 1.8155299561262458e-05, 1.6353781434296435e-05, 1.4729752872486573e-05, 1.326735702839353e-05, 1.1949190674510225e-05, 1.0763732008137402e-05, 9.696291624175775e-06, 8.73389804340841e-06, 7.866369060204244e-06, 7.084479419304528e-06, 6.38079051886317e-06, 5.746566290583019e-06, 5.176785806079824e-06, 4.66305690256148e-06, 4.199950450747941e-06], "duration": 57394.918972, "accuracy_train": [0.505992395141196, 0.5912583056478405, 0.6478673879314323, 0.6786029712878369, 0.7012674043696936, 0.7183271473560355, 0.7269748984865264, 0.7332291882959578, 0.7511528412236987, 0.7623295972337578, 0.7711611973398856, 0.7728091690891473, 0.7700662144702842, 0.7833635422434477, 0.789011130433278, 0.762183599517811, 0.8063080746470099, 0.7832018632913437, 0.8209790426587301, 0.7328409425179956, 0.7906455838755077, 0.7663463368632337, 0.8262596538736618, 0.8630573868355482, 0.8548982774432448, 0.8650370077173312, 0.8495257417404946, 0.8872861584071613, 0.8691732491809707, 0.8750602015273165, 0.770720140042451, 0.9114619382152085, 0.8939807845376523, 0.9067433280846253, 0.9093009917751015, 0.9103000847868217, 0.8900330783960871, 0.9152766242155776, 0.9084432101328904, 0.9206502413828904, 0.9226040873592655, 0.9069536729420451, 0.9206960233827058, 0.942712298703396, 0.9432935859057769, 0.9237884712993725, 0.9418523541320598, 0.9488971945367294, 0.9339257596207088, 0.9431086554655776, 0.9486650401439645, 0.9105390884551495, 0.9131400107281286, 0.9485727551679586, 0.9442705088939645, 0.949734248108158, 0.9439471509897563, 0.9386908727274824, 0.9565476550964378, 0.951340403227667, 0.9611289192275747, 0.9732640330841639, 0.9803782674649317, 0.9869584385958842, 0.9895626052625508, 0.990748431155408, 0.9911669579411223, 0.9912832153815985, 0.9914227243101699, 0.9915854847268365, 0.9917017421673128, 0.9918645025839794, 0.9919110055601699, 0.992027263000646, 0.9921202689530271, 0.9921900234173128, 0.9921435204411223, 0.9922597778815985, 0.9923062808577889, 0.9923295323458842, 0.9923992868101699, 0.9924922927625508, 0.9925852987149317, 0.9926783046673128, 0.992701556155408, 0.9927248076435032, 0.9927248076435032, 0.9927713106196937, 0.9928410650839794, 0.9928643165720746, 0.9929108195482651, 0.9928643165720746, 0.9929573225244556, 0.9929805740125508, 0.9929805740125508, 0.9929805740125508, 0.9929805740125508, 0.9930267165005537, 0.993049967988649, 0.9930964709648394, 0.9931197224529347, 0.99314297394103, 0.9931662254291252, 0.9931894769172205, 0.9931894769172205, 0.993235979893411, 0.9932592313815062, 0.9933057343576966, 0.9933289858457919, 0.9933522373338871, 0.9933522373338871, 0.9933522373338871, 0.9933057343576966, 0.9933057343576966, 0.9933754888219823, 0.9933987403100776, 0.9934219917981728, 0.9934219917981728, 0.993445243286268, 0.993445243286268, 0.9934917462624585, 0.9935149977505537, 0.9935149977505537, 0.9935149977505537, 0.9935149977505537, 0.993538249238649, 0.993538249238649, 0.9935847522148394, 0.9935847522148394, 0.9935847522148394], "end": "2016-02-01 07:41:42.721000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0], "moving_var_accuracy_valid": [0.022319024785593878, 0.0448743074121401, 0.06530999359714068, 0.0809324367502491, 0.09181167140825372, 0.09904370304664167, 0.10258431972285027, 0.10323161927871909, 0.10258269916841486, 0.10038366487667659, 0.09701809399271902, 0.09236561959049419, 0.08691533386676949, 0.0815575516125759, 0.07604158196418005, 0.06998151009006721, 0.06466654472644168, 0.05905820954304025, 0.05428980269886314, 0.049099456556401216, 0.04454621326466804, 0.04029382545309822, 0.0367626377680306, 0.03387065545753042, 0.030951208061410322, 0.02833921044267541, 0.025789395865929408, 0.023697955570615405, 0.021518961280716793, 0.019545793225278205, 0.017612774725232774, 0.01622962664749399, 0.014750185191166724, 0.013509124819174944, 0.012323826721704107, 0.011187538555737002, 0.01008432556386377, 0.009184873142162233, 0.008277851030232767, 0.007504370412356832, 0.006803425636709745, 0.006152713619267644, 0.005621063311433312, 0.005107659444810983, 0.004646036081113199, 0.0041829777562118415, 0.003814539237661375, 0.003459444786458599, 0.0031206462883433842, 0.002826020999848274, 0.002561454784132285, 0.002316245684158683, 0.0020861655982435017, 0.0019059287250081866, 0.001739810584636977, 0.0015934126304249642, 0.0014455626213754622, 0.0013022788778462681, 0.001175256786201604, 0.001058253920560656, 0.0009820970351548353, 0.0009283253135376603, 0.0008760552009722826, 0.0008272529821074849, 0.000785839325877732, 0.0007447908161087208, 0.0006998459062761837, 0.0006520263548264755, 0.0006067152622512495, 0.0005624512206043593, 0.0005192304938218434, 0.00047809643923263037, 0.0004385982092094497, 0.000401095921247826, 0.00036630347847137293, 0.0003335360918963251, 0.0003038630116734089, 0.0002764579389691082, 0.0002514599355636647, 0.0002285765372810279, 0.00020726619570965804, 0.00018734920261395598, 0.00016887822751856594, 0.00015236868114932203, 0.00013748010031319028, 0.00012405444614425952, 0.00011184062250847662, 0.00010084196963817503, 9.093767912022466e-05, 8.196301717694296e-05, 7.386319129392868e-05, 6.657683318493644e-05, 6.004716476886815e-05, 5.412389656518453e-05, 4.887668834835177e-05, 4.409736686082125e-05, 3.979843029346335e-05, 3.588773458006768e-05, 3.2448139212238415e-05, 2.930004076942932e-05, 2.6429217431400356e-05, 2.383423208678063e-05, 2.1476546133194897e-05, 1.9349738696500193e-05, 1.743165103991625e-05, 1.5694939033201575e-05, 1.4125446021267106e-05, 1.271814208863356e-05, 1.144714196209187e-05, 1.0303087172563231e-05, 9.280849821712285e-06, 8.354721628868282e-06, 7.532030726682932e-06, 6.840447370179157e-06, 6.1912926801609736e-06, 5.614078191449582e-06, 5.086621343541434e-06, 4.635115726021532e-06, 4.235001328235546e-06, 3.847596660901436e-06, 3.5059390538089756e-06, 3.2229927398716057e-06, 2.955488014953698e-06, 2.7043227982044204e-06, 2.485069536580009e-06, 2.313206959997026e-06, 2.1858310387872896e-06, 2.051443202488429e-06, 1.9144970489792695e-06, 1.7379511637719264e-06], "accuracy_test": 0.6600765306122449, "start": "2016-01-31 15:45:07.802000", "learning_rate_per_epoch": [0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555, 0.0030963856261223555], "accuracy_train_first": 0.505992395141196, "accuracy_train_last": 0.9935847522148394, "batch_size_eval": 1024, "accuracy_train_std": [0.01628293736292862, 0.016865048281574566, 0.016057372796371903, 0.016683336009766226, 0.01662303833700771, 0.017464941047223653, 0.018702180098821887, 0.019088067911943493, 0.020295476031782587, 0.022617889749109134, 0.024093013054848914, 0.02684453271844353, 0.027718215111114775, 0.02912208794366998, 0.02933861581057663, 0.030121045340688418, 0.029071754912063645, 0.02978536270500928, 0.02804862859214345, 0.03151154468166406, 0.025835115833991604, 0.028799392184100898, 0.027641159929608576, 0.027418549250830735, 0.0274989056080279, 0.025707559294200367, 0.026635405777593855, 0.023340213702725824, 0.025540078610248648, 0.021992777039587356, 0.025017084384811695, 0.021795629125672344, 0.02156125168690496, 0.02157078570828205, 0.0209712681821494, 0.019834894273671765, 0.019825745176935743, 0.01838946231128677, 0.019497173091221485, 0.017106635311058892, 0.015367079348602713, 0.01812691269064931, 0.016735481419558967, 0.01470866539111684, 0.01575172806079503, 0.01633933708399438, 0.01476090380262791, 0.012522167331081517, 0.013886989342352007, 0.013910039924614849, 0.013031539787179601, 0.015023056514625509, 0.015625422796922465, 0.011666401841760314, 0.012198308966522154, 0.011786909681358607, 0.013281097767808576, 0.01358374867757748, 0.009814328213620434, 0.010852322143597923, 0.009820219830360235, 0.008109896120836653, 0.005915210048373324, 0.003810664417639764, 0.003698032948670434, 0.00349355002120373, 0.0033588008426655995, 0.0033751719758905487, 0.003462360348612999, 0.0032485107145030605, 0.0032921466095463133, 0.0032181961241893255, 0.003187098858808141, 0.003240919209509899, 0.003223115576084282, 0.003141772977468318, 0.0031774006548460397, 0.003251064777738196, 0.003128660308083797, 0.0031021775108587314, 0.0031164655460807107, 0.003027336921325505, 0.0029862637852303914, 0.0029416787282740314, 0.002941566888966843, 0.0029102275289074712, 0.0029257905590426175, 0.0029246415373800553, 0.0029601352250020587, 0.0029740544470091925, 0.003001158887919405, 0.003004438733693733, 0.0029590314073251857, 0.0029643965310568007, 0.003040029180814176, 0.0029796766466705102, 0.0029796766466705102, 0.0028916477665219603, 0.0029200032347714874, 0.0029446743488931093, 0.002994811263558981, 0.0030139589369314723, 0.003047744625891936, 0.0030139255644799647, 0.0030139255644799647, 0.003005629389440339, 0.0030313146886353512, 0.0030294974735556985, 0.0030095171524417937, 0.0029739913669399004, 0.0029739913669399004, 0.0029739913669399004, 0.00294589735950427, 0.00294589735950427, 0.002898949677658687, 0.002916688071322782, 0.0029030149608733472, 0.0029030149608733472, 0.0028495220377959887, 0.0028495220377959887, 0.0028205004240762525, 0.002789354409341169, 0.002789354409341169, 0.002821728241991966, 0.002821728241991966, 0.0028388065737331523, 0.0028388065737331523, 0.0028162088908508893, 0.0028162088908508893, 0.0028162088908508893], "accuracy_test_std": 0.016064584137773213, "error_valid": [0.5020148955195783, 0.425403273249247, 0.3714864340173193, 0.34896372599774095, 0.3363493034638554, 0.32252447289156627, 0.3203580925263554, 0.3201139519013554, 0.3055464043674698, 0.30137542356927716, 0.2984045557228916, 0.30660385683358427, 0.3146707925451807, 0.3068068171121988, 0.3087599421121988, 0.3319135918674698, 0.31304269813629515, 0.33846567912274095, 0.3139383706701807, 0.3636224585843373, 0.34701060099774095, 0.35626735457454817, 0.32452907332454817, 0.2981398249246988, 0.31007330101656627, 0.3016798639871988, 0.31143519390060237, 0.28840361445783136, 0.3085981621799698, 0.30547433876129515, 0.3610589820218373, 0.2823103939194277, 0.30071359657379515, 0.28566806287650603, 0.2886580501694277, 0.29458949077560237, 0.31085719832454817, 0.2878859186746988, 0.30791721573795183, 0.29351144813629515, 0.29216867469879515, 0.29512924745858427, 0.28097791556852414, 0.2851488963667168, 0.28271778520331325, 0.2996046686746988, 0.279796922063253, 0.2838664227221386, 0.29035821018448793, 0.28445765483810237, 0.2828295604292168, 0.30659356174698793, 0.30081507671310237, 0.2793292309864458, 0.278820359563253, 0.2761554028614458, 0.28061170463102414, 0.28702113140060237, 0.2844370646649097, 0.2922186794051205, 0.27189323701054224, 0.26601327183734935, 0.264782273625753, 0.2631247646837349, 0.260387742375753, 0.25924792921686746, 0.25951266001506024, 0.26012301157756024, 0.2593802946159638, 0.2592582243034638, 0.2593802946159638, 0.2592582243034638, 0.2595023649284638, 0.2597465055534638, 0.2596244352409638, 0.2599906461784638, 0.25949206984186746, 0.25949206984186746, 0.25924792921686746, 0.2591155638177711, 0.2594817747552711, 0.2602141966302711, 0.26120105421686746, 0.2606921827936747, 0.2605701124811747, 0.2604480421686747, 0.2606921827936747, 0.2605701124811747, 0.2604480421686747, 0.2605701124811747, 0.2605701124811747, 0.2604480421686747, 0.2602039015436747, 0.2603259718561747, 0.25982739551957834, 0.25994946583207834, 0.25982739551957834, 0.25994946583207834, 0.2594508894954819, 0.2595729598079819, 0.2596950301204819, 0.2596950301204819, 0.2598171004329819, 0.2598171004329819, 0.2598171004329819, 0.2599391707454819, 0.2601833113704819, 0.2599391707454819, 0.2600612410579819, 0.2600612410579819, 0.26043774708207834, 0.26031567676957834, 0.26055981739457834, 0.26104809864457834, 0.26092602833207834, 0.26104809864457834, 0.26104809864457834, 0.26129223926957834, 0.26141430958207834, 0.26129223926957834, 0.26141430958207834, 0.26165845020707834, 0.26165845020707834, 0.26165845020707834, 0.26178052051957834, 0.26202466114457834, 0.26226880176957834, 0.26226880176957834, 0.26226880176957834, 0.2618922957454819], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.08997587232311809, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.003096385526917739, "optimization": "nesterov_momentum", "nb_data_augmentation": 0, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 9.164030717702639e-06, "rotation_range": [0, 0], "momentum": 0.6487436631710239}, "accuracy_valid_max": 0.7408844361822289, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7381077042545181, "accuracy_valid_std": [0.0179153871505568, 0.01705098498143703, 0.016889046192584523, 0.01642079050029099, 0.018470529997721422, 0.01951626321578569, 0.0214683290967076, 0.021283420740688622, 0.02116796026243172, 0.0216997149326328, 0.019122013121290287, 0.02061038739006086, 0.0185612239478218, 0.01355426849281357, 0.015631461264581238, 0.01697378626355187, 0.01800697988631673, 0.018700939832413787, 0.01836161442271087, 0.014691682726351607, 0.018441159926763026, 0.010773851564225763, 0.02184466847327509, 0.016695294112801396, 0.021291143483827567, 0.014910318166599311, 0.014160559517873516, 0.012335302125861192, 0.021316392878953205, 0.01817307408846327, 0.019504355670329043, 0.015265605899453598, 0.017666567192906487, 0.02083308931826974, 0.0130925986083238, 0.017949420802029062, 0.027677702092774085, 0.021726515607507973, 0.026567175712284067, 0.018092281740110256, 0.020652477239255576, 0.021428266675970926, 0.01853000954667878, 0.014953633441799744, 0.01882244203295504, 0.018043615006724505, 0.012078618789401308, 0.010096399457948905, 0.02220977895170103, 0.0217491646251904, 0.017851922975415047, 0.018550924968019227, 0.014415663191825625, 0.012374550755976549, 0.012010290667172763, 0.012609414433092814, 0.018729027379461086, 0.020238510435634866, 0.02205000628183666, 0.013497959404482411, 0.012451589494606676, 0.015189891611745934, 0.011655910157800512, 0.01775101932468894, 0.014149821876710406, 0.011289412776074993, 0.012448771159157178, 0.011577847115049594, 0.010870157732660642, 0.010979742631387334, 0.010433695632323239, 0.010491154882615913, 0.01094482633652441, 0.01072799106387941, 0.01062098144101527, 0.010236577767388273, 0.00956056448670789, 0.009855274689370032, 0.010329976981908979, 0.009909835663574824, 0.009860808753505416, 0.009230058221489156, 0.00953148887462046, 0.008236877611842778, 0.007932935306646948, 0.008403758369706362, 0.00849339079616056, 0.008414230546508531, 0.008346824571057157, 0.008140597194731328, 0.008140597194731328, 0.008085662990514468, 0.007983996757685302, 0.008013635155408181, 0.007722877961422047, 0.007774787918613829, 0.007738298429636836, 0.007926633142163145, 0.00753729547361219, 0.007308603985793116, 0.007367651829939284, 0.007367651829939284, 0.007146046220543923, 0.007146046220543923, 0.007146046220543923, 0.007365945899777366, 0.0076266592335610525, 0.007912130513774509, 0.007961093113756128, 0.007961093113756128, 0.008254429612468608, 0.008212815250834771, 0.008221860306047383, 0.00792277050892556, 0.008023702230149043, 0.007816736050513005, 0.007816736050513005, 0.007984573257962469, 0.008042207568430782, 0.007984573257962469, 0.007786140682584589, 0.0077304178616443816, 0.007574640224104038, 0.007574640224104038, 0.007613871645904349, 0.007545038177014858, 0.0077649793598113396, 0.0077649793598113396, 0.0077649793598113396, 0.0074007660972135875], "accuracy_valid": [0.49798510448042166, 0.574596726750753, 0.6285135659826807, 0.651036274002259, 0.6636506965361446, 0.6774755271084337, 0.6796419074736446, 0.6798860480986446, 0.6944535956325302, 0.6986245764307228, 0.7015954442771084, 0.6933961431664157, 0.6853292074548193, 0.6931931828878012, 0.6912400578878012, 0.6680864081325302, 0.6869573018637049, 0.661534320877259, 0.6860616293298193, 0.6363775414156627, 0.652989399002259, 0.6437326454254518, 0.6754709266754518, 0.7018601750753012, 0.6899266989834337, 0.6983201360128012, 0.6885648060993976, 0.7115963855421686, 0.6914018378200302, 0.6945256612387049, 0.6389410179781627, 0.7176896060805723, 0.6992864034262049, 0.714331937123494, 0.7113419498305723, 0.7054105092243976, 0.6891428016754518, 0.7121140813253012, 0.6920827842620482, 0.7064885518637049, 0.7078313253012049, 0.7048707525414157, 0.7190220844314759, 0.7148511036332832, 0.7172822147966867, 0.7003953313253012, 0.720203077936747, 0.7161335772778614, 0.7096417898155121, 0.7155423451618976, 0.7171704395707832, 0.6934064382530121, 0.6991849232868976, 0.7206707690135542, 0.721179640436747, 0.7238445971385542, 0.7193882953689759, 0.7129788685993976, 0.7155629353350903, 0.7077813205948795, 0.7281067629894578, 0.7339867281626506, 0.735217726374247, 0.7368752353162651, 0.739612257624247, 0.7407520707831325, 0.7404873399849398, 0.7398769884224398, 0.7406197053840362, 0.7407417756965362, 0.7406197053840362, 0.7407417756965362, 0.7404976350715362, 0.7402534944465362, 0.7403755647590362, 0.7400093538215362, 0.7405079301581325, 0.7405079301581325, 0.7407520707831325, 0.7408844361822289, 0.7405182252447289, 0.7397858033697289, 0.7387989457831325, 0.7393078172063253, 0.7394298875188253, 0.7395519578313253, 0.7393078172063253, 0.7394298875188253, 0.7395519578313253, 0.7394298875188253, 0.7394298875188253, 0.7395519578313253, 0.7397960984563253, 0.7396740281438253, 0.7401726044804217, 0.7400505341679217, 0.7401726044804217, 0.7400505341679217, 0.7405491105045181, 0.7404270401920181, 0.7403049698795181, 0.7403049698795181, 0.7401828995670181, 0.7401828995670181, 0.7401828995670181, 0.7400608292545181, 0.7398166886295181, 0.7400608292545181, 0.7399387589420181, 0.7399387589420181, 0.7395622529179217, 0.7396843232304217, 0.7394401826054217, 0.7389519013554217, 0.7390739716679217, 0.7389519013554217, 0.7389519013554217, 0.7387077607304217, 0.7385856904179217, 0.7387077607304217, 0.7385856904179217, 0.7383415497929217, 0.7383415497929217, 0.7383415497929217, 0.7382194794804217, 0.7379753388554217, 0.7377311982304217, 0.7377311982304217, 0.7377311982304217, 0.7381077042545181], "seed": 562723346, "model": "residualv3", "loss_std": [0.30892640352249146, 0.2648911476135254, 0.2682751417160034, 0.26604923605918884, 0.2621834874153137, 0.2581448256969452, 0.25438085198402405, 0.25044605135917664, 0.24469152092933655, 0.237898051738739, 0.23103344440460205, 0.22495752573013306, 0.217978373169899, 0.21083781123161316, 0.20250912010669708, 0.1932469606399536, 0.18723107874393463, 0.18092770874500275, 0.1769949495792389, 0.16575311124324799, 0.160074383020401, 0.15387725830078125, 0.1500440239906311, 0.1398482769727707, 0.13669443130493164, 0.12749893963336945, 0.12724141776561737, 0.12390659004449844, 0.12398665398359299, 0.11666250228881836, 0.11162669211626053, 0.10699649155139923, 0.10448091477155685, 0.098099485039711, 0.09796003997325897, 0.09460238367319107, 0.09106942266225815, 0.08616862446069717, 0.07664891332387924, 0.07536286860704422, 0.07986977696418762, 0.0846945270895958, 0.08271455019712448, 0.07135406881570816, 0.06343002617359161, 0.06615109741687775, 0.0608963668346405, 0.04736971855163574, 0.06224147230386734, 0.05322293937206268, 0.06395452469587326, 0.06405860930681229, 0.06790192425251007, 0.060279481112957, 0.056126538664102554, 0.06285601109266281, 0.06245289370417595, 0.06306824833154678, 0.05305453762412071, 0.052978549152612686, 0.04373154789209366, 0.03058657981455326, 0.016221290454268456, 0.006718791089951992, 0.0020500500686466694, 0.0006773481145501137, 0.00045051140477880836, 0.00037262652767822146, 0.00032428678241558373, 0.0002900470281019807, 0.0002640636230353266, 0.0002432610053801909, 0.00022623810218647122, 0.00021188902610447258, 0.00019966195395682007, 0.0001890637504402548, 0.0001797577424440533, 0.00017153230146504939, 0.00016420069732703269, 0.000157586982822977, 0.00015160908515099436, 0.0001461529900552705, 0.00014115464000497013, 0.00013660492550116032, 0.0001324065960943699, 0.00012850732309743762, 0.00012487343337852508, 0.00012149367830716074, 0.00011835002806037664, 0.00011540621926542372, 0.00011265015928074718, 0.00011004597035935149, 0.00010760148143162951, 0.00010529725113883615, 0.00010310969810234383, 0.00010104702960234135, 9.908628271659836e-05, 9.722426329972222e-05, 9.544954082230106e-05, 9.375366062158719e-05, 9.213175508193672e-05, 9.059342846740037e-05, 8.911692566471174e-05, 8.770067506702617e-05, 8.634770347271115e-05, 8.505015284754336e-05, 8.380609506275505e-05, 8.261363109340891e-05, 8.146050095092505e-05, 8.035470818867907e-05, 7.928938430268317e-05, 7.826190994819626e-05, 7.726979674771428e-05, 7.631648622918874e-05, 7.539644866483286e-05, 7.450743578374386e-05, 7.36474830773659e-05, 7.281973375938833e-05, 7.201629341579974e-05, 7.124305557226762e-05, 7.048927363939583e-05, 6.975919677643105e-05, 6.905326881678775e-05, 6.837146065663546e-05, 6.770660547772422e-05, 6.706226849928498e-05, 6.643613596679643e-05, 6.582804053323343e-05, 6.52373637421988e-05, 6.466518971137702e-05]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:27 2016", "state": "available"}], "summary": "ebf48d98d823c70fd7617b6538227e0b"}