{"content": {"hp_model": {"f1": 124, "f2": 175, "f3": 162, "nonlin": "leaky_rectify", "ds2": 441, "ds1": 1448, "do2": 0.10461849265358603, "do3": 0.11358981100202281, "do1": 0.3987141319754435, "do4": 0.04300565803168288, "do5": 0.29089664067358967}, "accuracy_valid_std": [0.026031291284316912, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427, 0.025578489718099427], "moving_avg_accuracy_train": [0.01878294427710843, 0.03571112575301204, 0.05094648908132529, 0.06465831607680722, 0.07699896037274095, 0.0881055402390813, 0.09810146211878763, 0.10709779181052333, 0.11519448853308545, 0.12248151558339136, 0.1290398399286667, 0.13494233183941448, 0.1402545745590875, 0.1450355930067932, 0.14933850960972833, 0.15321113455236995, 0.15669649700074742, 0.15983332320428714, 0.1626564667874729, 0.16519729601234007, 0.16748404231472053, 0.16954211398686292, 0.1713943784917911, 0.17306141654622645, 0.17456175079521827, 0.1759120516193109, 0.17712732236099427, 0.1782210660285093, 0.17920543532927283, 0.18009136769996, 0.18088870683357847, 0.18160631205383507, 0.18225215675206602, 0.18283341698047387, 0.18335655118604094, 0.1838273719710513, 0.18425111067756064, 0.18463247551341902, 0.18497570386569157, 0.18528460938273686, 0.18556262434807763, 0.18581283781688432, 0.18603802993881033, 0.18624070284854374, 0.1864231084673038, 0.18658727352418789, 0.18673502207538356, 0.18686799577145966, 0.18698767209792813, 0.18709538079174978, 0.18719231861618926, 0.1872795626581848], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.0031751909614526432, 0.005436741818037516, 0.006982114297945175, 0.0079760306641369, 0.008549051112472067, 0.008804351048171434, 0.008823182031381016, 0.008669269359544561, 0.00839235090394444, 0.008031022682637008, 0.007615024978333787, 0.007167077177308396, 0.0067043487639920265, 0.0062396371241685445, 0.005782309233378024, 0.005339053325557552, 0.004914477755570835, 0.004511587087694671, 0.00413215963614675, 0.0037770459908815267, 0.00344640426965643, 0.003139884773759863, 0.0028567742505498277, 0.0025961079683692653, 0.0023567561972606195, 0.0021374903883744647, 0.0019370332963173432, 0.001754096443577672, 0.001587407645502476, 0.001435730766441111, 0.0012978794370429947, 0.001172726108607951, 0.0010592075361152533, 0.0009563275535818868, 0.0008631578227970068, 0.0007788370904216861, 0.0007025693718020653, 0.0006336213868641225, 0.0005713194994939439, 0.0005150463531106987, 0.0004642373486882097, 0.0004183770748391392, 0.0003769957707812232, 0.00033966588047815925, 0.00030599873871814057, 0.0002756414163394423, 0.00024827374141492183, 0.00022360550530806293, 0.00020137385658530957, 0.00018134088139130152, 0.00016329136572843493, 0.00014703073286136492], "duration": 44334.041744, "accuracy_train": [0.18782944277108435, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459, 0.18806475903614459], "end": "2016-01-17 11:57:19.884000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0], "accuracy_valid": [0.18776939655172414, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483, 0.1880387931034483], "accuracy_test": 0.19000400641025642, "start": "2016-01-16 23:38:25.842000", "learning_rate_per_epoch": [3.1852483516559005e-05, 1.1664909038699989e-07, 4.271883680129207e-10, 1.56443488805863e-12, 5.7292207409449444e-15, 2.0981360136791192e-17, 7.683723361505409e-20, 2.8139072386016964e-22, 1.0304996501124282e-24, 3.773861266770744e-27, 1.3820507887476493e-29, 5.061300165459805e-32, 1.853532349346045e-34, 6.7879440194659525e-37, 2.485858634161367e-39, 9.104236122718337e-42, 3.363116314379561e-44, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_train_last": 0.18806475903614459, "error_valid": [0.8122306034482758, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517, 0.8119612068965517], "accuracy_train_std": [0.03296601987968169, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327, 0.03312972225061327], "accuracy_test_std": 0.032053316491922786, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1.0, 1.2], "translation_range": [-3, 3], "momentum": 0.6138961908891125, "shear_range": [1, 1.1], "patience_check_each": 1, "learning_rate": 0.008697716172329907, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "optimization": "adadelta", "nb_data_augmentation": 2, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 4.278870371510812e-08, "valid_ratio": 0.15, "rotation_range": [-90, 90], "learning_rate_decay": 0.9963378336353861}, "accuracy_valid_max": 0.1880387931034483, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.98, interval=[0.8, 1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256, 512],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1.0, 1.2)),\n        rotation_range=make_constant_param((-90, 90)),\n        shear_range=make_constant_param((1, 1.1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    instantiate = instantiate_random\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.1880387931034483, "loss_train": [2.3120481967926025, 2.3109190464019775, 2.310898542404175, 2.310908079147339, 2.3108925819396973, 2.3108701705932617, 2.3109190464019775, 2.3109047412872314, 2.3109350204467773, 2.310953140258789, 2.3109166622161865, 2.3109071254730225, 2.3109049797058105, 2.310861110687256, 2.310925245285034, 2.3108999729156494, 2.3109290599823, 2.3108999729156494, 2.3109030723571777, 2.3108785152435303, 2.310838222503662, 2.3109018802642822, 2.3108932971954346, 2.3109488487243652, 2.3108749389648438, 2.3109381198883057, 2.310858964920044, 2.3109023571014404, 2.3108932971954346, 2.3108813762664795, 2.3109076023101807, 2.310913562774658, 2.3109793663024902, 2.3109376430511475, 2.3108983039855957, 2.3109443187713623, 2.3108794689178467, 2.310946464538574, 2.31095290184021, 2.3109254837036133, 2.310908317565918, 2.3108909130096436, 2.310842752456665, 2.3109195232391357, 2.3109219074249268, 2.31089448928833, 2.3108906745910645, 2.3109171390533447, 2.310901165008545, 2.310856580734253, 2.3109118938446045, 2.3109281063079834], "accuracy_train_first": 0.18782944277108435, "model": "vgg", "loss_std": [0.0011091387132182717, 0.000889498507604003, 0.001007838873192668, 0.0009175429004244506, 0.0010955310426652431, 0.0011201943270862103, 0.0009293286711908877, 0.0009684809483587742, 0.0009875253308564425, 0.0009383067954331636, 0.0009808631148189306, 0.0009907885687425733, 0.001032268744893372, 0.0009843014413490891, 0.0009483688627369702, 0.0010031647980213165, 0.0009304315317422152, 0.0010479406919330359, 0.0009899147553369403, 0.0009716761996969581, 0.0009384914883412421, 0.000991008710116148, 0.0010226307203993201, 0.0011632307432591915, 0.0010695512173697352, 0.0009616281604394317, 0.0009401498246006668, 0.0009724564151838422, 0.0010246187448501587, 0.0009900161530822515, 0.000954065122641623, 0.001029251259751618, 0.0008878156659193337, 0.0010038606123998761, 0.0009382503922097385, 0.0009267013520002365, 0.0009664061944931746, 0.000912055023945868, 0.0009214112651534379, 0.0009725795825943351, 0.000984236947260797, 0.0010026319650933146, 0.0010711618233472109, 0.0009128502570092678, 0.0008962739375419915, 0.0010210288455709815, 0.0010069223353639245, 0.0009484150214120746, 0.0010226055746898055, 0.0010296649998053908, 0.0009697364876046777, 0.0010270371567457914]}, "state": "available", "life": [{"dt": "Sun May 15 22:04:57 2016", "state": "available"}], "summary": "e66022e85117e5f1fccde26236a63151"}