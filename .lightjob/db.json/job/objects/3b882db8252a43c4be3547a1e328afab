{"content": {"hp_model": {"f0": 32, "f1": 64, "f2": 16, "f3": 32, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.017788708735601573, 0.018004736345528155, 0.012754300221273109, 0.009839537141382165, 0.00890865633657572, 0.008694385573521675, 0.008106296186319303, 0.012845708776578015, 0.01536379880781099, 0.015173862612075066, 0.015708705702845875, 0.013263865830196286, 0.012056870021580847, 0.01452959767689001, 0.011580801289786707, 0.012296413026557611, 0.008810314107062343, 0.012276896029795563, 0.014084001602262546, 0.01454563831587315, 0.012023817731691299, 0.010004736317480962, 0.01322152074391286, 0.01128143552364397, 0.010888594305791715, 0.01172408598353739, 0.012865234789332457, 0.01112738210438543, 0.011692135119071521, 0.011125375054851712, 0.011230967102644204, 0.008560637363864943, 0.010659949265622831, 0.008550638203893988, 0.007877518276791676, 0.00933079702299509, 0.01081446412228849, 0.008387455867412496, 0.009145849675911142, 0.008646992136061146, 0.008231436104156322, 0.009664442761622549, 0.011158092788464403, 0.00966570510164315, 0.009569118630884785, 0.012694134688411593, 0.009896522623072381, 0.009902434798259634, 0.010440597689294274, 0.009854865021206301, 0.010905017560636492, 0.011812002588866112, 0.009741137598515684, 0.008852953441978072, 0.008344670280760202, 0.009506659590640844, 0.00865712986252427, 0.008502959453719223, 0.008417087639208995, 0.007597898033487614, 0.008364579786609531, 0.008928544967792837, 0.008017484363603996, 0.008978184678100794, 0.008658943003461301, 0.007367096198133079, 0.009224667250905727, 0.00862739626878433, 0.008674459902339738, 0.00920594392961915, 0.008364173265693855, 0.00787361012078272, 0.00832228791252367, 0.008571612860846265, 0.008235687798547203, 0.00903031293139542, 0.009084727486833156, 0.00898886523753745, 0.008047101162333627, 0.008250356550078898, 0.007224453057077539, 0.008230360353819273, 0.008387840629738828, 0.009228277012054973, 0.008431822532064192, 0.008102040665148207, 0.008702869994376354, 0.008813747535659142, 0.009451444606397762, 0.009785507412890268, 0.007163172482538999, 0.00904647290025832, 0.008493959716478962, 0.008162618139980267], "moving_avg_accuracy_train": [0.0584282138242894, 0.12075886368355479, 0.18191732419712067, 0.23982169216039126, 0.29541118006529155, 0.3475335600342607, 0.3962850756682008, 0.4412867757137377, 0.48295080806184526, 0.5211968827500775, 0.556157640298021, 0.5882846650625156, 0.6181522983624657, 0.6451073207525941, 0.6697553570478127, 0.6930589870003313, 0.7142627320802908, 0.7340316250140575, 0.7522538172330282, 0.7689118456991403, 0.7840343157007932, 0.7983468417892132, 0.8115953085366023, 0.823458474740205, 0.8346630249567528, 0.8451935847718934, 0.8545548311650437, 0.863256537480756, 0.871262675618524, 0.878951686699621, 0.8860229313452274, 0.892380148177482, 0.8982363577621886, 0.9038231305777009, 0.9088164570259755, 0.9133127759782321, 0.9175872915697776, 0.9217111564569582, 0.9253366043494684, 0.9288086626991284, 0.932089372281698, 0.9350977423798017, 0.937993684619304, 0.9406605225527225, 0.9429746461868467, 0.9451851685444448, 0.9473909135543875, 0.9494063470466785, 0.9512690292659216, 0.9530756515965738, 0.9547899673489227, 0.9562747228057986, 0.9577225738110253, 0.9589838591347954, 0.9602236115737983, 0.9613673626522528, 0.9624293267550138, 0.9634036235403375, 0.9643548954090335, 0.9652505676206219, 0.9660962361896321, 0.9668480373065031, 0.9675199719652493, 0.9682270557545586, 0.9688309151304224, 0.9694046155032237, 0.969918656738754, 0.9704300859269125, 0.9709113345843596, 0.9713652765688916, 0.9718087736847506, 0.9721962592961574, 0.9725310815023851, 0.9728533838760945, 0.9731969704838708, 0.9735107405820322, 0.9737653400311195, 0.9740269595209938, 0.9742694285571281, 0.9745248170217826, 0.9746593715876, 0.9748897526908832, 0.9750738081469241, 0.9752627095454562, 0.9754932107220015, 0.9756913251368352, 0.975862652663757, 0.9759843314034722, 0.9761565491894354, 0.9762767400622969, 0.9764290536264346, 0.9766079524639112, 0.9767318311343252, 0.9768549116329266], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 477981215, "moving_var_accuracy_train": [0.030724705536271952, 0.06261822418954983, 0.09001961740209943, 0.11119389812492203, 0.12788622880219136, 0.13954828836463862, 0.14698385201763153, 0.15051184387876465, 0.1510836838144256, 0.1491401754945036, 0.14522644905998805, 0.13999311563595535, 0.13402248374282236, 0.12715939445701108, 0.1199111862502037, 0.11280760014585857, 0.10557322938001586, 0.09853318859245487, 0.09166830433659547, 0.08499888311433614, 0.07855719669346056, 0.07254511265139987, 0.06687029822666997, 0.061449880815371664, 0.05643477024383081, 0.05178932742963, 0.04739909109296642, 0.043340659218913946, 0.039583477527951744, 0.03615721779780366, 0.03299151852556544, 0.030056094525679616, 0.027359141789411737, 0.0249041358848999, 0.022638122077581257, 0.020556261826906935, 0.018665078996097536, 0.016951627450957272, 0.015374759557653302, 0.013945780304538967, 0.012648069772371547, 0.011464715410958875, 0.01039372220295379, 0.009418358203726485, 0.008524718897099947, 0.007716224689230921, 0.006988390019747815, 0.00632610876722967, 0.0057247241559556655, 0.0051816266985706, 0.004689913935202304, 0.004240763030582578, 0.0038355531803243442, 0.003466315428303531, 0.0031335167604633007, 0.002831938583182162, 0.0025588946346639238, 0.002311548459230559, 0.002088537876821055, 0.0018869041475344536, 0.0017046501307385134, 0.001539271961938619, 0.0013894082314153758, 0.0012549671156397745, 0.0011327522193881649, 0.0010224391865091191, 0.0009225734133846374, 0.0008326701103766785, 0.0007514875017716631, 0.0006781933215223837, 0.0006121441965961233, 0.0005522810828279368, 0.0004980619277331921, 0.00044919064434076155, 0.00040533404572007435, 0.0003656867062185692, 0.00032970142351199225, 0.0002973472839781323, 0.0002681416766816741, 0.0002419145184244138, 0.00021788601096261296, 0.0001965750889411015, 0.0001772224677450771, 0.00015982137461587558, 0.00014431741428578646, 0.00013023891674949234, 0.00011747920316787359, 0.00010586453429237413, 9.55450115553554e-05, 8.612052301309287e-05, 7.771726550816625e-05, 7.023358210380361e-05, 6.334833721827506e-05, 5.7149842778671386e-05], "duration": 194315.346337, "accuracy_train": [0.5842821382428941, 0.6817347124169435, 0.7323434688192137, 0.7609610038298266, 0.7957165712093945, 0.8166349797549834, 0.8350487163736618, 0.8463020761235696, 0.8579270991948136, 0.8654115549441677, 0.8708044582295128, 0.8774278879429678, 0.8869609980620154, 0.8877025222637505, 0.8915876837047803, 0.9027916565729974, 0.9050964377999261, 0.9119516614179586, 0.9162535472037652, 0.9188341018941492, 0.9201365457156699, 0.9271595765849945, 0.9308315092631044, 0.9302269705726283, 0.9355039769056847, 0.939968623108158, 0.938806048703396, 0.9415718943221669, 0.9433179188584349, 0.9481527864294942, 0.9496641331556847, 0.949595099667774, 0.9509422440245479, 0.9541040859173128, 0.9537563950604466, 0.9537796465485419, 0.9560579318936876, 0.9588259404415835, 0.9579656353820598, 0.9600571878460686, 0.9616157585248246, 0.9621730732627353, 0.9640571647748246, 0.9646620639534883, 0.9638017588939645, 0.9650798697628276, 0.9672426186438722, 0.9675452484772978, 0.9680331692391103, 0.9693352525724437, 0.9702188091200628, 0.9696375219176817, 0.9707532328580657, 0.9703354270487264, 0.9713813835248246, 0.9716611223583426, 0.9719870036798633, 0.9721722946082503, 0.9729163422272978, 0.9733116175249169, 0.9737072533107235, 0.9736142473583426, 0.9735673838939645, 0.9745908098583426, 0.9742656495131967, 0.9745679188584349, 0.9745450278585271, 0.9750329486203396, 0.9752425725013842, 0.9754507544296788, 0.9758002477274824, 0.9756836297988187, 0.9755444813584349, 0.9757541052394795, 0.9762892499538575, 0.9763346714654854, 0.9760567350729051, 0.9763815349298633, 0.9764516498823367, 0.9768233132036729, 0.9758703626799556, 0.9769631826204319, 0.976730307251292, 0.9769628221322444, 0.9775677213109081, 0.9774743548703396, 0.9774046004060539, 0.9770794400609081, 0.9777065092631044, 0.977358457918051, 0.9777998757036729, 0.9782180420011997, 0.977846739168051, 0.9779626361203396], "end": "2016-01-25 16:41:24.880000", "learning_rate_per_epoch": [0.0002450989850331098, 0.00023117953969631344, 0.00021805059805046767, 0.00020566726743709296, 0.00019398720178287476, 0.0001829704560805112, 0.00017257935542147607, 0.00016277837858069688, 0.00015353401249740273, 0.0001448146504117176, 0.00013659046089742333, 0.00012883334420621395, 0.00012151675764471292, 0.00011461568647064269, 0.00010810653475346044, 0.00010196704533882439, 9.617622708901763e-05, 9.071427484741434e-05, 8.556251123081893e-05, 8.070332114584744e-05, 7.61200935812667e-05, 7.179714884841815e-05, 6.771970947738737e-05, 6.387383473338559e-05, 6.0246369685046375e-05, 5.682491246261634e-05, 5.359776332625188e-05, 5.0553888286231086e-05, 4.768287908518687e-05, 4.497491681831889e-05, 4.2420742829563096e-05, 4.0011622331803665e-05, 3.773931894102134e-05, 3.559606193448417e-05, 3.357452078489587e-05, 3.1667786970501766e-05, 2.986933759530075e-05, 2.8173024475108832e-05, 2.6573046852718107e-05, 2.5063935026992112e-05, 2.3640526706003584e-05, 2.2297954274108633e-05, 2.1031628421042114e-05, 1.9837219952023588e-05, 1.8710641597863287e-05, 1.7648044376983307e-05, 1.664579212956596e-05, 1.5700459698564373e-05, 1.4808812920819037e-05, 1.3967804079584312e-05, 1.3174557352613192e-05, 1.2426359717210289e-05, 1.1720652764779516e-05, 1.1055023605877068e-05, 1.042719668475911e-05, 9.835024684434757e-06, 9.27648306969786e-06, 8.749660992179997e-06, 8.252758561866358e-06, 7.784075023664627e-06, 7.342008757404983e-06, 6.925048182893079e-06, 6.5317672124365345e-06, 6.160821158118779e-06, 5.810941274830839e-06, 5.4809315770398825e-06, 5.16966338182101e-06, 4.8760725803731475e-06, 4.599155090545537e-06, 4.337964128353633e-06, 4.091606570000295e-06, 3.859239768644329e-06, 3.640069280663738e-06, 3.4333456824242603e-06, 3.2383622965426184e-06, 3.0544522360287374e-06, 2.8809865852963412e-06, 2.7173721264261985e-06, 2.563049520176719e-06, 2.4174910322471987e-06, 2.2801989416620927e-06, 2.150703949155286e-06, 2.028563130807015e-06, 1.913358801175491e-06, 1.804697035368008e-06, 1.7022063047988922e-06, 1.6055361129474477e-06, 1.5143559721764177e-06, 1.4283540394899319e-06, 1.3472362070388044e-06, 1.2707251926258323e-06, 1.1985592891505803e-06, 1.1304917961751926e-06, 1.0662898830560152e-06], "accuracy_valid": [0.5702639660203314, 0.6607518942959337, 0.7080975268260542, 0.7353000870670181, 0.7671207290097892, 0.7847812147025602, 0.792370164250753, 0.8057773084525602, 0.808239304875753, 0.8098056287650602, 0.8167548122176205, 0.8228583278426205, 0.828392672251506, 0.8250864787274097, 0.8287279979292168, 0.8338049463478916, 0.8335608057228916, 0.8357374811746988, 0.8364904932228916, 0.8365816782756024, 0.8356360010353916, 0.8442118081701807, 0.8410482751317772, 0.8359507365399097, 0.8411497552710843, 0.8442426934299698, 0.8442632836031627, 0.8420248376317772, 0.8455957619540663, 0.8475488869540663, 0.8475282967808735, 0.8478945077183735, 0.8457987222326807, 0.8482401284826807, 0.8471517907567772, 0.8460428628576807, 0.8472841561558735, 0.8498579278049698, 0.8488298898719879, 0.8495931970067772, 0.8504579842808735, 0.8507227150790663, 0.8507021249058735, 0.8525331795933735, 0.8497152673192772, 0.8497461525790663, 0.8487592949924698, 0.8490034356174698, 0.8512007012424698, 0.8491255059299698, 0.8510683358433735, 0.8507021249058735, 0.8474871164344879, 0.8511904061558735, 0.8497152673192772, 0.8498579278049698, 0.8510477456701807, 0.8506609445594879, 0.8497255624058735, 0.8500711831701807, 0.8503256188817772, 0.8482504235692772, 0.8495931970067772, 0.8501932534826807, 0.8486166345067772, 0.8485960443335843, 0.8490946206701807, 0.8471312005835843, 0.8479959878576807, 0.8489828454442772, 0.8494608316076807, 0.8495829019201807, 0.8483621987951807, 0.8478636224585843, 0.8497049722326807, 0.8494711266942772, 0.8472532708960843, 0.8484945641942772, 0.8479959878576807, 0.8483621987951807, 0.8490946206701807, 0.8487181146460843, 0.8500608880835843, 0.8504579842808735, 0.8506918298192772, 0.8493490563817772, 0.8500814782567772, 0.8489725503576807, 0.8500814782567772, 0.8502035485692772, 0.8484842691076807, 0.8509256753576807, 0.8488504800451807, 0.8503256188817772], "accuracy_test": 0.8057, "start": "2016-01-23 10:42:49.533000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0], "accuracy_train_last": 0.9779626361203396, "batch_size_eval": 1024, "accuracy_train_std": [0.016743991834547375, 0.01811226395031116, 0.01849078973250707, 0.019048422694782696, 0.019556378758288664, 0.02004608291587154, 0.01993299518844044, 0.02071543850315417, 0.018636543453463796, 0.018107483287062062, 0.02073606904362401, 0.020607511499618404, 0.019337004776398426, 0.02079184196293537, 0.019877373865011073, 0.019215396677583735, 0.019196586757417013, 0.01831007650949835, 0.01795995753079614, 0.017847571651652794, 0.01785700427594673, 0.016495729470032413, 0.016735026634221953, 0.016736940306610666, 0.015558159092077804, 0.014566026653061863, 0.015081664508164888, 0.014839957179186866, 0.014627492063064292, 0.013101878139705082, 0.012779286038220993, 0.012797046345508734, 0.0136370590959398, 0.01250898337075261, 0.012275338236755425, 0.012013280326409175, 0.012050761173560931, 0.010835451064885102, 0.011243124619158365, 0.011420464047512981, 0.010579150143464201, 0.010150888926392775, 0.010363001936112065, 0.009263316133141391, 0.00966475444999214, 0.008945940375586582, 0.008677747517047547, 0.008407584774148382, 0.008147980390959217, 0.007439346996492138, 0.007590532242098055, 0.007544507302861502, 0.007732180823097152, 0.007373366936251797, 0.007712308853187141, 0.007385554721795431, 0.00667684287510447, 0.006856183162414003, 0.006963532955976189, 0.006607249497966557, 0.0063489075530617075, 0.006455711871491847, 0.006547448091854793, 0.006538881880856904, 0.0059877425239651064, 0.005648452887429143, 0.005672337327373476, 0.005811274545416265, 0.005800047224333384, 0.005617209181991992, 0.005905160567615306, 0.0056366097498387075, 0.006002312190069434, 0.005799943173238692, 0.006036517053016987, 0.005964894359836635, 0.005727740636015703, 0.0055342680985197195, 0.005966366898787188, 0.005714817807061394, 0.006311182110962538, 0.00569666683420546, 0.005549023174281892, 0.0059177034118478855, 0.005773022265712936, 0.00604006673157187, 0.005748028088977583, 0.005939231861017782, 0.00588758960366857, 0.005799705799692264, 0.005466176785028243, 0.0055805598584731785, 0.005535828565146719, 0.005642161989234072], "accuracy_test_std": 0.10033075301222454, "error_valid": [0.42973603397966864, 0.33924810570406627, 0.2919024731739458, 0.2646999129329819, 0.23287927099021077, 0.21521878529743976, 0.20762983574924698, 0.19422269154743976, 0.19176069512424698, 0.19019437123493976, 0.18324518778237953, 0.17714167215737953, 0.17160732774849397, 0.1749135212725903, 0.1712720020707832, 0.1661950536521084, 0.1664391942771084, 0.16426251882530118, 0.1635095067771084, 0.16341832172439763, 0.1643639989646084, 0.1557881918298193, 0.15895172486822284, 0.1640492634600903, 0.15885024472891573, 0.15575730657003017, 0.15573671639683728, 0.15797516236822284, 0.15440423804593373, 0.15245111304593373, 0.1524717032191265, 0.1521054922816265, 0.1542012777673193, 0.1517598715173193, 0.15284820924322284, 0.1539571371423193, 0.1527158438441265, 0.15014207219503017, 0.15117011012801207, 0.15040680299322284, 0.1495420157191265, 0.14927728492093373, 0.1492978750941265, 0.1474668204066265, 0.15028473268072284, 0.15025384742093373, 0.15124070500753017, 0.15099656438253017, 0.14879929875753017, 0.15087449407003017, 0.1489316641566265, 0.1492978750941265, 0.15251288356551207, 0.1488095938441265, 0.15028473268072284, 0.15014207219503017, 0.1489522543298193, 0.14933905544051207, 0.1502744375941265, 0.1499288168298193, 0.14967438111822284, 0.15174957643072284, 0.15040680299322284, 0.1498067465173193, 0.15138336549322284, 0.15140395566641573, 0.1509053793298193, 0.15286879941641573, 0.1520040121423193, 0.15101715455572284, 0.1505391683923193, 0.1504170980798193, 0.1516378012048193, 0.15213637754141573, 0.1502950277673193, 0.15052887330572284, 0.15274672910391573, 0.15150543580572284, 0.1520040121423193, 0.1516378012048193, 0.1509053793298193, 0.15128188535391573, 0.14993911191641573, 0.1495420157191265, 0.14930817018072284, 0.15065094361822284, 0.14991852174322284, 0.1510274496423193, 0.14991852174322284, 0.14979645143072284, 0.1515157308923193, 0.1490743246423193, 0.1511495199548193, 0.14967438111822284], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.6726303233055996, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.00025985650696048237, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "optimization": "rmsprop", "nb_data_augmentation": 4, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 7.27441369510298e-08, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.05679110104896343}, "accuracy_valid_max": 0.8525331795933735, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import os\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8503256188817772, "loss_train": [1.5662717819213867, 1.1552942991256714, 0.9679158329963684, 0.8484938740730286, 0.7630332708358765, 0.6970430612564087, 0.6423563957214355, 0.5946500897407532, 0.5565047860145569, 0.5211007595062256, 0.48800089955329895, 0.4605865776538849, 0.43663981556892395, 0.41270285844802856, 0.3932829797267914, 0.3721748888492584, 0.3550010025501251, 0.33580049872398376, 0.3212966024875641, 0.3053128123283386, 0.2923666536808014, 0.28033682703971863, 0.26905083656311035, 0.2561359703540802, 0.2454099804162979, 0.23564431071281433, 0.22629952430725098, 0.21872882544994354, 0.21006329357624054, 0.20100802183151245, 0.19433844089508057, 0.1880904883146286, 0.18310140073299408, 0.1764575093984604, 0.1714973896741867, 0.1663610190153122, 0.1610083431005478, 0.15611755847930908, 0.15342481434345245, 0.1457057148218155, 0.14493000507354736, 0.13983702659606934, 0.13745775818824768, 0.13526856899261475, 0.1307227909564972, 0.12899461388587952, 0.1258964240550995, 0.12372574955224991, 0.1211295872926712, 0.12015561759471893, 0.11791069060564041, 0.11560745537281036, 0.113993339240551, 0.11179240047931671, 0.11038382351398468, 0.10734190791845322, 0.10792925953865051, 0.10567639023065567, 0.10517140477895737, 0.10418503731489182, 0.10226527601480484, 0.1006801426410675, 0.10156504064798355, 0.09924110025167465, 0.09943249821662903, 0.0983063206076622, 0.09699703752994537, 0.09782084077596664, 0.09615924954414368, 0.09584352374076843, 0.09444836527109146, 0.0939226970076561, 0.0946107879281044, 0.09299537539482117, 0.0923779159784317, 0.09191504120826721, 0.09115707129240036, 0.09160833805799484, 0.09138397127389908, 0.09130177646875381, 0.09094841033220291, 0.08895912021398544, 0.08938835561275482, 0.08854706585407257, 0.08877313882112503, 0.08942044526338577, 0.08830107748508453, 0.08820674568414688, 0.08830514550209045, 0.08861155062913895, 0.0874997228384018, 0.08693293482065201, 0.08800514787435532, 0.08692986518144608], "accuracy_train_first": 0.5842821382428941, "model": "residualv4", "loss_std": [0.30342239141464233, 0.250603586435318, 0.24657398462295532, 0.24327735602855682, 0.2427927404642105, 0.23422254621982574, 0.22921311855316162, 0.22408680617809296, 0.2192760705947876, 0.21471494436264038, 0.20996028184890747, 0.2036571353673935, 0.19947127997875214, 0.1927676498889923, 0.19029010832309723, 0.18657808005809784, 0.1802711933851242, 0.1751096248626709, 0.17360177636146545, 0.16739633679389954, 0.16290231049060822, 0.15936598181724548, 0.15424226224422455, 0.15011854469776154, 0.1464400291442871, 0.14267456531524658, 0.13981251418590546, 0.13564203679561615, 0.13261544704437256, 0.12945106625556946, 0.12472796440124512, 0.12152267247438431, 0.12077721208333969, 0.11604876816272736, 0.1140652447938919, 0.111659936606884, 0.10906242579221725, 0.10717933624982834, 0.10626929998397827, 0.10340893268585205, 0.1001560240983963, 0.09918630123138428, 0.09797380864620209, 0.09670133888721466, 0.09414868801832199, 0.09370884299278259, 0.09191234409809113, 0.09084516763687134, 0.0879291370511055, 0.08804461359977722, 0.08764447271823883, 0.0869266465306282, 0.08471772074699402, 0.08468500524759293, 0.08408737927675247, 0.08271478116512299, 0.08138465881347656, 0.08064835518598557, 0.08001983165740967, 0.07874054461717606, 0.07997602969408035, 0.07783921808004379, 0.07745271921157837, 0.0770670548081398, 0.07837390899658203, 0.07657954841852188, 0.07589787989854813, 0.07653667777776718, 0.07499530166387558, 0.0749366357922554, 0.07472331821918488, 0.0738891065120697, 0.07515273243188858, 0.07049640268087387, 0.07206011563539505, 0.07164489477872849, 0.07152958959341049, 0.0724855586886406, 0.0714440867304802, 0.07130679488182068, 0.07169152796268463, 0.06960392743349075, 0.07083550095558167, 0.06893397867679596, 0.07116945087909698, 0.07062117010354996, 0.07072310149669647, 0.07056271284818649, 0.07099974155426025, 0.07176759839057922, 0.06849528849124908, 0.06770599633455276, 0.06978614628314972, 0.06974997371435165]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:13 2016", "state": "available"}], "summary": "abbd0576fd81ef7a66f2cd77b1747452"}