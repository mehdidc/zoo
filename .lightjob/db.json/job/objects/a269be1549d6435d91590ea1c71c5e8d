{"content": {"hp_model": {"f0": 32, "f1": 32, "f2": 16, "f3": 16, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.44870924949646, 1.0862808227539062, 0.9002525806427002, 0.8032015562057495, 0.736989438533783, 0.6866025924682617, 0.6467705368995667, 0.6140934824943542, 0.5868908166885376, 0.5639617443084717, 0.544144332408905, 0.5268794298171997, 0.5111247301101685, 0.49695587158203125, 0.48403605818748474, 0.4720788598060608, 0.46100229024887085, 0.45069101452827454, 0.4409538507461548, 0.43183234333992004, 0.42324134707450867, 0.4150565564632416, 0.4072546362876892, 0.3998982906341553, 0.3928183317184448, 0.3860156536102295, 0.3795768618583679, 0.3733333647251129, 0.36740052700042725, 0.3616478145122528, 0.3560695946216583, 0.3507324755191803, 0.3455626666545868, 0.3406304717063904, 0.3358176648616791, 0.33116254210472107, 0.32667016983032227, 0.32232728600502014, 0.31806281208992004, 0.3139401972293854, 0.30993837118148804, 0.306054949760437, 0.3022376596927643, 0.29853570461273193, 0.29488450288772583, 0.2913322150707245, 0.28786909580230713, 0.2845197916030884, 0.2812170386314392, 0.2779763638973236, 0.27479931712150574, 0.2717110812664032, 0.2686687111854553, 0.26570484042167664, 0.26283174753189087, 0.2600044906139374, 0.25721171498298645, 0.2544916272163391, 0.251806378364563, 0.24917198717594147, 0.2465687245130539, 0.24403691291809082, 0.2415437400341034, 0.2391011118888855, 0.23667292296886444, 0.2343030869960785, 0.23196443915367126, 0.2296755462884903, 0.22741878032684326, 0.2252020388841629, 0.22300204634666443, 0.22084155678749084, 0.21872416138648987, 0.21663808822631836, 0.2145564705133438, 0.21252360939979553, 0.21051518619060516, 0.20853376388549805, 0.20657633244991302], "moving_avg_accuracy_train": [0.05411156604720376, 0.11234793346541619, 0.17148133554384687, 0.2279256217880502, 0.2809621283673201, 0.3302060065754847, 0.3755927042175855, 0.4172637987252289, 0.455623402495194, 0.49086773387265875, 0.5232827795087871, 0.553128288587255, 0.5805447770792586, 0.605659033798243, 0.6286826807310342, 0.6498479942955276, 0.6692315258345057, 0.6870417525826812, 0.703466123807202, 0.71855029120569, 0.7323956509797778, 0.7450610878716948, 0.7566924238577349, 0.7674139953677718, 0.7772726370708433, 0.7863848688821699, 0.794785804261164, 0.8025511150022219, 0.8097026550858406, 0.8162924649337073, 0.8223907766087106, 0.8280420175328802, 0.8332792690372519, 0.8381416049149959, 0.8426269531501943, 0.8467777349023584, 0.8506458998638113, 0.8542411806207857, 0.8575978049913391, 0.8607118089260368, 0.8636329950565506, 0.866343478831165, 0.8688945213711751, 0.8712648283702702, 0.8735189763587323, 0.8756174640126339, 0.8776130236975647, 0.8794927327711453, 0.8812821632361865, 0.8829670554166283, 0.8845787894802165, 0.8860851176600557, 0.8875268435278634, 0.8889104273148427, 0.890199830550505, 0.8914323370268776, 0.8926345627591751, 0.893758454645633, 0.894876806042227, 0.8959461013170187, 0.8969758603309886, 0.8979515076173803, 0.8989132594834569, 0.8998764924129259, 0.9008224571089718, 0.9017249786092226, 0.9025814257868293, 0.9034452341990563, 0.9042807544414799, 0.9051048383215752, 0.9059418088660326, 0.9067904134572349, 0.9076215148071556, 0.9084229483958844, 0.9092279800317021, 0.9100129623729856, 0.9107682746051406, 0.9115014979878806, 0.9122194917037659], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05420554287462348, 0.1108215626176581, 0.16743621899708205, 0.22113819785979852, 0.2710142418257012, 0.31678158764501363, 0.35873315285453333, 0.3969209256714896, 0.43178232049138887, 0.4635471713206385, 0.49231761302705357, 0.5180990882642579, 0.5412657948839917, 0.5622267236316618, 0.581128180598315, 0.598336863385622, 0.6140576409966079, 0.6281330986589952, 0.6409719089926439, 0.6525889029578373, 0.6628966836428518, 0.6723334071742745, 0.6808620499376452, 0.6884147286035193, 0.6951643407864655, 0.7013132634472768, 0.7069225950468263, 0.7120330581513304, 0.7166680665304745, 0.7207775094067945, 0.7245370431517325, 0.727821937763517, 0.7307417218203731, 0.7333939415340437, 0.7356588689638471, 0.7376973036506703, 0.739422031587561, 0.7408379503696935, 0.7420634491486127, 0.74314198398714, 0.7441503159442242, 0.7449601584555999, 0.7456035674970881, 0.7462202862368371, 0.7467265049776112, 0.7471821018443079, 0.7476287601180849, 0.748043989104394, 0.7484054881608221, 0.748780694945267, 0.749180445716177, 0.7494903637763365, 0.7495953030670011, 0.7497019554598492, 0.749762351028322, 0.7497678789149477, 0.7497118188566607, 0.7496369507417024, 0.7495451553757401, 0.7494381254838738, 0.7493540056124443, 0.7493159483305674, 0.7492816967768782, 0.7492020422535578, 0.7491303531825695, 0.7490912765898396, 0.7490316935938828, 0.7488804126475217, 0.7487320527645467, 0.7486239724410287, 0.7485521437210223, 0.7485495625379261, 0.74848517480823, 0.7484272258515033, 0.7483994858529494, 0.7483623128230008, 0.7483166500647971, 0.7482012818862542, 0.7480974505255655], "moving_var_accuracy_train": [0.02635255422072806, 0.05424056920927657, 0.08028734546067308, 0.10093222796116383, 0.11615484443624391, 0.12636399586144448, 0.13226716718099937, 0.134668771520084, 0.13444502718057408, 0.13217999051071758, 0.1284186081119764, 0.12359353701015495, 0.11799915788022891, 0.11187577510712951, 0.10545899245918892, 0.09894482769782001, 0.09243183658234103, 0.08604349051549975, 0.07986698119503757, 0.0739280720304843, 0.06826051071290119, 0.06287817926657926, 0.05780795313130272, 0.05306172667897594, 0.0486302893571442, 0.04451455533867994, 0.04069828124199027, 0.03717115357593794, 0.033914338948452596, 0.0309137353980867, 0.028157066505847355, 0.025628788571109697, 0.023312768943879115, 0.021194272841183172, 0.019255910696183837, 0.017485380528952335, 0.015871506777578214, 0.014400690493313623, 0.013062023788467199, 0.011843094594168298, 0.01073558509043342, 0.00972814708202211, 0.008813902736188371, 0.007983077659999168, 0.007230500542384241, 0.006547083342048014, 0.005928215333948302, 0.0053671935563651815, 0.004859292753231623, 0.004398913232845889, 0.003982401089786875, 0.003604582202076586, 0.003262831143170079, 0.002953776765713398, 0.0026733621354792856, 0.0024196975718600595, 0.0021907359350766373, 0.0019830305383209865, 0.0017959838731052605, 0.0016266760172569611, 0.0014735520481729367, 0.001334763832002635, 0.0012096121486694894, 0.0010970012928902615, 0.0009953548064567223, 0.0009031502313367854, 0.0008194367241153814, 0.0007442085364611504, 0.0006760705294945323, 0.000614575504717975, 0.0005594226314767825, 0.0005099615360989894, 0.0004651819475736499, 0.00042444441499057067, 0.00038783265690351814, 0.0003545951666983081, 0.0003242701191408656, 0.00029668165598774793, 0.0002716531251734294], "duration": 15595.852316, "accuracy_train": [0.5411156604720377, 0.6364752402293282, 0.7036819542497231, 0.7359241979858804, 0.7582906875807494, 0.7734009104489663, 0.7840729829964931, 0.7923036492940199, 0.8008598364248799, 0.8080667162698413, 0.8150181902339424, 0.8217378702934662, 0.8272931735072905, 0.831687344269103, 0.8358955031261536, 0.8403358163759689, 0.8436833096853081, 0.8473337933162606, 0.8512854648278886, 0.854307797792082, 0.857003888946567, 0.8590500198989479, 0.8613744477320967, 0.8639081389581026, 0.8660004123984865, 0.8683949551841085, 0.8703942226721114, 0.8724389116717424, 0.8740665158384091, 0.8756007535645073, 0.8772755816837394, 0.8789031858504062, 0.8804145325765966, 0.8819026278146919, 0.8829950872669805, 0.8841347706718347, 0.8854593845168882, 0.8865987074335548, 0.8878074243263198, 0.8887378443383168, 0.8899236702311739, 0.8907378328026948, 0.8918539042312662, 0.8925975913621264, 0.8938063082548912, 0.8945038528977483, 0.8955730608619417, 0.8964101144333703, 0.8973870374215578, 0.8981310850406055, 0.8990843960525102, 0.8996420712786084, 0.9005023763381322, 0.901362681397656, 0.9018044596714655, 0.9025248953142304, 0.9034545943498523, 0.9038734816237541, 0.9049419686115725, 0.905569758790144, 0.9062436914567183, 0.9067323331949059, 0.907569026278147, 0.908545588778147, 0.909336139373385, 0.9098476721114802, 0.9102894503852897, 0.9112195099090993, 0.9118004366232927, 0.9125215932424326, 0.9134745437661499, 0.9144278547780547, 0.9151014269564415, 0.9156358506944444, 0.9164732647540605, 0.9170778034445367, 0.9175660846945367, 0.9181005084325397, 0.9186814351467331], "end": "2016-01-29 20:43:06.184000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0], "moving_var_accuracy_valid": [0.026444167904993807, 0.052648114338387605, 0.07623027675719109, 0.09456237188541682, 0.10749471255207305, 0.11559709078696655, 0.11987678612002717, 0.12101386144249965, 0.11985032693734975, 0.11694634597745512, 0.11270135622354965, 0.1074133807898539, 0.10150230937131188, 0.09530632323986482, 0.08899107659503849, 0.08275721780500207, 0.07670578166274858, 0.07081827007212467, 0.06521995852196284, 0.05991255360885263, 0.05487755133182058, 0.050191261957715075, 0.04582677548841033, 0.04175748453483884, 0.03799175146293655, 0.034532859565640645, 0.03136275501801991, 0.028461531014500403, 0.025808727637122983, 0.023379842560194323, 0.021169065149988838, 0.01914927342848474, 0.017311072336084306, 0.01564327352716212, 0.014125115240806393, 0.012750000660477748, 0.011501772772536598, 0.010369638929261297, 0.00934619166164936, 0.00842204163206568, 0.007588988068880206, 0.006835991866031268, 0.00615611845618016, 0.0055439296885977625, 0.004991843036459585, 0.004494526849358122, 0.004046869696944111, 0.0036437344632493404, 0.003280537151034592, 0.0029537504571109743, 0.0026598136175094655, 0.0023946966985946357, 0.002155326139027699, 0.0019398958977210313, 0.0017459391365711489, 0.0015713454979318089, 0.0014142392327098443, 0.0012728657565505967, 0.0011456550183984466, 0.0010311926151383777, 0.0009281370389994639, 0.0008353363703098523, 0.0007518132917992382, 0.000676689066207083, 0.0006090664134924672, 0.0005481735149641149, 0.0004933881146683681, 0.00044425527652411866, 0.0004000278447655942, 0.0003601301924960204, 0.0003241636075315783, 0.00029174730674097607, 0.0002626098880844974, 0.000236379122010319, 0.00021274813537696505, 0.00019148575834666856, 0.00017235594829938264, 0.0001552401418190273, 0.00013981315620028673], "accuracy_test": 0.5303093112244899, "start": "2016-01-29 16:23:10.332000", "learning_rate_per_epoch": [0.0010917374165728688, 0.0005458687082864344, 0.00036391246248967946, 0.0002729343541432172, 0.00021834747167304158, 0.00018195623124483973, 0.00015596247976645827, 0.0001364671770716086, 0.00012130415416322649, 0.00010917373583652079, 9.924884943757206e-05, 9.097811562241986e-05, 8.397980127483606e-05, 7.798123988322914e-05, 7.278248813236132e-05, 6.82335885358043e-05, 6.421984289772809e-05, 6.065207708161324e-05, 5.7459863455733284e-05, 5.4586867918260396e-05, 5.1987495680805296e-05, 4.962442471878603e-05, 4.7466841351706535e-05, 4.548905781120993e-05, 4.3669493607012555e-05, 4.198990063741803e-05, 4.043471926706843e-05, 3.899061994161457e-05, 3.7646117561962456e-05, 3.639124406618066e-05, 3.521733378875069e-05, 3.411679426790215e-05, 3.308294981252402e-05, 3.210992144886404e-05, 3.1192495953291655e-05, 3.032603854080662e-05, 2.9506414648494683e-05, 2.8729931727866642e-05, 2.799326648528222e-05, 2.7293433959130198e-05, 2.6627740226103924e-05, 2.5993747840402648e-05, 2.538924127293285e-05, 2.4812212359393016e-05, 2.4260831196443178e-05, 2.3733420675853267e-05, 2.322845466551371e-05, 2.2744528905604966e-05, 2.2280353732639924e-05, 2.1834746803506278e-05, 2.1406614905572496e-05, 2.0994950318709016e-05, 2.0598818082362413e-05, 2.0217359633534215e-05, 1.9849770978908055e-05, 1.9495309970807284e-05, 1.915328721224796e-05, 1.8823058780981228e-05, 1.8504022591514513e-05, 1.819562203309033e-05, 1.789733323676046e-05, 1.7608666894375347e-05, 1.7329164620605297e-05, 1.7058397133951075e-05, 1.679595879977569e-05, 1.654147490626201e-05, 1.629458711249754e-05, 1.605496072443202e-05, 1.5822281056898646e-05, 1.5596247976645827e-05, 1.5376583178294823e-05, 1.516301927040331e-05, 1.4955306141928304e-05, 1.4753207324247342e-05, 1.4556498172169086e-05, 1.4364965863933321e-05, 1.4178407582221553e-05, 1.399663324264111e-05, 1.3819460036756936e-05], "accuracy_train_first": 0.5411156604720377, "accuracy_train_last": 0.9186814351467331, "batch_size_eval": 1024, "accuracy_train_std": [0.016490451562099894, 0.015968024156169852, 0.018006492593289406, 0.019823092481947635, 0.01901131066529887, 0.019182802381091275, 0.018119765392979256, 0.017877691730557976, 0.01629884743774634, 0.016236147844234366, 0.014437607613717377, 0.013866380938413045, 0.014195086779464572, 0.014758816066619721, 0.014415444476362152, 0.014027034542650823, 0.013132059860237251, 0.013119571944512907, 0.01314076236845178, 0.012500819169184791, 0.012371936598941645, 0.012495161679018782, 0.011782203003319808, 0.01163745238597629, 0.011158272945459029, 0.011199009362668684, 0.011382493783925817, 0.011845518853298764, 0.012184268670465926, 0.011837596999707756, 0.01170855817416583, 0.011419032943868344, 0.010836264585582194, 0.010470499175625113, 0.01090718243325786, 0.010400281914377973, 0.01058809647351609, 0.010248326189826969, 0.010084669738742235, 0.009784853384437506, 0.009464211036590226, 0.00927621449865278, 0.009273828716485364, 0.00932803189142887, 0.00933385279991596, 0.008819918560861215, 0.00944807807477233, 0.009254224872469506, 0.008738267877665351, 0.009110330772055988, 0.009048691275751022, 0.0090006211840994, 0.008660071503963758, 0.008501212689905956, 0.008621332678594178, 0.008696887292888362, 0.008710243605772884, 0.00918251297518125, 0.009215587128869676, 0.009215552339141056, 0.009004021187385006, 0.00917373426304873, 0.009057300052883974, 0.00933452026846599, 0.009183243340713102, 0.009276025331385496, 0.009349673588190055, 0.009243417588912013, 0.009416967746705248, 0.009276998691582179, 0.008952345634681589, 0.008983167523319572, 0.009159641788850105, 0.009588579032601073, 0.009503448169525905, 0.00948615348928329, 0.009534880143251339, 0.009549331401959805, 0.009347512184698077], "accuracy_test_std": 0.020664467828253763, "error_valid": [0.4579445712537651, 0.3796342596950302, 0.32303187358810237, 0.295543992375753, 0.2801013624811747, 0.2713122999811747, 0.2637027602597892, 0.25938911897590367, 0.2544651261295181, 0.25056917121611444, 0.24874841161521077, 0.24986763460090367, 0.25023384553840367, 0.24912491763930722, 0.24875870670180722, 0.24678499152861444, 0.2444553605045181, 0.2451877823795181, 0.2434787980045181, 0.24285815135542166, 0.2443332901920181, 0.24273608104292166, 0.2423801651920181, 0.24361116340361444, 0.2440891495670181, 0.24334643260542166, 0.24259342055722888, 0.24197277390813254, 0.24161685805722888, 0.24223750470632532, 0.24162715314382532, 0.24261401073042166, 0.24298022166792166, 0.24273608104292166, 0.24395678416792166, 0.24395678416792166, 0.24505541698042166, 0.24641878059111444, 0.24690706184111444, 0.24715120246611444, 0.2467746964420181, 0.2477512589420181, 0.2486057511295181, 0.24822924510542166, 0.24871752635542166, 0.24871752635542166, 0.24835131541792166, 0.24821895001882532, 0.24834102033132532, 0.24784244399472888, 0.24722179734563254, 0.24772037368222888, 0.2494602433170181, 0.2493381730045181, 0.24969408885542166, 0.25018237010542166, 0.25079272166792166, 0.25103686229292166, 0.25128100291792166, 0.25152514354292166, 0.25140307323042166, 0.2510265672063253, 0.2510265672063253, 0.2515148484563253, 0.2515148484563253, 0.2512604127447289, 0.2515045533697289, 0.2524811158697289, 0.2526031861822289, 0.25234875047063254, 0.2520943147590362, 0.25147366810993976, 0.2520943147590362, 0.2520943147590362, 0.2518501741340362, 0.2519722444465362, 0.2520943147590362, 0.25283703172063254, 0.25283703172063254], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.07725087391288527, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "valid_ratio": 0.15, "learning_rate": 0.001091737374002307, "optimization": "adam", "nb_data_augmentation": 0, "learning_rate_decay_method": "lin", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 3.2707149275010124e-07, "rotation_range": [0, 0], "momentum": 0.6838269493505671}, "accuracy_valid_max": 0.7583831419427711, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7471629682793675, "accuracy_valid_std": [0.010533011948290292, 0.009138921601502151, 0.008258591943405714, 0.009007472462567098, 0.009162873880415607, 0.00655934047606661, 0.005751840097220713, 0.008977012880361271, 0.009756965136590228, 0.00887337927276566, 0.00636151675547129, 0.006453502315629449, 0.005481535178620634, 0.007394106751865008, 0.008265718285755785, 0.008049262672154752, 0.00834330515982649, 0.008152759878617691, 0.00814927981521215, 0.009242607996542506, 0.008999864557808657, 0.009904120862573286, 0.010539243127222809, 0.01048276516746916, 0.011068733666440213, 0.010989634891924683, 0.011640482531179578, 0.011800014928544687, 0.011613058842201106, 0.010954690496252998, 0.010523927927528626, 0.01092294301314604, 0.011586293030165385, 0.010922951231260646, 0.010858726894479968, 0.011054568476097594, 0.011195282213146834, 0.011111081950980154, 0.012044635266877343, 0.011795460221016175, 0.012655649198248372, 0.012929815674560592, 0.01305420426914935, 0.014000011358811622, 0.013848072298917711, 0.013848072298917711, 0.0138480528522917, 0.014788288611965818, 0.01455478062021433, 0.014893744304867784, 0.015832730811799634, 0.015274884923645652, 0.01403494151226883, 0.013940211995415116, 0.013748771908533674, 0.014144126215662184, 0.014477359815551923, 0.014836257145787788, 0.014817173854507416, 0.015168032829001914, 0.015152300261393121, 0.016014223566967627, 0.01557649122443597, 0.015187406532678048, 0.015704501328874996, 0.016247789819549118, 0.015960343499351767, 0.015595220901590082, 0.01541760979391693, 0.01590960605274213, 0.01660342920684671, 0.01712075901556828, 0.016610607454451264, 0.016313709518766963, 0.016831892098788964, 0.016849892326083128, 0.017354672263993853, 0.01642123414579414, 0.016844097691416645], "accuracy_valid": [0.5420554287462349, 0.6203657403049698, 0.6769681264118976, 0.704456007624247, 0.7198986375188253, 0.7286877000188253, 0.7362972397402108, 0.7406108810240963, 0.7455348738704819, 0.7494308287838856, 0.7512515883847892, 0.7501323653990963, 0.7497661544615963, 0.7508750823606928, 0.7512412932981928, 0.7532150084713856, 0.7555446394954819, 0.7548122176204819, 0.7565212019954819, 0.7571418486445783, 0.7556667098079819, 0.7572639189570783, 0.7576198348079819, 0.7563888365963856, 0.7559108504329819, 0.7566535673945783, 0.7574065794427711, 0.7580272260918675, 0.7583831419427711, 0.7577624952936747, 0.7583728468561747, 0.7573859892695783, 0.7570197783320783, 0.7572639189570783, 0.7560432158320783, 0.7560432158320783, 0.7549445830195783, 0.7535812194088856, 0.7530929381588856, 0.7528487975338856, 0.7532253035579819, 0.7522487410579819, 0.7513942488704819, 0.7517707548945783, 0.7512824736445783, 0.7512824736445783, 0.7516486845820783, 0.7517810499811747, 0.7516589796686747, 0.7521575560052711, 0.7527782026543675, 0.7522796263177711, 0.7505397566829819, 0.7506618269954819, 0.7503059111445783, 0.7498176298945783, 0.7492072783320783, 0.7489631377070783, 0.7487189970820783, 0.7484748564570783, 0.7485969267695783, 0.7489734327936747, 0.7489734327936747, 0.7484851515436747, 0.7484851515436747, 0.7487395872552711, 0.7484954466302711, 0.7475188841302711, 0.7473968138177711, 0.7476512495293675, 0.7479056852409638, 0.7485263318900602, 0.7479056852409638, 0.7479056852409638, 0.7481498258659638, 0.7480277555534638, 0.7479056852409638, 0.7471629682793675, 0.7471629682793675], "seed": 961849242, "model": "residualv3", "loss_std": [0.28040188550949097, 0.13891376554965973, 0.12399149686098099, 0.12029973417520523, 0.11759224534034729, 0.11591587215662003, 0.11509586870670319, 0.11377042531967163, 0.11223512887954712, 0.1107124388217926, 0.1095087081193924, 0.10836605727672577, 0.1071229875087738, 0.10580834001302719, 0.1045883372426033, 0.1034911721944809, 0.10229421406984329, 0.10129794478416443, 0.10028819739818573, 0.09932743012905121, 0.09831380099058151, 0.09735555946826935, 0.09648818522691727, 0.0956697091460228, 0.09478674083948135, 0.09399031847715378, 0.09321442246437073, 0.0925404354929924, 0.09187226742506027, 0.09118490666151047, 0.09048490971326828, 0.08979713916778564, 0.08913911879062653, 0.08854158222675323, 0.08793599903583527, 0.0873427540063858, 0.08677154779434204, 0.0862022191286087, 0.08561433851718903, 0.08505750447511673, 0.08455383032560349, 0.08406338840723038, 0.08352787047624588, 0.08299144357442856, 0.08246162533760071, 0.08198041468858719, 0.08145175129175186, 0.08097913861274719, 0.08046847581863403, 0.07998042553663254, 0.07951898127794266, 0.07905778288841248, 0.07861173152923584, 0.07816337049007416, 0.07774712890386581, 0.0773237869143486, 0.07689975202083588, 0.07648038119077682, 0.07605854421854019, 0.07564493268728256, 0.07522853463888168, 0.07479827851057053, 0.07437711954116821, 0.07393665611743927, 0.07350456714630127, 0.07307922840118408, 0.07264335453510284, 0.07223585247993469, 0.07178682833909988, 0.07135042548179626, 0.07093466818332672, 0.07051616162061691, 0.07010700553655624, 0.06969737261533737, 0.06926968693733215, 0.06887394189834595, 0.06847615540027618, 0.06807218492031097, 0.06765681505203247]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:21 2016", "state": "available"}], "summary": "610b2748804140c8a716f536d89b02e3"}