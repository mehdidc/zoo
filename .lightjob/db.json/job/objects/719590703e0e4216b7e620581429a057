{"content": {"hp_model": {"f0": 64, "f1": 64, "f2": 32, "f3": 32, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [2.4365289211273193, 1.8902240991592407, 1.7645522356033325, 1.6911430358886719, 1.6480215787887573, 1.6141985654830933, 1.5855392217636108, 1.5588253736495972, 1.5370007753372192, 1.5134824514389038, 1.4904851913452148, 1.4700236320495605, 1.4499921798706055, 1.4306787252426147, 1.4100074768066406, 1.3899308443069458, 1.3706128597259521, 1.351492166519165, 1.3325309753417969, 1.3168509006500244, 1.2995941638946533, 1.2851157188415527, 1.2692625522613525, 1.2534257173538208, 1.2405682802200317, 1.2281180620193481, 1.2128980159759521, 1.2021316289901733, 1.188636064529419, 1.1771199703216553, 1.1657695770263672, 1.1546543836593628, 1.1446738243103027, 1.1350640058517456, 1.125133991241455, 1.1137336492538452, 1.1068360805511475, 1.097218632698059, 1.0867493152618408, 1.0791531801223755, 1.072226643562317, 1.065100073814392, 1.0559310913085938, 1.0473374128341675, 1.0396872758865356, 1.0327986478805542, 1.0259023904800415, 1.0204781293869019, 1.0122190713882446, 1.0046058893203735, 0.9991432428359985, 0.9930362105369568, 0.9859723448753357, 0.9810574650764465, 0.9729045033454895, 0.9670543670654297, 0.962100625038147, 0.9584000706672668, 0.9500361084938049, 0.9463978409767151, 0.9407299160957336, 0.9347743391990662, 0.931587278842926, 0.924934983253479, 0.9178237915039062, 0.9134395122528076, 0.9082408547401428, 0.9022971987724304, 0.8965246081352234, 0.8926026821136475, 0.8884700536727905, 0.8820531368255615, 0.8798134326934814, 0.8756136298179626, 0.8702133297920227, 0.8646972179412842, 0.8613638877868652, 0.8542454838752747, 0.8494492769241333, 0.8477950692176819, 0.8415534496307373, 0.8377866744995117, 0.8338918089866638, 0.8291078209877014, 0.8254578709602356, 0.8234457969665527, 0.8182981610298157, 0.8136956691741943, 0.8074085116386414, 0.804526686668396, 0.8028889894485474, 0.8003367781639099, 0.7951508164405823, 0.7911516427993774, 0.7859644889831543, 0.7858201265335083, 0.7823506593704224, 0.7773500680923462, 0.7751568555831909, 0.7708064913749695, 0.7669973373413086, 0.7613466382026672, 0.7577230930328369, 0.7544437646865845, 0.7529365420341492, 0.7503244876861572, 0.7452632784843445, 0.7425230741500854, 0.738555371761322, 0.7354463934898376, 0.7316328287124634, 0.7293103933334351, 0.7249069213867188, 0.7218447327613831, 0.7019068598747253, 0.6962259411811829, 0.695492684841156, 0.69383704662323, 0.6928114295005798, 0.6913859248161316, 0.6933578848838806, 0.6917204260826111, 0.6920151710510254, 0.6895495653152466, 0.6918825507164001, 0.6894021034240723, 0.6903978586196899, 0.6878138780593872, 0.6880568861961365, 0.6885284185409546, 0.6888911128044128, 0.686346173286438, 0.6878425478935242, 0.6873199343681335, 0.6839596629142761, 0.6870191693305969, 0.6874693036079407, 0.6858919858932495, 0.6870551109313965, 0.682616651058197, 0.6830275058746338, 0.6837756633758545, 0.68150794506073, 0.6833275556564331, 0.6798750758171082, 0.6792058348655701, 0.6819965839385986, 0.6793701648712158, 0.6811239123344421, 0.6768488883972168, 0.6763461232185364, 0.6774746775627136, 0.6764604449272156, 0.677925169467926, 0.6761959195137024, 0.6767926216125488, 0.675797164440155, 0.6756541132926941, 0.6759368777275085, 0.6777219772338867, 0.6776419281959534, 0.6772069931030273, 0.6770333051681519, 0.675466001033783, 0.6782767176628113, 0.6759732365608215, 0.677494466304779, 0.6774466037750244, 0.6779192686080933, 0.6776963472366333, 0.6778287887573242, 0.6779766082763672, 0.6784628033638, 0.675507128238678, 0.6764962673187256, 0.6782631278038025, 0.6773156523704529, 0.6795802712440491, 0.6767509579658508, 0.6753022074699402, 0.676674485206604, 0.6771637797355652, 0.6788654327392578, 0.6772668957710266, 0.6768236756324768, 0.6776599884033203, 0.674959123134613, 0.6761017441749573, 0.6783848404884338, 0.6779134273529053, 0.6766741871833801, 0.6757948398590088, 0.6767851114273071, 0.678043007850647, 0.6778266429901123, 0.6761196851730347, 0.6780526638031006, 0.6783642172813416, 0.6777156591415405, 0.6763026118278503, 0.6769723296165466, 0.6767325401306152, 0.6764628291130066, 0.6767842769622803, 0.6762803196907043, 0.6768465042114258, 0.6795262098312378, 0.6774837970733643, 0.6782647371292114, 0.6764128804206848, 0.677187979221344, 0.6770175099372864, 0.6777385473251343, 0.6775901317596436, 0.6762005686759949], "moving_avg_accuracy_train": [0.02910117647058823, 0.06083811764705881, 0.09271430588235292, 0.12359346352941174, 0.15299647011764703, 0.18092035251764702, 0.2071812584423529, 0.23186783848047055, 0.25515634875007054, 0.27695836093388704, 0.29770723072285127, 0.3171647429446838, 0.3354623862972742, 0.3528149711969586, 0.36906053290079216, 0.38450271490483057, 0.39909479635552403, 0.41285355201408924, 0.4259940791656215, 0.4379687888961182, 0.44878838059474163, 0.45955895429997334, 0.46916070592879955, 0.4775293412182725, 0.4863905247435041, 0.49417264873974187, 0.5025836191598854, 0.5105934925380144, 0.5182117903430365, 0.5249082583675564, 0.5309680207660948, 0.5362853363365442, 0.5414850379970074, 0.5436141812561303, 0.5505633513658114, 0.5537164279939361, 0.5589283146063071, 0.5638919537339117, 0.5698180524781675, 0.573062129583292, 0.5770923872131981, 0.5803407955507018, 0.584292598348573, 0.586159809101951, 0.5898779458388148, 0.5944360336078744, 0.5995547831882635, 0.6031357754576725, 0.6064621979119053, 0.6092348016501264, 0.6128101450145256, 0.6167385422777789, 0.6160882174617658, 0.6188464545391187, 0.620352397320501, 0.6251806870002156, 0.6281567359472529, 0.6308422388231159, 0.6346356619996277, 0.6377485663879002, 0.6404937097491102, 0.6424819858330227, 0.6450855519556029, 0.648184055583572, 0.6501256500252148, 0.6504777909050462, 0.6537476588733651, 0.6523540694566168, 0.6549821919227198, 0.6572227962598596, 0.6585593401632853, 0.662964582617545, 0.6644022420028494, 0.6664961354496233, 0.6662229924928962, 0.6684995167730183, 0.6716848592133636, 0.6736316674096743, 0.676054383021648, 0.6760160035430126, 0.6793132267181231, 0.6781324922816049, 0.6805263018769738, 0.6808289658069235, 0.6815625398144665, 0.6848039328918434, 0.6861117748967767, 0.6872841268188637, 0.6885768906075657, 0.6908321427232798, 0.6934595166862458, 0.6947935650176212, 0.6972577379276239, 0.6978213758995674, 0.7001286500743165, 0.700581667419826, 0.7000458536190198, 0.7021118564924119, 0.7031289061372883, 0.70528895670003, 0.7052565316182623, 0.7064061725740831, 0.7069090847284395, 0.7065099409614779, 0.7080518880418007, 0.7084914051199735, 0.7105622646079762, 0.7120025087354139, 0.7132375519795195, 0.7144149732521557, 0.7133005347504696, 0.7151516577460109, 0.715702374324351, 0.7166968427742688, 0.7244153937909596, 0.7313009132353931, 0.7374084689706774, 0.7430652691324331, 0.748149330454484, 0.7527273385855061, 0.7570004870798966, 0.7607098501366129, 0.7642247474758928, 0.7673763903753623, 0.7700740454554732, 0.7725866409099258, 0.7748573885836391, 0.7769481203135105, 0.7788791906351007, 0.7806642127480613, 0.7821507326497258, 0.7836486005612238, 0.7848484463874543, 0.7860624252781206, 0.7870938298091321, 0.7880856232988072, 0.7889852962630441, 0.7896891195779162, 0.7904590311495363, 0.7912343045051708, 0.7918238152311243, 0.7923990807668354, 0.7928579962195635, 0.7932710201270189, 0.7937721534084347, 0.7941714086558265, 0.7945236795549497, 0.7947818998347489, 0.795103709851274, 0.7956074565132054, 0.7961408285089437, 0.7965738044815788, 0.7969634828569503, 0.7972318404536082, 0.7975651269964826, 0.7978203790027167, 0.7980242234553863, 0.7983465069922007, 0.7985095033518042, 0.7986985530166237, 0.7987886977149614, 0.7989545338258182, 0.7990402569138246, 0.7991785841636186, 0.7993077845707861, 0.7994758296431193, 0.7994788349141014, 0.7995827161285737, 0.7995726798098339, 0.7995565882994388, 0.7996174000577302, 0.799705071816663, 0.7997251528702907, 0.7997455787597322, 0.7998016091190531, 0.7997979187953831, 0.7999004798570213, 0.8000045495183781, 0.8000676239783049, 0.8001079204040038, 0.8001324224812505, 0.8002391802331255, 0.8002411445627541, 0.8002829124594197, 0.8002640329781837, 0.8002941002686006, 0.8002293961240935, 0.8002770447469782, 0.8002940461546334, 0.8003775827156406, 0.8003092362087825, 0.8002147831761395, 0.800310951917349, 0.8003269155491435, 0.8002659887001115, 0.800262919241865, 0.8002813332000314, 0.8003002587035576, 0.8002843504802606, 0.8003006213145875, 0.8003340885948935, 0.8003571503236395, 0.8003567294089227, 0.800283409409207, 0.800278597880051, 0.8002719145626341, 0.8003388407534295, 0.8003496625604395, 0.8003052845396896, 0.8003500502033677, 0.8003291628300897, 0.8003150700764925, 0.8002765042453138, 0.8003406185266647, 0.8003465566739982], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.028733333333333326, 0.05964666666666665, 0.09105533333333331, 0.1208031333333333, 0.14912281999999996, 0.17631720466666662, 0.20192548419999995, 0.22610626911333329, 0.24881564220199995, 0.2701607446484666, 0.2905980035169533, 0.30992486983192463, 0.3282257161820655, 0.3455631445638589, 0.361966830107473, 0.3774901470967257, 0.3920477990537198, 0.40534968581501446, 0.41801471723351297, 0.42938657884349496, 0.4393012542924788, 0.44934446219656426, 0.45821001597690786, 0.4660823477125504, 0.4741674462746287, 0.4814973683138325, 0.4892809648157826, 0.4965528683342043, 0.5033109148341173, 0.5090331566840389, 0.5142365076823017, 0.5191195235807382, 0.5237409045559978, 0.525166814100398, 0.5311301326903582, 0.5338571194213224, 0.5385247408125236, 0.5426322667312712, 0.5476490400581441, 0.550377469385663, 0.5536463891137634, 0.5564950835357204, 0.5598189085154817, 0.5613036843306002, 0.5646399825642069, 0.5688026509744528, 0.5735357192103409, 0.5765554806226401, 0.5794465992270427, 0.5823419393043384, 0.5856677453739045, 0.589220970836514, 0.588472207086196, 0.5909183197109097, 0.5920798210731522, 0.5960985056325037, 0.59895532173592, 0.601179789562328, 0.6041951439394284, 0.6071489628788189, 0.6095007332576037, 0.6113906599318434, 0.6139982606053257, 0.6164784345447931, 0.6182039244236471, 0.6189035319812825, 0.6215065121164876, 0.6202758609048388, 0.6228882748143549, 0.6251594473329194, 0.6264568359329608, 0.629984485672998, 0.6314127037723649, 0.633338100061795, 0.6329909567222822, 0.634771861050054, 0.6372413416117153, 0.6387305407838771, 0.6405774867054894, 0.6408797380349405, 0.6433784308981131, 0.6420939211416351, 0.6437378623608049, 0.6435107427913911, 0.6439196685122519, 0.6467277016610268, 0.6479082648282575, 0.6488774383454317, 0.6494296945108885, 0.6514467250597997, 0.653595385887153, 0.6547291806317711, 0.6566429292352607, 0.6568453029784013, 0.6583874393472278, 0.658508695412505, 0.6578578258712545, 0.659632043284129, 0.6601621722890495, 0.6615726217268112, 0.6612686928874634, 0.6619551569320503, 0.662266307905512, 0.6614396771149609, 0.6624157094034647, 0.6628141384631183, 0.6644927246168065, 0.6655367854884592, 0.6663964402729466, 0.6670634629123187, 0.6661837832877535, 0.6674720716256448, 0.6676981977964137, 0.6683150446834389, 0.6744035402150951, 0.679976519526919, 0.6847922009075603, 0.6894729808168043, 0.6934856827351239, 0.6970171144616115, 0.700182069682117, 0.702950529380572, 0.7057354764425148, 0.7082152621315966, 0.7103804025851036, 0.7121556956599265, 0.7140867927606006, 0.7157047801512072, 0.7171209688027531, 0.7184488719224779, 0.7197106513968967, 0.7207929195905404, 0.7217136276314863, 0.7225289315350043, 0.7232760383815039, 0.7240817678766868, 0.7248602577556847, 0.7254542319801163, 0.7259754754487713, 0.7264445945705608, 0.726973468446838, 0.7273294549354875, 0.7276631761086054, 0.7278035251644116, 0.7279431726479705, 0.7282421887165068, 0.7284846365115227, 0.7287295061937038, 0.7289898889076667, 0.7292909000169001, 0.7294951433485434, 0.7298789623470223, 0.7301043994456534, 0.7303072928344214, 0.7305832302176459, 0.7308049071958813, 0.7308844164762932, 0.7310626414953305, 0.7312497106791308, 0.7312314062778844, 0.7314149323167626, 0.7313934390850862, 0.731547428509911, 0.7317260189922532, 0.7320067504263612, 0.7321927420503918, 0.7322534678453526, 0.7322814543941506, 0.7322533089547356, 0.7322813113925953, 0.7321865135866691, 0.7323945288946688, 0.7323950760052019, 0.732288901738015, 0.7322600115642135, 0.7322473437411255, 0.7323692760336796, 0.732465681763645, 0.7324324469206139, 0.7323758688952192, 0.732404948672364, 0.7324444538051277, 0.7324533417579482, 0.73251467424882, 0.7324098734906047, 0.7323822194748776, 0.7323173308607231, 0.7323255977746508, 0.7322930379971857, 0.7324370675308004, 0.7323133607777204, 0.7322553580332817, 0.7323364888966202, 0.7321428400069582, 0.7321018893395956, 0.7320783670723027, 0.7322305303650724, 0.7322608106618984, 0.7322213962623753, 0.7322392566361378, 0.7323486643058572, 0.7324471312086047, 0.7325090847544109, 0.7324715096123032, 0.7324376919844062, 0.7323005894526323, 0.7324571971740357, 0.7325048107899654, 0.7323743297109688, 0.7324302300732053, 0.732360540399218, 0.7324311530259628, 0.7324147043900332, 0.7324399006176965, 0.7324892438892602], "moving_var_accuracy_train": [0.007621906247750864, 0.015924816540124564, 0.023477157273819237, 0.029711142939364513, 0.034520859813278335, 0.03808646270655177, 0.04048453305577287, 0.04192092485600108, 0.042610024765596353, 0.042626971906406255, 0.04223891509344017, 0.041422376620861005, 0.04029337272910228, 0.038974045280498824, 0.03745190522810651, 0.0358528635707085, 0.03418393678321068, 0.032469273320338526, 0.03077640707268608, 0.02898930942358434, 0.02714395056195021, 0.02547360282721365, 0.023755985253567282, 0.022010693237684467, 0.02051630907512654, 0.01900973125264927, 0.017745457938061097, 0.01654833478805794, 0.015415847462266185, 0.01427784687207032, 0.013180548667803956, 0.012116958404905249, 0.01114859464063514, 0.010074534435732438, 0.009501699679078759, 0.008641006741176321, 0.008021379925600607, 0.007440981353542331, 0.007012951035128139, 0.006406372257991257, 0.0059119218212628786, 0.0054156990496810635, 0.0050146798528923064, 0.00454459015158085, 0.0042145520035689055, 0.003980082280206079, 0.0038178884275860666, 0.0035515111355295596, 0.003295945799072818, 0.0030355372025683215, 0.0028470312038716646, 0.0027012188290059243, 0.002434903247402235, 0.0022598837686359664, 0.0020543061647195454, 0.002058686979328739, 0.0019325300874123196, 0.0018041844099375014, 0.0017532765035086332, 0.0016651604167325067, 0.001566466683721613, 0.001445399191422178, 0.0013618662812717802, 0.0013120861757374425, 0.0012148056589460622, 0.0010944411218446924, 0.0010812253384323656, 0.0009905816277513842, 0.0009536867142477653, 0.0009035008129834753, 0.0008292278781371899, 0.0009209605400507797, 0.0008474662666190841, 0.0008021791478551593, 0.0007226326967429296, 0.0006970124922505077, 0.0007186289011858372, 0.0006808765704462564, 0.0006656148718301428, 0.0005990666415065515, 0.0006370051033542689, 0.0005858517973050614, 0.0005788395369844782, 0.0005217800323764636, 0.0004744452065597007, 0.0005215603476423317, 0.0004847983692669105, 0.00044868821360321014, 0.00041886053616329807, 0.00042274994149586135, 0.00044260279281772694, 0.000414359678089964, 0.00042757304345448274, 0.0003876749289797836, 0.00039681906313898435, 0.00035898417926307847, 0.0003256696291989794, 0.0003315179771348626, 0.00030767568924266634, 0.00031890048622080857, 0.0002870199000720765, 0.0002702129790105746, 0.00024546796682451164, 0.00022235501186239912, 0.0002215179178628033, 0.00020110470343457355, 0.00021959036426257117, 0.00021630005615588235, 0.00020839803687359347, 0.00020003512086554218, 0.00019120936734535253, 0.00020292833771241273, 0.000185365102688099, 0.00017572929990022706, 0.0006943406380855264, 0.0010515999764540138, 0.001282160112345041, 0.0014419385937409004, 0.0015303738501041668, 0.001565959891123098, 0.0015737020845067997, 0.0015401662446348997, 0.0014973401499225013, 0.0014370018116222428, 0.0013587977168412482, 0.00127973616841675, 0.0011981692065541445, 0.001117692718395349, 0.00103948473983815, 0.0009642130013481573, 0.0008876793739757422, 0.0008191039111008268, 0.0007501501900512502, 0.0006883988737689763, 0.0006291331441513973, 0.0005750727186717134, 0.0005248501497877519, 0.00047682344013599403, 0.000434475970575426, 0.000396437812501496, 0.00035992173731547443, 0.00032690793751311985, 0.0002961125742965827, 0.0002680366156000921, 0.00024349316513176558, 0.00022057849139171822, 0.0001996374953298682, 0.00018027384521297733, 0.00016317851587230265, 0.00014914451057973586, 0.0001367904306943028, 0.0001247986013607859, 0.00011368538435079713, 0.00010296498811287349, 9.366820857853714e-05, 8.488777000086216e-05, 7.677296604873309e-05, 7.003046954677365e-05, 6.326653291129212e-05, 5.726153760207849e-05, 5.160851844161607e-05, 4.669518113843145e-05, 4.2091799054944506e-05, 3.805482900177023e-05, 3.439958080850357e-05, 3.121377504467231e-05, 2.8092478825088166e-05, 2.538035270306134e-05, 2.2843223981999815e-05, 2.0561232014161012e-05, 1.8538391442263346e-05, 1.6753729333866457e-05, 1.5081985638913043e-05, 1.3577542027657035e-05, 1.2248042435381998e-05, 1.1023360758242904e-05, 1.0015693624697733e-05, 9.111598711962031e-06, 8.23624432822147e-06, 7.427234112716306e-06, 6.6899138675492955e-06, 6.1234974390629104e-06, 5.511182422474629e-06, 4.975765194954111e-06, 4.4813965887643955e-06, 4.0413933074650985e-06, 3.6749336135661763e-06, 3.327873773574891e-06, 2.9976878269777003e-06, 2.7607242575041886e-06, 2.5266930367512158e-06, 2.3543161114551406e-06, 2.202120341382145e-06, 1.9842018451045686e-06, 1.819190388990817e-06, 1.637356144257075e-06, 1.4766721945295677e-06, 1.3322285472301209e-06, 1.201283336623294e-06, 1.0835376634082e-06, 9.852644267270794e-07, 8.915245740491334e-07, 8.023737111670101e-07, 7.705187412752298e-07, 6.936752244630774e-07, 6.247097026020198e-07, 6.025507674712752e-07, 5.433496942868006e-07, 5.067394033891752e-07, 4.7410114485111995e-07, 4.306175716280768e-07, 3.893432658008331e-07, 3.63794849231258e-07, 3.6441113396649784e-07, 3.282873749136403e-07], "duration": 128513.453558, "accuracy_train": [0.29101176470588236, 0.34647058823529414, 0.3796, 0.40150588235294116, 0.4176235294117647, 0.43223529411764705, 0.4435294117647059, 0.4540470588235294, 0.4647529411764706, 0.4731764705882353, 0.4844470588235294, 0.49228235294117645, 0.5001411764705882, 0.5089882352941176, 0.5152705882352941, 0.5234823529411765, 0.5304235294117647, 0.5366823529411765, 0.5442588235294118, 0.5457411764705883, 0.546164705882353, 0.5564941176470588, 0.5555764705882353, 0.5528470588235294, 0.5661411764705883, 0.5642117647058823, 0.5782823529411765, 0.5826823529411764, 0.5867764705882353, 0.5851764705882353, 0.5855058823529412, 0.5841411764705883, 0.5882823529411765, 0.5627764705882353, 0.6131058823529412, 0.5820941176470589, 0.605835294117647, 0.6085647058823529, 0.6231529411764706, 0.6022588235294117, 0.6133647058823529, 0.6095764705882353, 0.6198588235294118, 0.602964705882353, 0.6233411764705883, 0.6354588235294117, 0.6456235294117647, 0.6353647058823529, 0.6364, 0.6341882352941176, 0.6449882352941176, 0.6520941176470588, 0.6102352941176471, 0.6436705882352941, 0.6339058823529412, 0.6686352941176471, 0.6549411764705882, 0.6550117647058824, 0.6687764705882353, 0.6657647058823529, 0.6652, 0.6603764705882353, 0.6685176470588235, 0.6760705882352941, 0.6676, 0.6536470588235294, 0.6831764705882353, 0.6398117647058823, 0.6786352941176471, 0.6773882352941176, 0.6705882352941176, 0.7026117647058824, 0.6773411764705882, 0.6853411764705882, 0.6637647058823529, 0.6889882352941177, 0.7003529411764706, 0.6911529411764706, 0.6978588235294118, 0.6756705882352941, 0.7089882352941177, 0.6675058823529412, 0.7020705882352941, 0.6835529411764706, 0.6881647058823529, 0.7139764705882353, 0.6978823529411765, 0.6978352941176471, 0.7002117647058823, 0.7111294117647059, 0.7171058823529411, 0.7068, 0.7194352941176471, 0.7028941176470588, 0.7208941176470588, 0.7046588235294118, 0.6952235294117647, 0.7207058823529412, 0.7122823529411765, 0.7247294117647058, 0.7049647058823529, 0.7167529411764706, 0.711435294117647, 0.7029176470588235, 0.7219294117647059, 0.7124470588235294, 0.7292, 0.724964705882353, 0.7243529411764705, 0.7250117647058824, 0.7032705882352941, 0.7318117647058824, 0.7206588235294118, 0.7256470588235294, 0.7938823529411765, 0.7932705882352942, 0.7923764705882353, 0.7939764705882353, 0.7939058823529411, 0.7939294117647059, 0.7954588235294118, 0.7940941176470588, 0.7958588235294117, 0.7957411764705883, 0.7943529411764706, 0.7952, 0.7952941176470588, 0.7957647058823529, 0.7962588235294118, 0.7967294117647059, 0.7955294117647059, 0.7971294117647059, 0.7956470588235294, 0.7969882352941177, 0.7963764705882352, 0.7970117647058823, 0.7970823529411765, 0.7960235294117647, 0.7973882352941176, 0.7982117647058824, 0.7971294117647059, 0.7975764705882353, 0.7969882352941177, 0.7969882352941177, 0.7982823529411764, 0.7977647058823529, 0.7976941176470588, 0.7971058823529412, 0.798, 0.8001411764705882, 0.8009411764705883, 0.8004705882352942, 0.8004705882352942, 0.7996470588235294, 0.800564705882353, 0.8001176470588235, 0.7998588235294117, 0.8012470588235294, 0.7999764705882353, 0.8004, 0.7996, 0.8004470588235294, 0.7998117647058823, 0.8004235294117648, 0.8004705882352942, 0.8009882352941177, 0.7995058823529412, 0.8005176470588236, 0.7994823529411764, 0.7994117647058824, 0.8001647058823529, 0.8004941176470588, 0.7999058823529411, 0.7999294117647059, 0.8003058823529412, 0.7997647058823529, 0.8008235294117647, 0.8009411764705883, 0.8006352941176471, 0.8004705882352942, 0.8003529411764706, 0.8012, 0.8002588235294118, 0.8006588235294118, 0.8000941176470588, 0.800564705882353, 0.7996470588235294, 0.8007058823529412, 0.8004470588235294, 0.8011294117647059, 0.7996941176470588, 0.799364705882353, 0.8011764705882353, 0.8004705882352942, 0.7997176470588235, 0.800235294117647, 0.8004470588235294, 0.8004705882352942, 0.8001411764705882, 0.8004470588235294, 0.8006352941176471, 0.800564705882353, 0.8003529411764706, 0.7996235294117647, 0.800235294117647, 0.8002117647058824, 0.8009411764705883, 0.8004470588235294, 0.7999058823529411, 0.8007529411764706, 0.8001411764705882, 0.8001882352941176, 0.7999294117647059, 0.8009176470588235, 0.8004], "end": "2016-02-06 21:34:17.841000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0], "moving_var_accuracy_valid": [0.007430439999999998, 0.015288103599999997, 0.022637832315999994, 0.028338433527959995, 0.0327226320512476, 0.03610617986271056, 0.03839761770235556, 0.03982024916334401, 0.04047966488173193, 0.04053221897961016, 0.040238131032166974, 0.039576067782961244, 0.0386327497988483, 0.03747475262500783, 0.036149005457231015, 0.0347028652446473, 0.03313990579469134, 0.031418376937914966, 0.02972016643160747, 0.027912022916735973, 0.026005527728390522, 0.02431276918059363, 0.022588874657023746, 0.020887749653925418, 0.01938729405735956, 0.017932114465530856, 0.016684162389524297, 0.015491671377602979, 0.014353544972297547, 0.013212886941168742, 0.01213527200155197, 0.011136339399776225, 0.010214919918865016, 0.00921172688923782, 0.008610604717762323, 0.007816472355663783, 0.0072309053251617865, 0.006659660715204261, 0.006220206775202843, 0.005665185037039947, 0.005194839059034826, 0.0047483906923185435, 0.004372981935551456, 0.003955524774986757, 0.003660150270620183, 0.0034500855182011026, 0.003306694380711144, 0.003058095573524934, 0.00282751311723495, 0.0026202087529802087, 0.0024577367517934563, 0.0023255917773073423, 0.0020980784239607217, 0.0019421217843197049, 0.0017600513746181521, 0.0017293946674444643, 0.001629907784938666, 0.0015114513204413183, 0.0014421374465726808, 0.0013764491188557307, 0.0012885816222009232, 0.0011918698654868529, 0.001133879110389277, 0.00107585256428047, 0.0009950631457506722, 0.0008999618877879086, 0.0008709452492675685, 0.0007974812459834047, 0.0007791554792967639, 0.0007476639528488312, 0.0006880465121796044, 0.0007312406751571079, 0.000676474870095629, 0.0006421917409282294, 0.0005790571433189196, 0.000549696011009114, 0.0005496114181080079, 0.0005146097038665136, 0.0004938496166161046, 0.0004452868577498885, 0.000456949366195128, 0.00042610411740599927, 0.0004078165902541694, 0.000367499180918049, 0.0003322542450328785, 0.0003699942720111543, 0.00034553840933643383, 0.0003194382441603177, 0.0002902393015948517, 0.00029783108155253364, 0.00030959866355630605, 0.00029020821190698667, 0.0002941492941725118, 0.00026510296094247525, 0.0002599963260687454, 0.00023412902076216946, 0.00021452879912350122, 0.00022140654606447635, 0.00020179522231475005, 0.00019952000863161622, 0.00018039936242294024, 0.00016660052214124293, 0.00015081180428169375, 0.0001418804900285101, 0.00013626619227947886, 0.0001240682844917185, 0.00013702031932072927, 0.00013312885532210187, 0.00012646702692632064, 0.00011782459704660175, 0.00011300666351881814, 0.00011664317874085736, 0.00010543905827273086, 9.831965318375294e-05, 0.00042211568841634425, 0.0006594270052648564, 0.0008022013891770805, 0.0009191685552884104, 0.0009721676899271393, 0.0009871900112840147, 0.0009786234840858594, 0.0009497404575949974, 0.0009245697830759121, 0.0008874568383422978, 0.0008409016531587808, 0.0007851764773565323, 0.0007402210537309633, 0.0006897598971233246, 0.0006388342200818999, 0.0005908207383320811, 0.000546067451477456, 0.0005020024463164649, 0.0004594315313547814, 0.00041947086231512905, 0.0003825472938443949, 0.00035013536463462524, 0.0003205762465964835, 0.00029169387035043646, 0.0002649697360979327, 0.00024045341724199677, 0.00021892544371087392, 0.0001981734367606958, 0.000179358421477111, 0.00016159986004659095, 0.00014561538681891068, 0.00013185854362020565, 0.00011920171765795814, 0.0001078211963434254, 9.764926912865927e-05, 8.869981140673023e-05, 8.020526831274407e-05, 7.351059469381044e-05, 6.661693219338226e-05, 6.032573051889586e-05, 5.497843042215345e-05, 4.9922853524054345e-05, 4.498746370269344e-05, 4.077459474912187e-05, 3.701208918995901e-05, 3.331389573090802e-05, 3.028564242033421e-05, 2.726123580937179e-05, 2.4748526915055212e-05, 2.2560725266998772e-05, 2.1013943983165992e-05, 1.922388554273507e-05, 1.7334685588024178e-05, 1.560826625144441e-05, 1.4054569118138773e-05, 1.2656169435059713e-05, 1.1471432107629542e-05, 1.0713722212126682e-05, 9.642352684883433e-06, 8.77957419150909e-06, 7.90912855163871e-06, 7.119659960150944e-06, 6.541501319843378e-06, 5.970997770790433e-06, 5.3838389868331515e-06, 4.8742647447679346e-06, 4.394448971240233e-06, 3.969049973748231e-06, 3.572855937721475e-06, 3.2494254138782355e-06, 3.023331662792987e-06, 2.727881197786221e-06, 2.4929878682295334e-06, 2.244304158199571e-06, 2.029414994356794e-06, 2.0131740539007033e-06, 1.9495868953290955e-06, 1.7849070710579787e-06, 1.6656563168266291e-06, 1.8365897173499413e-06, 1.6680233600318391e-06, 1.50620069755604e-06, 1.5639636367991995e-06, 1.4158193405021725e-06, 1.288218860459908e-06, 1.162267910972336e-06, 1.153771463616277e-06, 1.1256558956850195e-06, 1.0476344826581584e-06, 9.555780561321111e-07, 8.703129381281147e-07, 9.52455582284774e-07, 1.0779438296848905e-06, 9.905529545135661e-07, 1.044725466847131e-06, 9.683765746459137e-07, 9.152487731252922e-07, 8.68599183315047e-07, 7.841742835990493e-07, 7.114705042353157e-07, 6.622362798492511e-07], "accuracy_test": 0.7277, "start": "2016-02-05 09:52:24.388000", "learning_rate_per_epoch": [0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 0.00037495780270546675, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.74957817257382e-05, 3.7495781270990847e-06, 3.749578070255666e-07, 3.749578070255666e-08, 3.749577981437824e-09, 3.7495778704155214e-10, 3.749577731637643e-11, 3.749577905109991e-12, 3.7495779593200995e-13, 3.749578027082735e-14, 3.74957811178603e-15, 3.7495782176651484e-16, 3.7495782838395974e-17, 3.7495782838395974e-18, 3.749578180442021e-19, 3.74957805119505e-20, 3.7495782127537635e-21, 3.7495783137279594e-22, 3.7495783137279594e-23, 3.7495781559557784e-24, 3.7495781559557784e-25, 3.7495782175855366e-26, 3.749578371659932e-27, 3.7495783235116835e-28, 3.749578263326373e-29, 3.749578338558011e-30, 3.749578244518463e-31, 3.749578362067898e-32, 3.749578288599501e-33, 3.7495783345172494e-34, 3.7495784493116196e-35, 3.749578377565138e-36, 3.7495782878820365e-37, 3.7495781757781594e-38, 3.7495776152587736e-39, 3.749580417855702e-40, 3.7495944308403455e-41, 3.7498746905332105e-42, 3.75547988439051e-43, 3.783505853677006e-44, 4.203895392974451e-45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_train_first": 0.29101176470588236, "accuracy_train_last": 0.8004, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.7126666666666667, 0.6621333333333334, 0.6262666666666667, 0.6114666666666666, 0.596, 0.5789333333333333, 0.5676, 0.5562666666666667, 0.5468, 0.5377333333333334, 0.5254666666666667, 0.5161333333333333, 0.5070666666666667, 0.49839999999999995, 0.49039999999999995, 0.4828, 0.4769333333333333, 0.4749333333333333, 0.46799999999999997, 0.4682666666666667, 0.4714666666666667, 0.4602666666666667, 0.46199999999999997, 0.4630666666666666, 0.4530666666666666, 0.45253333333333334, 0.44066666666666665, 0.43799999999999994, 0.4358666666666666, 0.43946666666666667, 0.4389333333333333, 0.4369333333333333, 0.43466666666666665, 0.46199999999999997, 0.4152, 0.4416, 0.41946666666666665, 0.4204, 0.4072, 0.4250666666666667, 0.4169333333333334, 0.4178666666666667, 0.41026666666666667, 0.42533333333333334, 0.4053333333333333, 0.3937333333333334, 0.3838666666666667, 0.39626666666666666, 0.3945333333333333, 0.39159999999999995, 0.38439999999999996, 0.3788, 0.4182666666666667, 0.38706666666666667, 0.39746666666666663, 0.36773333333333336, 0.3753333333333333, 0.3788, 0.3686666666666667, 0.36626666666666663, 0.3693333333333333, 0.37160000000000004, 0.3625333333333334, 0.36119999999999997, 0.36626666666666663, 0.3748, 0.35506666666666664, 0.39080000000000004, 0.3536, 0.35440000000000005, 0.36186666666666667, 0.3382666666666667, 0.35573333333333335, 0.3493333333333334, 0.3701333333333333, 0.34919999999999995, 0.34053333333333335, 0.34786666666666666, 0.3428, 0.35640000000000005, 0.3341333333333333, 0.3694666666666667, 0.3414666666666667, 0.35853333333333337, 0.35240000000000005, 0.32799999999999996, 0.3414666666666667, 0.34240000000000004, 0.3456, 0.3304, 0.3270666666666666, 0.3350666666666666, 0.3261333333333334, 0.3413333333333334, 0.3277333333333333, 0.34040000000000004, 0.348, 0.3244, 0.3350666666666666, 0.3257333333333333, 0.3414666666666667, 0.33186666666666664, 0.3349333333333333, 0.346, 0.3288, 0.3336, 0.3204, 0.3250666666666666, 0.32586666666666664, 0.3269333333333333, 0.34173333333333333, 0.3209333333333333, 0.3302666666666667, 0.3261333333333334, 0.27080000000000004, 0.2698666666666667, 0.2718666666666667, 0.26839999999999997, 0.2704, 0.2712, 0.2713333333333333, 0.27213333333333334, 0.2692, 0.26946666666666663, 0.27013333333333334, 0.2718666666666667, 0.2685333333333333, 0.2697333333333334, 0.27013333333333334, 0.26959999999999995, 0.26893333333333336, 0.26946666666666663, 0.27, 0.27013333333333334, 0.27, 0.2686666666666667, 0.26813333333333333, 0.2692, 0.2693333333333333, 0.2693333333333333, 0.26826666666666665, 0.26946666666666663, 0.2693333333333333, 0.27093333333333336, 0.27080000000000004, 0.2690666666666667, 0.2693333333333333, 0.2690666666666667, 0.2686666666666667, 0.268, 0.2686666666666667, 0.2666666666666667, 0.2678666666666667, 0.2678666666666667, 0.26693333333333336, 0.2672, 0.26839999999999997, 0.2673333333333333, 0.2670666666666667, 0.26893333333333336, 0.26693333333333336, 0.26880000000000004, 0.2670666666666667, 0.2666666666666667, 0.26546666666666663, 0.26613333333333333, 0.2672, 0.26746666666666663, 0.268, 0.26746666666666663, 0.2686666666666667, 0.2657333333333334, 0.26759999999999995, 0.2686666666666667, 0.268, 0.2678666666666667, 0.2665333333333333, 0.2666666666666667, 0.2678666666666667, 0.26813333333333333, 0.2673333333333333, 0.2672, 0.26746666666666663, 0.26693333333333336, 0.2685333333333333, 0.2678666666666667, 0.26826666666666665, 0.26759999999999995, 0.268, 0.26626666666666665, 0.26880000000000004, 0.26826666666666665, 0.26693333333333336, 0.26959999999999995, 0.26826666666666665, 0.26813333333333333, 0.26639999999999997, 0.26746666666666663, 0.26813333333333333, 0.26759999999999995, 0.2666666666666667, 0.2666666666666667, 0.26693333333333336, 0.2678666666666667, 0.2678666666666667, 0.26893333333333336, 0.26613333333333333, 0.2670666666666667, 0.26880000000000004, 0.2670666666666667, 0.26826666666666665, 0.26693333333333336, 0.2677333333333334, 0.2673333333333333, 0.2670666666666667], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.0015437832764612525, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "valid_ratio": 0.15, "learning_rate": 0.00037495780506810147, "optimization": "nesterov_momentum", "nb_data_augmentation": 1, "learning_rate_decay_method": "discrete", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 8.60192343118917e-08, "rotation_range": [0, 0], "momentum": 0.7221934540985835}, "accuracy_valid_max": 0.7345333333333334, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7329333333333333, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.28733333333333333, 0.33786666666666665, 0.3737333333333333, 0.38853333333333334, 0.404, 0.42106666666666664, 0.4324, 0.4437333333333333, 0.4532, 0.46226666666666666, 0.4745333333333333, 0.48386666666666667, 0.49293333333333333, 0.5016, 0.5096, 0.5172, 0.5230666666666667, 0.5250666666666667, 0.532, 0.5317333333333333, 0.5285333333333333, 0.5397333333333333, 0.538, 0.5369333333333334, 0.5469333333333334, 0.5474666666666667, 0.5593333333333333, 0.562, 0.5641333333333334, 0.5605333333333333, 0.5610666666666667, 0.5630666666666667, 0.5653333333333334, 0.538, 0.5848, 0.5584, 0.5805333333333333, 0.5796, 0.5928, 0.5749333333333333, 0.5830666666666666, 0.5821333333333333, 0.5897333333333333, 0.5746666666666667, 0.5946666666666667, 0.6062666666666666, 0.6161333333333333, 0.6037333333333333, 0.6054666666666667, 0.6084, 0.6156, 0.6212, 0.5817333333333333, 0.6129333333333333, 0.6025333333333334, 0.6322666666666666, 0.6246666666666667, 0.6212, 0.6313333333333333, 0.6337333333333334, 0.6306666666666667, 0.6284, 0.6374666666666666, 0.6388, 0.6337333333333334, 0.6252, 0.6449333333333334, 0.6092, 0.6464, 0.6456, 0.6381333333333333, 0.6617333333333333, 0.6442666666666667, 0.6506666666666666, 0.6298666666666667, 0.6508, 0.6594666666666666, 0.6521333333333333, 0.6572, 0.6436, 0.6658666666666667, 0.6305333333333333, 0.6585333333333333, 0.6414666666666666, 0.6476, 0.672, 0.6585333333333333, 0.6576, 0.6544, 0.6696, 0.6729333333333334, 0.6649333333333334, 0.6738666666666666, 0.6586666666666666, 0.6722666666666667, 0.6596, 0.652, 0.6756, 0.6649333333333334, 0.6742666666666667, 0.6585333333333333, 0.6681333333333334, 0.6650666666666667, 0.654, 0.6712, 0.6664, 0.6796, 0.6749333333333334, 0.6741333333333334, 0.6730666666666667, 0.6582666666666667, 0.6790666666666667, 0.6697333333333333, 0.6738666666666666, 0.7292, 0.7301333333333333, 0.7281333333333333, 0.7316, 0.7296, 0.7288, 0.7286666666666667, 0.7278666666666667, 0.7308, 0.7305333333333334, 0.7298666666666667, 0.7281333333333333, 0.7314666666666667, 0.7302666666666666, 0.7298666666666667, 0.7304, 0.7310666666666666, 0.7305333333333334, 0.73, 0.7298666666666667, 0.73, 0.7313333333333333, 0.7318666666666667, 0.7308, 0.7306666666666667, 0.7306666666666667, 0.7317333333333333, 0.7305333333333334, 0.7306666666666667, 0.7290666666666666, 0.7292, 0.7309333333333333, 0.7306666666666667, 0.7309333333333333, 0.7313333333333333, 0.732, 0.7313333333333333, 0.7333333333333333, 0.7321333333333333, 0.7321333333333333, 0.7330666666666666, 0.7328, 0.7316, 0.7326666666666667, 0.7329333333333333, 0.7310666666666666, 0.7330666666666666, 0.7312, 0.7329333333333333, 0.7333333333333333, 0.7345333333333334, 0.7338666666666667, 0.7328, 0.7325333333333334, 0.732, 0.7325333333333334, 0.7313333333333333, 0.7342666666666666, 0.7324, 0.7313333333333333, 0.732, 0.7321333333333333, 0.7334666666666667, 0.7333333333333333, 0.7321333333333333, 0.7318666666666667, 0.7326666666666667, 0.7328, 0.7325333333333334, 0.7330666666666666, 0.7314666666666667, 0.7321333333333333, 0.7317333333333333, 0.7324, 0.732, 0.7337333333333333, 0.7312, 0.7317333333333333, 0.7330666666666666, 0.7304, 0.7317333333333333, 0.7318666666666667, 0.7336, 0.7325333333333334, 0.7318666666666667, 0.7324, 0.7333333333333333, 0.7333333333333333, 0.7330666666666666, 0.7321333333333333, 0.7321333333333333, 0.7310666666666666, 0.7338666666666667, 0.7329333333333333, 0.7312, 0.7329333333333333, 0.7317333333333333, 0.7330666666666666, 0.7322666666666666, 0.7326666666666667, 0.7329333333333333], "seed": 483040454, "model": "residualv3", "loss_std": [0.4515211284160614, 0.08575171232223511, 0.07531911134719849, 0.07420939952135086, 0.07919512689113617, 0.07897278666496277, 0.08125822246074677, 0.08346955478191376, 0.08447232842445374, 0.08633656054735184, 0.08620192855596542, 0.08829104900360107, 0.09071917086839676, 0.09103664010763168, 0.09134618192911148, 0.09191033989191055, 0.09383560717105865, 0.09347815066576004, 0.09451179951429367, 0.09539603441953659, 0.09363635629415512, 0.09608709067106247, 0.09541011601686478, 0.0923641100525856, 0.09519099444150925, 0.09339403361082077, 0.09590883553028107, 0.09361063688993454, 0.09603379666805267, 0.09414880722761154, 0.09522715210914612, 0.0963444709777832, 0.093351349234581, 0.09287810325622559, 0.09520012885332108, 0.09228372573852539, 0.09834490716457367, 0.09714071452617645, 0.0938405692577362, 0.0932346060872078, 0.09559423476457596, 0.09248801320791245, 0.09545818716287613, 0.09463540464639664, 0.09260965883731842, 0.09614820778369904, 0.09497129917144775, 0.09539858996868134, 0.09567900747060776, 0.09190990030765533, 0.09356053918600082, 0.09508983045816422, 0.09433364123106003, 0.09478088468313217, 0.0961841568350792, 0.09474898874759674, 0.09504729509353638, 0.09289692342281342, 0.09080804884433746, 0.09514053165912628, 0.09377221763134003, 0.09197916835546494, 0.09216219931840897, 0.0927962064743042, 0.09432392567396164, 0.09314367175102234, 0.09225000441074371, 0.09241032600402832, 0.09315885603427887, 0.09269195795059204, 0.0909670740365982, 0.09219776839017868, 0.09198477119207382, 0.09373561292886734, 0.09323333203792572, 0.08905110508203506, 0.09328965842723846, 0.09240864962339401, 0.09162884205579758, 0.08866336196660995, 0.09167179465293884, 0.09026453644037247, 0.09016403555870056, 0.09081831574440002, 0.08861894905567169, 0.09165944904088974, 0.08870871365070343, 0.08984855562448502, 0.08642280101776123, 0.09027256071567535, 0.09096449613571167, 0.08922930806875229, 0.09036163985729218, 0.08852776139974594, 0.0893402174115181, 0.08847629278898239, 0.08836785703897476, 0.08876855671405792, 0.09039805084466934, 0.0905717983841896, 0.08856664597988129, 0.08806975185871124, 0.08320087194442749, 0.08761148899793625, 0.0874459445476532, 0.08768140524625778, 0.0889229103922844, 0.08663356304168701, 0.08911307156085968, 0.088529072701931, 0.08548480272293091, 0.08846141397953033, 0.08473669737577438, 0.08869525790214539, 0.08907272666692734, 0.08512136340141296, 0.08636762201786041, 0.08642597496509552, 0.08455202728509903, 0.08331207185983658, 0.08743255585432053, 0.08434930443763733, 0.08585654199123383, 0.08341953158378601, 0.08447674661874771, 0.08609039336442947, 0.08540146797895432, 0.08329956978559494, 0.08653552085161209, 0.08347824960947037, 0.08608511090278625, 0.08415272831916809, 0.08444024622440338, 0.08530888706445694, 0.08701398223638535, 0.08582163602113724, 0.08431823551654816, 0.08265794068574905, 0.0841202512383461, 0.08564603328704834, 0.08512410521507263, 0.08428861945867538, 0.08500280231237411, 0.08560474216938019, 0.08622206002473831, 0.083766408264637, 0.08702994138002396, 0.08443108201026917, 0.08646504580974579, 0.08429210633039474, 0.08387468010187149, 0.08384720236063004, 0.0853126123547554, 0.0825643390417099, 0.08538597822189331, 0.08418585360050201, 0.08631356805562973, 0.08439919352531433, 0.08478952199220657, 0.0865820050239563, 0.0849834606051445, 0.08673708140850067, 0.08408108353614807, 0.08447740226984024, 0.08626604080200195, 0.08435119688510895, 0.08344610780477524, 0.08678877353668213, 0.08578826487064362, 0.08689273148775101, 0.08742252737283707, 0.085025355219841, 0.08357546478509903, 0.08515514433383942, 0.08624161779880524, 0.08626783639192581, 0.08557725697755814, 0.08321892470121384, 0.08407827466726303, 0.08551595360040665, 0.08307045698165894, 0.08294051885604858, 0.08564404398202896, 0.08352748304605484, 0.08413023501634598, 0.0856727883219719, 0.08372748643159866, 0.08429752290248871, 0.087435282766819, 0.0850769430398941, 0.08384473621845245, 0.08736135810613632, 0.08340655267238617, 0.08651658892631531, 0.08609920740127563, 0.08642572164535522, 0.08600668609142303, 0.08426530659198761, 0.0842084288597107, 0.08684276044368744, 0.08408268541097641, 0.08243976533412933, 0.08645152300596237, 0.08334919065237045, 0.08527433127164841, 0.08623677492141724, 0.08574185520410538, 0.08477043360471725, 0.0851593017578125, 0.08357039839029312, 0.08585716784000397, 0.08328104764223099, 0.08595864474773407, 0.0862799882888794, 0.08462417125701904]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:43 2016", "state": "available"}], "summary": "c780fef8d51abbd37f384259eccce2b8"}