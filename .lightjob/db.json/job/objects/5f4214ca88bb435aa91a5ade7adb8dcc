{"content": {"hp_model": {"f0": 64, "f1": 16, "f2": 64, "f3": 32, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.017257591505751485, 0.021508127676873868, 0.025033815741448386, 0.013876448712566318, 0.016124502372770196, 0.015808536941921077, 0.01765747631346252, 0.01810957779728168, 0.01439567416006942, 0.013703704115877801, 0.013892964163921282, 0.014583596118606905, 0.015825235332279648, 0.016397134528786675, 0.01644420678346583, 0.017559332611249943, 0.015839268890018705, 0.01309238911952696, 0.015209274092728552, 0.015260205076212612, 0.016094888481660734, 0.015702305426916276, 0.014201582654621932, 0.014492800990970127, 0.016387860420061403, 0.015310368124142028, 0.014598922558475775, 0.015215050400397554, 0.013334129166982102, 0.010055947328231191, 0.01089446963019912, 0.012192634446507374, 0.011649546935265544, 0.013131337799001079, 0.013726848302299779, 0.014246145533495657, 0.012150274556399943, 0.011583836685398557, 0.010820429374512589, 0.011939413620700506, 0.013165854341569277, 0.013468354796175487, 0.013030432340751684, 0.012904861695181787, 0.014011212635857232, 0.014415238250516804, 0.01455526093112309, 0.016261063656149627, 0.01688119789058356, 0.016732122484086433, 0.01669477871645433, 0.01694976625212258, 0.015154045459535097, 0.012711037764083577, 0.012848289284675341, 0.011433968856173427, 0.011570916056841749, 0.010047343939457597, 0.010704192310714022, 0.010090218607991322, 0.011225681512089627, 0.012365817602670722, 0.01116178363597241, 0.010665800163566889, 0.010587276906391609, 0.010876097410437087, 0.012301858283064352, 0.01243144815095075, 0.013600098700988012, 0.013597478091461408, 0.014558895369330629, 0.014333958759179139, 0.013853568039392599, 0.013810053763201097, 0.01423085205542104, 0.012963367445152169, 0.01292449272963864, 0.013417866409773292, 0.01332872661582894, 0.013595343039967022, 0.01357741808624194, 0.012464757393069322, 0.012952408692451522, 0.013796662494244988, 0.014129110475413443, 0.015501724010312174, 0.016014516665605633, 0.016062946024015486, 0.016784513050419995, 0.016733456866984783, 0.01632656668949636, 0.017058666282381854, 0.01715339640209198, 0.017624965384479437, 0.018396219109474803, 0.018066587994695148, 0.018206695433983917, 0.017638038620242553, 0.0175187635403749, 0.016697979409814993, 0.016698550342495767, 0.015556599652518498, 0.014877363088514554, 0.016054912351828186, 0.016008829594266215, 0.01641498828401733, 0.017381796975588903, 0.017198674692818456, 0.017883270709312626, 0.018490773810759233], "moving_avg_accuracy_train": [0.03801086583494831, 0.07761830681582224, 0.11620588435683138, 0.15324060288404967, 0.18854779346081635, 0.22198169954409058, 0.25339497234992514, 0.28279457899897653, 0.31028408566164806, 0.33605006833187123, 0.3601043359945774, 0.38258085776956596, 0.4036839112217991, 0.4236183085478473, 0.4426054389103014, 0.4606540705972059, 0.47792759164748905, 0.49436414839151643, 0.5099011691778262, 0.5246259940628306, 0.538389833148611, 0.5513723822257764, 0.5636587817904357, 0.5753001177010009, 0.5862561564799964, 0.59663499141916, 0.6064386114286837, 0.6158011958146082, 0.6246598552452367, 0.6330603679672985, 0.6411508551992693, 0.6489042268187388, 0.6563702901845302, 0.6634964319624965, 0.6702750079257616, 0.6767523283022053, 0.6829375923112244, 0.6889693236324275, 0.6947953020238451, 0.7003199534844359, 0.7056617663620443, 0.7108459639125784, 0.7158279258973357, 0.7207208818252747, 0.7253964764246779, 0.7299463444879594, 0.7343271469508467, 0.7385976791007695, 0.7428038812499855, 0.7469195261687762, 0.7509002993040212, 0.7547619048364282, 0.7585256682679755, 0.7622524910337398, 0.765899564224109, 0.7695050897311463, 0.7730336226957855, 0.7765440516948946, 0.7799638544607596, 0.7833671617345526, 0.7866973501499677, 0.7899781157809658, 0.7932190512036075, 0.7963776725113567, 0.7994831735038072, 0.8024966162874704, 0.8054575057153863, 0.8083664468255107, 0.8112471635424613, 0.8140908886103266, 0.8168943457475868, 0.8196685732425494, 0.8224165301082631, 0.8251175558707388, 0.8277716572938623, 0.8303602392746551, 0.8329619694192641, 0.8354824909101082, 0.8380159911673347, 0.8405309453797818, 0.8430197994102329, 0.8454829823233532, 0.847881100405848, 0.8502579706681886, 0.8525646006673996, 0.8548916837381181, 0.8571650589112793, 0.8594761635314101, 0.8617212432550041, 0.8638998530276488, 0.8659908101563624, 0.8680238062448236, 0.8700068904482298, 0.871989267831286, 0.8739686478783992, 0.8758663113124585, 0.8777020194899982, 0.8795401327057271, 0.8813501474724836, 0.8830629021685261, 0.8848043081437648, 0.8864900840131276, 0.8881444300264973, 0.8896891450099587, 0.8912095607795885, 0.8926988427103506, 0.8941554899373314, 0.8955966807749474, 0.8970100460180968, 0.8983913927797976], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 792799856, "moving_var_accuracy_train": [0.013003433293701969, 0.025821834393812478, 0.03664066121878176, 0.045320728484416165, 0.05200803499379165, 0.056867666178279284, 0.06006204293581543, 0.06183487048230442, 0.06245244022308755, 0.06218216896743896, 0.061171422205797084, 0.05960102626513118, 0.057648973423688354, 0.055460497852094344, 0.053159048141492346, 0.05077492127926892, 0.04838279991661319, 0.045975963503348566, 0.04355095828724171, 0.04114724666956394, 0.03873751140002086, 0.036380679484887865, 0.03410121206476124, 0.031910777174328636, 0.029800012528437454, 0.02778949320784332, 0.02587554257467918, 0.024076910194663285, 0.02237550179736773, 0.020773069143572655, 0.01928486608207153, 0.01789741241709074, 0.016609350095019765, 0.015405452155274882, 0.014278448768555172, 0.0132282050050315, 0.012249701922279746, 0.011352167774632419, 0.010522429215124566, 0.009744882257461177, 0.009027208715089514, 0.008366370981767249, 0.007753113390548625, 0.0071932712109085434, 0.006670694753539398, 0.006189936972724884, 0.005743666147421954, 0.00533343653627147, 0.004959322111324959, 0.00461583669807057, 0.004296872021052103, 0.004001392794538142, 0.0037287467516022013, 0.0034808749477887517, 0.0032524977387130578, 0.003044246292478817, 0.002851876567173842, 0.002677596916276536, 0.002515092683265638, 0.0023678259185377446, 0.0022308547206234598, 0.0021046400566909567, 0.0019887090127454644, 0.0018796301085628265, 0.0017784643254335443, 0.0016823454295838967, 0.0015930126824646063, 0.0015098688596576885, 0.0014335687329217867, 0.0013629928099840598, 0.0012974278762697428, 0.0012369521323870273, 0.0011812183215707307, 0.0011287563509396717, 0.0010792790051237452, 0.001031657914652938, 0.0009894131208959516, 0.0009476490660786139, 0.000910651771451055, 0.0008765115465222954, 0.0008446099413341013, 0.000814754377772082, 0.0007850376730331738, 0.0007573795159258494, 0.0007295264419126072, 0.0007053116382835685, 0.000681294586556725, 0.0006612359689877632, 0.0006404758187766208, 0.0006191453017721238, 0.0005965796870219719, 0.0005741193761810618, 0.0005521010451831473, 0.0005322593214645118, 0.0005142948976562489, 0.0004952755464713158, 0.0004760764124419586, 0.00045887671294229666, 0.0004424744227509583, 0.0004246287383152038, 0.00040945831741905244, 0.00039408904821268366, 0.0003793118899789876, 0.0003628560004022595, 0.000347375377374885, 0.00033259948566104615, 0.00031843592738977955, 0.000305285613924658, 0.00029273546432707735, 0.00028063498777892217], "duration": 26642.226257, "accuracy_train": [0.3801086583494832, 0.4340852756436877, 0.4634940822259136, 0.48655306962901446, 0.5063125086517165, 0.5228868542935585, 0.5361144276024363, 0.5473910388404393, 0.5576896456256921, 0.5679439123638796, 0.5765927449589332, 0.5848695537444628, 0.5936113922918974, 0.6030278844822813, 0.6134896121723883, 0.6230917557793466, 0.633389281100037, 0.642293159087763, 0.6497343562546143, 0.6571494180278701, 0.662264384920635, 0.6682153239202657, 0.6742363778723699, 0.6800721408960871, 0.684860505490956, 0.6900445058716317, 0.6946711915143965, 0.7000644552879292, 0.7043877901208934, 0.7086649824658545, 0.7139652402870063, 0.7186845713939645, 0.7235648604766519, 0.7276317079641934, 0.7312821915951458, 0.7350482116901993, 0.7386049683923958, 0.7432549055232558, 0.7472291075466039, 0.7500418166297527, 0.7537380822605205, 0.7575037418673864, 0.7606655837601514, 0.7647574851767257, 0.7674768278193059, 0.7708951570574935, 0.7737543691168327, 0.7770324684500739, 0.780659700592931, 0.7839603304378923, 0.7867272575212256, 0.7895163546280916, 0.7923995391519011, 0.7957938959256183, 0.7987232229374308, 0.8019548192944813, 0.8047904193775378, 0.808137912686877, 0.8107420793535437, 0.8139969271986894, 0.8166690458887044, 0.8195050064599483, 0.8223874700073828, 0.8248052642811, 0.8274326824358619, 0.8296176013404393, 0.8321055105666297, 0.8345469168166297, 0.8371736139950166, 0.8396844142211147, 0.8421254599829272, 0.8446366206972129, 0.8471481418996861, 0.8494267877330195, 0.8516585701019748, 0.8536574771017904, 0.8563775407207457, 0.858167184327704, 0.8608174934823736, 0.8631655332918051, 0.865419485684293, 0.867651628541436, 0.8694641631483019, 0.8716498030292543, 0.8733242706602989, 0.8758354313745846, 0.8776254354697305, 0.8802761051125876, 0.8819269607673496, 0.8835073409814507, 0.8848094243147839, 0.8863207710409744, 0.8878546482788853, 0.889830664278793, 0.8917830683024179, 0.8929452822189923, 0.8942233930878553, 0.8960831516472868, 0.8976402803732927, 0.8984776944329088, 0.9004769619209118, 0.9016620668373938, 0.9030335441468254, 0.903591579861111, 0.9048933027062569, 0.9061023800872092, 0.9072653149801587, 0.908567398313492, 0.9097303332064415, 0.9108235136351052], "end": "2016-01-23 18:06:12.923000", "learning_rate_per_epoch": [0.006386691238731146, 0.006361369509249926, 0.006336148362606764, 0.006311027333140373, 0.006286005489528179, 0.006261083297431469, 0.006236259825527668, 0.006211534608155489, 0.006186907645314932, 0.006162378005683422, 0.00613794568926096, 0.006113610230386257, 0.006089371163398027, 0.00606522848829627, 0.006041181273758411, 0.0060172295197844505, 0.0059933727607131, 0.005969610530883074, 0.005945942364633083, 0.005922368261963129, 0.005898887757211924, 0.00587550038471818, 0.00585220567882061, 0.005829003173857927, 0.0058058928698301315, 0.005782873835414648, 0.005759946070611477, 0.005737109575420618, 0.005714363418519497, 0.0056917075999081135, 0.0056691416539251804, 0.0056466651149094105, 0.005624277517199516, 0.005601978860795498, 0.005579768214374781, 0.005557646043598652, 0.005535611417144537, 0.005513664335012436, 0.005491803865879774, 0.005470030475407839, 0.0054483432322740555, 0.005426742136478424, 0.00540522625669837, 0.0053837960585951805, 0.005362450610846281, 0.005341189913451672, 0.005320013500750065, 0.0052989209070801735, 0.0052779121324419975, 0.00525698671117425, 0.0052361441776156425, 0.005215384066104889, 0.005194706376641989, 0.005174110643565655, 0.0051535964012146, 0.005133163649588823, 0.005112811923027039, 0.005092540755867958, 0.005072350148111582, 0.0050522396340966225, 0.005032208748161793, 0.005012257490307093, 0.004992385394871235, 0.004972591996192932, 0.004952876828610897, 0.00493323989212513, 0.004913680721074343, 0.004894199315458536, 0.004874795209616423, 0.004855467937886715, 0.004836217034608126, 0.004817042499780655, 0.004797944333404303, 0.004778921604156494, 0.0047599743120372295, 0.004741102457046509, 0.004722305107861757, 0.004703582264482975, 0.004684933926910162, 0.0046663591638207436, 0.004647858440876007, 0.004629430826753378, 0.004611076321452856, 0.004592794459313154, 0.004574585240334272, 0.004556448198854923, 0.0045383828692138195, 0.004520389251410961, 0.004502466879785061, 0.004484615754336119, 0.004466835409402847, 0.004449125379323959, 0.004431485664099455, 0.004413915798068047, 0.004396415781229734, 0.004378985147923231, 0.004361623432487249, 0.004344330634921789, 0.004327106289565563, 0.0043099503964185715, 0.004292862489819527, 0.004275842569768429, 0.0042588901706039906, 0.004242004826664925, 0.004225186537951231, 0.004208434838801622, 0.0041917492635548115, 0.004175130277872086, 0.00415857695043087, 0.004142089281231165], "accuracy_valid": [0.3700392389871988, 0.4230192253388554, 0.44969232398343373, 0.47526826054216864, 0.49043586455195787, 0.5082081254706325, 0.5213005341679217, 0.5330707596009037, 0.5425422392695783, 0.552746140813253, 0.561291062688253, 0.5687785320971386, 0.5749129329819277, 0.5816679805158133, 0.5878729762801205, 0.5909041439194277, 0.5969061794051205, 0.6069880106362951, 0.6125929499246988, 0.6202024896460843, 0.6246073159826807, 0.6289003670933735, 0.6325933617281627, 0.6353906838290663, 0.6356245293674698, 0.6378320900790663, 0.641026508377259, 0.6434885048004518, 0.6465505576995482, 0.648524272872741, 0.652308452560241, 0.6551263648343373, 0.6557367163968373, 0.657923686935241, 0.659266460372741, 0.659022319747741, 0.6622270331325302, 0.6635698065700302, 0.6649331701807228, 0.6656552969691265, 0.6652684958584337, 0.6661229880459337, 0.6662450583584337, 0.6669774802334337, 0.6681981833584337, 0.6669671851468373, 0.6673333960843373, 0.6664583137236446, 0.6658479621611446, 0.6669465949736446, 0.6678010871611446, 0.6688997199736446, 0.6702630835843373, 0.6713926016566265, 0.6721250235316265, 0.6726235998682228, 0.6724912344691265, 0.6721353186182228, 0.6722573889307228, 0.6728780355798193, 0.6725015295557228, 0.6726133047816265, 0.6725015295557228, 0.6723897543298193, 0.6722779791039157, 0.6716676275414157, 0.6699277579066265, 0.6698056875941265, 0.6696733221950302, 0.6700395331325302, 0.6694291815700302, 0.6691850409450302, 0.6679643378200302, 0.6683305487575302, 0.6680864081325302, 0.6666318594691265, 0.6652787909450302, 0.6640477927334337, 0.6640477927334337, 0.6618402320218373, 0.6607415992093373, 0.6607518942959337, 0.6601415427334337, 0.658411968185241, 0.6568147590361446, 0.6564279579254518, 0.6564382530120482, 0.6560720420745482, 0.6555734657379518, 0.6543527626129518, 0.6546071983245482, 0.6536203407379518, 0.6528879188629518, 0.651402484939759, 0.6504156273531627, 0.650181781814759, 0.6496832054781627, 0.6484625023531627, 0.6485845726656627, 0.6476080101656627, 0.647374164627259, 0.6461637565888554, 0.6455534050263554, 0.645421039627259, 0.6454107445406627, 0.6457769554781627, 0.6456445900790663, 0.6461328713290663, 0.6452680840549698, 0.6453901543674698], "accuracy_test": 0.46825238853503187, "start": "2016-01-23 10:42:10.696000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0], "accuracy_train_last": 0.9108235136351052, "batch_size_eval": 1024, "accuracy_train_std": [0.017111738836334066, 0.017362588242372665, 0.01700417745396995, 0.01886621965572756, 0.01789549981054291, 0.017263213719385974, 0.017976519636874348, 0.016262755684571105, 0.016678892221217802, 0.016283402696886697, 0.016871322024965562, 0.016201537675038465, 0.015617185852055047, 0.015896862594064226, 0.016145147735258002, 0.016005740970937786, 0.01560594925132026, 0.015510367254172064, 0.015935614472786425, 0.015024737629649424, 0.014667583885390774, 0.013626079090496752, 0.013753566690049712, 0.014137246475132141, 0.01462930335602123, 0.013796693461250915, 0.013229360174262782, 0.013533003457612524, 0.014181250632458144, 0.014274583451373203, 0.014172202349613345, 0.014402876356354292, 0.01481447191131247, 0.015201345214248981, 0.015323585254788337, 0.014285079867842948, 0.014111549395676324, 0.014548979015347328, 0.014808303800760779, 0.01430452798988609, 0.014159527312374885, 0.014064220788757699, 0.01411391561200814, 0.013692676376383876, 0.013903838969206987, 0.012935235416960797, 0.012650389920441946, 0.012493230385673315, 0.012487796811073643, 0.01242854885859367, 0.012643454198430331, 0.012446052881121036, 0.012196014005559851, 0.01213651190330405, 0.012583395405608013, 0.012287915289940993, 0.012002292918003102, 0.011884644641084682, 0.012409810014053913, 0.012298166833237287, 0.012857702876182943, 0.01279841016195987, 0.012762615447635546, 0.012380411056814148, 0.012239525715107492, 0.012373618660215031, 0.012677556544719581, 0.012808108793448151, 0.012643265664317747, 0.012873731374981323, 0.012556604606156449, 0.012476427490006204, 0.012340971677751762, 0.011981847388534623, 0.011461572092528039, 0.011596955453289808, 0.011134698296078735, 0.011618272975927928, 0.01236662410569303, 0.012838334705186477, 0.012657095378577364, 0.012462001282217054, 0.012382479909535825, 0.012652163219247756, 0.012483459758818635, 0.012265958398965262, 0.01231358458441114, 0.012175994695448073, 0.012331453161615807, 0.012476219839273057, 0.012495899658078537, 0.012456382256120493, 0.012416941637563178, 0.012027238626466293, 0.012650057692899707, 0.01316277114501208, 0.013239534386334888, 0.013603901310327383, 0.013200921734311298, 0.013114115615707815, 0.012666164518592276, 0.012692067901535996, 0.012401406409247091, 0.01266086880899541, 0.013011520975947082, 0.013145295635134679, 0.012958525738621603, 0.012620209107970686, 0.012248287430522435, 0.012418343049037767], "accuracy_test_std": 0.06449397819020071, "error_valid": [0.6299607610128012, 0.5769807746611446, 0.5503076760165663, 0.5247317394578314, 0.5095641354480421, 0.49179187452936746, 0.47869946583207834, 0.46692924039909633, 0.45745776073042166, 0.447253859186747, 0.438708937311747, 0.4312214679028614, 0.4250870670180723, 0.41833201948418675, 0.4121270237198795, 0.4090958560805723, 0.4030938205948795, 0.39301198936370485, 0.3874070500753012, 0.37979751035391573, 0.3753926840173193, 0.3710996329066265, 0.3674066382718373, 0.36460931617093373, 0.3643754706325302, 0.36216790992093373, 0.35897349162274095, 0.35651149519954817, 0.35344944230045183, 0.35147572712725905, 0.34769154743975905, 0.3448736351656627, 0.3442632836031627, 0.34207631306475905, 0.34073353962725905, 0.34097768025225905, 0.3377729668674698, 0.3364301934299698, 0.33506682981927716, 0.3343447030308735, 0.33473150414156627, 0.33387701195406627, 0.33375494164156627, 0.33302251976656627, 0.33180181664156627, 0.3330328148531627, 0.3326666039156627, 0.3335416862763554, 0.3341520378388554, 0.3330534050263554, 0.3321989128388554, 0.3311002800263554, 0.3297369164156627, 0.3286073983433735, 0.3278749764683735, 0.32737640013177716, 0.3275087655308735, 0.32786468138177716, 0.32774261106927716, 0.3271219644201807, 0.32749847044427716, 0.3273866952183735, 0.32749847044427716, 0.3276102456701807, 0.32772202089608427, 0.32833237245858427, 0.3300722420933735, 0.3301943124058735, 0.3303266778049698, 0.3299604668674698, 0.3305708184299698, 0.3308149590549698, 0.3320356621799698, 0.3316694512424698, 0.3319135918674698, 0.3333681405308735, 0.3347212090549698, 0.33595220726656627, 0.33595220726656627, 0.3381597679781627, 0.3392584007906627, 0.33924810570406627, 0.33985845726656627, 0.34158803181475905, 0.3431852409638554, 0.34357204207454817, 0.34356174698795183, 0.34392795792545183, 0.34442653426204817, 0.34564723738704817, 0.34539280167545183, 0.34637965926204817, 0.34711208113704817, 0.34859751506024095, 0.3495843726468373, 0.34981821818524095, 0.3503167945218373, 0.3515374976468373, 0.3514154273343373, 0.3523919898343373, 0.35262583537274095, 0.3538362434111446, 0.3544465949736446, 0.35457896037274095, 0.3545892554593373, 0.3542230445218373, 0.35435540992093373, 0.35386712867093373, 0.3547319159450302, 0.3546098456325302], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.720342883982616, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.006412113690257554, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "optimization": "adadelta", "nb_data_augmentation": 0, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 4.757235899354922e-06, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.00396474511593522}, "accuracy_valid_max": 0.6728780355798193, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import os\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.6453901543674698, "loss_train": [2.3521828651428223, 1.7965655326843262, 1.6838905811309814, 1.6081198453903198, 1.5465911626815796, 1.495601773262024, 1.4522299766540527, 1.4143433570861816, 1.3803095817565918, 1.3489266633987427, 1.3198274374008179, 1.2924795150756836, 1.2666484117507935, 1.2421116828918457, 1.2186412811279297, 1.1961750984191895, 1.174756646156311, 1.1541435718536377, 1.1343868970870972, 1.1154605150222778, 1.097311019897461, 1.0798978805541992, 1.063118577003479, 1.0468907356262207, 1.0311380624771118, 1.015872597694397, 1.000991940498352, 0.9865768551826477, 0.9724940061569214, 0.9587119817733765, 0.9452199935913086, 0.931972861289978, 0.9189842939376831, 0.9062433242797852, 0.8938022255897522, 0.8814961314201355, 0.8693832159042358, 0.8574111461639404, 0.8456382155418396, 0.8340040445327759, 0.8225066661834717, 0.8110960125923157, 0.799843430519104, 0.7887093424797058, 0.7776509523391724, 0.7667215466499329, 0.755850076675415, 0.7450734972953796, 0.7343849539756775, 0.7237482070922852, 0.7132185697555542, 0.7027440667152405, 0.6923174858093262, 0.6819866895675659, 0.6716960072517395, 0.661506175994873, 0.6513416767120361, 0.6413198113441467, 0.6313281059265137, 0.6214399337768555, 0.6115638017654419, 0.601752758026123, 0.592063844203949, 0.5823769569396973, 0.572816789150238, 0.5633196234703064, 0.5538719892501831, 0.5444852113723755, 0.5351547002792358, 0.5258671045303345, 0.5167036056518555, 0.5075816512107849, 0.4985520541667938, 0.4895668029785156, 0.4806460738182068, 0.4718472957611084, 0.46311622858047485, 0.4544376730918884, 0.44588375091552734, 0.4374178946018219, 0.42907485365867615, 0.4208201467990875, 0.4126693308353424, 0.40462562441825867, 0.39667609333992004, 0.3888399302959442, 0.381112664937973, 0.3734889328479767, 0.36592841148376465, 0.3584819734096527, 0.3511331081390381, 0.3438715934753418, 0.336724191904068, 0.3296714723110199, 0.3227117657661438, 0.31585928797721863, 0.30913951992988586, 0.30254673957824707, 0.2960442900657654, 0.2896610200405121, 0.2833860516548157, 0.27723172307014465, 0.2711786925792694, 0.2652497887611389, 0.25943517684936523, 0.2537836730480194, 0.24820272624492645, 0.2428503930568695, 0.23757284879684448, 0.23246683180332184], "accuracy_train_first": 0.3801086583494832, "model": "residualv3", "loss_std": [0.4917789101600647, 0.14827044308185577, 0.13615073263645172, 0.13201892375946045, 0.13065320253372192, 0.13034459948539734, 0.13002069294452667, 0.12947224080562592, 0.12873750925064087, 0.1281338781118393, 0.12783296406269073, 0.12757651507854462, 0.1275813728570938, 0.1277516633272171, 0.12792307138442993, 0.1281905174255371, 0.12837252020835876, 0.1284828633069992, 0.12855683267116547, 0.12857022881507874, 0.128632053732872, 0.12858597934246063, 0.12849915027618408, 0.12834042310714722, 0.12819646298885345, 0.1279856264591217, 0.12773753702640533, 0.12742772698402405, 0.127129465341568, 0.12678048014640808, 0.12632940709590912, 0.12587717175483704, 0.12536761164665222, 0.1248650848865509, 0.12429916858673096, 0.12371963262557983, 0.12313742190599442, 0.12246669828891754, 0.12183601409196854, 0.12117945402860641, 0.12049757689237595, 0.11978105455636978, 0.11904729902744293, 0.11828988790512085, 0.11747242510318756, 0.11667955666780472, 0.1158750057220459, 0.11504244059324265, 0.11416084319353104, 0.11332708597183228, 0.11242610961198807, 0.11156035214662552, 0.11071192473173141, 0.10981647670269012, 0.10892312228679657, 0.10798761248588562, 0.10701118409633636, 0.10607704520225525, 0.10512591153383255, 0.10422433912754059, 0.10329055786132812, 0.10235632956027985, 0.1013806089758873, 0.10038784146308899, 0.09944156557321548, 0.09839838743209839, 0.09730585664510727, 0.09615366160869598, 0.09509540349245071, 0.09397280961275101, 0.09288449585437775, 0.09172701835632324, 0.0905778631567955, 0.08940759301185608, 0.08820055425167084, 0.08701028674840927, 0.08575385063886642, 0.08447326719760895, 0.08314809203147888, 0.08184231072664261, 0.08047299087047577, 0.07914989441633224, 0.07781843096017838, 0.07641229778528214, 0.07507134228944778, 0.07364743202924728, 0.07222060859203339, 0.07083364576101303, 0.06942977011203766, 0.06800445914268494, 0.06655159592628479, 0.06510347127914429, 0.06366413831710815, 0.062257617712020874, 0.060754407197237015, 0.05926495045423508, 0.057818617671728134, 0.05636591836810112, 0.05487256497144699, 0.05339225009083748, 0.05194099619984627, 0.05047520622611046, 0.0489736944437027, 0.04751085489988327, 0.046041879802942276, 0.04457804560661316, 0.04310042783617973, 0.04167290776968002, 0.04023567959666252, 0.0387587808072567]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:09 2016", "state": "available"}], "summary": "1737ca18e0606d80c8661cbbc583a530"}