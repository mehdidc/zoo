{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 64, "f3": 16, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091, 0.0266634548096091], "moving_avg_accuracy_train": [0.010078595632530118, 0.019149331701807222, 0.02731299416415662, 0.034660290380271075, 0.041272856974774084, 0.047224166909826795, 0.052580345851374236, 0.05740090689876694, 0.06173941184142036, 0.06564406628980844, 0.06915825529335771, 0.07232102539655207, 0.07516751848942699, 0.07772936227301441, 0.0800350216782431, 0.08211011514294891, 0.08397769926118415, 0.08565852496759585, 0.0871712681033664, 0.08853273692555988, 0.08975805886553402, 0.09086084861151074, 0.09185335938288978, 0.09274661907713093, 0.09355055280194796, 0.09427409315428328, 0.09492527947138509, 0.0955113471567767, 0.09603880807362915, 0.09651352289879636, 0.09694076624144685, 0.09732528524983229, 0.09767135235737918, 0.0979828127541714, 0.09826312711128438, 0.09851541003268606, 0.09874246466194758, 0.09894681382828295, 0.09913072807798477, 0.09929625090271642, 0.0994452214449749, 0.09957929493300753, 0.0996999610722369, 0.09980856059754334, 0.09990630017031912, 0.09999426578581734, 0.10007343483976573, 0.10014468698831928, 0.10020881392201748, 0.10026652816234585, 0.1003184709786414, 0.10036521951330737], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234423, "moving_var_accuracy_train": [0.0009142028093164967, 0.0015632868039312095, 0.002006766586730642, 0.0022919347832435462, 0.0024562756376198262, 0.002529410883345358, 0.002534667670695708, 0.0024903411829308953, 0.00241071069087466, 0.0023068565590390454, 0.0021873166223091408, 0.0020586129926091668, 0.0019256743996983114, 0.0017921743518720299, 0.0016608015043211022, 0.0015334754698743747, 0.0014115187568350975, 0.0012957934566495974, 0.0011868096371380255, 0.0010848110496084673, 0.0009898426693568582, 0.000901803709435655, 0.0008204890371738204, 0.0007456213493886404, 0.00067687599935486, 0.0006138999951924917, 0.0005563263882494678, 0.0005037850274112637, 0.0004559104598393987, 0.00041234760134256063, 0.000372755673072857, 0.00033681079957585875, 0.0003042075816046057, 0.00027465989165307474, 0.00024790108773700025, 0.00022368379901517894, 0.0002017794033556828, 0.00018197729025615214, 0.0001640839812917274, 0.00014792216341211894, 0.00013332967707305413, 0.00012015849066748784, 0.00010827368445514775, 9.755246072170401e-05, 8.788319186631114e-05, 7.916451422526983e-05, 7.130447245467058e-05, 6.4219717027265e-05, 5.783475569716829e-05, 5.208125852928159e-05, 4.689741518183584e-05, 4.2227342493093e-05], "duration": 11839.775104, "accuracy_train": [0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012, 0.1007859563253012], "end": "2016-01-20 13:14:11.592000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0], "accuracy_valid": [0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311, 0.09590517241379311], "accuracy_test": 0.0999599358974359, "start": "2016-01-20 09:56:51.817000", "learning_rate_per_epoch": [0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465, 0.00138094334397465], "accuracy_train_last": 0.1007859563253012, "error_valid": [0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069, 0.9040948275862069], "accuracy_train_std": [0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692, 0.026534108036213692], "accuracy_test_std": 0.027332557644093352, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.7948373995665856, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0013809433499803912, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "optimization": "nesterov_momentum", "nb_data_augmentation": 1, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 3.7104784713378176e-07, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.05083850549116915}, "accuracy_valid_max": 0.09590517241379311, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234423\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -4], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.09590517241379311, "loss_train": [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy_train_first": 0.1007859563253012, "model": "residualv2", "loss_std": [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:03 2016", "state": "available"}], "summary": "20a888b53d8c00d279f13ee1e951ade0"}