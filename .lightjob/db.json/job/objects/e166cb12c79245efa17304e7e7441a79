{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 16, "f3": 32, "nonlin": "very_leaky_rectify", "nbg1": 4, "nbg3": 2, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.533670425415039, 1.1570168733596802, 1.0042030811309814, 0.9086798429489136, 0.8401768207550049, 0.7809048891067505, 0.7397433519363403, 0.6988101601600647, 0.6708682179450989, 0.645641565322876, 0.6212316751480103, 0.6007829308509827, 0.5796809792518616, 0.5665052533149719, 0.5508374571800232, 0.5360883474349976, 0.5212481021881104, 0.50926274061203, 0.49760881066322327, 0.48569586873054504, 0.4761907756328583, 0.4667874276638031, 0.4562240242958069, 0.45023849606513977, 0.44132158160209656, 0.43241289258003235, 0.42524534463882446, 0.4179803133010864, 0.4114689528942108, 0.4051373302936554, 0.40002018213272095, 0.3945103585720062, 0.3891720473766327, 0.3831844925880432, 0.37807512283325195, 0.3712005615234375, 0.36772090196609497, 0.3640279769897461, 0.35962629318237305, 0.3559638261795044, 0.3503130376338959, 0.34724703431129456, 0.34246939420700073, 0.3403911888599396, 0.33921393752098083, 0.33359506726264954, 0.32943108677864075, 0.325938880443573, 0.3251820504665375, 0.323670357465744, 0.31984734535217285, 0.31698086857795715, 0.31555041670799255, 0.3143221437931061, 0.3112088441848755, 0.30921468138694763, 0.3064481019973755, 0.3066122233867645, 0.3049072325229645, 0.3016224801540375, 0.3005979061126709, 0.2999672293663025, 0.29671087861061096, 0.296286016702652, 0.2958761751651764, 0.2936982214450836, 0.29225313663482666, 0.29111629724502563, 0.2908167243003845, 0.28805744647979736, 0.2883543372154236, 0.2873062789440155, 0.28652986884117126, 0.28531214594841003, 0.28542283177375793, 0.28227415680885315, 0.28332218527793884, 0.2819981276988983, 0.2824271619319916, 0.280171662569046, 0.27938246726989746, 0.2794215977191925, 0.2804720401763916, 0.2782900929450989, 0.27726852893829346, 0.277629554271698, 0.2763400673866272, 0.2770202159881592, 0.275490403175354, 0.27505257725715637, 0.27343839406967163, 0.2743641138076782, 0.2730450928211212, 0.27316927909851074, 0.27305006980895996, 0.2734231948852539, 0.272023469209671, 0.2724074721336365, 0.2719489634037018, 0.2704402208328247, 0.27088481187820435, 0.27199313044548035, 0.270036518573761, 0.2703879773616791, 0.2697528898715973, 0.2697141766548157, 0.2713684141635895, 0.2688749134540558, 0.26925233006477356, 0.26958316564559937, 0.26860949397087097, 0.26720380783081055, 0.26751232147216797, 0.2683507204055786, 0.2670537829399109, 0.2678768038749695, 0.26724767684936523, 0.26882657408714294], "moving_avg_accuracy_train": [0.05306823529411764, 0.1109425882352941, 0.17017303529411762, 0.22589926117647058, 0.27793286447058824, 0.3265489897882353, 0.371999973162353, 0.4141599758461177, 0.45257221355562355, 0.48901852161182585, 0.5234790223918198, 0.5554511201526378, 0.584546008137374, 0.6117455249706953, 0.6365780312971553, 0.6597343458144986, 0.6806785582918723, 0.7001777612862146, 0.717844691039946, 0.7343449278183043, 0.7496069056247091, 0.7637638621210617, 0.7767380641442496, 0.7889630812592364, 0.8001255966627245, 0.8103600958199815, 0.8201429097673951, 0.8290580305553614, 0.8374581098527665, 0.8450370047498428, 0.8522580101572115, 0.8591357385532551, 0.8654833411685178, 0.871415007051666, 0.8768876239935582, 0.8819235674765553, 0.8867712107288999, 0.8913082073030687, 0.8954362101021736, 0.8993537655625445, 0.9030089772415842, 0.9065104324586023, 0.9096335068598008, 0.9125995679385266, 0.9152737287917327, 0.9178145912066772, 0.9203296026742448, 0.9227742894656439, 0.9251909781661384, 0.9272224685848186, 0.9292461040792779, 0.9311309054360559, 0.9328978148924503, 0.9345680334032052, 0.9360547594746493, 0.9376281070565962, 0.9391688257627012, 0.9404166490687841, 0.9418055723971999, 0.9429944269221857, 0.9442855724652612, 0.9454876034540293, 0.9465835489909793, 0.9475393117389402, 0.9484371452709286, 0.9492922542732475, 0.9501489111988639, 0.9509246083142716, 0.9517356768946091, 0.9523338739110305, 0.9530393100493393, 0.9536859672796995, 0.9542091352576119, 0.9547646923200859, 0.9553141054410185, 0.9558203419557401, 0.9563136018778131, 0.9567763593370906, 0.9572304881092639, 0.9576792040042198, 0.958097165956739, 0.9585133317140063, 0.9588078808955469, 0.9591765045706981, 0.9594941482312754, 0.9598953216434419, 0.9601034365379213, 0.9604319164135409, 0.9608757835957161, 0.9610423228832033, 0.9612792670654713, 0.9614783991824536, 0.9616952651465611, 0.9619327974554345, 0.962214811827538, 0.9624498012330195, 0.9626001152273646, 0.9627683389987457, 0.9629503286282829, 0.9631635310595723, 0.9633154132477327, 0.963506224864136, 0.9636756023777223, 0.9637739244928912, 0.9638788849847786, 0.9640627611921831, 0.9641223674259061, 0.9643171895068449, 0.9644148823208663, 0.9645639823240737, 0.9646252311504898, 0.9647274139177937, 0.9648970254671908, 0.9650873229204717, 0.9651762376872481, 0.9652256727420527, 0.9653431054678474, 0.9654370302151802], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05299999999999999, 0.10948666666666665, 0.16732466666666662, 0.22080553333333328, 0.2707249799999999, 0.31754581533333326, 0.3610312337999999, 0.4014347770866666, 0.4380112993779999, 0.4720901694401999, 0.5045611524961799, 0.5347983705798953, 0.5622518668552391, 0.5877866801697151, 0.6107813454860769, 0.6318898776041358, 0.6508475565103888, 0.6682028008593499, 0.6836625207734149, 0.6983762686960734, 0.7119919751597993, 0.724179444310486, 0.7354014998794374, 0.7460613498914936, 0.7555085482356776, 0.7642776934121098, 0.7718899240708988, 0.7788742649971423, 0.7854935051640947, 0.7912374879810186, 0.7968470725162501, 0.8018156985979584, 0.8064341287381626, 0.8105107158643463, 0.814192977611245, 0.8176270131834539, 0.8210643118651084, 0.8243578806785976, 0.8268954259440712, 0.8294325500163308, 0.8318492950146977, 0.8337976988465613, 0.8357912622952385, 0.8370388027323813, 0.8384949224591431, 0.8398587635465622, 0.8412062205252393, 0.8424055984727153, 0.8433517052921105, 0.8443232014295661, 0.8452242146199429, 0.8459817931579486, 0.8466902805088204, 0.8474879191246051, 0.8482591272121445, 0.84875321449093, 0.8493712263751704, 0.8498741037376533, 0.8504333600305546, 0.8508700240274991, 0.8512363549580825, 0.8515927194622742, 0.8517934475160468, 0.8520274360977754, 0.8523446924879978, 0.8524435565725315, 0.8528125342486117, 0.8532379474904171, 0.8534608194080421, 0.8536480708005713, 0.8538165970538475, 0.8538482706817961, 0.8538501102802831, 0.8539050992522548, 0.853861255993696, 0.8537551303943265, 0.8539262840215606, 0.8540536556194045, 0.8540349567241307, 0.8541514610517176, 0.8543363149465458, 0.854489350118558, 0.8544404151067022, 0.854316373596032, 0.8543647362364288, 0.854448262612786, 0.854470103018174, 0.8544230927163567, 0.8544874501113877, 0.854518705100249, 0.854586834590224, 0.8544748177978683, 0.8545073360180815, 0.85456326908294, 0.8546936088413126, 0.8549042479571813, 0.8549471564947966, 0.8550391075119836, 0.855121863427452, 0.8551163437513735, 0.8552447093762361, 0.8552002384386125, 0.8552668812614179, 0.8552868598019429, 0.8552781738217485, 0.8553103564395736, 0.8553526541289496, 0.8553773887160546, 0.8554796498444491, 0.8553850181933375, 0.8552731830406703, 0.85521253140327, 0.8551179449296097, 0.8551661504366487, 0.8550762020596505, 0.8550219151870188, 0.8550797236683169, 0.8551450846348184], "moving_var_accuracy_train": [0.025346138375086504, 0.05295649109281661, 0.07923505471262782, 0.09926025950118424, 0.11370169639699232, 0.12360327552540355, 0.12983507497993207, 0.1328487599185943, 0.13284338397939913, 0.13151404591980762, 0.1290503763538985, 0.12534527403555437, 0.12042935919359808, 0.11504474671793351, 0.1090901523802232, 0.10300707126043598, 0.09665430446106876, 0.09041084427169295, 0.0841788435068332, 0.0782112794798269, 0.07248650323091296, 0.06704162766297825, 0.061852434159926875, 0.05701225013508967, 0.052432440872778686, 0.04813190154249986, 0.04418004242681727, 0.04047735259211182, 0.03706466932272487, 0.03387515922120075, 0.0309569295709199, 0.028286964944835603, 0.025820896981003656, 0.023555469224247033, 0.021469468127556502, 0.01955076785567632, 0.017807187876026698, 0.01621172812965021, 0.014743918980669948, 0.01340765224966869, 0.012187132176469112, 0.011078760656553248, 0.010058666934336722, 0.009131977905807638, 0.008283140341646258, 0.007512930143786725, 0.00681856467354602, 0.006190496647763787, 0.005624010441463286, 0.005098751977207665, 0.004625732685016819, 0.00419513170190575, 0.003803716252959039, 0.003448451296526152, 0.0031234993565771437, 0.0028334282244419904, 0.002571449729179871, 0.002328318323290715, 0.0021128484630716002, 0.0019142839924986552, 0.0017378591045694243, 0.001577077100594109, 0.0014301792601143443, 0.0012953826759764177, 0.0011730993538392397, 0.0010623703211079375, 0.000962738038791003, 0.0008718795890455696, 0.0007906121203191095, 0.0007147714653212982, 0.0006477730800962556, 0.0005867592622488242, 0.0005305466786219584, 0.0004802698036067464, 0.0004349595162431477, 0.00039377004329837096, 0.00035658278712504546, 0.0003228518086075937, 0.00029242272422227484, 0.0002649925653895226, 0.00024006553859435328, 0.00021761773017261454, 0.00019663679013846896, 0.0001781960618495598, 0.00016128453312054807, 0.00014660454076815768, 0.00013233389297507924, 0.00012007159493575516, 0.00010983759812089007, 9.910345631729179e-05, 8.969839359515802e-05, 8.108543663576682e-05, 7.340017058968495e-05, 6.656794791054457e-05, 6.06269420741471e-05, 5.506122805292933e-05, 4.9758453919700235e-05, 4.5037301663049625e-05, 4.0831653524076424e-05, 3.715758566203802e-05, 3.3649440887557774e-05, 3.06121784553916e-05, 2.7809159288830845e-05, 2.5115248504929426e-05, 2.2702873998151596e-05, 2.0736880735181586e-05, 1.8695168789551048e-05, 1.7167252699587885e-05, 1.5536422402831878e-05, 1.4182857461156963e-05, 1.2798334483677482e-05, 1.1612472896714799e-05, 1.0710138306243275e-05, 9.965042562145777e-06, 9.039690827689246e-06, 8.157716166712129e-06, 7.466058555829145e-06, 6.798849423700193e-06], "duration": 79087.718639, "accuracy_train": [0.5306823529411765, 0.6318117647058824, 0.7032470588235294, 0.7274352941176471, 0.7462352941176471, 0.7640941176470588, 0.7810588235294118, 0.7936, 0.7982823529411764, 0.8170352941176471, 0.8336235294117647, 0.8432, 0.8464, 0.8565411764705883, 0.8600705882352941, 0.8681411764705882, 0.8691764705882353, 0.8756705882352941, 0.8768470588235294, 0.8828470588235294, 0.886964705882353, 0.8911764705882353, 0.8935058823529411, 0.8989882352941176, 0.9005882352941177, 0.9024705882352941, 0.9081882352941176, 0.9092941176470588, 0.9130588235294118, 0.9132470588235294, 0.9172470588235294, 0.9210352941176471, 0.9226117647058824, 0.9248, 0.9261411764705882, 0.9272470588235294, 0.9304, 0.9321411764705883, 0.9325882352941176, 0.9346117647058824, 0.9359058823529411, 0.9380235294117647, 0.9377411764705882, 0.9392941176470588, 0.9393411764705882, 0.9406823529411765, 0.9429647058823529, 0.9447764705882353, 0.9469411764705883, 0.9455058823529412, 0.9474588235294118, 0.9480941176470589, 0.9488, 0.9496, 0.949435294117647, 0.9517882352941176, 0.9530352941176471, 0.9516470588235294, 0.9543058823529412, 0.9536941176470588, 0.9559058823529412, 0.9563058823529412, 0.9564470588235294, 0.9561411764705883, 0.9565176470588236, 0.9569882352941177, 0.9578588235294118, 0.9579058823529412, 0.9590352941176471, 0.9577176470588236, 0.9593882352941177, 0.9595058823529412, 0.9589176470588235, 0.959764705882353, 0.9602588235294117, 0.9603764705882353, 0.9607529411764706, 0.9609411764705882, 0.9613176470588235, 0.9617176470588236, 0.9618588235294118, 0.9622588235294117, 0.9614588235294118, 0.9624941176470588, 0.9623529411764706, 0.9635058823529412, 0.9619764705882353, 0.9633882352941177, 0.9648705882352941, 0.9625411764705882, 0.9634117647058823, 0.9632705882352941, 0.9636470588235294, 0.9640705882352941, 0.9647529411764706, 0.964564705882353, 0.9639529411764706, 0.9642823529411765, 0.9645882352941176, 0.9650823529411765, 0.9646823529411764, 0.9652235294117647, 0.9652, 0.9646588235294118, 0.9648235294117647, 0.9657176470588236, 0.9646588235294118, 0.9660705882352941, 0.9652941176470589, 0.9659058823529412, 0.9651764705882353, 0.9656470588235294, 0.9664235294117647, 0.9668, 0.9659764705882353, 0.9656705882352942, 0.9664, 0.9662823529411765], "end": "2016-02-07 21:24:03.388000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0], "moving_var_accuracy_valid": [0.025280999999999998, 0.05146959159999999, 0.07642974063599998, 0.09452859446715998, 0.10750329541999959, 0.11648268146979966, 0.12185324789580973, 0.12435993989728669, 0.12396452375391367, 0.12202039584096913, 0.11930763892246789, 0.11560547924720055, 0.11082818144214333, 0.10561360351697531, 0.09981103486238123, 0.09384006252975526, 0.08769059858239306, 0.08163237928186307, 0.0756201678120688, 0.07000660043224576, 0.06467442755157833, 0.05954379443511097, 0.054722825772333575, 0.05027323481561605, 0.046049157343043615, 0.04213632277286736, 0.03844420499600409, 0.03503881365996967, 0.03192926135746287, 0.029033275269126635, 0.026413154690135145, 0.02399402442738012, 0.021786591057281625, 0.019757499014929767, 0.01790378057759085, 0.016219535922632526, 0.014703917530411415, 0.01333115413713297, 0.012055990947188618, 0.010908324839492107, 0.00987005826302708, 0.008917218934152558, 0.00806126569775242, 0.007269146342257936, 0.006561314269960128, 0.005921923405569706, 0.005346071827797207, 0.004824411212165513, 0.0043500261539723166, 0.003923517781280906, 0.003538472426075911, 0.0031897905106395416, 0.002875329048512696, 0.0025935221899139435, 0.002339522828151126, 0.0021077676454875328, 0.00190042832914034, 0.0017126614670015864, 0.0015442102287117757, 0.0013915052848566464, 0.001253562541527301, 0.0011293492483132016, 0.0010167769492460234, 0.0009155920102288356, 0.0008249386737601849, 0.0007425327733490624, 0.0006695047967431659, 0.0006041831049055804, 0.0005442118414400148, 0.0004901062250520502, 0.000441351212429235, 0.00039722512015467833, 0.00035750263859631384, 0.000321779588820029, 0.00028961893001991563, 0.00026075840080349807, 0.00023494620280018654, 0.00021159759423560373, 0.0001904409816502035, 0.0001715190428103015, 0.00015467467719116988, 0.00013941798734690782, 0.000125497740330685, 0.00011308644296494066, 0.00010179884917332194, 9.16817541559159e-05, 8.251787177009196e-05, 7.428597430937545e-05, 6.689465374709448e-05, 6.0213980241343466e-05, 5.423435686384753e-05, 4.8923851033389775e-05, 4.404098284186329e-05, 3.966504112737717e-05, 3.585143308815327e-05, 3.266560931354362e-05, 2.9415618665591727e-05, 2.655015170508808e-05, 2.3956773408484238e-05, 2.156137026905192e-05, 1.955353284496416e-05, 1.761597853910585e-05, 1.5894352077678532e-05, 1.4308509148644216e-05, 1.2878337250047214e-05, 1.1599825013053212e-05, 1.0455944362486808e-05, 9.415856124431441e-06, 8.568386557413027e-06, 7.792144246200643e-06, 7.125493733929205e-06, 6.446051950610397e-06, 5.881966164544842e-06, 5.3146834862703735e-06, 4.856031532364843e-06, 4.396951959989545e-06, 3.987333148580555e-06, 3.627048337200772e-06], "accuracy_test": 0.8402, "start": "2016-02-06 23:25:55.669000", "learning_rate_per_epoch": [0.0009146418888121843, 0.0008732399437576532, 0.000833712110761553, 0.0007959735230542719, 0.0007599432137794793, 0.000725543824955821, 0.000692701549269259, 0.0006613458972424269, 0.0006314095808193088, 0.0006028283387422562, 0.0005755408783443272, 0.000549488584510982, 0.0005246155778877437, 0.0005008684820495546, 0.00047819630708545446, 0.0004565503913909197, 0.0004358842852525413, 0.0004161536635365337, 0.0003973161510657519, 0.00037933135172352195, 0.00036216064472682774, 0.00034576718462631106, 0.0003301157848909497, 0.00031517285970039666, 0.00030090633663348854, 0.0002872855984605849, 0.00027428139583207667, 0.00026186584727838635, 0.00025001229369081557, 0.00023869529832154512, 0.00022789057402405888, 0.00021757493959739804, 0.00020772624702658504, 0.0001983233669307083, 0.00018934611580334604, 0.00018077522690873593, 0.0001725923066260293, 0.00016477979079354554, 0.00015732091560494155, 0.00015019967395346612, 0.00014340077177621424, 0.0001369096280541271, 0.00013071231660433114, 0.0001247955224243924, 0.00011914656352018937, 0.0001137533035944216, 0.00010860417387448251, 0.00010368812218075618, 9.899459837470204e-05, 9.451353253098205e-05, 9.023530583363026e-05, 8.615073602413759e-05, 8.225105557357892e-05, 7.852789713069797e-05, 7.497327169403434e-05, 7.157955406000838e-05, 6.833945371909067e-05, 6.524601485580206e-05, 6.229260179679841e-05, 5.947288082097657e-05, 5.678079469362274e-05, 5.421056994237006e-05, 5.175668775336817e-05, 4.941388397128321e-05, 4.717712727142498e-05, 4.5041619159746915e-05, 4.3002775782952085e-05, 4.1056224290514365e-05, 3.9197784644784406e-05, 3.742346598301083e-05, 3.572946661734022e-05, 3.411214493098669e-05, 3.256803393014707e-05, 3.109381577814929e-05, 2.9686330890399404e-05, 2.834255610650871e-05, 2.705960832827259e-05, 2.5834735424723476e-05, 2.4665307137183845e-05, 2.3548813260276802e-05, 2.2482858184957877e-05, 2.1465155441546813e-05, 2.0493518604780547e-05, 1.956586493179202e-05, 1.8680200810194947e-05, 1.7834627215052024e-05, 1.7027328794938512e-05, 1.6256573871942237e-05, 1.552070716570597e-05, 1.481815070292214e-05, 1.41473956318805e-05, 1.3507003131962847e-05, 1.2895598956674803e-05, 1.2311869795667008e-05, 1.1754564184229821e-05, 1.122248522733571e-05, 1.071449150913395e-05, 1.0229491635982413e-05, 9.766446055436973e-06, 9.324360689788591e-06, 8.90228693606332e-06, 8.49931802804349e-06, 8.114589945762418e-06, 7.747276868030895e-06, 7.396590717689833e-06, 7.061778433126165e-06, 6.742121968272841e-06, 6.436934654630022e-06, 6.1455621107597835e-06, 5.867378604307305e-06, 5.601787506748224e-06, 5.348218564904528e-06, 5.106127446197206e-06, 4.874994829151547e-06, 4.654324584407732e-06, 4.443643319973489e-06, 4.242498562234687e-06, 4.050458755955333e-06], "accuracy_train_first": 0.5306823529411765, "accuracy_train_last": 0.9662823529411765, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.47, 0.3821333333333333, 0.3121333333333334, 0.2978666666666666, 0.28, 0.26106666666666667, 0.24760000000000004, 0.23493333333333333, 0.2328, 0.22119999999999995, 0.20320000000000005, 0.19306666666666672, 0.19066666666666665, 0.1824, 0.1822666666666667, 0.17813333333333337, 0.17853333333333332, 0.17559999999999998, 0.17720000000000002, 0.16920000000000002, 0.16546666666666665, 0.16613333333333336, 0.16359999999999997, 0.15800000000000003, 0.15946666666666665, 0.15680000000000005, 0.15959999999999996, 0.15826666666666667, 0.15493333333333337, 0.1570666666666667, 0.15266666666666662, 0.15346666666666664, 0.15200000000000002, 0.15280000000000005, 0.15266666666666662, 0.15146666666666664, 0.14800000000000002, 0.14600000000000002, 0.15026666666666666, 0.14773333333333338, 0.14639999999999997, 0.1486666666666666, 0.14626666666666666, 0.1517333333333334, 0.14839999999999998, 0.1478666666666667, 0.1466666666666666, 0.14680000000000004, 0.14813333333333334, 0.14693333333333336, 0.1466666666666666, 0.1472, 0.14693333333333336, 0.14533333333333331, 0.14480000000000004, 0.14680000000000004, 0.14506666666666668, 0.14559999999999995, 0.1445333333333333, 0.1452, 0.14546666666666663, 0.1452, 0.14639999999999997, 0.1458666666666667, 0.14480000000000004, 0.1466666666666666, 0.1438666666666667, 0.14293333333333336, 0.1445333333333333, 0.14466666666666672, 0.14466666666666672, 0.1458666666666667, 0.14613333333333334, 0.14559999999999995, 0.1465333333333333, 0.1472, 0.1445333333333333, 0.14480000000000004, 0.14613333333333334, 0.14480000000000004, 0.14400000000000002, 0.14413333333333334, 0.14600000000000002, 0.14680000000000004, 0.1452, 0.14480000000000004, 0.14533333333333331, 0.14600000000000002, 0.14493333333333336, 0.1452, 0.14480000000000004, 0.1465333333333333, 0.1452, 0.14493333333333336, 0.14413333333333334, 0.1432, 0.14466666666666672, 0.14413333333333334, 0.14413333333333334, 0.14493333333333336, 0.14359999999999995, 0.1452, 0.14413333333333334, 0.1445333333333333, 0.14480000000000004, 0.14439999999999997, 0.14426666666666665, 0.14439999999999997, 0.14359999999999995, 0.14546666666666663, 0.14573333333333338, 0.14533333333333331, 0.14573333333333338, 0.14439999999999997, 0.14573333333333338, 0.14546666666666663, 0.14439999999999997, 0.14426666666666665], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.04526574628589306, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "valid_ratio": 0.15, "learning_rate": 0.0009580067460119875, "optimization": "adam", "nb_data_augmentation": 3, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 2.422793915058253e-05, "rotation_range": [0, 0], "momentum": 0.5462215257337443}, "accuracy_valid_max": 0.8570666666666666, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8557333333333333, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.53, 0.6178666666666667, 0.6878666666666666, 0.7021333333333334, 0.72, 0.7389333333333333, 0.7524, 0.7650666666666667, 0.7672, 0.7788, 0.7968, 0.8069333333333333, 0.8093333333333333, 0.8176, 0.8177333333333333, 0.8218666666666666, 0.8214666666666667, 0.8244, 0.8228, 0.8308, 0.8345333333333333, 0.8338666666666666, 0.8364, 0.842, 0.8405333333333334, 0.8432, 0.8404, 0.8417333333333333, 0.8450666666666666, 0.8429333333333333, 0.8473333333333334, 0.8465333333333334, 0.848, 0.8472, 0.8473333333333334, 0.8485333333333334, 0.852, 0.854, 0.8497333333333333, 0.8522666666666666, 0.8536, 0.8513333333333334, 0.8537333333333333, 0.8482666666666666, 0.8516, 0.8521333333333333, 0.8533333333333334, 0.8532, 0.8518666666666667, 0.8530666666666666, 0.8533333333333334, 0.8528, 0.8530666666666666, 0.8546666666666667, 0.8552, 0.8532, 0.8549333333333333, 0.8544, 0.8554666666666667, 0.8548, 0.8545333333333334, 0.8548, 0.8536, 0.8541333333333333, 0.8552, 0.8533333333333334, 0.8561333333333333, 0.8570666666666666, 0.8554666666666667, 0.8553333333333333, 0.8553333333333333, 0.8541333333333333, 0.8538666666666667, 0.8544, 0.8534666666666667, 0.8528, 0.8554666666666667, 0.8552, 0.8538666666666667, 0.8552, 0.856, 0.8558666666666667, 0.854, 0.8532, 0.8548, 0.8552, 0.8546666666666667, 0.854, 0.8550666666666666, 0.8548, 0.8552, 0.8534666666666667, 0.8548, 0.8550666666666666, 0.8558666666666667, 0.8568, 0.8553333333333333, 0.8558666666666667, 0.8558666666666667, 0.8550666666666666, 0.8564, 0.8548, 0.8558666666666667, 0.8554666666666667, 0.8552, 0.8556, 0.8557333333333333, 0.8556, 0.8564, 0.8545333333333334, 0.8542666666666666, 0.8546666666666667, 0.8542666666666666, 0.8556, 0.8542666666666666, 0.8545333333333334, 0.8556, 0.8557333333333333], "seed": 658238611, "model": "residualv5", "loss_std": [0.24106073379516602, 0.1314857006072998, 0.12337576597929001, 0.12385915964841843, 0.11995571851730347, 0.12128766626119614, 0.11752603203058243, 0.11595512926578522, 0.11131411790847778, 0.11032816767692566, 0.1078198179602623, 0.10764839500188828, 0.10489606112241745, 0.10395574569702148, 0.10179997235536575, 0.0988752543926239, 0.09899958968162537, 0.09521429985761642, 0.09615933895111084, 0.093518927693367, 0.09136852622032166, 0.0914488136768341, 0.09112280607223511, 0.09065317362546921, 0.08692888915538788, 0.08850693702697754, 0.08761008083820343, 0.08653318881988525, 0.0835437923669815, 0.08250819146633148, 0.0838836133480072, 0.0831134095788002, 0.0809202492237091, 0.07984203100204468, 0.07935978472232819, 0.0762532576918602, 0.077671118080616, 0.07724059373140335, 0.07592373341321945, 0.07711146026849747, 0.07525056600570679, 0.07477407902479172, 0.07169514149427414, 0.0736609473824501, 0.07329303026199341, 0.07363266497850418, 0.0704374834895134, 0.07047486305236816, 0.06971213221549988, 0.07084453850984573, 0.07037229835987091, 0.06917852908372879, 0.06981155276298523, 0.0681643933057785, 0.06767415255308151, 0.06741885095834732, 0.06738528609275818, 0.06643342226743698, 0.06698400527238846, 0.06511655449867249, 0.0652674064040184, 0.06451896578073502, 0.06578130275011063, 0.06435196846723557, 0.0659518912434578, 0.06289920955896378, 0.065928615629673, 0.06390320509672165, 0.06176086515188217, 0.0642545148730278, 0.06376877427101135, 0.06494513899087906, 0.06200093403458595, 0.06413904577493668, 0.06127949431538582, 0.06059849262237549, 0.05980926379561424, 0.0621674470603466, 0.06312151253223419, 0.0615546852350235, 0.06051936373114586, 0.06181292608380318, 0.061794213950634, 0.06031082943081856, 0.06080835312604904, 0.06126314774155617, 0.060309480875730515, 0.06002401188015938, 0.05963161587715149, 0.06017005443572998, 0.05916684865951538, 0.05987149104475975, 0.05969125032424927, 0.05853728950023651, 0.059747058898210526, 0.05846391245722771, 0.057021044194698334, 0.06002837046980858, 0.05806542560458183, 0.05845241621136665, 0.060075726360082626, 0.05762532725930214, 0.058349963277578354, 0.058576229959726334, 0.059715963900089264, 0.06072196736931801, 0.05943421274423599, 0.059137389063835144, 0.05962423235177994, 0.0582115612924099, 0.057859644293785095, 0.05901909992098808, 0.05776473134756088, 0.058960285037755966, 0.059293974190950394, 0.058607686311006546, 0.05722212791442871, 0.059901800006628036]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:46 2016", "state": "available"}], "summary": "74e56d5ecd994232151e343fb8bc549d"}