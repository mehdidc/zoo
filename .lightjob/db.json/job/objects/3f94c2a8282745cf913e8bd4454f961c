{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 16, "f3": 16, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.820851445198059, 1.5299369096755981, 1.3689285516738892, 1.2653400897979736, 1.1863771677017212, 1.1211037635803223, 1.0669466257095337, 1.0188065767288208, 0.9784647822380066, 0.9407753348350525, 0.9101916551589966, 0.8826079964637756, 0.8586448431015015, 0.8338080644607544, 0.8103306293487549, 0.7940124869346619, 0.7726498246192932, 0.754725992679596, 0.7394981980323792, 0.724488377571106, 0.7085386514663696, 0.6945753693580627, 0.6814830303192139, 0.6657837629318237, 0.6557295322418213, 0.6446067690849304, 0.632881760597229, 0.6194413900375366, 0.6099961996078491, 0.5984721183776855, 0.5874325633049011, 0.5820026397705078, 0.5699661374092102, 0.5619585514068604, 0.5527997016906738, 0.5483906269073486, 0.5396424531936646, 0.5290155410766602, 0.5226223468780518, 0.5152159929275513, 0.5109084248542786, 0.5029934048652649, 0.49750417470932007, 0.4908113181591034, 0.4813196063041687, 0.4781562089920044, 0.4704183340072632, 0.4661328196525574, 0.4619990587234497, 0.4577364921569824, 0.4519155025482178, 0.44523751735687256, 0.43844085931777954, 0.4359305799007416, 0.42924895882606506, 0.4253094494342804, 0.42257240414619446, 0.41865941882133484, 0.4137376844882965, 0.40779685974121094, 0.4041045904159546, 0.40039297938346863, 0.40181031823158264, 0.3926878869533539, 0.38797569274902344, 0.3840148150920868, 0.38262665271759033, 0.37718361616134644, 0.3753805160522461, 0.37170764803886414, 0.3663782477378845, 0.36466270685195923, 0.36184796690940857, 0.3568912744522095, 0.3582075834274292, 0.3532510995864868, 0.348288357257843, 0.3481704592704773, 0.3437153100967407, 0.34312906861305237, 0.33802321553230286, 0.3357926607131958, 0.333315372467041, 0.3287481367588043, 0.3279189467430115, 0.3272382318973541, 0.32227104902267456, 0.3183203339576721, 0.3180959224700928, 0.31508883833885193, 0.3126731514930725, 0.3108104169368744, 0.30746006965637207, 0.3052557110786438, 0.30329325795173645, 0.29618170857429504, 0.29959937930107117, 0.29717954993247986, 0.2931182086467743, 0.2940364480018616, 0.28804004192352295, 0.2891841232776642, 0.28382620215415955, 0.28481802344322205, 0.2806638777256012, 0.28007134795188904, 0.27692320942878723, 0.2748956084251404, 0.2759177088737488, 0.27030491828918457, 0.27177903056144714, 0.2676868438720703, 0.26783400774002075, 0.2656981647014618, 0.26391705870628357, 0.2590307295322418, 0.25736790895462036, 0.25689858198165894, 0.25713855028152466, 0.25853508710861206, 0.2548106610774994, 0.25286394357681274, 0.251482754945755, 0.247115820646286, 0.2488061636686325, 0.24469928443431854, 0.24591277539730072, 0.24402309954166412, 0.24405522644519806, 0.23978082835674286, 0.23884853720664978, 0.23908783495426178, 0.2343522310256958, 0.2331121265888214, 0.2340153455734253, 0.23203110694885254, 0.2296990603208542, 0.2289140224456787, 0.2315426915884018, 0.228008434176445, 0.22496788203716278, 0.22190405428409576, 0.22525960206985474, 0.22464007139205933, 0.22304627299308777, 0.21892507374286652, 0.21609336137771606, 0.2201647013425827, 0.2222147285938263, 0.21819379925727844, 0.21530231833457947, 0.21091914176940918, 0.21107076108455658, 0.21020512282848358, 0.21088899672031403, 0.2086641490459442, 0.20693166553974152, 0.20565499365329742, 0.20686396956443787, 0.20422226190567017, 0.20401492714881897, 0.20201458036899567, 0.20458415150642395, 0.20395143330097198, 0.1998397260904312], "moving_avg_accuracy_train": [0.03972470588235293, 0.0768910588235294, 0.11309136470588232, 0.1555328164705882, 0.19841953482352936, 0.2397469931058823, 0.27797935261882345, 0.31255788794517636, 0.34576092268007047, 0.3753095362944163, 0.4034044650179158, 0.42840754792788893, 0.4530726754880412, 0.47552305499806063, 0.4962013377335487, 0.5160423804307821, 0.5315628482700568, 0.5504865634430511, 0.5678026129810989, 0.5863847046241655, 0.6024874106323371, 0.6170974930985151, 0.6338065673180754, 0.6458682635274444, 0.6586837901158765, 0.6715848228689948, 0.6797275170526835, 0.6918559418180035, 0.6996821123420854, 0.7081821364019946, 0.7112274521735598, 0.7200835304856156, 0.7289669421429363, 0.7364631891051133, 0.7411274584298961, 0.7481464772927889, 0.756976535445863, 0.7641918230777472, 0.7706338172405608, 0.7780222002223871, 0.785532921376619, 0.7888925704154276, 0.7933774310209437, 0.798747923212967, 0.8022872485387291, 0.8067361707436798, 0.8106460830810766, 0.813532063008263, 0.8093059155309661, 0.8137235592719871, 0.818268850403612, 0.822383141833839, 0.8257354158857492, 0.8276230507677625, 0.8322207456909863, 0.8302057299454171, 0.8298016275391107, 0.8322544059616702, 0.8356077888949149, 0.8381670100054235, 0.8420679560637048, 0.8384517486926284, 0.8383501032351303, 0.8413574458527937, 0.8452193483263378, 0.8465985899642923, 0.8497081427325689, 0.8517396814004884, 0.8533868897310277, 0.8524129066402779, 0.8541245571527207, 0.8561121014374486, 0.8571644207054685, 0.8528879786349216, 0.8536932984184882, 0.8548416156354629, 0.8578162776013283, 0.860041708664725, 0.8633881260335465, 0.8645669604890154, 0.8646726173812903, 0.8651230027019848, 0.8665307024317863, 0.8663293968944901, 0.8664093983815117, 0.8648131644257134, 0.8673553773949069, 0.865389251420122, 0.8668338556898745, 0.868305764238534, 0.8689857760499747, 0.8701460219743891, 0.8721502433063619, 0.8737281601521962, 0.8751082853134472, 0.8733692214879848, 0.8752864169862451, 0.8759671870523265, 0.8770245859941526, 0.8760468332770902, 0.8764115617140871, 0.8773115820132666, 0.8784133649884106, 0.8759532049601577, 0.8731343550523772, 0.8759503313118454, 0.8774376511218374, 0.8790421213037712, 0.8816508503498647, 0.8787163535501723, 0.8790164829010374, 0.8812042463756395, 0.8793944099733697, 0.8817726160348562, 0.8862565309019589, 0.8862097013411747, 0.8888734370894102, 0.8883460933804692, 0.8842691311012458, 0.8803669238734743, 0.8799843491331856, 0.8819435612786906, 0.8831844992684685, 0.8851531081651511, 0.8846354444074596, 0.8842848411431843, 0.88496694526416, 0.8867973095612735, 0.8889175786051461, 0.890858761921102, 0.8914811210231095, 0.8939635971560927, 0.8949084139110718, 0.8925187489905528, 0.8833256976209093, 0.8851931278588183, 0.8884385209552894, 0.8911381982715252, 0.8930432019737844, 0.8912329994234648, 0.893577934775236, 0.8945566118859476, 0.8978421271679411, 0.8972790909217353, 0.9000382406530911, 0.902519122470135, 0.902224857281945, 0.8907176656713975, 0.8901682520454343, 0.8884573091938319, 0.8891268723920958, 0.8915271263293568, 0.89362853134348, 0.8967997958561907, 0.8987245221529246, 0.899906187584691, 0.9007885100026926, 0.902857894296541, 0.9055015166315927, 0.9076337179096099, 0.9097338755304136, 0.9092075468009018, 0.9074632627090469, 0.9079781129087304, 0.9089355957355044], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.03939999999999999, 0.07656666666666664, 0.11218999999999998, 0.1545043333333333, 0.19660056666666664, 0.23711384333333332, 0.2742957923333333, 0.3074928797666666, 0.3388902584566666, 0.3670412326109999, 0.3938304426832332, 0.41782073174824325, 0.4413053252400856, 0.46270812604941036, 0.482343980111136, 0.5007229154333558, 0.5153039572233535, 0.5330535615010181, 0.5496815386842496, 0.5671533848158247, 0.5823313796675755, 0.5959915750341513, 0.6113924175307361, 0.6225731757776625, 0.6342758581998963, 0.6468082723799067, 0.6542741118085827, 0.6655533672943912, 0.6722513638982853, 0.6799862275084568, 0.6830409380909445, 0.6911501776151834, 0.698355159853665, 0.7049596438682985, 0.7091703461481353, 0.7146799781999885, 0.7225986470466563, 0.7288987823419907, 0.734262237441125, 0.7401426803636791, 0.7463417456606446, 0.7486942377612468, 0.7523314806517887, 0.7570049992532765, 0.7598378326612821, 0.7630140493951539, 0.7656459777889718, 0.7677480466767413, 0.7637065753424005, 0.7670025844748272, 0.7703823260273444, 0.7734640934246099, 0.7756110174154822, 0.7765832490072674, 0.7801515907732073, 0.7781097650292199, 0.7773654551929645, 0.7796155763403347, 0.7820140187063013, 0.7839592835023379, 0.7867366884854374, 0.783996352970227, 0.7830367176732043, 0.7850797125725505, 0.7877584079819621, 0.7889292338504325, 0.7915963104653891, 0.7925966794188503, 0.7935503448102986, 0.792008643662602, 0.7931811126296752, 0.7941430013667077, 0.7943820345633703, 0.7908638311070333, 0.79113744799633, 0.7916770365300304, 0.7933359995436939, 0.7951223995893245, 0.7976368262970588, 0.7979798103340195, 0.7975684959672842, 0.7979716463705558, 0.7985078150668337, 0.7981770335601504, 0.798025996870802, 0.7960633971837219, 0.7976970574653497, 0.7958740183854813, 0.7969532832135999, 0.7978312882255733, 0.7985414927363492, 0.7992873434627144, 0.7997986091164428, 0.8011787482047986, 0.8020208733843188, 0.8006854527125536, 0.8016702407746316, 0.8016632166971684, 0.8021635616941183, 0.8010272055247065, 0.8008444849722359, 0.8014533698083456, 0.8016546994941777, 0.7990492295447599, 0.7970109732569506, 0.7983232092645889, 0.7992642216714634, 0.8001911328376504, 0.8021320195538855, 0.7998654842651636, 0.8000522691719806, 0.8015803755881159, 0.8004756713626376, 0.8015481042263739, 0.8046866271370698, 0.8047379644233628, 0.8065308346476932, 0.8061044178495905, 0.8025339760646315, 0.7993205784581684, 0.7983218539456849, 0.7999696685511164, 0.8008260350293381, 0.8019967648597376, 0.8019704217070972, 0.8013867128697209, 0.8017680415827488, 0.802631237424474, 0.8044881136820266, 0.8057859689804906, 0.8060207054157749, 0.8079519682075308, 0.8083567713867776, 0.8065344275814332, 0.7993876514899565, 0.8009822196742942, 0.8029773310401981, 0.8047995979361783, 0.8058396381425605, 0.8045890076616378, 0.8063967735621406, 0.8071704295392599, 0.8096000532520005, 0.8088267145934671, 0.8109973764674537, 0.8128976388207083, 0.8123945416053042, 0.8039017541114405, 0.8030715787002964, 0.8020444208302668, 0.8021333120805735, 0.8038799808725161, 0.8056653161185978, 0.808098784506738, 0.8093289060560642, 0.8099693487837911, 0.810812413905412, 0.8125445058482041, 0.8138900552633838, 0.8157410497370454, 0.8170736114300076, 0.8168195836203401, 0.8153909585916395, 0.8157718627324755, 0.8163946764592279], "moving_var_accuracy_train": [0.014202470316955014, 0.025214263403792382, 0.03448699637719639, 0.04724978819053946, 0.05907824487124603, 0.06854204965683802, 0.07484326451649528, 0.07812001401268831, 0.08022998625187876, 0.08006507272546004, 0.07916249063272073, 0.07687262896447557, 0.07466068272605526, 0.07173079031474483, 0.0684060336752694, 0.0651084330855634, 0.060765554074556714, 0.05791196163063858, 0.05481937561201186, 0.0524450852192926, 0.04953425096443382, 0.046501916455007154, 0.0443644632609794, 0.0412373775739054, 0.038591779312164134, 0.03623053119582098, 0.03320420929336059, 0.031207676549616755, 0.02863814940030317, 0.026424588141444157, 0.02386559486063664, 0.022184906482196357, 0.020676650858037528, 0.0191147292388953, 0.01739905499001276, 0.01610254912319028, 0.01519402355375128, 0.014143164578873555, 0.01310234172012971, 0.012283401375892, 0.011562759628612435, 0.010508068840726905, 0.009638287728512404, 0.008934038633122412, 0.008153376183664404, 0.007516174744369287, 0.006902144000307502, 0.00628688952153786, 0.005818943471882839, 0.0054126893106977965, 0.005057357422869062, 0.004703968226337713, 0.004334711075575936, 0.003933308457048483, 0.003730226798806972, 0.0033937467150203016, 0.0030558417323113154, 0.002804402656991746, 0.0026251689851653657, 0.0024215986008810806, 0.002316395162139548, 0.0022024482476812363, 0.0019822964091043825, 0.0018654637547740776, 0.0018131459957331682, 0.001648952163622657, 0.0015710808130286647, 0.0014511170759590709, 0.0013304250259209493, 0.0012059203108784537, 0.0011116960070813196, 0.0010360793969269796, 0.0009424378398108941, 0.0010127856668744916, 0.0009173439597712773, 0.0008374772556713545, 0.0008333670544047193, 0.0007946032397256215, 0.0008159294986102185, 0.0007468434048098022, 0.0006722595347387888, 0.0006068592036987837, 0.0005640078500924547, 0.0005079717803573245, 0.00045723220446292306, 0.0004344406495914199, 0.0004491622056588919, 0.00043903684723151413, 0.00041391509597404723, 0.0003920222193571977, 0.0003569817419947679, 0.00033339910324137087, 0.00033621132124504917, 0.000324998583271856, 0.0003096414340911325, 0.0003058963775833052, 0.0003083874870319225, 0.0002817197692745822, 0.0002636106250467002, 0.0002458535659235349, 0.000222465450825969, 0.00020750923459378893, 0.00019768364265326305, 0.00023238676466945293, 0.0002806613214258535, 0.00032396268992826254, 0.00031147550289018606, 0.00030349687368360294, 0.00033439639143862797, 0.0003784581955014071, 0.00034142307459652285, 0.0003503575483240998, 0.0003448013637185191, 0.00036122400398468974, 0.0005060510364050351, 0.0004554656698344007, 0.0004737784960788089, 0.00042890346895716505, 0.0005356077148973424, 0.0006190919346438673, 0.0005585000120666426, 0.0005371966209398261, 0.000497336302696112, 0.00048248146131938015, 0.00043664509708168855, 0.00039408689121380467, 0.00035886559637909236, 0.00035313113788251055, 0.0003582778914599016, 0.000356363836309224, 0.0003242134303449652, 0.0003472562770679481, 0.000320564757665554, 0.0003399027677902277, 0.0010665222323753465, 0.0009912556703789261, 0.0009869232904966344, 0.0009538252799531521, 0.0008911041039084298, 0.0008314851929762397, 0.0007978251699144915, 0.0007266629329063214, 0.0007511481356296033, 0.0006788864103975175, 0.0006795139345181369, 0.0006669555123775716, 0.0006010392891486388, 0.0017326744890904548, 0.0015621237381729563, 0.0014322572933287, 0.001293066397884054, 0.0012156107287656813, 0.00113379278318955, 0.0011109257723568064, 0.0010331743369771755, 0.0009424239020131421, 0.0008551879474555997, 0.0008082103149106772, 0.0007902879348730715, 0.0007521756819955681, 0.0007166540720859909, 0.0006474818622609789, 0.0006101164189727631, 0.0005514904136285145, 0.0005045923325377676], "duration": 117245.3687, "accuracy_train": [0.3972470588235294, 0.41138823529411767, 0.4388941176470588, 0.5375058823529412, 0.5844, 0.6116941176470588, 0.6220705882352942, 0.6237647058823529, 0.6445882352941177, 0.6412470588235294, 0.6562588235294118, 0.6534352941176471, 0.6750588235294117, 0.6775764705882353, 0.6823058823529412, 0.6946117647058824, 0.6712470588235294, 0.7208, 0.7236470588235294, 0.7536235294117647, 0.7474117647058823, 0.7485882352941177, 0.7841882352941176, 0.7544235294117647, 0.7740235294117647, 0.7876941176470589, 0.7530117647058824, 0.8010117647058823, 0.7701176470588236, 0.7846823529411765, 0.7386352941176471, 0.7997882352941177, 0.8089176470588235, 0.8039294117647059, 0.7831058823529412, 0.8113176470588235, 0.8364470588235294, 0.8291294117647059, 0.8286117647058824, 0.8445176470588235, 0.8531294117647059, 0.8191294117647059, 0.8337411764705882, 0.8470823529411765, 0.8341411764705883, 0.8467764705882352, 0.845835294117647, 0.8395058823529412, 0.7712705882352942, 0.8534823529411765, 0.8591764705882353, 0.8594117647058823, 0.8559058823529412, 0.8446117647058824, 0.8736, 0.8120705882352941, 0.8261647058823529, 0.8543294117647059, 0.8657882352941176, 0.8612, 0.8771764705882353, 0.8059058823529411, 0.837435294117647, 0.8684235294117647, 0.8799764705882352, 0.8590117647058824, 0.8776941176470588, 0.8700235294117648, 0.8682117647058823, 0.8436470588235294, 0.8695294117647059, 0.874, 0.8666352941176471, 0.8144, 0.8609411764705882, 0.8651764705882353, 0.8845882352941177, 0.8800705882352942, 0.8935058823529411, 0.8751764705882353, 0.8656235294117647, 0.8691764705882353, 0.8792, 0.8645176470588235, 0.8671294117647059, 0.8504470588235294, 0.890235294117647, 0.8476941176470588, 0.879835294117647, 0.8815529411764705, 0.8751058823529412, 0.8805882352941177, 0.8901882352941176, 0.8879294117647059, 0.8875294117647059, 0.8577176470588236, 0.8925411764705883, 0.8820941176470588, 0.8865411764705883, 0.8672470588235294, 0.8796941176470588, 0.8854117647058823, 0.8883294117647059, 0.8538117647058824, 0.847764705882353, 0.9012941176470588, 0.8908235294117647, 0.8934823529411765, 0.9051294117647058, 0.8523058823529411, 0.8817176470588235, 0.9008941176470588, 0.8631058823529412, 0.9031764705882352, 0.9266117647058824, 0.8857882352941177, 0.9128470588235295, 0.8836, 0.8475764705882353, 0.8452470588235295, 0.8765411764705883, 0.8995764705882353, 0.8943529411764706, 0.9028705882352941, 0.8799764705882352, 0.8811294117647058, 0.8911058823529412, 0.9032705882352942, 0.908, 0.9083294117647058, 0.8970823529411764, 0.9163058823529412, 0.9034117647058824, 0.8710117647058824, 0.8005882352941176, 0.902, 0.9176470588235294, 0.915435294117647, 0.9101882352941176, 0.8749411764705882, 0.9146823529411765, 0.903364705882353, 0.9274117647058824, 0.8922117647058824, 0.9248705882352941, 0.9248470588235295, 0.8995764705882353, 0.7871529411764706, 0.8852235294117647, 0.8730588235294118, 0.8951529411764706, 0.9131294117647059, 0.9125411764705882, 0.9253411764705882, 0.9160470588235294, 0.9105411764705882, 0.9087294117647059, 0.9214823529411764, 0.9292941176470588, 0.9268235294117647, 0.9286352941176471, 0.9044705882352941, 0.8917647058823529, 0.9126117647058823, 0.9175529411764706], "end": "2016-02-06 18:47:46.621000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0], "moving_var_accuracy_valid": [0.013971239999999998, 0.025006365999999995, 0.0339269263, 0.046648758919, 0.057932718774790004, 0.0669113771737399, 0.07266271543931332, 0.0753148634218894, 0.07665553557712985, 0.07612227813195836, 0.07496900630541077, 0.07265191139967435, 0.07035045544300067, 0.0674381288410533, 0.06416441683954846, 0.06078804252779864, 0.05662269929215372, 0.053795865431061574, 0.05090468551481003, 0.04856160562853794, 0.045778788815162126, 0.04288031837072308, 0.0407269600800923, 0.03777934826686898, 0.035233988423063016, 0.033124142227370645, 0.03031337683000654, 0.028427033585833133, 0.025988098653801826, 0.02392774182403324, 0.021618948952314778, 0.020048891948036603, 0.01851120867474447, 0.017052660689165968, 0.015506964743454178, 0.014229472677230025, 0.01337087325623571, 0.0123910112732678, 0.011410810001344883, 0.010580945481899152, 0.009868706628713607, 0.008931643937592808, 0.008157545366436713, 0.007538366814859114, 0.00685675463943082, 0.006261874350152482, 0.0056980303387689, 0.005167995547372366, 0.004798197407551815, 0.00441615075260599, 0.004077339554001699, 0.0037550812112191697, 0.0034210566337005022, 0.0030874580787430372, 0.0028933098374956953, 0.0026415003250654127, 0.0023823362667499894, 0.0021896700466755743, 0.002022475774053785, 0.0018542846927886983, 0.001738282029471144, 0.001632038775147341, 0.0014771229967622335, 0.001366975150514803, 0.0012948563173309485, 0.0011777081845263703, 0.0011239570451041761, 0.001020567982981198, 0.0009266964837926945, 0.0008554184172727041, 0.0007822487268541793, 0.0007123509236506307, 0.0006416300631075281, 0.0006888668568384119, 0.0006206539669735461, 0.0005612089723474994, 0.0005298574996390848, 0.0005055927757824378, 0.0005119345732212981, 0.0004617998583456576, 0.00041714248808563746, 0.000376891011505996, 0.00034178920219321, 0.0003085950296203625, 0.0002779408353920901, 0.000284812929638427, 0.0002803512499164987, 0.0002822273683053924, 0.00026448794459777656, 0.00024497718534745164, 0.00022501898083684572, 0.00020752372250733503, 0.00018912388337474407, 0.00018735455016613567, 0.00017500166851135845, 0.00017355163699542348, 0.00016492474104078271, 0.00014843271097568232, 0.0001358425459218685, 0.00013388003942352476, 0.00012079251668382892, 0.00011204993170824549, 0.00010120974131899625, 0.00015218503010296796, 0.0001743569253458195, 0.00017241890286891955, 0.0001631465517310522, 0.00015456437534796616, 0.00017301130902048519, 0.00020194481805363093, 0.00018206433366099945, 0.00018487388326620364, 0.00017736983777168897, 0.00016998386421951365, 0.0002416384123462321, 0.00021749829076428428, 0.0002246779144594704, 0.0002038466045848604, 0.00029819443498440895, 0.00036130830908097627, 0.00033415453403939737, 0.0003251767174003182, 0.00029925931756548277, 0.0002816688608310202, 0.0002535082204031375, 0.0002312238424243054, 0.0002094101624682906, 0.00019517510977200533, 0.00020668950371756806, 0.0002011804087275712, 0.00018155827860126382, 0.0001969704344785227, 0.0001787481815560262, 0.00019076179590431854, 0.0006313732928292075, 0.0005911197927968046, 0.0005678320377783549, 0.0005409347437621871, 0.0004965764220639916, 0.0004609954692559093, 0.0004443080802895077, 0.00040526416439894846, 0.00041786539042866017, 0.0003814613255128341, 0.0003857211497021628, 0.00037964800783271777, 0.0003439611683227729, 0.0009587120062338526, 0.0008690435265298811, 0.0007916346534865676, 0.0007125423030273406, 0.0006687457395433243, 0.000630557963057107, 0.0006207980823160959, 0.0005723370653195365, 0.0005187948607750674, 0.00047331220389120344, 0.0004529822659866521, 0.0004239785684461978, 0.0004124163364753109, 0.0003871561888177305, 0.0003490213410887173, 0.0003324879322335158, 0.00030054493069071875, 0.00027398151006572833], "accuracy_test": 0.5602, "start": "2016-02-05 10:13:41.252000", "learning_rate_per_epoch": [0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376, 0.003721521934494376], "accuracy_train_first": 0.3972470588235294, "accuracy_train_last": 0.9175529411764706, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.606, 0.5889333333333333, 0.5671999999999999, 0.4646666666666667, 0.4245333333333333, 0.39826666666666666, 0.3910666666666667, 0.3937333333333334, 0.3785333333333334, 0.37960000000000005, 0.36506666666666665, 0.36626666666666663, 0.3473333333333334, 0.3446666666666667, 0.3409333333333333, 0.33386666666666664, 0.3534666666666667, 0.30720000000000003, 0.30066666666666664, 0.27559999999999996, 0.2810666666666667, 0.2810666666666667, 0.25, 0.27680000000000005, 0.26039999999999996, 0.24039999999999995, 0.2785333333333333, 0.23293333333333333, 0.26746666666666663, 0.25039999999999996, 0.28946666666666665, 0.23586666666666667, 0.2368, 0.23560000000000003, 0.25293333333333334, 0.23573333333333335, 0.20613333333333328, 0.21440000000000003, 0.2174666666666667, 0.2069333333333333, 0.19786666666666664, 0.2301333333333333, 0.2149333333333333, 0.2009333333333333, 0.21466666666666667, 0.20840000000000003, 0.21066666666666667, 0.21333333333333337, 0.2726666666666666, 0.20333333333333337, 0.19920000000000004, 0.19879999999999998, 0.20506666666666662, 0.21466666666666667, 0.1877333333333333, 0.24026666666666663, 0.22933333333333328, 0.20013333333333339, 0.19640000000000002, 0.19853333333333334, 0.1882666666666667, 0.2406666666666667, 0.22560000000000002, 0.19653333333333334, 0.18813333333333337, 0.20053333333333334, 0.1844, 0.19840000000000002, 0.19786666666666664, 0.22186666666666666, 0.1962666666666667, 0.19720000000000004, 0.20346666666666668, 0.24080000000000001, 0.20640000000000003, 0.20346666666666668, 0.1917333333333333, 0.18879999999999997, 0.1797333333333333, 0.1989333333333333, 0.20613333333333328, 0.19840000000000002, 0.19666666666666666, 0.20479999999999998, 0.20333333333333337, 0.22160000000000002, 0.1876, 0.22053333333333336, 0.19333333333333336, 0.1942666666666667, 0.19506666666666672, 0.19399999999999995, 0.1956, 0.1864, 0.1904, 0.21133333333333337, 0.18946666666666667, 0.19840000000000002, 0.19333333333333336, 0.20920000000000005, 0.20079999999999998, 0.19306666666666672, 0.19653333333333334, 0.22440000000000004, 0.22133333333333338, 0.18986666666666663, 0.1922666666666667, 0.19146666666666667, 0.1804, 0.22053333333333336, 0.1982666666666667, 0.18466666666666665, 0.2094666666666667, 0.18879999999999997, 0.1670666666666667, 0.19479999999999997, 0.17733333333333334, 0.19773333333333332, 0.22960000000000003, 0.22960000000000003, 0.21066666666666667, 0.18520000000000003, 0.19146666666666667, 0.18746666666666667, 0.1982666666666667, 0.20386666666666664, 0.19479999999999997, 0.1896, 0.17879999999999996, 0.18253333333333333, 0.19186666666666663, 0.17466666666666664, 0.18799999999999994, 0.20986666666666665, 0.26493333333333335, 0.18466666666666665, 0.1790666666666667, 0.17879999999999996, 0.18479999999999996, 0.20666666666666667, 0.17733333333333334, 0.18586666666666662, 0.1685333333333333, 0.19813333333333338, 0.16946666666666665, 0.17000000000000004, 0.19213333333333338, 0.2725333333333333, 0.20440000000000003, 0.20720000000000005, 0.1970666666666666, 0.1804, 0.17826666666666668, 0.17000000000000004, 0.17959999999999998, 0.1842666666666667, 0.18159999999999998, 0.1718666666666666, 0.17400000000000004, 0.16759999999999997, 0.17093333333333338, 0.18546666666666667, 0.19746666666666668, 0.18079999999999996, 0.17800000000000005], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.05416340817123436, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "valid_ratio": 0.15, "learning_rate": 0.0037215218406928528, "optimization": "nesterov_momentum", "nb_data_augmentation": 3, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 1.2099180846627474e-05, "rotation_range": [0, 0], "momentum": 0.818862063200727}, "accuracy_valid_max": 0.8329333333333333, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.822, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.394, 0.4110666666666667, 0.4328, 0.5353333333333333, 0.5754666666666667, 0.6017333333333333, 0.6089333333333333, 0.6062666666666666, 0.6214666666666666, 0.6204, 0.6349333333333333, 0.6337333333333334, 0.6526666666666666, 0.6553333333333333, 0.6590666666666667, 0.6661333333333334, 0.6465333333333333, 0.6928, 0.6993333333333334, 0.7244, 0.7189333333333333, 0.7189333333333333, 0.75, 0.7232, 0.7396, 0.7596, 0.7214666666666667, 0.7670666666666667, 0.7325333333333334, 0.7496, 0.7105333333333334, 0.7641333333333333, 0.7632, 0.7644, 0.7470666666666667, 0.7642666666666666, 0.7938666666666667, 0.7856, 0.7825333333333333, 0.7930666666666667, 0.8021333333333334, 0.7698666666666667, 0.7850666666666667, 0.7990666666666667, 0.7853333333333333, 0.7916, 0.7893333333333333, 0.7866666666666666, 0.7273333333333334, 0.7966666666666666, 0.8008, 0.8012, 0.7949333333333334, 0.7853333333333333, 0.8122666666666667, 0.7597333333333334, 0.7706666666666667, 0.7998666666666666, 0.8036, 0.8014666666666667, 0.8117333333333333, 0.7593333333333333, 0.7744, 0.8034666666666667, 0.8118666666666666, 0.7994666666666667, 0.8156, 0.8016, 0.8021333333333334, 0.7781333333333333, 0.8037333333333333, 0.8028, 0.7965333333333333, 0.7592, 0.7936, 0.7965333333333333, 0.8082666666666667, 0.8112, 0.8202666666666667, 0.8010666666666667, 0.7938666666666667, 0.8016, 0.8033333333333333, 0.7952, 0.7966666666666666, 0.7784, 0.8124, 0.7794666666666666, 0.8066666666666666, 0.8057333333333333, 0.8049333333333333, 0.806, 0.8044, 0.8136, 0.8096, 0.7886666666666666, 0.8105333333333333, 0.8016, 0.8066666666666666, 0.7908, 0.7992, 0.8069333333333333, 0.8034666666666667, 0.7756, 0.7786666666666666, 0.8101333333333334, 0.8077333333333333, 0.8085333333333333, 0.8196, 0.7794666666666666, 0.8017333333333333, 0.8153333333333334, 0.7905333333333333, 0.8112, 0.8329333333333333, 0.8052, 0.8226666666666667, 0.8022666666666667, 0.7704, 0.7704, 0.7893333333333333, 0.8148, 0.8085333333333333, 0.8125333333333333, 0.8017333333333333, 0.7961333333333334, 0.8052, 0.8104, 0.8212, 0.8174666666666667, 0.8081333333333334, 0.8253333333333334, 0.812, 0.7901333333333334, 0.7350666666666666, 0.8153333333333334, 0.8209333333333333, 0.8212, 0.8152, 0.7933333333333333, 0.8226666666666667, 0.8141333333333334, 0.8314666666666667, 0.8018666666666666, 0.8305333333333333, 0.83, 0.8078666666666666, 0.7274666666666667, 0.7956, 0.7928, 0.8029333333333334, 0.8196, 0.8217333333333333, 0.83, 0.8204, 0.8157333333333333, 0.8184, 0.8281333333333334, 0.826, 0.8324, 0.8290666666666666, 0.8145333333333333, 0.8025333333333333, 0.8192, 0.822], "seed": 2437479, "model": "residualv3", "loss_std": [0.29421406984329224, 0.12417561560869217, 0.12655013799667358, 0.12487995624542236, 0.12538322806358337, 0.1266237497329712, 0.12452276051044464, 0.1254059374332428, 0.1255536526441574, 0.12349351495504379, 0.12393105775117874, 0.12253610044717789, 0.122830331325531, 0.12161985039710999, 0.12150196731090546, 0.12021289765834808, 0.11885751783847809, 0.11847266554832458, 0.11857857555150986, 0.1157311201095581, 0.1158422976732254, 0.11548908054828644, 0.11601653695106506, 0.11474322527647018, 0.11610177159309387, 0.11415029317140579, 0.11312014609575272, 0.11232073605060577, 0.1121700257062912, 0.11320368945598602, 0.11027015000581741, 0.11152823269367218, 0.10909181088209152, 0.10937052220106125, 0.10528484731912613, 0.10685670375823975, 0.10900093615055084, 0.10542399436235428, 0.1025724783539772, 0.10297881066799164, 0.10187739133834839, 0.10064319521188736, 0.10336306691169739, 0.10120800882577896, 0.10127736628055573, 0.09741974622011185, 0.09944706410169601, 0.0968683660030365, 0.0980861485004425, 0.10035889595746994, 0.09665745496749878, 0.09287997335195541, 0.09540605545043945, 0.09228340536355972, 0.09474051743745804, 0.09294629096984863, 0.09245477616786957, 0.09114343672990799, 0.09064637869596481, 0.0921410620212555, 0.08853074908256531, 0.08702507615089417, 0.09165869653224945, 0.08888877183198929, 0.08821180462837219, 0.08657898008823395, 0.0864972472190857, 0.0882321298122406, 0.08347740024328232, 0.08581715077161789, 0.08488491177558899, 0.0840902179479599, 0.08384346961975098, 0.08177889138460159, 0.08241164684295654, 0.080262191593647, 0.08021607995033264, 0.07923755794763565, 0.0821668729186058, 0.08096829801797867, 0.07927767932415009, 0.08066776394844055, 0.07834777235984802, 0.07915852963924408, 0.0762430727481842, 0.07570987939834595, 0.07687666267156601, 0.07484187185764313, 0.07644407451152802, 0.07404215633869171, 0.07256662845611572, 0.07263130694627762, 0.07398384064435959, 0.07097286731004715, 0.07333488017320633, 0.07189906388521194, 0.07066380977630615, 0.07177874445915222, 0.06969258934259415, 0.0701463371515274, 0.06803766638040543, 0.06788551807403564, 0.06753377616405487, 0.06687720865011215, 0.06846249103546143, 0.06710966676473618, 0.06655049324035645, 0.06725378334522247, 0.06675027310848236, 0.06448674947023392, 0.06605638563632965, 0.06291619688272476, 0.06550661474466324, 0.06212997809052467, 0.06146697700023651, 0.06226083263754845, 0.06307051330804825, 0.06186702102422714, 0.061122070997953415, 0.062351059168577194, 0.06417396664619446, 0.06332129240036011, 0.06159261241555214, 0.05971381440758705, 0.06057755649089813, 0.05918271094560623, 0.059451013803482056, 0.05774011090397835, 0.06012914702296257, 0.059867408126592636, 0.05897556617856026, 0.05855323001742363, 0.05674179270863533, 0.057335540652275085, 0.05692132189869881, 0.05766536295413971, 0.057307787239551544, 0.05662037804722786, 0.06010722368955612, 0.05434691533446312, 0.053899187594652176, 0.054173462092876434, 0.054372914135456085, 0.05572125315666199, 0.0545196495950222, 0.05421949923038483, 0.05362953245639801, 0.05514417588710785, 0.060303933918476105, 0.05455504357814789, 0.052941348403692245, 0.051176782697439194, 0.051710572093725204, 0.051231157034635544, 0.051131512969732285, 0.05081402510404587, 0.05123415216803551, 0.04930240288376808, 0.05008930340409279, 0.05151256173849106, 0.05057927966117859, 0.05058236047625542, 0.052717164158821106, 0.05302704870700836, 0.05205957219004631]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:43 2016", "state": "available"}], "summary": "1575f0890260fb73ac063ae1dcf37150"}