{"content": {"hp_model": {"f0": 32, "f1": 32, "f2": 64, "f3": 32, "nonlin": "very_leaky_rectify", "nbg1": 4, "nbg3": 7, "nbg2": 3, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.4274734258651733, 0.9522958993911743, 0.7022773623466492, 0.5570330619812012, 0.4451657831668854, 0.3496342599391937, 0.26911279559135437, 0.2078426629304886, 0.15594536066055298, 0.12216401845216751, 0.0991218239068985, 0.08038404583930969, 0.06628900021314621, 0.056465182453393936, 0.04641023278236389, 0.041012849658727646, 0.03600641340017319, 0.03295178338885307, 0.02960985153913498, 0.027215829119086266, 0.026566702872514725, 0.021198542788624763, 0.021352618932724, 0.019381830468773842, 0.01904306374490261, 0.016898449510335922, 0.01588415913283825, 0.013914454728364944, 0.013657810166478157, 0.012240799143910408, 0.011229675263166428, 0.010720254853367805, 0.010770043358206749, 0.010524394921958447, 0.009438187815248966, 0.007623044773936272, 0.008322332054376602, 0.007743368856608868, 0.006891840603202581, 0.006931234151124954, 0.006411260459572077, 0.006046011578291655, 0.0048908935859799385, 0.004133082926273346, 0.003955146763473749, 0.003926676698029041, 0.003912542946636677, 0.003902632277458906, 0.0038950196467339993, 0.0038888680282980204, 0.0038836849853396416, 0.0038792300038039684, 0.0038753263652324677, 0.0038718590512871742, 0.0038687423802912235, 0.003865910694003105, 0.0038633099757134914, 0.0038609111215919256, 0.003858685027807951, 0.003856601659208536, 0.0038546512369066477, 0.0038528121076524258, 0.0038510742597281933, 0.003849429078400135, 0.0038478607311844826, 0.0038463675882667303, 0.0038449380081146955, 0.003843568731099367, 0.003842254402115941, 0.0038409880362451077, 0.0038397698663175106, 0.0038385922089219093, 0.00383745227009058, 0.0038363502826541662, 0.0038352813571691513, 0.003834244329482317, 0.003833235241472721, 0.0038322543259710073, 0.003831298556178808, 0.003830366302281618, 0.0038294570986181498, 0.003828567685559392, 0.003827699925750494, 0.0038268514908850193, 0.003826020983979106, 0.003825208405032754, 0.0038244116585701704, 0.0038236307445913553, 0.003822864731773734, 0.003822112223133445, 0.003821373451501131, 0.003820648416876793, 0.0038199343252927065, 0.003819233039394021, 0.0038185426965355873, 0.0038178632967174053, 0.0038171932101249695, 0.0038165345322340727, 0.0038158847019076347, 0.003815244184806943, 0.0038146113511174917, 0.0038139885291457176, 0.003813372692093253, 0.0038127664010971785, 0.0038121670950204134, 0.0038115750066936016, 0.0038109903689473867, 0.003810412483289838, 0.003809841815382242, 0.003809277666732669, 0.0038087202701717615, 0.0038081675302237272, 0.0038076217751950026, 0.0038070823065936565, 0.003806547960266471, 0.003806018503382802], "moving_avg_accuracy_train": [0.0448470588235294, 0.10307529411764704, 0.1639865882352941, 0.22584204705882352, 0.2846931364705882, 0.3387273522352941, 0.387666381717647, 0.4348762141341176, 0.48313447507364704, 0.5245292628603999, 0.5644857483390658, 0.5997783499757475, 0.6345487502722904, 0.6667103458332967, 0.6963381347793788, 0.7226690271837939, 0.7473291832889439, 0.769243323783579, 0.790048403169927, 0.808707092264699, 0.8255116771558761, 0.8401934506167591, 0.8545152820256714, 0.8674802244113395, 0.8789110254996174, 0.8890928641261263, 0.8979882835958666, 0.9071306317068681, 0.9145728626538283, 0.9213508705060924, 0.9280416658084243, 0.9338916168746406, 0.9390695140107059, 0.9439037390802236, 0.948661600466319, 0.9527436757138048, 0.956617543436542, 0.9599369655634761, 0.9631738572424225, 0.9663223538711215, 0.9693489420134211, 0.9719411066356085, 0.9744646430308711, 0.9769217081395487, 0.9791542432079468, 0.9811776424165638, 0.983003407586672, 0.9846489491809459, 0.986132289556969, 0.9874672958953897, 0.9886688015999684, 0.9897525096752657, 0.9907278469430333, 0.9916080034252005, 0.992400144259151, 0.9931154239508829, 0.9937591756734416, 0.9943385522237446, 0.9948623440601936, 0.9953337567129977, 0.995760381041698, 0.9961443429375281, 0.9964899086437752, 0.9968009177793976, 0.9970808260014578, 0.9973350963424885, 0.997563939649416, 0.9977698986256509, 0.9979552617042622, 0.9981220884750124, 0.9982722325686877, 0.9984073622529954, 0.9985289789688723, 0.9986384340131615, 0.9987369435530218, 0.9988256021388962, 0.998905394866183, 0.9989795612619177, 0.9990463110180788, 0.9991063857986239, 0.9991604531011145, 0.999209113673356, 0.9992529081883733, 0.999292323251889, 0.9993301497502295, 0.999364193598736, 0.9993948330623917, 0.999422408579682, 0.9994495794864197, 0.9994740333024835, 0.9994960417369411, 0.9995158493279528, 0.9995336761598634, 0.999549720308583, 0.9995641600424306, 0.9995771558028934, 0.99958885198731, 0.9995993785532848, 0.9996088524626623, 0.9996173789811019, 0.9996250528476976, 0.9996319593276337, 0.9996381751595762, 0.9996437694083244, 0.9996511571733744, 0.9996578061619192, 0.9996637902516097, 0.9996691759323311, 0.9996740230449803, 0.9996783854463647, 0.9996823116076106, 0.9996858451527318, 0.999689025343341, 0.9996918875148892, 0.9996944634692827, 0.9996967818282367], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.04395999999999999, 0.10061733333333331, 0.15855559999999996, 0.21516670666666662, 0.26731670266666663, 0.31359836573333333, 0.35542519582666665, 0.3936693429106667, 0.4302757419529334, 0.46140816775764004, 0.49042735098187606, 0.5149179492170218, 0.5396528209619863, 0.5621275388657877, 0.5826614516458756, 0.6004486398146214, 0.6168837758331592, 0.6308353982498434, 0.644711858424859, 0.6566006725823731, 0.6680206053241358, 0.6777785447917222, 0.6874673569792167, 0.6959472879479617, 0.7035525591531655, 0.7106373032378489, 0.7160935729140641, 0.7219375489559909, 0.7265304607270585, 0.731090747987686, 0.7356350065222508, 0.7393915058700257, 0.7424523552830231, 0.7451004530880541, 0.7480704077792487, 0.7507033670013238, 0.7530063636345247, 0.7551857272710722, 0.757667154543965, 0.7597404390895686, 0.7618063951806118, 0.7635190889958838, 0.7651538467629622, 0.766758462086666, 0.768109282544666, 0.7693916876235328, 0.7705591855278462, 0.7715966003083949, 0.7725969402775554, 0.7735105795831332, 0.7743461882914865, 0.7750982361290045, 0.7757617458494374, 0.7763455712644937, 0.7768176808047109, 0.7772292460575732, 0.7775996547851493, 0.7779596893066343, 0.7783370537093042, 0.7786900150050404, 0.7790210135045363, 0.7793455788207494, 0.7796643542720078, 0.779937918844807, 0.7801841269603264, 0.7804457142642938, 0.7806411428378643, 0.7808570285540779, 0.7810513256986702, 0.78121285979547, 0.7813582404825896, 0.7814890831009973, 0.7816068414575643, 0.7816994906451412, 0.7817695415806271, 0.7818592540892311, 0.7819133286803079, 0.7819753291456104, 0.7820177962310494, 0.7820426832746111, 0.78207841494715, 0.7820972401191018, 0.7821408494405249, 0.7821800978298057, 0.7822154213801584, 0.7822472125754759, 0.7822758246512617, 0.7823015755194688, 0.7823247513008552, 0.7823322761707697, 0.7823257152203594, 0.7823198103649902, 0.7823144959951579, 0.7822963797289755, 0.782266741756078, 0.7822400675804702, 0.7822027274890898, 0.7821424547401808, 0.7820882092661627, 0.7820527216728798, 0.7820207828389251, 0.7819920378883659, 0.7819795007661959, 0.781968217356243, 0.7819580622872854, 0.7819489227252234, 0.7819540304527011, 0.781958627407431, 0.7819760980000213, 0.7820184882000192, 0.7820566393800172, 0.7820909754420156, 0.782121877897814, 0.7821496901080326, 0.782161387763896, 0.7821719156541731], "moving_var_accuracy_train": [0.01810132816608996, 0.04680594181868512, 0.07551701939659516, 0.10240019753335972, 0.12333123430458746, 0.13727537913388982, 0.14510309868057233, 0.15065170330363623, 0.15654627071344202, 0.15631339974529063, 0.1550507463570231, 0.15075578129389033, 0.14656102979553776, 0.1412142408772516, 0.1349930696900287, 0.12773360577434179, 0.12043335488908091, 0.11271208538274025, 0.1053365387989164, 0.09793620502764304, 0.09068413118516175, 0.08355570831425577, 0.07704617117697796, 0.07085436163885342, 0.06494489439664604, 0.059383433497327845, 0.05415724653547878, 0.04949376464277551, 0.04504286939170899, 0.040952054966546296, 0.03725975014589103, 0.033841772478596065, 0.03069889079950152, 0.027839329307756146, 0.0252591315817042, 0.022883188468469002, 0.020729931281821486, 0.01875610522295035, 0.016974791910326418, 0.015366529998482132, 0.013912319120681898, 0.012581561065470382, 0.011380719082367282, 0.01029698169466508, 0.009312141440683219, 0.008417774595831788, 0.007605997902356035, 0.006869768376366803, 0.006202594226770385, 0.00559837498140596, 0.005051530026888579, 0.0045569468329319015, 0.004109813694711778, 0.00370580440413851, 0.0033408713476319658, 0.003011388838205407, 0.0027139797009075426, 0.002445602825500156, 0.002203511763941517, 0.00198516065655038, 0.0017882826657558925, 0.0016107812398173489, 0.0014507778567516211, 0.001306570611218425, 0.0011766186876115748, 0.001059538699507368, 0.0009540561528887614, 0.0008590323094989107, 0.0007734383137872302, 0.0006963449629514578, 0.0006269133558961021, 0.0005643863605907218, 0.0005080808401618759, 0.00045738057980617157, 0.00041172985899054585, 0.0003706276161951343, 0.00033362215648957173, 0.00030030944672892096, 0.000270318601825557, 0.00024331922245631916, 0.0002190136096694747, 0.00019713355936414506, 0.00017743746506364101, 0.00015970770048236437, 0.00014374980802991827, 0.00012938525807951662, 0.000116455181262163, 0.00010481650681833111, 9.434150046005454e-05, 8.491273231612989e-05, 7.642581842520234e-05, 6.878676764863733e-05, 6.191095104719732e-05, 5.57221726748508e-05, 5.015183196058802e-05, 4.5138168772639284e-05, 4.062558310194451e-05, 3.656402206907107e-05, 3.290842765679399e-05, 2.9618239204764906e-05, 2.6656945278345173e-05, 2.3991680045696626e-05, 2.15928597702276e-05, 1.9433855453776357e-05, 1.7490961120050616e-05, 1.574226288948359e-05, 1.4168358884500038e-05, 1.2751784046061528e-05, 1.1476817091964686e-05, 1.0329306657680757e-05, 9.296514724591841e-06, 8.366975625602775e-06, 7.530369085553293e-06, 6.777405905231709e-06, 6.099725034577871e-06, 5.489800904214244e-06], "duration": 27149.069179, "accuracy_train": [0.4484705882352941, 0.6271294117647059, 0.7121882352941177, 0.7825411764705882, 0.8143529411764706, 0.8250352941176471, 0.8281176470588235, 0.859764705882353, 0.9174588235294118, 0.8970823529411764, 0.9240941176470588, 0.9174117647058824, 0.9474823529411764, 0.9561647058823529, 0.9629882352941177, 0.9596470588235294, 0.9692705882352941, 0.9664705882352941, 0.9772941176470589, 0.976635294117647, 0.9767529411764706, 0.9723294117647059, 0.9834117647058823, 0.9841647058823529, 0.9817882352941176, 0.9807294117647058, 0.9780470588235294, 0.9894117647058823, 0.9815529411764706, 0.9823529411764705, 0.9882588235294117, 0.9865411764705883, 0.9856705882352941, 0.9874117647058823, 0.9914823529411765, 0.9894823529411765, 0.9914823529411765, 0.9898117647058824, 0.9923058823529411, 0.9946588235294118, 0.9965882352941177, 0.9952705882352941, 0.9971764705882353, 0.999035294117647, 0.9992470588235294, 0.9993882352941177, 0.9994352941176471, 0.9994588235294117, 0.9994823529411765, 0.9994823529411765, 0.9994823529411765, 0.9995058823529411, 0.9995058823529411, 0.9995294117647059, 0.9995294117647059, 0.9995529411764705, 0.9995529411764705, 0.9995529411764705, 0.9995764705882353, 0.9995764705882353, 0.9996, 0.9996, 0.9996, 0.9996, 0.9996, 0.9996235294117647, 0.9996235294117647, 0.9996235294117647, 0.9996235294117647, 0.9996235294117647, 0.9996235294117647, 0.9996235294117647, 0.9996235294117647, 0.9996235294117647, 0.9996235294117647, 0.9996235294117647, 0.9996235294117647, 0.9996470588235294, 0.9996470588235294, 0.9996470588235294, 0.9996470588235294, 0.9996470588235294, 0.9996470588235294, 0.9996470588235294, 0.9996705882352941, 0.9996705882352941, 0.9996705882352941, 0.9996705882352941, 0.9996941176470588, 0.9996941176470588, 0.9996941176470588, 0.9996941176470588, 0.9996941176470588, 0.9996941176470588, 0.9996941176470588, 0.9996941176470588, 0.9996941176470588, 0.9996941176470588, 0.9996941176470588, 0.9996941176470588, 0.9996941176470588, 0.9996941176470588, 0.9996941176470588, 0.9996941176470588, 0.9997176470588235, 0.9997176470588235, 0.9997176470588235, 0.9997176470588235, 0.9997176470588235, 0.9997176470588235, 0.9997176470588235, 0.9997176470588235, 0.9997176470588235, 0.9997176470588235, 0.9997176470588235, 0.9997176470588235], "end": "2016-02-07 13:20:04.057000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0], "moving_var_accuracy_valid": [0.017392334399999997, 0.044543581744, 0.07030080826863999, 0.09211408402399839, 0.1073792743667987, 0.11591927795606695, 0.12007270360136943, 0.12122896631687613, 0.12116632574276347, 0.1177727445968572, 0.1135744870921875, 0.10761514300020665, 0.10235995362234457, 0.09666997476380916, 0.09079775145397055, 0.08456543287512683, 0.07853991285114471, 0.07243775147854974, 0.06692698165359393, 0.061506378606881705, 0.05652947452063099, 0.05173348351244562, 0.04740499289564192, 0.04331167666918985, 0.039501070353213194, 0.03600270570660099, 0.03267037304495715, 0.02971070424426898, 0.02692948736667338, 0.024423704609101014, 0.02216718671885159, 0.020077469633114933, 0.01815404186196486, 0.016401749473633466, 0.014840960204079857, 0.013419256452057866, 0.012125064948284893, 0.010955305086199156, 0.009915191909375145, 0.008962359297700976, 0.008104536939061942, 0.007320483126099592, 0.006612486710102838, 0.00597441115212614, 0.00539339248010129, 0.00486885429716789, 0.004394236329660287, 0.003964498761536366, 0.00357705500586783, 0.003226862136307317, 0.002910460099897869, 0.002624504273457322, 0.00236601605245357, 0.0021324821162456036, 0.001921239891382721, 0.0017306403758607209, 0.0015588111619038293, 0.0014040966694233953, 0.0012649686375126776, 0.0011395930088480002, 0.0010266197480232175, 0.0009249058570212919, 0.0008333298314140877, 0.0007506703864520963, 0.0006761489137322148, 0.0006091498736173655, 0.0005485786172019396, 0.000494140215263931, 0.0004450659561611081, 0.0004007941999248572, 0.000360904999830058, 0.0003249685779641782, 0.0002925965234426325, 0.0002634141259459972, 0.00023711687755345948, 0.00021347762480591366, 0.00019215617887792348, 0.00017297515750941072, 0.00015569387283858075, 0.00014013005983915788, 0.00012612854462704394, 0.00011351887964823063, 0.00010218410763964248, 9.19795608002285e-05, 8.279283449909137e-05, 7.452264717007967e-05, 6.707775031099862e-05, 6.037594324481956e-05, 5.4343182971923465e-05, 4.890937428773619e-05, 4.401882427359515e-05, 3.9617255652088024e-05, 3.5655784269619655e-05, 3.209315963456123e-05, 2.8891749356042392e-05, 2.600897802523735e-05, 2.342062876453225e-05, 2.1111261126428435e-05, 1.9026618156848612e-05, 1.7135290664656892e-05, 1.5430942400220645e-05, 1.389528460984243e-05, 1.2507170763748916e-05, 1.1257599525435516e-05, 1.0132767701721772e-05, 9.12024271590174e-06, 8.20845324423144e-06, 7.387798107743393e-06, 6.651765291418137e-06, 6.002761123779055e-06, 5.415584624218365e-06, 4.884636848178471e-06, 4.404767819329998e-06, 3.971252708732191e-06, 3.5753589542332607e-06, 3.2188205870731077e-06], "accuracy_test": 0.7769, "start": "2016-02-07 05:47:34.988000", "learning_rate_per_epoch": [0.0009565998916514218, 0.000676418305374682, 0.0005522932042367756, 0.0004782999458257109, 0.0004278044798411429, 0.0003905302728526294, 0.000361560785677284, 0.000338209152687341, 0.00031886663055047393, 0.0003025034675374627, 0.0002884257410187274, 0.0002761466021183878, 0.00026531307958066463, 0.000255662074778229, 0.00024699303321540356, 0.00023914997291285545, 0.00023200955183710903, 0.0002254727587569505, 0.0002194590779254213, 0.00021390223992057145, 0.00020874720939900726, 0.00020394778402987868, 0.0001994648773688823, 0.0001952651364263147, 0.0001913199812406674, 0.00018760467355605215, 0.00018409773474559188, 0.000180780392838642, 0.00017763614596333355, 0.00017465045675635338, 0.00017181041766889393, 0.0001691045763436705, 0.00016652267368044704, 0.0001640555274207145, 0.0001616949011804536, 0.00015943331527523696, 0.00015726406127214432, 0.0001551809982629493, 0.00015317858196794987, 0.00015125173376873136, 0.0001493958116043359, 0.00014760656631551683, 0.00014588011254090816, 0.0001442128705093637, 0.00014260149328038096, 0.00014104296860750765, 0.000139534444315359, 0.0001380733010591939, 0.0001366571377729997, 0.0001352836552541703, 0.00013395078713074327, 0.00013265653979033232, 0.00013139910879544914, 0.00013017676246818155, 0.00012898790009785444, 0.0001278310373891145, 0.00012670474825426936, 0.00012560772302094847, 0.00012453869567252696, 0.00012349651660770178, 0.00012248006532900035, 0.00012148830865044147, 0.0001205202643177472, 0.00011957498645642772, 0.00011865161650348455, 0.00011774931044783443, 0.00011686728248605505, 0.00011600477591855451, 0.00011516109952935949, 0.00011433556210249662, 0.00011352752335369587, 0.00011273637937847525, 0.00011196154810022563, 0.00011120248382212594, 0.00011045864084735513, 0.00010972953896271065, 0.00010901467612711713, 0.0001083136085071601, 0.00010762589954538271, 0.00010695111996028572, 0.00010628887685015798, 0.00010563879186520353, 0.00010500047937966883, 0.00010437360469950363, 0.00010375782585470006, 0.00010315282270312309, 0.00010255827510263771, 0.00010197389201493934, 0.00010139938967768103, 0.00010083448432851583, 0.00010027892130892724, 9.973243868444115e-05, 9.919478907249868e-05, 9.866574691841379e-05, 9.814507939154282e-05, 9.763256821315736e-05, 9.712800238048658e-05, 9.66311854426749e-05, 9.614190639695153e-05, 9.56599906203337e-05, 9.518524893792346e-05, 9.471750672673807e-05, 9.425658936379477e-05, 9.380233677802607e-05, 9.335459617432207e-05, 9.291320020565763e-05, 9.247800335288048e-05, 9.204886737279594e-05, 9.162565402220935e-05, 9.120822505792603e-05, 9.079644223675132e-05, 9.0390196419321e-05, 8.998934936244041e-05, 8.959379192674533e-05, 8.920340042095631e-05, 8.881807298166677e-05], "accuracy_train_first": 0.4484705882352941, "accuracy_train_last": 0.9997176470588235, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.5604, 0.3894666666666666, 0.31999999999999995, 0.2753333333333333, 0.2633333333333333, 0.2698666666666667, 0.26813333333333333, 0.26213333333333333, 0.24026666666666663, 0.25839999999999996, 0.24839999999999995, 0.2646666666666667, 0.23773333333333335, 0.23560000000000003, 0.23253333333333337, 0.23946666666666672, 0.23519999999999996, 0.24360000000000004, 0.23040000000000005, 0.23640000000000005, 0.22919999999999996, 0.23440000000000005, 0.22533333333333339, 0.22773333333333334, 0.22799999999999998, 0.22560000000000002, 0.2348, 0.2254666666666667, 0.2321333333333333, 0.22786666666666666, 0.2234666666666667, 0.2268, 0.22999999999999998, 0.23106666666666664, 0.22519999999999996, 0.22560000000000002, 0.22626666666666662, 0.22519999999999996, 0.21999999999999997, 0.22160000000000002, 0.21960000000000002, 0.22106666666666663, 0.2201333333333333, 0.2188, 0.21973333333333334, 0.21906666666666663, 0.2189333333333333, 0.21906666666666663, 0.21840000000000004, 0.21826666666666672, 0.2181333333333333, 0.2181333333333333, 0.21826666666666672, 0.21840000000000004, 0.2189333333333333, 0.21906666666666663, 0.21906666666666663, 0.2188, 0.21826666666666672, 0.2181333333333333, 0.21799999999999997, 0.21773333333333333, 0.2174666666666667, 0.21760000000000002, 0.21760000000000002, 0.21719999999999995, 0.21760000000000002, 0.21719999999999995, 0.21719999999999995, 0.21733333333333338, 0.21733333333333338, 0.21733333333333338, 0.21733333333333338, 0.2174666666666667, 0.21760000000000002, 0.21733333333333338, 0.21760000000000002, 0.2174666666666667, 0.21760000000000002, 0.21773333333333333, 0.21760000000000002, 0.21773333333333333, 0.2174666666666667, 0.2174666666666667, 0.2174666666666667, 0.2174666666666667, 0.2174666666666667, 0.2174666666666667, 0.2174666666666667, 0.21760000000000002, 0.21773333333333333, 0.21773333333333333, 0.21773333333333333, 0.21786666666666665, 0.21799999999999997, 0.21799999999999997, 0.2181333333333333, 0.21840000000000004, 0.21840000000000004, 0.21826666666666672, 0.21826666666666672, 0.21826666666666672, 0.2181333333333333, 0.2181333333333333, 0.2181333333333333, 0.2181333333333333, 0.21799999999999997, 0.21799999999999997, 0.21786666666666665, 0.21760000000000002, 0.21760000000000002, 0.21760000000000002, 0.21760000000000002, 0.21760000000000002, 0.21773333333333333, 0.21773333333333333], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.010144078757162202, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "valid_ratio": 0.15, "learning_rate": 0.0009565999153849942, "optimization": "rmsprop", "nb_data_augmentation": 0, "learning_rate_decay_method": "sqrt", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 7.999052934062449e-07, "rotation_range": [0, 0], "momentum": 0.6371722976162726}, "accuracy_valid_max": 0.7828, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7822666666666667, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.4396, 0.6105333333333334, 0.68, 0.7246666666666667, 0.7366666666666667, 0.7301333333333333, 0.7318666666666667, 0.7378666666666667, 0.7597333333333334, 0.7416, 0.7516, 0.7353333333333333, 0.7622666666666666, 0.7644, 0.7674666666666666, 0.7605333333333333, 0.7648, 0.7564, 0.7696, 0.7636, 0.7708, 0.7656, 0.7746666666666666, 0.7722666666666667, 0.772, 0.7744, 0.7652, 0.7745333333333333, 0.7678666666666667, 0.7721333333333333, 0.7765333333333333, 0.7732, 0.77, 0.7689333333333334, 0.7748, 0.7744, 0.7737333333333334, 0.7748, 0.78, 0.7784, 0.7804, 0.7789333333333334, 0.7798666666666667, 0.7812, 0.7802666666666667, 0.7809333333333334, 0.7810666666666667, 0.7809333333333334, 0.7816, 0.7817333333333333, 0.7818666666666667, 0.7818666666666667, 0.7817333333333333, 0.7816, 0.7810666666666667, 0.7809333333333334, 0.7809333333333334, 0.7812, 0.7817333333333333, 0.7818666666666667, 0.782, 0.7822666666666667, 0.7825333333333333, 0.7824, 0.7824, 0.7828, 0.7824, 0.7828, 0.7828, 0.7826666666666666, 0.7826666666666666, 0.7826666666666666, 0.7826666666666666, 0.7825333333333333, 0.7824, 0.7826666666666666, 0.7824, 0.7825333333333333, 0.7824, 0.7822666666666667, 0.7824, 0.7822666666666667, 0.7825333333333333, 0.7825333333333333, 0.7825333333333333, 0.7825333333333333, 0.7825333333333333, 0.7825333333333333, 0.7825333333333333, 0.7824, 0.7822666666666667, 0.7822666666666667, 0.7822666666666667, 0.7821333333333333, 0.782, 0.782, 0.7818666666666667, 0.7816, 0.7816, 0.7817333333333333, 0.7817333333333333, 0.7817333333333333, 0.7818666666666667, 0.7818666666666667, 0.7818666666666667, 0.7818666666666667, 0.782, 0.782, 0.7821333333333333, 0.7824, 0.7824, 0.7824, 0.7824, 0.7824, 0.7822666666666667, 0.7822666666666667], "seed": 175483403, "model": "residualv5", "loss_std": [0.27922528982162476, 0.11990102380514145, 0.09719998389482498, 0.08766257762908936, 0.08259573578834534, 0.07764659821987152, 0.07025226205587387, 0.07457525283098221, 0.051867444068193436, 0.050866641104221344, 0.041684720665216446, 0.03627338632941246, 0.029408948495984077, 0.02700081840157509, 0.022444764152169228, 0.020548107102513313, 0.018582772463560104, 0.019124547019600868, 0.016014210879802704, 0.015569303184747696, 0.0167269054800272, 0.013917133212089539, 0.014595616608858109, 0.013114596717059612, 0.011458179913461208, 0.010843496769666672, 0.010637318715453148, 0.008428405039012432, 0.008497733622789383, 0.00864690076559782, 0.007658176124095917, 0.007334854453802109, 0.007576528936624527, 0.0075403847731649876, 0.0073455641977488995, 0.004210265818983316, 0.005594198126345873, 0.005538616795092821, 0.004080143291503191, 0.0038439582567662, 0.005215754266828299, 0.0030922694131731987, 0.0016190004535019398, 0.0002973610535264015, 6.050529555068351e-05, 4.40653384430334e-05, 3.8507601857418194e-05, 3.49540714523755e-05, 3.238068529753946e-05, 3.0403718483285047e-05, 2.8804604880861007e-05, 2.746322388702538e-05, 2.6314432034268975e-05, 2.5328039555461146e-05, 2.4470233256579377e-05, 2.3711565518169664e-05, 2.303238943568431e-05, 2.241877155029215e-05, 2.186696838180069e-05, 2.1355310309445485e-05, 2.0888759536319412e-05, 2.0456034690141678e-05, 2.005652459047269e-05, 1.9687460735440254e-05, 1.9340544895385392e-05, 1.9014976714970544e-05, 1.8711272787186317e-05, 1.8425325833959505e-05, 1.815212453948334e-05, 1.7889569789986126e-05, 1.764435728546232e-05, 1.741177766234614e-05, 1.718864768918138e-05, 1.697631523711607e-05, 1.6773388779256493e-05, 1.6578092981944792e-05, 1.6386871720897034e-05, 1.621026785869617e-05, 1.6037258319556713e-05, 1.5870000424911268e-05, 1.5711617379565723e-05, 1.55541692947736e-05, 1.5407809769385494e-05, 1.5265197362168692e-05, 1.5130020983633585e-05, 1.4994654520705808e-05, 1.4870974155201111e-05, 1.474504460929893e-05, 1.4623945389757864e-05, 1.4507664673146792e-05, 1.439294919691747e-05, 1.42847748065833e-05, 1.41794580486021e-05, 1.4074435057409573e-05, 1.3975094589113723e-05, 1.3878076970286202e-05, 1.3781082088826224e-05, 1.3686477359442506e-05, 1.3594498341262806e-05, 1.350587626802735e-05, 1.3418362868833356e-05, 1.3335674339032266e-05, 1.325110497418791e-05, 1.3170325473765843e-05, 1.3093494089844171e-05, 1.301446263823891e-05, 1.2937664905621205e-05, 1.2866923498222604e-05, 1.2793703717761673e-05, 1.2724250154860783e-05, 1.2658068044402171e-05, 1.2589693142217584e-05, 1.2520726158982143e-05, 1.2458794117264915e-05, 1.2394879377097823e-05, 1.2331420293776318e-05]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:44 2016", "state": "available"}], "summary": "b55570bc2d1d381b405effcd47815f16"}