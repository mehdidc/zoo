{"content": {"hp_model": {"f1": 155, "f2": 87, "f3": 210, "nonlin": "rectify", "ds2": 1650, "ds1": 2054, "do2": 0.03304584898169083, "do3": 0.8232043421768575, "do1": 0.8182312289571151, "do4": 0.9992517580660879, "do5": 0.645860606217682}, "accuracy_valid_std": [0.07814166306337363, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547, 0.07133998197957547], "moving_avg_accuracy_train": [0.00997270331325301, 0.018992846385542165, 0.0271109751506024, 0.03441729103915662, 0.04099297533885541, 0.046911091208584325, 0.05223739549134035, 0.05703106934582077, 0.06134537581485315, 0.06522825163698229, 0.06872283987689852, 0.07186796929282312, 0.07469858576715525, 0.07724614059405419, 0.07953893993826322, 0.08160245934805135, 0.08345962681686067, 0.08513107753878905, 0.0866353831885246, 0.08798925827328659, 0.08920774584957238, 0.09030438466822958, 0.09129135960502108, 0.09217963704813342, 0.09297908674693453, 0.09369859147585553, 0.09434614573188443, 0.09492894456231045, 0.09545346350969386, 0.09592553056233892, 0.09635039090971947, 0.09673276522236197, 0.09707690210374023, 0.09738662529698067, 0.09766537617089706, 0.0979162519574218, 0.09814204016529407, 0.09834524955237911, 0.09852813800075565, 0.09869273760429453, 0.09884087724747953, 0.09897420292634602, 0.09909419603732587, 0.09920218983720774, 0.09929938425710143, 0.09938685923500573, 0.09946558671511961, 0.0995364414472221, 0.09960021070611434, 0.09965760303911736, 0.09970925613882008, 0.09975574392855252], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.0008950933023675082, 0.0015378508015318519, 0.001977201853193553, 0.002259921934644256, 0.0024230863572635777, 0.0024959945805650553, 0.002501720778321096, 0.002458362481697149, 0.002380045396306046, 0.002277731378526117, 0.0021598675633725524, 0.0020329073584215256, 0.001901728129202218, 0.0017699656366465008, 0.0016402814324770992, 0.0015145763004205408, 0.0013941603094433192, 0.0012798880061415019, 0.0011722656249177883, 0.0010715358621322633, 0.0009777446836811026, 0.0008907937656002654, 0.0008104814647729303, 0.0007365346496391172, 0.0006686332630634242, 0.000606429120251539, 0.0005495601468568954, 0.0004976610224619193, 0.00045037100135120525, 0.0004073395269358218, 0.00036823013107522667, 0.0003327230090024235, 0.00030051657984030394, 0.000271328277964153, 0.00024489476861512, 0.00022097173969598774, 0.00019933338855971654, 0.00017977169619874022, 0.00016209556023981243, 0.00014612984148119763, 0.00013171436551802468, 0.00011870291059602914, 0.00010696220465656985, 9.63709481382292e-05, 8.68188741217325e-05, 7.82058535553935e-05, 7.044105034497988e-05, 6.344212884803374e-05, 5.7134514628647374e-05, 5.145070808477041e-05, 4.632964966067346e-05, 4.171613472595399e-05], "duration": 35472.876556, "accuracy_train": [0.09972703313253012, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457, 0.10017413403614457], "end": "2016-01-17 15:08:38.235000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0], "accuracy_valid": [0.1016292735042735, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333, 0.09895833333333333], "accuracy_test": 0.1, "start": "2016-01-17 05:17:25.358000", "learning_rate_per_epoch": [0.0011451055761426687, 0.00018909700156655163, 3.1226532883010805e-05, 5.156593488209182e-06, 8.51534025514411e-07, 1.406180700769255e-07, 2.322096470663837e-08, 3.83459397568231e-09, 6.332256385910284e-10, 1.0456771559752553e-10, 1.726778962873876e-11, 2.8515163320863568e-12, 4.708851581228246e-13, 7.775961677943671e-14, 1.2840833980159744e-14, 2.120470962244125e-15, 3.501639497905198e-16, 5.782432541831542e-17, 9.548819962898829e-18, 1.5768443721449095e-18, 2.6039219168165964e-19, 4.299986292609822e-20, 7.100782526651581e-21, 1.1725876891726955e-21, 1.9363526192138965e-22, 3.197595930037989e-23, 5.2803497263322156e-24, 8.719705570296663e-25, 1.439928517898675e-25, 2.3778258324551814e-26, 3.92662256328564e-27, 6.484228159000237e-28, 1.0707729934318253e-28, 1.7682209579193337e-29, 2.9199516654086747e-30, 4.821861840349852e-31, 7.962581266015273e-32, 1.314900780926912e-32, 2.1713614098954213e-33, 3.585677458225419e-34, 5.921208409156681e-35, 9.777987150598337e-36, 1.614687925422895e-36, 2.6664149323547255e-37, 4.4031841369350266e-38, 7.271197601535043e-39, 1.2007292138275417e-39, 1.982823314034973e-40, 3.2742739917413676e-41, 5.407610773829469e-42, 8.926271217749085e-43, 1.471363387541058e-43], "accuracy_train_last": 0.10017413403614457, "error_valid": [0.8983707264957265, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666, 0.9010416666666666], "accuracy_train_std": [0.07524539947866395, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567, 0.07499313024011567], "accuracy_test_std": 0.07331439149307589, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1.0, 1.2], "translation_range": [-3, 3], "momentum": 0.7516187873231488, "shear_range": [1, 1.1], "patience_check_each": 1, "learning_rate": 0.006934360638596168, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "optimization": "adam", "nb_data_augmentation": 0, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 4.4153878982555843e-08, "valid_ratio": 0.15, "rotation_range": [-90, 90], "learning_rate_decay": 0.8348650044931155}, "accuracy_valid_max": 0.1016292735042735, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.98, interval=[0.8, 1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256, 512],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1.0, 1.2)),\n        rotation_range=make_constant_param((-90, 90)),\n        shear_range=make_constant_param((1, 1.1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    instantiate = instantiate_random\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.09895833333333333, "loss_train": [18.09856414794922, 2.3156607151031494, 2.324000358581543, 2.314575433731079, 2.3144326210021973, 2.3143575191497803, 2.314321279525757, 2.314307689666748, 2.3143038749694824, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033, 2.3143036365509033], "accuracy_train_first": 0.09972703313253012, "model": "vgg", "loss_std": [733.9085693359375, 0.004888306371867657, 0.4698629081249237, 0.001811697380617261, 0.0018022196600213647, 0.0018005804158747196, 0.0018000118434429169, 0.0017997875111177564, 0.0017997199902310967, 0.0017997027607634664, 0.0017997047398239374, 0.0017997040413320065, 0.0017997040413320065, 0.0017997012473642826, 0.0017997033428400755, 0.0017997046234086156, 0.0017997055547311902, 0.00179970299359411, 0.0017996991518884897, 0.001799704972654581, 0.0017997035756707191, 0.00179970299359411, 0.0017997061368077993, 0.0017997028771787882, 0.0017997032264247537, 0.0017997018294408917, 0.0017997059039771557, 0.0017997035756707191, 0.0017997061368077993, 0.0017997046234086156, 0.0017997067188844085, 0.0017997057875618339, 0.001799702295102179, 0.0017997028771787882, 0.0017997040413320065, 0.0017997047398239374, 0.0017997032264247537, 0.00179970427416265, 0.0017997052054852247, 0.0017997040413320065, 0.0017997025279328227, 0.0017997024115175009, 0.0017997039249166846, 0.00179970427416265, 0.0017997040413320065, 0.0017997027607634664, 0.0017997047398239374, 0.001799705671146512, 0.0017997035756707191, 0.00179970427416265, 0.001799704390577972, 0.0017997046234086156]}, "state": "available", "life": [{"dt": "Sun May 15 22:04:58 2016", "state": "available"}], "summary": "b64ef80656fc6bd5b0be5829bffcefcb"}