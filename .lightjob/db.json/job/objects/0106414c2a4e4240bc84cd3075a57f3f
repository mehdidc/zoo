{"content": {"hp_model": {"f0": 64, "f1": 16, "f2": 32, "f3": 32, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.6380438804626465, 1.3447239398956299, 1.2108116149902344, 1.1143229007720947, 1.0357576608657837, 0.9708770513534546, 0.9150651693344116, 0.8724126815795898, 0.8316639065742493, 0.7957428097724915, 0.7651669383049011, 0.7382729053497314, 0.7119308710098267, 0.6924463510513306, 0.6730368137359619, 0.6537569761276245, 0.6373246312141418, 0.617906391620636, 0.6033940315246582, 0.5881635546684265, 0.5749346613883972, 0.5596485733985901, 0.5484415888786316, 0.5363500118255615, 0.5236185789108276, 0.5135586261749268, 0.5043395757675171, 0.4948071241378784, 0.4852313697338104, 0.4728056490421295, 0.465648889541626, 0.4555042088031769, 0.44841763377189636, 0.4436202347278595, 0.4344903230667114, 0.42605897784233093, 0.41787007451057434, 0.4146418273448944, 0.40794143080711365, 0.3982473909854889, 0.3922423720359802, 0.3898298144340515, 0.38077691197395325, 0.376308798789978, 0.3713340163230896, 0.36587122082710266, 0.3613497316837311, 0.3570401668548584, 0.3500978946685791, 0.3459125757217407, 0.3394874930381775, 0.3379858732223511, 0.33305227756500244, 0.3271825313568115, 0.32570889592170715, 0.321900874376297, 0.31732919812202454, 0.3136419355869293, 0.3100210428237915, 0.3061608374118805, 0.3036045730113983, 0.3003149628639221, 0.295691579580307, 0.29258331656455994, 0.28773033618927, 0.28780391812324524, 0.28472810983657837, 0.2797359526157379, 0.2759333550930023, 0.2732374668121338, 0.27064356207847595, 0.2688803970813751, 0.26804888248443604, 0.26405778527259827, 0.25981277227401733, 0.2585713863372803, 0.25451913475990295, 0.253129780292511, 0.2535785436630249, 0.24912910163402557, 0.24721553921699524, 0.24556109309196472, 0.2421894073486328, 0.24120615422725677, 0.2384701669216156, 0.2367394119501114, 0.23574060201644897, 0.23106306791305542, 0.22900904715061188, 0.19849921762943268, 0.1836763322353363, 0.1807706207036972, 0.17609554529190063, 0.17701780796051025, 0.17284342646598816, 0.17242954671382904, 0.1714143455028534, 0.16924038529396057, 0.1683654487133026, 0.1670708805322647, 0.16645878553390503, 0.16654066741466522, 0.16572491824626923, 0.16533853113651276, 0.1636618822813034, 0.16217352449893951, 0.1612485945224762, 0.16188780963420868, 0.16223978996276855, 0.16022081673145294, 0.15654446184635162, 0.15633825957775116, 0.1581646203994751, 0.15593481063842773, 0.1584572196006775, 0.15967895090579987, 0.15645046532154083, 0.15831270813941956, 0.15657591819763184, 0.156105637550354, 0.15701058506965637, 0.15770679712295532, 0.1586769074201584, 0.15582458674907684, 0.15712499618530273, 0.15654027462005615, 0.15848208963871002, 0.15759402513504028, 0.15732671320438385, 0.15757575631141663, 0.15657930076122284, 0.1560155600309372, 0.15782926976680756, 0.15961602330207825, 0.15747210383415222, 0.1573188602924347, 0.15543270111083984, 0.15760372579097748, 0.15842093527317047, 0.1550312489271164, 0.15765589475631714, 0.15731181204319, 0.15789225697517395, 0.15804742276668549, 0.15961620211601257, 0.1573084145784378, 0.1581200659275055, 0.1573532521724701, 0.15768684446811676, 0.15672847628593445, 0.15721431374549866, 0.15790414810180664, 0.1552818864583969, 0.15589888393878937, 0.15869250893592834, 0.15692797303199768, 0.15610043704509735, 0.15762200951576233, 0.15696601569652557, 0.15744569897651672, 0.1578993797302246, 0.15634797513484955, 0.1576801985502243, 0.15595345199108124, 0.15628337860107422, 0.15652090311050415, 0.15680304169654846, 0.15709558129310608, 0.1571720540523529, 0.1571560651063919, 0.15883052349090576, 0.1574123203754425, 0.1586424559354782, 0.15813200175762177, 0.15639883279800415, 0.15882733464241028, 0.15753857791423798, 0.15743423998355865, 0.1578882783651352, 0.15790824592113495, 0.158716082572937, 0.15777355432510376, 0.15621933341026306, 0.15766601264476776, 0.15802927315235138, 0.1572216898202896, 0.15634001791477203, 0.15792718529701233, 0.15799178183078766, 0.15649238228797913, 0.15860143303871155, 0.15740258991718292, 0.15694290399551392, 0.15598249435424805, 0.15733341872692108, 0.15697583556175232, 0.15719051659107208], "moving_avg_accuracy_train": [0.051119999999999985, 0.10412094117647056, 0.1569559058823529, 0.20551913882352937, 0.25297663670588233, 0.2974554436235294, 0.33772166396705877, 0.37609537992329406, 0.4116834889897882, 0.44700455185551524, 0.47858880255231667, 0.5091158046500261, 0.5371030477144353, 0.5639245076488741, 0.5887649980604572, 0.6115849688426468, 0.6335582366642645, 0.6534282953507792, 0.6718313481686424, 0.6887729192341311, 0.7041050390754239, 0.718696888109058, 0.7322154345922698, 0.7447115381918663, 0.7556733255491503, 0.7673130518177648, 0.7770076289889294, 0.7856668660900364, 0.794796650069268, 0.803486396827047, 0.8105918747914012, 0.8175585696652022, 0.8238897715222114, 0.8306960884876373, 0.8365276561094619, 0.8421713610867511, 0.846354224978076, 0.8514788024802684, 0.8558297457616534, 0.8600938300090174, 0.8635785646551745, 0.8674277670131865, 0.8710896961942208, 0.8743736677512693, 0.8776610068584954, 0.8787466708785281, 0.8816484743789106, 0.8840530387057255, 0.8865277348351529, 0.8895761378222258, 0.8914655828635326, 0.8943637304595323, 0.896096769178285, 0.8970917981428094, 0.8992249712697049, 0.9007895329662639, 0.9031317561402257, 0.9044726981732619, 0.9060866048265239, 0.9076450031674009, 0.9084428557918373, 0.9087938643303006, 0.9098744778972705, 0.9117529124604846, 0.913387032979142, 0.9145683296812278, 0.9162879673013403, 0.9175438764535592, 0.9187424299846738, 0.9197223046332652, 0.9205806624052328, 0.921249654988239, 0.9224423365482386, 0.9238757499522383, 0.924770527898191, 0.9254134751083719, 0.9264980099504758, 0.9263517383671929, 0.9268695057069442, 0.9278931433715438, 0.9285650055049777, 0.9296355637780093, 0.9303567132825612, 0.9308269243072462, 0.9319536436412275, 0.9320759263359283, 0.9328636278199826, 0.9339537356262196, 0.9344313032400683, 0.9382493493866496, 0.9418714732715141, 0.9451337377090686, 0.948076834526397, 0.9508315040149338, 0.9532660006722639, 0.9555464594285669, 0.9576765193680631, 0.9595865144900804, 0.9613737453940134, 0.9629234296781415, 0.9643228514162098, 0.9656082133334123, 0.9667626861177181, 0.9678722998588875, 0.9689109522259398, 0.9697822099445222, 0.9705804595383053, 0.9712330018197689, 0.9719614663436743, 0.9727512020622481, 0.9734807877383762, 0.9741491795527739, 0.974701320421026, 0.9752170707318646, 0.975664775423384, 0.9761359449398692, 0.9764894092694117, 0.9768451742248234, 0.9771747744493999, 0.9774431793574011, 0.977698861421661, 0.9779360341030243, 0.9780977248103689, 0.9782997170352145, 0.9784885688611047, 0.9786255943279354, 0.9787747996010242, 0.9788926137585688, 0.9789633523827119, 0.9790764289091467, 0.9791429036652908, 0.979275672122291, 0.9793410460865326, 0.9794092944190558, 0.9794542473300913, 0.9794899990676704, 0.9795080579844329, 0.9795548992448131, 0.9796135269673906, 0.9796757036824163, 0.9797175450788805, 0.9797269670415807, 0.9797707409256579, 0.9797889609507392, 0.9798030060321359, 0.9798085877818634, 0.9798677290036771, 0.9799044855150741, 0.9799258016694491, 0.9799755744436807, 0.9800109581757832, 0.9799792741229107, 0.9799625231812079, 0.9799780355689695, 0.979987290835602, 0.9799344441049829, 0.979943352635661, 0.9799490173720949, 0.9799258803407678, 0.9799121158361028, 0.9798856101348455, 0.9798735197095962, 0.9799214618562836, 0.9799575509647729, 0.9799570899859427, 0.979959028046172, 0.9799254781827311, 0.9799399891879874, 0.9799459902691887, 0.9799655088893287, 0.979950134470984, 0.9799457092591797, 0.9799840795097323, 0.979990377441112, 0.979967810285236, 0.9799286763155359, 0.9799805145663353, 0.9799683454626429, 0.979938569739908, 0.9799611833541525, 0.9800309473716784, 0.9799902055756871, 0.9799770673710595, 0.9799723018104242, 0.9799656598646758, 0.9799855644664435, 0.9800081844903873, 0.9800003072178192, 0.9800143941430961, 0.9800294253170218, 0.9800594239617901, 0.9800534815656111, 0.9800646039972852, 0.9800604965387332, 0.9800756233554481, 0.9800986492551974, 0.9801029019767364], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05051999999999999, 0.10137466666666664, 0.1524105333333333, 0.19942281333333328, 0.24568053199999995, 0.2886591454666666, 0.3276998975866666, 0.36472990782799997, 0.39892358371186665, 0.43245789200734663, 0.462092102806612, 0.49088289252595074, 0.5162612699400223, 0.5407684762793534, 0.5634249619847513, 0.5839757991196095, 0.6036182192076486, 0.6210430639535504, 0.6373787575581953, 0.6518275484690425, 0.6655647936221382, 0.6781683142599244, 0.689791482833932, 0.7005323345505389, 0.709879101095485, 0.7198245243192698, 0.7277087385540095, 0.7349378646986086, 0.7422040782287477, 0.7489836704058729, 0.7546586366986189, 0.759992773028757, 0.7646334957258814, 0.7698368128199599, 0.7741464648712972, 0.7780918183841675, 0.7811626365457507, 0.7844330395578423, 0.7876564022687247, 0.7909174287085189, 0.7929590191710003, 0.7955831172539003, 0.7984381388618437, 0.800820991642326, 0.8030722258114267, 0.8034716698969506, 0.805537836240589, 0.8068107192831967, 0.807929647354877, 0.8097100159527226, 0.8105390143574503, 0.8124851129217053, 0.8136099349628682, 0.813915608133248, 0.8156573806532565, 0.8164116425879309, 0.8176904783291378, 0.8184280971628907, 0.8192652874466015, 0.8202587587019414, 0.8206195494984139, 0.8203842612152391, 0.8205991684270485, 0.8215659182510103, 0.8227293264259092, 0.8231630604499849, 0.8245800877383197, 0.8252954122978211, 0.8260725377347057, 0.8265186172945684, 0.8269067555651116, 0.8268960800086005, 0.8278598053410738, 0.8291004914736332, 0.8295504423262698, 0.8303287314269762, 0.8310958582842786, 0.830479605789184, 0.8308716452102656, 0.8310911473559057, 0.8313553659536485, 0.8324064960249502, 0.8328858464224552, 0.8327439284468763, 0.8332562022688553, 0.8334372487086364, 0.8341068571711061, 0.8346695047873288, 0.8348825543085959, 0.8378076322110697, 0.8404535356566294, 0.8427948487576331, 0.8445953638818697, 0.8463891608270161, 0.8480702447443145, 0.8496765536032164, 0.8508955649095614, 0.8522593417519385, 0.8534334075767447, 0.8544767334857368, 0.8552690601371632, 0.8557288207901136, 0.8564759387111022, 0.8571750115066586, 0.8578975103559927, 0.8584544259870601, 0.8589823167216875, 0.8592307517161855, 0.8596810098779002, 0.8602062422234436, 0.8607322846677659, 0.8612190562009893, 0.8615904839142237, 0.8619114355228014, 0.8621336253038546, 0.8624402627734691, 0.8626362364961222, 0.8627992795131767, 0.863039351561859, 0.8631887497390064, 0.863323208098439, 0.8634708872885951, 0.8635771318930688, 0.8637660853704286, 0.8639228101667191, 0.8640238624833806, 0.8642081429017092, 0.864213995278205, 0.8642192624170512, 0.8643706695086794, 0.8644936025578114, 0.8645775756353636, 0.8646264847384939, 0.8646571695979779, 0.8647114526381801, 0.8647203073743621, 0.8647682766369259, 0.8648781156398999, 0.8648703040759099, 0.8649032736683189, 0.8649062796348204, 0.8650156516713383, 0.8650474198375379, 0.865062677853784, 0.8650897434017389, 0.8649541023948983, 0.8650853588220752, 0.8650968229398676, 0.8650404739792141, 0.8650564265812927, 0.8651241172564967, 0.8650250388641805, 0.8650025349777625, 0.8650222814799862, 0.8649733866653209, 0.864929381332122, 0.8649297765322431, 0.8649167988790188, 0.8649584523244503, 0.8649159404253386, 0.8649443463828047, 0.8649299117445243, 0.8649302539034052, 0.8647972285130646, 0.8649175056617582, 0.8648524217622491, 0.8649271795860242, 0.8649144616274218, 0.8649696821313463, 0.8649393805848784, 0.8648321091930572, 0.8649355649404182, 0.8649353417797098, 0.8650284742684053, 0.8649256268415648, 0.8650463974907416, 0.8649817577416674, 0.8650035819675006, 0.8650365571040839, 0.8649862347270088, 0.8649676112543079, 0.8649375167955438, 0.8649370984493228, 0.8649500552710572, 0.8649750497439515, 0.8649175447695563, 0.8649724569592674, 0.8649685445966739, 0.8650316901370065, 0.8650218544566393, 0.8649730023443086, 0.8649557021098778, 0.8649934652322234, 0.8649607853756678, 0.8649713735047676, 0.8649809028209575, 0.8650028125388617], "moving_var_accuracy_train": [0.023519289599999993, 0.046449258530325256, 0.06692813413653924, 0.08146080906617603, 0.09358465510684025, 0.10203146797951218, 0.10642063768834392, 0.10903145260611798, 0.10952692890786431, 0.10980243335475967, 0.10780027404798931, 0.10540732735685243, 0.10191616659028405, 0.09819906634838801, 0.09393260938854082, 0.08922610804818662, 0.08464891773221281, 0.07973739904884138, 0.07481171032111082, 0.06991369076050277, 0.06503798677390236, 0.060450486620495444, 0.056050197849614736, 0.05185055151119991, 0.04774694339867671, 0.04419159810728348, 0.040618301735304146, 0.03723131304633243, 0.03425835834126611, 0.03151212779556849, 0.028815305369928938, 0.026370588370117857, 0.02409428658569384, 0.022101791482829057, 0.020197676962897357, 0.01846457191944372, 0.016775581880499494, 0.015334375343633333, 0.013971314176210456, 0.012737824488806978, 0.011573332419913427, 0.010549346407058409, 0.009615099294294762, 0.00875064958755282, 0.007972844014450616, 0.007186167610285099, 0.006543335021250077, 0.005941038885541184, 0.005402052085384094, 0.0049454817237900425, 0.004483063574488109, 0.004110350552433086, 0.0037263463059960403, 0.0033626224191586197, 0.0030673140255465412, 0.0027826133027129413, 0.002553726057011443, 0.002314536581133969, 0.002106525175189564, 0.001917730106170242, 0.001731686214846098, 0.001559626456308156, 0.0014141733418074158, 0.0013045126553011713, 0.001198094538596529, 0.0010908442418221052, 0.0010083741995404506, 0.0009217325497740505, 0.0008424880698991726, 0.0007668806518518251, 0.0006968235892489172, 0.0006311691900090803, 0.0005808546747402407, 0.0005412612731471099, 0.0004943407939854679, 0.00044862714462263575, 0.00041435037257401, 0.00037310789370129376, 0.00033820985149418263, 0.00031381937296024847, 0.00028650002420130423, 0.0002681648769247823, 0.0002460288987035446, 0.00022341589450280844, 0.00021249977317063225, 0.00019138437337037857, 0.00017783019868517177, 0.00017074219407962492, 0.00015572061210383608, 0.00027134583829027925, 0.0003622892873970008, 0.00042184168200209407, 0.0004576138836874032, 0.00048014633123834153, 0.0004854726638854728, 0.0004837298267497179, 0.0004761912421873672, 0.00046140485026379644, 0.0004440121139731798, 0.00042122459500012365, 0.00039672756630891175, 0.00037192420700177226, 0.00034672705298892067, 0.00032313553158135554, 0.0003005311670794726, 0.0002773098604812314, 0.00025531369615888186, 0.00023361462940487296, 0.00021502911152768497, 0.00019913934292163722, 0.00018401606595877556, 0.0001696351879208823, 0.00015541540497434085, 0.0001422678499250776, 0.00012984502034984633, 0.00011885852473424513, 0.00010809710555115087, 9.842651332752804e-05, 8.9561588767143e-05, 8.125380064218081e-05, 7.371678043982053e-05, 6.685136032290406e-05, 6.0401519254188116e-05, 5.4728575058851464e-05, 4.957670266224532e-05, 4.4788016203062355e-05, 4.0509574504413695e-05, 3.65835386354339e-05, 3.297022034840146e-05, 2.9788275021036116e-05, 2.684921755777233e-05, 2.4322942970563347e-05, 2.1929112470312834e-05, 1.977812173731135e-05, 1.7818496441475386e-05, 1.6048150477987177e-05, 1.4446270550460128e-05, 1.3021390428480208e-05, 1.1750186274323817e-05, 1.0609961141913862e-05, 9.564721349845183e-06, 8.609048175290778e-06, 7.765388734106561e-06, 6.991837584521564e-06, 6.29442920487236e-06, 5.665266687755318e-06, 5.130219176038299e-06, 4.629356628605166e-06, 4.170510371680675e-06, 3.77575529600496e-06, 3.4094478428819913e-06, 3.0775379714516028e-06, 2.772309520737829e-06, 2.4972442762306323e-06, 2.2482907882515114e-06, 2.048596701860436e-06, 1.8444512889439905e-06, 1.660294963199381e-06, 1.499083366847138e-06, 1.3508801844604841e-06, 1.2221151358067274e-06, 1.1012192276704248e-06, 1.0117833497643772e-06, 9.223268285519052e-07, 8.30096058210052e-07, 7.471202570861171e-07, 6.82538571409526e-07, 6.161798377305092e-07, 5.548859707377147e-07, 5.028261624534512e-07, 4.546709008630261e-07, 4.093800532723381e-07, 3.8169253309234216e-07, 3.438802552400798e-07, 3.14075718435015e-07, 2.9645135485189145e-07, 2.9099105758013097e-07, 2.6322473558419383e-07, 2.4488160500523536e-07, 2.2499582444750056e-07, 2.4629940527497806e-07, 2.3660851021290517e-07, 2.1450117097912726e-07, 1.9325544899473792e-07, 1.7432694308517345e-07, 1.6045998732043908e-07, 1.4901897793739475e-07, 1.3467554295166964e-07, 1.2299396183031528e-07, 1.1272799135354162e-07, 1.09554460409662e-07, 9.891682301983115e-08, 9.01385170949704e-08, 8.127650632728456e-08, 7.520824094989655e-08, 7.245914538829242e-08, 6.537600161386378e-08], "duration": 156246.78701, "accuracy_train": [0.5112, 0.5811294117647059, 0.6324705882352941, 0.6425882352941177, 0.6800941176470588, 0.697764705882353, 0.7001176470588235, 0.7214588235294118, 0.7319764705882353, 0.7648941176470588, 0.7628470588235294, 0.7838588235294117, 0.7889882352941177, 0.8053176470588236, 0.8123294117647059, 0.8169647058823529, 0.8313176470588235, 0.8322588235294117, 0.8374588235294118, 0.8412470588235295, 0.8420941176470588, 0.8500235294117647, 0.8538823529411764, 0.8571764705882353, 0.8543294117647059, 0.8720705882352942, 0.8642588235294117, 0.8636, 0.876964705882353, 0.8816941176470589, 0.8745411764705883, 0.8802588235294118, 0.8808705882352941, 0.8919529411764706, 0.8890117647058824, 0.892964705882353, 0.884, 0.8976, 0.8949882352941176, 0.8984705882352941, 0.8949411764705882, 0.9020705882352941, 0.9040470588235294, 0.9039294117647059, 0.9072470588235294, 0.8885176470588235, 0.9077647058823529, 0.9056941176470589, 0.9088, 0.9170117647058823, 0.9084705882352941, 0.9204470588235294, 0.9116941176470589, 0.9060470588235294, 0.9184235294117647, 0.9148705882352941, 0.9242117647058824, 0.9165411764705882, 0.9206117647058824, 0.9216705882352941, 0.9156235294117647, 0.9119529411764706, 0.9196, 0.9286588235294118, 0.9280941176470588, 0.9252, 0.9317647058823529, 0.9288470588235294, 0.9295294117647059, 0.9285411764705882, 0.9283058823529412, 0.9272705882352941, 0.9331764705882353, 0.9367764705882353, 0.9328235294117647, 0.9312, 0.9362588235294118, 0.9250352941176471, 0.9315294117647058, 0.9371058823529411, 0.9346117647058824, 0.9392705882352941, 0.9368470588235294, 0.9350588235294117, 0.9420941176470589, 0.9331764705882353, 0.9399529411764705, 0.943764705882353, 0.9387294117647059, 0.9726117647058824, 0.9744705882352941, 0.9744941176470588, 0.9745647058823529, 0.9756235294117647, 0.9751764705882353, 0.9760705882352941, 0.9768470588235294, 0.9767764705882352, 0.9774588235294117, 0.9768705882352942, 0.9769176470588236, 0.9771764705882353, 0.9771529411764706, 0.9778588235294118, 0.9782588235294117, 0.9776235294117647, 0.977764705882353, 0.9771058823529412, 0.9785176470588235, 0.9798588235294118, 0.9800470588235294, 0.9801647058823529, 0.9796705882352941, 0.9798588235294118, 0.9796941176470588, 0.9803764705882353, 0.9796705882352941, 0.9800470588235294, 0.9801411764705882, 0.9798588235294118, 0.98, 0.9800705882352941, 0.9795529411764706, 0.9801176470588235, 0.9801882352941177, 0.9798588235294118, 0.9801176470588235, 0.9799529411764706, 0.9796, 0.9800941176470588, 0.9797411764705882, 0.9804705882352941, 0.9799294117647059, 0.9800235294117647, 0.9798588235294118, 0.9798117647058824, 0.9796705882352941, 0.9799764705882353, 0.9801411764705882, 0.9802352941176471, 0.9800941176470588, 0.9798117647058824, 0.9801647058823529, 0.9799529411764706, 0.9799294117647059, 0.9798588235294118, 0.9804, 0.9802352941176471, 0.9801176470588235, 0.9804235294117647, 0.9803294117647059, 0.9796941176470588, 0.9798117647058824, 0.9801176470588235, 0.9800705882352941, 0.9794588235294117, 0.9800235294117647, 0.98, 0.9797176470588236, 0.9797882352941176, 0.9796470588235294, 0.979764705882353, 0.9803529411764705, 0.9802823529411765, 0.9799529411764706, 0.9799764705882353, 0.9796235294117647, 0.9800705882352941, 0.98, 0.9801411764705882, 0.9798117647058824, 0.9799058823529412, 0.9803294117647059, 0.9800470588235294, 0.979764705882353, 0.9795764705882353, 0.9804470588235294, 0.9798588235294118, 0.9796705882352941, 0.9801647058823529, 0.9806588235294118, 0.9796235294117647, 0.9798588235294118, 0.9799294117647059, 0.9799058823529412, 0.9801647058823529, 0.9802117647058823, 0.9799294117647059, 0.9801411764705882, 0.9801647058823529, 0.9803294117647059, 0.98, 0.9801647058823529, 0.9800235294117647, 0.9802117647058823, 0.9803058823529411, 0.9801411764705882], "end": "2016-02-07 10:31:49.413000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0], "moving_var_accuracy_valid": [0.022970433599999993, 0.043949164336, 0.06299618508016, 0.0765879568093296, 0.08818714995459698, 0.09599288589879156, 0.10011122024376996, 0.10244109314565222, 0.10271985106514532, 0.10256881445433748, 0.10021561105616139, 0.09765423610451392, 0.09368537085560205, 0.0897222622330688, 0.08536988311043206, 0.08063392696188006, 0.07604295626792705, 0.0711712875709034, 0.0664558527837166, 0.06168917553441335, 0.05721866512053829, 0.05292643720068838, 0.04884967590991772, 0.04500300137930916, 0.04128895964498976, 0.03805026666839258, 0.03480468750844677, 0.03179456114093282, 0.029090285758429733, 0.02659492301338, 0.024225277893856235, 0.022058827197967108, 0.020046771242534837, 0.018285764697315125, 0.01662434613481598, 0.015102003850408042, 0.013676672783000823, 0.01240526532745422, 0.011258249399201966, 0.010228133100251101, 0.009242832614774448, 0.008380522370035117, 0.007615830468468014, 0.006905349307982283, 0.006260426874741195, 0.005635820187464217, 0.005110659558954046, 0.004614175684220068, 0.004164026116064409, 0.0037761509155557218, 0.00340472096919552, 0.0030983345688721247, 0.0027998881336034833, 0.0025207402450269454, 0.0022959701641273632, 0.002071493347309515, 0.001879062800255458, 0.0016960532541250748, 0.0015327559168528274, 0.0013883631913842237, 0.0012506984022351748, 0.001126126807197451, 0.0010139297924648954, 0.0009209482602175777, 0.0008410351014286159, 0.0007586247181185228, 0.0007008339433296412, 0.0006353557520255093, 0.0005772554923248355, 0.0005213208258558982, 0.00047054460512385054, 0.0004234911703190269, 0.0003895009519351809, 0.000364404575457387, 0.0003297862198397446, 0.0003022592031742749, 0.00027732963539359905, 0.0002530145760936312, 0.0002290963726534061, 0.00020662036611553096, 0.00018658663271051623, 0.0001778718392806194, 0.00016215264658485113, 0.00014611864833249762, 0.00013386860371741293, 0.00012077674366588844, 0.00011273444873639874, 0.00010431015492312887, 9.428765031742532e-05, 0.00016186361190554418, 0.00020868449610401165, 0.00023715176982599574, 0.00024261328525684183, 0.0002473113240549055, 0.0002480145798824086, 0.00024643517524584776, 0.00023516555480623612, 0.00022838798480785146, 0.00021795506137586593, 0.00020595631580964897, 0.0001910107179317281, 0.00017381206486056724, 0.00016145452506527203, 0.00014970739752012886, 0.0001394346990537183, 0.0001282826243294913, 0.00011796237954589055, 0.00010672162110972214, 9.787405070846699e-05, 9.056946678886465e-05, 8.400300598903556e-05, 7.773522412014211e-05, 7.120332862355478e-05, 6.501008517663642e-05, 5.895339134821296e-05, 5.390429105333613e-05, 4.885951324773709e-05, 4.421280915165531e-05, 4.031023953351656e-05, 3.6480093918179714e-05, 3.2994795980153754e-05, 2.9891598670984838e-05, 2.7004030047704563e-05, 2.4624957792391307e-05, 2.2383525969102763e-05, 2.0237077508516244e-05, 1.851900321087892e-05, 1.666741114258686e-05, 1.5000919713092795e-05, 1.3707144708341365e-05, 1.2472443048627401e-05, 1.1288662043546931e-05, 1.0181324742513333e-05, 9.171666313675942e-06, 8.281019518390702e-06, 7.453623223727307e-06, 6.728970352712796e-06, 6.164654776610578e-06, 5.548738483737247e-06, 5.0036475815760675e-06, 4.503364145929931e-06, 4.160687912685718e-06, 3.753702068870255e-06, 3.3804271255211572e-06, 3.0489773079439465e-06, 2.9096659217800307e-06, 2.7737535766790652e-06, 2.4975610529819985e-06, 2.276381795984283e-06, 2.051033986003554e-06, 1.8871688349894428e-06, 1.7868007019064268e-06, 1.6126784558510321e-06, 1.4549199294165829e-06, 1.3309442625852914e-06, 1.2152780604761556e-06, 1.0937516600767617e-06, 9.858922694179802e-07, 9.029181281229727e-07, 8.28891669405421e-07, 7.532645882409918e-07, 6.79813358457485e-07, 6.118330762660346e-07, 7.099115589166398e-07, 7.691197355055985e-07, 7.303309877329025e-07, 7.075964788999074e-07, 6.382925492490321e-07, 6.019070308072024e-07, 5.499799811916334e-07, 5.985463466017314e-07, 6.350195368996591e-07, 5.715180314160095e-07, 5.924291723302956e-07, 6.283845939667409e-07, 6.968160818934486e-07, 6.64739148147444e-07, 6.025519048316896e-07, 5.520829510426869e-07, 5.19665730648767e-07, 4.70820661202852e-07, 4.3188968311731375e-07, 3.887022899276283e-07, 3.513429739999758e-07, 3.218311896773442e-07, 3.1940946943129145e-07, 3.1460665969791315e-07, 2.832837529576822e-07, 2.908416110369899e-07, 2.626281154078842e-07, 2.5784406377953756e-07, 2.3475334040384964e-07, 2.2411248704702505e-07, 2.113129955628179e-07, 1.9119067230705962e-07, 1.7288887587977816e-07, 1.5992030993959435e-07], "accuracy_test": 0.8615, "start": "2016-02-05 15:07:42.626000", "learning_rate_per_epoch": [0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 0.0001277829142054543, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.2778291420545429e-05, 1.277829142054543e-06, 1.2778291136328335e-07, 1.2778291313964019e-08, 1.2778291758053228e-09, 1.277829231316474e-10, 1.277829231316474e-11, 1.2778291879483872e-12, 1.2778291608433329e-13, 1.2778291608433329e-14, 1.2778291396675092e-15, 1.2778291396675092e-16, 1.2778291065802847e-17, 1.2778291272598e-18, 1.2778291272598e-19, 1.2778290949480573e-20, 1.277829054558379e-21, 1.277829079801928e-22, 1.277829079801928e-23, 1.2778290403588827e-24, 1.277829065010786e-25, 1.2778290958256651e-26, 1.277829095825665e-27, 1.2778291198997894e-28, 1.277829089807134e-29, 1.2778291274229532e-30, 1.2778291274229532e-31, 1.2778290686482357e-32, 1.2778290319140372e-33, 1.2778290548729113e-34, 1.2778290835715038e-35, 1.2778290476982631e-36, 1.2778290476982631e-37, 1.2778290757242324e-38, 1.2778286553346931e-39, 1.2778300566331574e-40, 1.2778440696178007e-41, 1.2779841994642332e-42, 1.2751816025355835e-43, 1.2611686178923354e-44, 1.401298464324817e-45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_train_first": 0.5112, "accuracy_train_last": 0.9801411764705882, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.4948, 0.4409333333333333, 0.38826666666666665, 0.3774666666666666, 0.33799999999999997, 0.32453333333333334, 0.3209333333333333, 0.30200000000000005, 0.29333333333333333, 0.2657333333333334, 0.2712, 0.25, 0.2553333333333333, 0.2386666666666667, 0.2326666666666667, 0.23106666666666664, 0.21960000000000002, 0.2221333333333333, 0.2156, 0.2181333333333333, 0.2108, 0.20840000000000003, 0.2056, 0.20279999999999998, 0.20599999999999996, 0.19066666666666665, 0.20133333333333336, 0.19999999999999996, 0.19240000000000002, 0.18999999999999995, 0.1942666666666667, 0.19199999999999995, 0.1936, 0.18333333333333335, 0.18706666666666671, 0.1864, 0.19120000000000004, 0.18613333333333337, 0.18333333333333335, 0.1797333333333333, 0.18866666666666665, 0.18079999999999996, 0.17586666666666662, 0.1777333333333333, 0.17666666666666664, 0.1929333333333333, 0.17586666666666662, 0.1817333333333333, 0.18200000000000005, 0.17426666666666668, 0.18200000000000005, 0.17000000000000004, 0.17626666666666668, 0.18333333333333335, 0.16866666666666663, 0.17679999999999996, 0.17079999999999995, 0.17493333333333339, 0.17320000000000002, 0.17079999999999995, 0.17613333333333336, 0.1817333333333333, 0.17746666666666666, 0.1697333333333333, 0.16679999999999995, 0.17293333333333338, 0.16266666666666663, 0.16826666666666668, 0.16693333333333338, 0.16946666666666665, 0.16959999999999997, 0.17320000000000002, 0.16346666666666665, 0.15973333333333328, 0.1664, 0.16266666666666663, 0.16200000000000003, 0.1750666666666667, 0.16559999999999997, 0.16693333333333338, 0.16626666666666667, 0.15813333333333335, 0.16279999999999994, 0.1685333333333333, 0.16213333333333335, 0.16493333333333338, 0.1598666666666667, 0.16026666666666667, 0.1632, 0.1358666666666667, 0.13573333333333337, 0.13613333333333333, 0.1392, 0.13746666666666663, 0.13680000000000003, 0.1358666666666667, 0.13813333333333333, 0.13546666666666662, 0.136, 0.13613333333333333, 0.13759999999999994, 0.14013333333333333, 0.13680000000000003, 0.13653333333333328, 0.13560000000000005, 0.13653333333333328, 0.13626666666666665, 0.1385333333333333, 0.13626666666666665, 0.13506666666666667, 0.13453333333333328, 0.13439999999999996, 0.13506666666666667, 0.1352, 0.1358666666666667, 0.13480000000000003, 0.13560000000000005, 0.13573333333333337, 0.13480000000000003, 0.13546666666666662, 0.13546666666666662, 0.1352, 0.13546666666666662, 0.13453333333333328, 0.1346666666666667, 0.13506666666666667, 0.13413333333333333, 0.13573333333333337, 0.13573333333333337, 0.13426666666666665, 0.13439999999999996, 0.1346666666666667, 0.13493333333333335, 0.13506666666666667, 0.13480000000000003, 0.1352, 0.13480000000000003, 0.13413333333333333, 0.1352, 0.13480000000000003, 0.13506666666666667, 0.134, 0.1346666666666667, 0.13480000000000003, 0.1346666666666667, 0.13626666666666665, 0.13373333333333337, 0.13480000000000003, 0.13546666666666662, 0.13480000000000003, 0.13426666666666665, 0.1358666666666667, 0.1352, 0.13480000000000003, 0.13546666666666662, 0.13546666666666662, 0.13506666666666667, 0.1352, 0.1346666666666667, 0.13546666666666662, 0.13480000000000003, 0.1352, 0.13506666666666667, 0.13639999999999997, 0.134, 0.13573333333333337, 0.13439999999999996, 0.1352, 0.13453333333333328, 0.1353333333333333, 0.13613333333333333, 0.13413333333333333, 0.13506666666666667, 0.13413333333333333, 0.136, 0.1338666666666667, 0.13560000000000005, 0.13480000000000003, 0.1346666666666667, 0.13546666666666662, 0.1352, 0.1353333333333333, 0.13506666666666667, 0.13493333333333335, 0.13480000000000003, 0.13560000000000005, 0.13453333333333328, 0.13506666666666667, 0.13439999999999996, 0.13506666666666667, 0.13546666666666662, 0.1352, 0.1346666666666667, 0.1353333333333333, 0.13493333333333335, 0.13493333333333335, 0.13480000000000003], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.014109721259407126, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.0001277829105912465, "optimization": "rmsprop", "nb_data_augmentation": 2, "learning_rate_decay_method": "discrete", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 5.312469699508193e-06, "rotation_range": [0, 0], "momentum": 0.966195127419368}, "accuracy_valid_max": 0.8662666666666666, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8652, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.5052, 0.5590666666666667, 0.6117333333333334, 0.6225333333333334, 0.662, 0.6754666666666667, 0.6790666666666667, 0.698, 0.7066666666666667, 0.7342666666666666, 0.7288, 0.75, 0.7446666666666667, 0.7613333333333333, 0.7673333333333333, 0.7689333333333334, 0.7804, 0.7778666666666667, 0.7844, 0.7818666666666667, 0.7892, 0.7916, 0.7944, 0.7972, 0.794, 0.8093333333333333, 0.7986666666666666, 0.8, 0.8076, 0.81, 0.8057333333333333, 0.808, 0.8064, 0.8166666666666667, 0.8129333333333333, 0.8136, 0.8088, 0.8138666666666666, 0.8166666666666667, 0.8202666666666667, 0.8113333333333334, 0.8192, 0.8241333333333334, 0.8222666666666667, 0.8233333333333334, 0.8070666666666667, 0.8241333333333334, 0.8182666666666667, 0.818, 0.8257333333333333, 0.818, 0.83, 0.8237333333333333, 0.8166666666666667, 0.8313333333333334, 0.8232, 0.8292, 0.8250666666666666, 0.8268, 0.8292, 0.8238666666666666, 0.8182666666666667, 0.8225333333333333, 0.8302666666666667, 0.8332, 0.8270666666666666, 0.8373333333333334, 0.8317333333333333, 0.8330666666666666, 0.8305333333333333, 0.8304, 0.8268, 0.8365333333333334, 0.8402666666666667, 0.8336, 0.8373333333333334, 0.838, 0.8249333333333333, 0.8344, 0.8330666666666666, 0.8337333333333333, 0.8418666666666667, 0.8372, 0.8314666666666667, 0.8378666666666666, 0.8350666666666666, 0.8401333333333333, 0.8397333333333333, 0.8368, 0.8641333333333333, 0.8642666666666666, 0.8638666666666667, 0.8608, 0.8625333333333334, 0.8632, 0.8641333333333333, 0.8618666666666667, 0.8645333333333334, 0.864, 0.8638666666666667, 0.8624, 0.8598666666666667, 0.8632, 0.8634666666666667, 0.8644, 0.8634666666666667, 0.8637333333333334, 0.8614666666666667, 0.8637333333333334, 0.8649333333333333, 0.8654666666666667, 0.8656, 0.8649333333333333, 0.8648, 0.8641333333333333, 0.8652, 0.8644, 0.8642666666666666, 0.8652, 0.8645333333333334, 0.8645333333333334, 0.8648, 0.8645333333333334, 0.8654666666666667, 0.8653333333333333, 0.8649333333333333, 0.8658666666666667, 0.8642666666666666, 0.8642666666666666, 0.8657333333333334, 0.8656, 0.8653333333333333, 0.8650666666666667, 0.8649333333333333, 0.8652, 0.8648, 0.8652, 0.8658666666666667, 0.8648, 0.8652, 0.8649333333333333, 0.866, 0.8653333333333333, 0.8652, 0.8653333333333333, 0.8637333333333334, 0.8662666666666666, 0.8652, 0.8645333333333334, 0.8652, 0.8657333333333334, 0.8641333333333333, 0.8648, 0.8652, 0.8645333333333334, 0.8645333333333334, 0.8649333333333333, 0.8648, 0.8653333333333333, 0.8645333333333334, 0.8652, 0.8648, 0.8649333333333333, 0.8636, 0.866, 0.8642666666666666, 0.8656, 0.8648, 0.8654666666666667, 0.8646666666666667, 0.8638666666666667, 0.8658666666666667, 0.8649333333333333, 0.8658666666666667, 0.864, 0.8661333333333333, 0.8644, 0.8652, 0.8653333333333333, 0.8645333333333334, 0.8648, 0.8646666666666667, 0.8649333333333333, 0.8650666666666667, 0.8652, 0.8644, 0.8654666666666667, 0.8649333333333333, 0.8656, 0.8649333333333333, 0.8645333333333334, 0.8648, 0.8653333333333333, 0.8646666666666667, 0.8650666666666667, 0.8650666666666667, 0.8652], "seed": 951630453, "model": "residualv3", "loss_std": [0.29103711247444153, 0.25163862109184265, 0.25453639030456543, 0.2526644170284271, 0.25063419342041016, 0.24905870854854584, 0.24780996143817902, 0.24413913488388062, 0.24104264378547668, 0.2386312186717987, 0.23914334177970886, 0.23396256566047668, 0.233642116189003, 0.23013626039028168, 0.2328353226184845, 0.22640933096408844, 0.22486190497875214, 0.22191347181797028, 0.22194549441337585, 0.2199530452489853, 0.21831114590168, 0.21243973076343536, 0.21394498646259308, 0.21286988258361816, 0.20832616090774536, 0.2064078450202942, 0.20588020980358124, 0.2036222666501999, 0.20127305388450623, 0.2007552534341812, 0.19701842963695526, 0.19423800706863403, 0.19164229929447174, 0.19460846483707428, 0.1924380511045456, 0.18903546035289764, 0.18799686431884766, 0.1872861385345459, 0.18435722589492798, 0.18379566073417664, 0.17955972254276276, 0.1815013587474823, 0.17917169630527496, 0.178358793258667, 0.17413851618766785, 0.1744343787431717, 0.17238353192806244, 0.16938605904579163, 0.1692870408296585, 0.1671237200498581, 0.1641160100698471, 0.16472524404525757, 0.16057102382183075, 0.16196107864379883, 0.15668250620365143, 0.16054537892341614, 0.15841074287891388, 0.15584449470043182, 0.1581752896308899, 0.15254130959510803, 0.1526024490594864, 0.1545034795999527, 0.15025223791599274, 0.15170343220233917, 0.1492270678281784, 0.15067656338214874, 0.1469743251800537, 0.14729946851730347, 0.14059719443321228, 0.1452551931142807, 0.14300866425037384, 0.14212599396705627, 0.1414000540971756, 0.13933293521404266, 0.13923051953315735, 0.13755875825881958, 0.1379934400320053, 0.13563209772109985, 0.13706424832344055, 0.13487063348293304, 0.13529592752456665, 0.13341571390628815, 0.131728857755661, 0.13205640017986298, 0.13004355132579803, 0.1308390349149704, 0.12730799615383148, 0.1271238625049591, 0.12541569769382477, 0.11440514028072357, 0.10730218887329102, 0.10500168800354004, 0.10187036544084549, 0.10402203351259232, 0.10081718862056732, 0.10139340162277222, 0.09972502291202545, 0.10111396759748459, 0.09851077198982239, 0.09844686090946198, 0.09814050048589706, 0.098208487033844, 0.09763574600219727, 0.09739303588867188, 0.09697336703538895, 0.09619202464818954, 0.09437773376703262, 0.09447619318962097, 0.09620686620473862, 0.09573942422866821, 0.09178192913532257, 0.0926249697804451, 0.09481276571750641, 0.09144758433103561, 0.0942736566066742, 0.09510509669780731, 0.09268811345100403, 0.09354066103696823, 0.09315208345651627, 0.0918387845158577, 0.09529345482587814, 0.09358587116003036, 0.09444328397512436, 0.0932227224111557, 0.09349393844604492, 0.09362729638814926, 0.09378962218761444, 0.09215434640645981, 0.0930929183959961, 0.09365743398666382, 0.09132920205593109, 0.09252060204744339, 0.09271709620952606, 0.09579271823167801, 0.09309675544500351, 0.09480442851781845, 0.0930125042796135, 0.09295720607042313, 0.09317674487829208, 0.09235680848360062, 0.09406992793083191, 0.09517454355955124, 0.09629247337579727, 0.09657730907201767, 0.09457055479288101, 0.09481073915958405, 0.09485232830047607, 0.09364055842161179, 0.09440180659294128, 0.09259320050477982, 0.0932733342051506, 0.09565389901399612, 0.09157849848270416, 0.09376408904790878, 0.09518634527921677, 0.09381859749555588, 0.09316307306289673, 0.09392040222883224, 0.09406598657369614, 0.09435971081256866, 0.09434391558170319, 0.0913928672671318, 0.09266450256109238, 0.09381034970283508, 0.09289733320474625, 0.09351683408021927, 0.09459030628204346, 0.09328199177980423, 0.09399708360433578, 0.0923556238412857, 0.09466182440519333, 0.09561076015233994, 0.09517214447259903, 0.09547290951013565, 0.0934392511844635, 0.09451587498188019, 0.0928068682551384, 0.09317576140165329, 0.09206971526145935, 0.09223669022321701, 0.09407369792461395, 0.09387201815843582, 0.09275747090578079, 0.0940961018204689, 0.09430281072854996, 0.0961969718337059, 0.09250377118587494, 0.09329568594694138, 0.09222248196601868, 0.09366115182638168, 0.09370214492082596, 0.09404724091291428, 0.09357567131519318, 0.0910622850060463, 0.09241580218076706, 0.09416992962360382, 0.09337714314460754]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:43 2016", "state": "available"}], "summary": "6f1f37c145a965428bea58a364dd3ed5"}