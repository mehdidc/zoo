{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 64, "f3": 16, "nonlin": "leaky_rectify", "nbg1": 2, "nbg3": 2, "nbg2": 2, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.021735310471565225, 0.020526355541849367, 0.02021641185938645, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165, 0.020249591026903165], "moving_avg_accuracy_train": [0.012949454066265057, 0.024705148719879513, 0.03530174604668674, 0.04484103680346385, 0.05342404532191264, 0.06114875298851655, 0.06810098988846007, 0.07435800309840924, 0.0799893149873635, 0.08505749568742234, 0.08961885831747529, 0.09372408468452295, 0.09741878841486584, 0.10074402177217444, 0.10373673179375217, 0.10643017081317215, 0.10885426593065012, 0.1110359515363803, 0.11299946858153745, 0.11476663392217888, 0.11635708272875618, 0.11778848665467574, 0.11907675018800334, 0.1202361873679982, 0.12127968082999356, 0.12221882494578938, 0.12306405465000562, 0.12382476138380025, 0.12450939744421541, 0.12512556989858906, 0.12568012510752533, 0.12617922479556798, 0.12662841451480636, 0.1270326852621209, 0.12739652893470396, 0.12772398824002873, 0.12801870161482104, 0.1282839436521341, 0.12852266148571587, 0.12873750753593946, 0.1289308689811407, 0.1291048942818218, 0.1292615170524348, 0.1294024775459865, 0.129529341990183, 0.12964351998995988, 0.12974628018975906, 0.12983876436957834, 0.12992200013141567, 0.12999691231706928, 0.13006433328415754, 0.13012501215453695, 0.13017962313787843, 0.13022877302288577], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.0015091952455287777, 0.002602042932077076, 0.0033524295130278508, 0.0038361691750060643, 0.004115564574555339, 0.0042410480939102085, 0.004251945665735615, 0.00417910302794736, 0.004046597787468721, 0.0038731161091978884, 0.003673058759663691, 0.0034574288354196517, 0.003234543472772773, 0.003010603717420516, 0.002790150165137731, 0.002576426672385964, 0.0023716701393945924, 0.002177340894195385, 0.0019943053974554505, 0.001822980717780385, 0.0016634483926594348, 0.0015155438081857326, 0.001378926033748875, 0.001253132081543177, 0.0011376187808359028, 0.001031794827784418, 0.0009350450642819814, 0.0008467486304673476, 0.0007662923062376, 0.0006930800920555996, 0.0006265398661678648, 0.0005661277840385168, 0.0005113309482694902, 0.00046166876697674957, 0.0004166933302417834, 0.0003759890635873992, 0.0003391718609881925, 0.0003058878549345952, 0.00027581194527776545, 0.000248646180177659, 0.0002241180599963059, 0.00020197881724416967, 0.00018200171175022315, 0.0001639803693218819, 0.00014772718367450535, 0.00013307179484775225, 0.00011985965229094196, 0.00010795066697349936, 9.721795400458722e-05, 8.754666512416311e-05, 7.883290889297483e-05, 7.098275533147207e-05, 6.391132103383858e-05, 5.754193033122084e-05], "duration": 2882.580875, "accuracy_train": [0.1294945406626506, 0.13050640060240964, 0.1306711219879518, 0.13069465361445784, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518, 0.1306711219879518], "end": "2016-01-17 08:39:41.745000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0], "accuracy_valid": [0.12917564655172414, 0.1297144396551724, 0.1297144396551724, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448, 0.12984913793103448], "accuracy_test": 0.13161057692307693, "start": "2016-01-17 07:51:39.164000", "learning_rate_per_epoch": [0.00018346945580560714, 3.0740218790015206e-05, 5.150508513906971e-06, 8.629651802039007e-07, 1.445893929030717e-07, 2.42258817451102e-08, 4.059034441894482e-09, 6.800892071723297e-10, 1.1394861443303483e-10, 1.909203350969335e-11, 3.198860881042931e-12, 5.359675919226758e-13, 8.980110492023963e-14, 1.5046130845148414e-14, 2.520971856628481e-15, 4.22387590466697e-16, 7.077083358784827e-17, 1.1857618364516013e-17, 1.9867381116615004e-18, 3.3287699478391576e-19, 5.577337658442387e-20, 9.344801551679336e-21, 1.5657168873210468e-21, 2.6233510080784675e-22, 4.395411794856436e-23, 7.364490655642183e-24, 1.2339168022469156e-24, 2.0674215154618738e-25, 3.46395448681555e-26, 5.803838806031523e-27, 9.724303400912979e-28, 1.6293023069538456e-28, 2.729888033886367e-29, 4.5739139705749745e-30, 7.663570532897738e-31, 1.2840275091348391e-31, 2.1513818262880825e-32, 3.6046295495675436e-33, 6.039538905133733e-34, 1.0119217864292219e-34, 1.6954699434210514e-35, 2.840751528077821e-36, 4.759665161637457e-37, 7.974795726185777e-38, 1.3361731181953212e-38, 2.2387508603654002e-39, 3.7510097422893136e-40, 6.284823612496805e-41, 1.0530757959401e-41, 1.7642347665849447e-42, 2.956739759725364e-43, 4.90454462513686e-44, 8.407790785948902e-45, 1.401298464324817e-45], "accuracy_train_last": 0.1306711219879518, "error_valid": [0.8708243534482758, 0.8702855603448276, 0.8702855603448276, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655, 0.8701508620689655], "accuracy_train_std": [0.020100045379363902, 0.019788740789284998, 0.01961370597657018, 0.019486971692156806, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597, 0.019411138718683597], "accuracy_test_std": 0.020917433033602297, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1.0, 1.2], "translation_range": [-3, 3], "momentum": 0.7756912782860806, "shear_range": [1, 1.1], "patience_check_each": 1, "learning_rate": 0.001095016351844987, "patience_threshold": 1, "do_flip": true, "batch_size": 256, "optimization": "adadelta", "nb_data_augmentation": 1, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 2.3511188975104094e-10, "valid_ratio": 0.15, "rotation_range": [-90, 90], "learning_rate_decay": 0.8324504917558246}, "accuracy_valid_max": 0.12984913793103448, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.98, interval=[0.8, 1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256, 512],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1.0, 1.2)),\n        rotation_range=make_constant_param((-90, 90)),\n        shear_range=make_constant_param((1, 1.1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    instantiate = instantiate_random\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.12984913793103448, "loss_train": [2.309913396835327, 2.3005287647247314, 2.299201726913452, 2.2990264892578125, 2.2990405559539795, 2.299037218093872, 2.2990365028381348, 2.2990784645080566, 2.29897141456604, 2.2990639209747314, 2.299105167388916, 2.2989981174468994, 2.29892635345459, 2.298943042755127, 2.299004554748535, 2.298970937728882, 2.29905104637146, 2.2989261150360107, 2.298985719680786, 2.298973321914673, 2.2990241050720215, 2.299006223678589, 2.2988879680633545, 2.298938751220703, 2.29903507232666, 2.299062490463257, 2.2989914417266846, 2.2989978790283203, 2.298999547958374, 2.298957586288452, 2.2989563941955566, 2.2989611625671387, 2.299072742462158, 2.2989277839660645, 2.29909610748291, 2.298924684524536, 2.299028158187866, 2.29898738861084, 2.2990288734436035, 2.2990121841430664, 2.2990124225616455, 2.2990546226501465, 2.2990782260894775, 2.298990488052368, 2.2989983558654785, 2.2990567684173584, 2.2990782260894775, 2.2990305423736572, 2.2990591526031494, 2.2990753650665283, 2.2990660667419434, 2.2989683151245117, 2.2989420890808105, 2.299023389816284], "accuracy_train_first": 0.1294945406626506, "model": "residual", "loss_std": [0.011542586609721184, 0.007965371012687683, 0.0076668900437653065, 0.007766476832330227, 0.007605699822306633, 0.007662429474294186, 0.007652174681425095, 0.007602166850119829, 0.0075841438956558704, 0.007614185567945242, 0.007697660941630602, 0.007718907669186592, 0.007681648712605238, 0.007599745411425829, 0.007600944954901934, 0.0076659731566905975, 0.007631812244653702, 0.0076493555679917336, 0.00768672488629818, 0.007628043182194233, 0.007682191673666239, 0.007553393021225929, 0.007620160933583975, 0.007587158586829901, 0.00766406487673521, 0.007622985169291496, 0.007590119261294603, 0.007649977225810289, 0.007710288744419813, 0.0075807152315974236, 0.007612559013068676, 0.007664315868169069, 0.007626026403158903, 0.007612743880599737, 0.007555865217000246, 0.00763578899204731, 0.0076242899522185326, 0.007592298556119204, 0.007559176534414291, 0.007610080763697624, 0.007647024933248758, 0.0076171839609742165, 0.0076389252208173275, 0.007644487079232931, 0.007634107023477554, 0.007635936606675386, 0.007652365602552891, 0.00767089519649744, 0.0075778113678097725, 0.007645600475370884, 0.007629416882991791, 0.007614520378410816, 0.007618935313075781, 0.00761982100084424]}, "state": "available", "life": [{"dt": "Sun May 15 22:04:57 2016", "state": "available"}], "summary": "643de63bcaa66b00a0d8b3ba32c18037"}