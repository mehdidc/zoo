{"content": {"hp_model": {"f1": 78, "f2": 65, "f3": 24, "nonlin": "leaky_rectify", "ds2": 1180, "ds1": 2349, "do2": 0.5705204379716496, "do3": 0.20316434146529494, "do1": 0.24218013891047663, "do4": 0.4202902106295562, "do5": 0.7839157691820545}, "accuracy_valid_std": [0.020831688246334697, 0.02386859529454384, 0.023829034900318947, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404, 0.02380008379693404], "moving_avg_accuracy_train": [0.019783038403614454, 0.04160462161144578, 0.0613734704442771, 0.07919131918298192, 0.09522267672251505, 0.10965089850809487, 0.1226362981151167, 0.13432315776143636, 0.14484133144312406, 0.15430768775664297, 0.16282740843881, 0.17049515705276033, 0.17739613080531563, 0.18360700718261538, 0.18919679592218516, 0.19422760578779796, 0.1987553346668495, 0.20283029065799588, 0.2064977510500276, 0.20979846540285615, 0.21276910832040186, 0.215442686946193, 0.21784890770940504, 0.22001450639629586, 0.2219635452144976, 0.22371768015087917, 0.22529640159362258, 0.22671725089209163, 0.22799601526071378, 0.22914690319247372, 0.23018270233105767, 0.23111492155578323, 0.23195391885803623, 0.23270901643006395, 0.2333886042448889, 0.23400023327823133, 0.23455069940823953, 0.2350461189252469, 0.23549199649055355, 0.2358932862993295, 0.23625444712722787, 0.2365794918723364, 0.2368720321429341, 0.237135318386472, 0.23737227600565614, 0.23758553786292186, 0.237777473534461, 0.23795021563884622, 0.23810568353279293, 0.23824560463734495, 0.23837153363144178, 0.23848486972612892, 0.23858687221134736], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.00352231747630996, 0.007455719171945719, 0.010227413712329176, 0.012061953944174544, 0.013168798370800202, 0.013725480788765104, 0.013870518136474979, 0.013712710518362455, 0.013337127264909538, 0.01280992165510908, 0.012182200254117474, 0.011493129547966363, 0.010772427541770841, 0.010042359655960658, 0.009319335333741782, 0.00861518323150313, 0.007938167867572591, 0.00729379847778335, 0.006685471021549109, 0.0061149763565449145, 0.005582901194982504, 0.005088943279498838, 0.004632158036800769, 0.004211150592174661, 0.00382422430379091, 0.0034694947777871286, 0.003144976552552416, 0.0028486482118578148, 0.002578500535466152, 0.0023325713692027733, 0.002108970150981917, 0.0019058944300302566, 0.0017216402352859214, 0.0015546077628468685, 0.0014033035429447086, 0.0012663399993200844, 0.0011424331160306517, 0.001030398768908073, 0.0009291481532464597, 0.0008376826395174608, 0.0007550883098581888, 0.000680530365649274, 0.000613247547373639, 0.000552546669450602, 0.0004977973427251465, 0.0004484269340305116, 0.0004039157943455431, 0.0003637927734226357, 0.0003276310284748061, 0.0002950441268668171, 0.00026568243718412353, 0.0002392297990989416, 0.00021540045975196407], "duration": 33642.44492, "accuracy_train": [0.19783038403614459, 0.23799887048192772, 0.23929310993975902, 0.2395519578313253, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325, 0.23950489457831325], "end": "2016-01-17 14:38:32.657000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0], "accuracy_valid": [0.1922144396551724, 0.2312769396551724, 0.2322198275862069, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207, 0.2318157327586207], "accuracy_test": 0.24318910256410256, "start": "2016-01-17 05:17:50.212000", "learning_rate_per_epoch": [1.810272442526184e-05, 1.5271760958057712e-06, 1.2883512567896105e-07, 1.0868746791459216e-08, 9.169056625069061e-10, 7.735169449407664e-11, 6.525518406880204e-12, 5.505036530795149e-13, 4.6441410423260845e-14, 3.917875088075987e-15, 3.30518502886614e-16, 2.788309377886009e-17, 2.352264468060161e-18, 1.984409649935952e-19, 1.6740812432210622e-20, 1.4122829616281296e-21, 1.1914255866151774e-22, 1.0051065331177259e-23, 8.479246961319457e-25, 7.153234765255837e-26, 6.034588324528446e-27, 5.090879473994292e-28, 4.294750951757514e-29, 3.623123734432145e-30, 3.056527699073087e-31, 2.5785379593408764e-32, 2.175297662931745e-33, 1.8351174956564447e-34, 1.5481358175544194e-35, 1.3060333069909724e-36, 1.1017915446887823e-37, 9.294898193072835e-39, 7.841329894730238e-40, 6.615109660538164e-41, 5.5799704849414216e-42, 4.708362840131385e-43, 3.923635700109488e-44, 2.802596928649634e-45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_train_last": 0.23950489457831325, "error_valid": [0.8077855603448276, 0.7687230603448276, 0.7677801724137931, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793, 0.7681842672413793], "accuracy_train_std": [0.026790247798797327, 0.026860668787562846, 0.026769363598711248, 0.02704364433843271, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846, 0.026991380811824846], "accuracy_test_std": 0.02275512294909837, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1.0, 1.2], "translation_range": [-3, 3], "momentum": 0.7452935205599998, "shear_range": [1, 1.1], "patience_check_each": 1, "learning_rate": 0.00021458470566856617, "patience_threshold": 1, "do_flip": true, "batch_size": 256, "optimization": "rmsprop", "nb_data_augmentation": 4, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 1.2830487837651334e-08, "valid_ratio": 0.15, "rotation_range": [-90, 90], "learning_rate_decay": 0.9156383276538413}, "accuracy_valid_max": 0.2322198275862069, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.98, interval=[0.8, 1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256, 512],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1.0, 1.2)),\n        rotation_range=make_constant_param((-90, 90)),\n        shear_range=make_constant_param((1, 1.1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    instantiate = instantiate_random\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.2318157327586207, "loss_train": [2.2539632320404053, 2.1429412364959717, 2.1297030448913574, 2.12825608253479, 2.127657413482666, 2.12785267829895, 2.1275594234466553, 2.1286914348602295, 2.1279385089874268, 2.1273932456970215, 2.127984046936035, 2.1274936199188232, 2.1288704872131348, 2.1277618408203125, 2.1275243759155273, 2.1280598640441895, 2.127440929412842, 2.1274542808532715, 2.126845359802246, 2.1277406215667725, 2.127732276916504, 2.127523183822632, 2.126708984375, 2.1273727416992188, 2.12849497795105, 2.1278252601623535, 2.127505302429199, 2.1271069049835205, 2.128042221069336, 2.128033399581909, 2.127688407897949, 2.127251386642456, 2.128110408782959, 2.1280834674835205, 2.128549575805664, 2.1271004676818848, 2.1275393962860107, 2.128180742263794, 2.1276772022247314, 2.127645969390869, 2.127723217010498, 2.127784013748169, 2.1283369064331055, 2.1281750202178955, 2.127965211868286, 2.1280336380004883, 2.1279520988464355, 2.12760853767395, 2.12774395942688, 2.1280364990234375, 2.127763509750366, 2.1280555725097656, 2.127457857131958], "accuracy_train_first": 0.19783038403614459, "model": "vgg", "loss_std": [0.05398248881101608, 0.032201025635004044, 0.030862322077155113, 0.0312831848859787, 0.030776720494031906, 0.029418528079986572, 0.02999814972281456, 0.030512947589159012, 0.0294059868901968, 0.030647505074739456, 0.02999640256166458, 0.03126101568341255, 0.03095574490725994, 0.030792387202382088, 0.030610037967562675, 0.030384808778762817, 0.03183424845337868, 0.02990141324698925, 0.029812240973114967, 0.029718562960624695, 0.029691405594348907, 0.030220141634345055, 0.029594460502266884, 0.02995041012763977, 0.030441151931881905, 0.029882553964853287, 0.02983853965997696, 0.031133322045207024, 0.030735092237591743, 0.031174907460808754, 0.03000829555094242, 0.0300426222383976, 0.030753789469599724, 0.029753632843494415, 0.030390193685889244, 0.0295656006783247, 0.030159294605255127, 0.03033795952796936, 0.031225575134158134, 0.029250016435980797, 0.03070472739636898, 0.03122733160853386, 0.03103294037282467, 0.02968408912420273, 0.03022298589348793, 0.02993062138557434, 0.030952222645282745, 0.02982836775481701, 0.029588647186756134, 0.03043820895254612, 0.030283505097031593, 0.031041622161865234, 0.030145075172185898]}, "state": "available", "life": [{"dt": "Sun May 15 22:04:58 2016", "state": "available"}], "summary": "a40e035389411ab68ab2b0115232090b"}