{"content": {"hp_model": {"f0": 32, "f1": 16, "f2": 16, "f3": 16, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.6316832304000854, 1.2856956720352173, 1.1465461254119873, 1.047773003578186, 0.9722239971160889, 0.9105239510536194, 0.863444983959198, 0.8216577172279358, 0.7914754152297974, 0.7622518539428711, 0.7388085126876831, 0.7153319120407104, 0.6958120465278625, 0.6785838007926941, 0.6613121628761292, 0.6471381783485413, 0.6306171417236328, 0.6195513010025024, 0.6089740991592407, 0.5969277620315552, 0.58636075258255, 0.5765113234519958, 0.5665287375450134, 0.5582983493804932, 0.5491610169410706, 0.5406496524810791, 0.5341617465019226, 0.5260156393051147, 0.5184404850006104, 0.5124741196632385, 0.5038849711418152, 0.5002963542938232, 0.49368762969970703, 0.48562192916870117, 0.48050835728645325, 0.4743756055831909, 0.4720000922679901, 0.4661722481250763, 0.46010878682136536, 0.45624494552612305, 0.45445770025253296, 0.4468347132205963, 0.44320419430732727, 0.43855908513069153, 0.4348195493221283, 0.431496262550354, 0.42746904492378235, 0.4219174087047577, 0.41886430978775024, 0.41417789459228516, 0.4104980528354645, 0.4081224501132965, 0.4063955843448639, 0.40133824944496155, 0.39859840273857117, 0.3965432643890381, 0.3927595615386963, 0.3919714093208313, 0.3872215449810028, 0.38450706005096436, 0.3809836506843567, 0.37866824865341187, 0.37527915835380554, 0.375125527381897, 0.37340062856674194, 0.3688980042934418, 0.36790406703948975, 0.36276549100875854, 0.36274969577789307, 0.3582082688808441, 0.35623645782470703, 0.35373640060424805, 0.3520446717739105, 0.3502575755119324, 0.34678444266319275, 0.3449743390083313, 0.34406954050064087, 0.3442930579185486, 0.339933305978775, 0.3386203944683075, 0.3369565010070801, 0.33155253529548645, 0.3335825204849243, 0.3292311131954193, 0.329725980758667, 0.32738053798675537, 0.32700681686401367, 0.28517600893974304, 0.2723592519760132, 0.2659282088279724, 0.2656225264072418, 0.2613341808319092, 0.2600911259651184, 0.2581855058670044, 0.25681522488594055, 0.2566286325454712, 0.25443965196609497, 0.24820062518119812, 0.24848498404026031, 0.2502800226211548, 0.24904315173625946, 0.24864335358142853, 0.24901147186756134, 0.2479792684316635, 0.24855937063694, 0.2499123364686966, 0.2499142736196518, 0.2483050674200058, 0.24840481579303741, 0.24774488806724548, 0.2493794709444046, 0.24596428871154785, 0.24926243722438812, 0.24752271175384521, 0.2488546371459961, 0.24730731546878815, 0.2492920160293579, 0.248819962143898, 0.24819795787334442, 0.2498653382062912, 0.24743349850177765, 0.24875427782535553, 0.2469344586133957, 0.2492249459028244, 0.24943536520004272, 0.24728646874427795, 0.24793697893619537, 0.24696974456310272, 0.24877279996871948, 0.24877849221229553, 0.24854660034179688, 0.2478027045726776, 0.25006261467933655, 0.24803601205348969, 0.24935702979564667, 0.24812522530555725, 0.2470397800207138, 0.24870340526103973, 0.24718967080116272, 0.24878904223442078, 0.24754388630390167, 0.24802151322364807, 0.24780820310115814, 0.24794593453407288, 0.24966348707675934, 0.2478078305721283, 0.24838685989379883], "moving_avg_accuracy_train": [0.055639080668604644, 0.11307379986272607, 0.1684588073752999, 0.22097454892113091, 0.27119569276817435, 0.31884056248521997, 0.36331545658161307, 0.40434939836115935, 0.44224960511396, 0.4778267077485588, 0.5099460094208698, 0.5394485108747314, 0.5668213234200563, 0.5922452604013712, 0.6159125237380798, 0.6366919390172342, 0.656797874747063, 0.6748491472229843, 0.6916972536512488, 0.7070534646902398, 0.7210066962539309, 0.7337389187243296, 0.7461369906761861, 0.7578766507816941, 0.7679610751218986, 0.7777970562494282, 0.7863775410487654, 0.7946625552336176, 0.8023839186713577, 0.8092471513081901, 0.8155288005242242, 0.8216913482126654, 0.8273495366656698, 0.8326625430685473, 0.8375375071252491, 0.841938637278588, 0.8461460120439462, 0.8500980232887949, 0.8536986867971709, 0.8572880923249565, 0.8605463148904029, 0.863695026136228, 0.8663662500360788, 0.8691609404971258, 0.8718646071120957, 0.8744742218380862, 0.8767926481569538, 0.8791792841868196, 0.8815341948577463, 0.8831514544163608, 0.8849952518214854, 0.8867777942265461, 0.8885076043779963, 0.8901108643928545, 0.8915212463228934, 0.8927023786004417, 0.8940328979097866, 0.8950605212786454, 0.8960643652725048, 0.8971538007229214, 0.8981133662890106, 0.8992375001116137, 0.9007535975995294, 0.9021853704588548, 0.9029579271918085, 0.9039997835705419, 0.9047883563970426, 0.9055773793421482, 0.9066825950462685, 0.9073260835632824, 0.9079449310024506, 0.9088855072024546, 0.9094576221741157, 0.9099422987140869, 0.9110434641107661, 0.9117461224177589, 0.9123761897452428, 0.9130152578554361, 0.9135788294593812, 0.9142952712469703, 0.915319176258209, 0.9158501018171425, 0.9163070805785346, 0.9165930197209857, 0.9170175593705648, 0.9176087282039496, 0.9184593615897193, 0.920985285578634, 0.9234608690662671, 0.9257377223301368, 0.9278449108414015, 0.9299623056872632, 0.931919150371167, 0.9336895751330998, 0.9352551637795812, 0.9367664640602147, 0.9381197309639938, 0.9395049737452246, 0.9407493310507039, 0.941841495035196, 0.9428545974581253, 0.9437733650851902, 0.944525815138825, 0.9452425477168585, 0.945892329432345, 0.9464817472250832, 0.9470052477921189, 0.947457797111975, 0.9478860178391311, 0.9482830061888005, 0.94864269294995, 0.9489593634909184, 0.9493002065980374, 0.9495162485420542, 0.9496991326452593, 0.9499055449678966, 0.9500820154630321, 0.9502431640574635, 0.9503300330233948, 0.9504779695570188, 0.9506157987837182, 0.9507398811365663, 0.9508282316683969, 0.9508914711053778, 0.951015779865318, 0.9510952138123873, 0.9510992750492733, 0.9511656370826903, 0.9512741910377657, 0.9512859311890186, 0.9513011476227653, 0.9512984942738332, 0.9513030817062228, 0.9512909704025255, 0.9513102971637218, 0.9513416421416556, 0.9513186993479865, 0.9513329280658273, 0.9513945620368839, 0.951436045669159, 0.9514269500596536, 0.95146755608728, 0.9514529121895154, 0.9514630202184413, 0.9514976580325606, 0.9515103029724292, 0.9515309479647304], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05494399472891565, 0.11115746187876505, 0.16536918768825298, 0.21654834807981926, 0.2652189556664156, 0.3111191704160391, 0.35440499080854665, 0.3941364196738516, 0.4305162347377164, 0.4645246580918815, 0.49494810413322043, 0.5231156031137236, 0.5485375353663573, 0.5721527847947064, 0.5934654854191515, 0.6125349936825827, 0.6303089321908304, 0.6465882975843227, 0.6618633145408753, 0.6755202330397245, 0.6879732396209177, 0.6992562467488109, 0.7105370885648937, 0.7209085432532086, 0.7293120295717131, 0.7379321785064846, 0.7456934010737579, 0.7526590877924363, 0.7590736607055872, 0.7645649851000135, 0.7703057816295452, 0.7754735280147834, 0.7799525718153383, 0.7840956335344069, 0.7882282506214783, 0.7918834823176136, 0.7951823093494065, 0.7978624029626586, 0.8007139403395855, 0.8033790097374793, 0.8056544723744241, 0.808182581001063, 0.8100285736539687, 0.8125384292497918, 0.8143129889980054, 0.8160759907382651, 0.8180940564328874, 0.8193649701137703, 0.8213949052371824, 0.8222552852895183, 0.8231934662861689, 0.8247356889817237, 0.825879548782723, 0.8271043351036224, 0.8280388328809107, 0.8285166113962835, 0.8290382383308268, 0.8298047893565543, 0.8305354244080977, 0.8314828761785078, 0.8317720003170577, 0.8320200050105026, 0.832703987896124, 0.8337550546562104, 0.8342787691171707, 0.8348823304584657, 0.8350603542367908, 0.8354169176459431, 0.8360816806064993, 0.8364612702171595, 0.8369168821826424, 0.8373838500731884, 0.8377085239419991, 0.8380566180368805, 0.8383068085487045, 0.838876865410325, 0.8390888588391721, 0.8395635031698633, 0.8399662690049854, 0.8402025699094567, 0.8410917749855291, 0.8411809632155154, 0.8414911071989337, 0.8416380184575795, 0.8419756991042915, 0.8422247535820401, 0.8425536183499656, 0.8443440019968967, 0.8458220994440444, 0.8472500433964772, 0.8484629802748265, 0.8495057953403408, 0.8503955007743037, 0.8513203649946895, 0.8522473105170579, 0.8528841899698701, 0.8537157881509705, 0.8542546479653915, 0.8548016864632801, 0.8552319564464702, 0.8556303769539315, 0.8559157132231469, 0.8562223734991002, 0.8565471958724582, 0.8568283584858901, 0.8570814048379788, 0.8572704664437893, 0.8574782724914285, 0.8575533756357344, 0.857708476701679, 0.8579589604509389, 0.8580592369867938, 0.8582125800426325, 0.8584004464265469, 0.8585196685384102, 0.8586025543765873, 0.8587025952021062, 0.8586929166777539, 0.858659791943337, 0.8586299796823617, 0.8587516920398032, 0.8588235825590909, 0.8589503486913594, 0.8589657524517416, 0.8589785863274259, 0.8589657227530417, 0.8590040031697557, 0.8590740471298886, 0.8590506079665985, 0.8590915773845471, 0.8591783074943605, 0.8591820928970328, 0.8592241798705073, 0.8591989639730649, 0.8593126060264362, 0.8593151686071511, 0.8594049831658637, 0.859299622273976, 0.8592689211535062, 0.8592646746989235, 0.8592608528897993, 0.859246235738997, 0.8592188142547057, 0.8592684066150033, 0.8592753891368613, 0.8593071169776932, 0.859323465003192], "moving_var_accuracy_train": [0.027861365678827462, 0.05476395183111295, 0.07689504816251239, 0.09402667133723785, 0.10732347380726291, 0.11702142891972486, 0.12312143187172081, 0.1259633480862535, 0.12629484432477348, 0.12505693197915113, 0.12183608464048828, 0.11748605450475547, 0.11248088685405341, 0.10705018731331686, 0.10138642276662717, 0.09513383738405644, 0.08925869150979886, 0.08326545830081854, 0.07749364068269983, 0.07186659557169611, 0.06643217005415636, 0.06124793845006226, 0.056506554298166714, 0.052096275442885746, 0.047801908427056956, 0.043892436307021325, 0.04016581515084413, 0.036767006776148525, 0.0336268811785727, 0.030688128720760977, 0.027974447900544593, 0.02551879605660096, 0.023255052320068276, 0.021183599421394604, 0.019279126950242365, 0.017525543774857787, 0.01593230741911757, 0.014479642213120505, 0.013148360991113408, 0.011949479380388154, 0.010850075570923197, 0.00985429745641714, 0.008933086644883632, 0.008110070633352872, 0.007364851888501713, 0.0066896575008145, 0.006069067656097214, 0.005513425174338971, 0.005011993095317476, 0.004534333542105097, 0.004111496487734889, 0.0037289439557939585, 0.003382979748655105, 0.0030678157578667817, 0.002778936776777329, 0.002513598760213193, 0.0022781714188847306, 0.002059858365090282, 0.0018629418534573212, 0.001687329494517208, 0.0015268834397461036, 0.0013855681874315776, 0.0012676983330242007, 0.0011593782614080876, 0.0010488120304179658, 0.0009537000098013388, 0.0008639266327454617, 0.000783136984342044, 0.0007158168016815481, 0.0006479618187571531, 0.0005866123862581236, 0.0005359132999244387, 0.00048526780979918436, 0.0004388552309548522, 0.0004058827949369589, 0.00036973807371073694, 0.00033633712987412873, 0.00030637908933191054, 0.00027859969697367916, 0.0002553593267913449, 0.0002392588273605688, 0.0002178698821666727, 0.00019796236024527622, 0.00017890197495941954, 0.00016263388269006077, 0.00014951581972714296, 0.00014107643216730256, 0.0001843914169305467, 0.00022110889767566614, 0.0002456545549748495, 0.00026105129027541546, 0.00027529640964740857, 0.0002822299387349705, 0.0002822165794004552, 0.00027605453175033444, 0.00026900533541949015, 0.00025858678369331835, 0.0002499981833905532, 0.00023893419098479712, 0.000225776171407514, 0.000212435942940869, 0.00019878955421966446, 0.00018400622854663467, 0.0001702289559876999, 0.0001570060068889556, 0.00014443212620962717, 0.00013245538918184565, 0.0001210530582457804, 0.00011059810934169755, 0.00010095669615548684, 9.202539763525398e-05, 8.372537995538389e-05, 7.63984081728799e-05, 6.917863444976316e-05, 6.256179036163291e-05, 5.6689065747898064e-05, 5.130043569398826e-05, 4.640411194997432e-05, 4.1831616710154786e-05, 3.784542200096539e-05, 3.4231851862461774e-05, 3.0947234548810685e-05, 2.792276344220241e-05, 2.5166480135489126e-05, 2.2788906132121152e-05, 2.05668032864319e-05, 1.851027140059411e-05, 1.6698879535847946e-05, 1.5135047232725711e-05, 1.362278298981612e-05, 1.226258854953822e-05, 1.1036393056929399e-05, 9.932943152059826e-06, 8.940968989949058e-06, 8.050233804239206e-06, 7.254052992590341e-06, 6.5333850393633835e-06, 5.881868643129555e-06, 5.3278704963104714e-06, 4.810571472400018e-06, 4.330258896170492e-06, 3.912072651869783e-06, 3.522795380358451e-06, 3.1714353925615065e-06, 2.8650898568080385e-06, 2.5800199216657857e-06, 2.325853870863253e-06], "duration": 101401.012908, "accuracy_train": [0.5563908066860466, 0.6299862726098191, 0.6669238749884644, 0.6936162228336102, 0.7231859873915651, 0.7476443899386305, 0.763589503449151, 0.7736548743770765, 0.7833514658891657, 0.7980206314599483, 0.7990197244716685, 0.8049710239594868, 0.8131766363279809, 0.8210606932332041, 0.828917893768457, 0.8237066765296235, 0.8377512963155224, 0.8373105995062754, 0.8433302115056294, 0.8452593640411591, 0.8465857803271503, 0.848328920957918, 0.8577196382428941, 0.8635335917312662, 0.8587208941837394, 0.8663208863971945, 0.8636019042428018, 0.8692276828972868, 0.8718761896110188, 0.8710162450396824, 0.8720636434685308, 0.8771542774086378, 0.8782732327427095, 0.8804796006944444, 0.8814121836355666, 0.8815488086586378, 0.8840123849321706, 0.8856661244924326, 0.8861046583725545, 0.8895927420750278, 0.8898703179794205, 0.8920334273486527, 0.890407265134736, 0.8943131546465486, 0.8961976066468254, 0.8979607543720007, 0.8976584850267626, 0.900659008455611, 0.9027283908960871, 0.8977067904438908, 0.901589428467608, 0.902820675872093, 0.9040758957410484, 0.904540204526578, 0.9042146836932448, 0.9033325690983758, 0.9060075716938908, 0.9043091315983758, 0.9050989612172389, 0.9069587197766703, 0.9067494563838132, 0.9093547045150425, 0.9143984749907714, 0.9150713261927832, 0.9099109377883905, 0.9133764909791436, 0.9118855118355482, 0.9126785858480989, 0.9166295363833518, 0.9131174802164084, 0.9135145579549648, 0.9173506930024916, 0.9146066569190661, 0.9143043875738279, 0.9209539526808784, 0.9180700471806941, 0.9180467956925988, 0.9187668708471761, 0.9186509738948875, 0.9207432473352714, 0.9245343213593578, 0.9206284318475452, 0.9204198894310631, 0.9191664720030455, 0.9208384162167773, 0.9229292477044113, 0.9261150620616464, 0.9437186014788667, 0.9457411204549648, 0.9462294017049648, 0.9468096074427832, 0.9490188593000184, 0.9495307525263011, 0.9496233979904946, 0.9493454615979143, 0.9503681665859173, 0.9502991330980066, 0.9519721587763011, 0.9519485468000184, 0.9516709708956257, 0.9519725192644887, 0.9520422737287744, 0.9512978656215393, 0.9516931409191584, 0.9517403648717239, 0.9517865073597268, 0.9517167528954411, 0.9515307409906791, 0.9517400043835363, 0.951855901335825, 0.9518798738002953, 0.9518093983596345, 0.9523677945621077, 0.9514606260382059, 0.9513450895741048, 0.9517632558716316, 0.9516702499192506, 0.9516935014073459, 0.9511118537167773, 0.9518093983596345, 0.9518562618240125, 0.9518566223122, 0.9516233864548725, 0.9514606260382059, 0.9521345587047803, 0.9518101193360096, 0.9511358261812477, 0.951762895383444, 0.952251176633444, 0.9513915925502953, 0.9514380955264857, 0.951274614133444, 0.9513443685977298, 0.9511819686692506, 0.9514842380144887, 0.9516237469430602, 0.9511122142049648, 0.9514609865263934, 0.9519492677763934, 0.9518093983596345, 0.9513450895741048, 0.9518330103359173, 0.9513211171096345, 0.9515539924787744, 0.9518093983596345, 0.9516241074312477, 0.9517167528954411], "end": "2016-01-30 19:53:25.750000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0], "moving_var_accuracy_valid": [0.02716958301094001, 0.052892209710910784, 0.07405318967700762, 0.09022162883477786, 0.10251891833693616, 0.11122849392979653, 0.11696860476028867, 0.11947902224136892, 0.1194425385139611, 0.11790744039389009, 0.11444697097577344, 0.11014294586754597, 0.10494512303590883, 0.09946973078238627, 0.09361083857531262, 0.087522570026463, 0.08161352903467146, 0.07583733576973782, 0.07035353747997078, 0.06499678653793159, 0.0598928042403396, 0.055049280064938436, 0.05068966858715993, 0.04658880537960985, 0.04256549208239648, 0.03897770558307561, 0.03562206420641681, 0.032496544908940085, 0.029617211128969246, 0.026926881808515706, 0.024530804330805494, 0.022318074322044232, 0.020266823390145402, 0.018394625694802966, 0.016708869841217857, 0.015158229325867962, 0.01374034673135235, 0.012430958174199268, 0.011261043745487443, 0.010198862724999012, 0.0092255760244083, 0.008360540421020244, 0.007555155578789458, 0.00685633439691747, 0.006199042517925541, 0.005607111842358415, 0.005083053960452876, 0.004589285558665887, 0.004167442732246659, 0.003757360743532112, 0.003389546321421187, 0.003071997746863227, 0.0027765737093759842, 0.002512417252225146, 0.0022690351018644435, 0.0020441860424657656, 0.0018422162901487588, 0.0016632830654092787, 0.0015017592070752446, 0.0013596622700829996, 0.0012244483779821293, 0.0011025570971356523, 0.0009965118807124943, 0.0009068033646486715, 0.0008185915197133747, 0.0007400109443763894, 0.0006662950821295929, 0.00060080981109935, 0.0005447060181329633, 0.0004915322107723582, 0.0004442472300629426, 0.0004017850381538571, 0.0003625552524282678, 0.00032739025267546285, 0.0002952145850377773, 0.0002686178099633253, 0.0002421604998918616, 0.0002199720350685913, 0.00019943481442320657, 0.0001799938760379717, 0.0001691106594399908, 0.00015227118435930443, 0.00013790976953742935, 0.00012431303884493844, 0.00011290798893291869, 0.00010217544323560633, 9.293126723228999e-05, 0.00011248740293784762, 0.00012090161121344314, 0.00012716266547370636, 0.00012768734176407255, 0.00012470577693543837, 0.00011935938107490261, 0.00011512180740276259, 0.00011134267867543568, 0.00010385894974462235, 9.969705458344458e-05, 9.234067822148085e-05, 8.579987046288231e-05, 7.888607374250343e-05, 7.242611647514535e-05, 6.591625590639803e-05, 6.017099503938848e-05, 5.510348170355525e-05, 5.03046052699264e-05, 4.5850436849682374e-05, 4.15870917818391e-05, 3.781703278457378e-05, 3.408609384667816e-05, 3.089399152792479e-05, 2.8369271352921573e-05, 2.562284267041696e-05, 2.3272185238340803e-05, 2.1262610718352623e-05, 1.926427485413185e-05, 1.739967792825147e-05, 1.5749783636361013e-05, 1.4175648337227636e-05, 1.2767958735776625e-05, 1.149916180033908e-05, 1.0482570701890994e-05, 9.480827852573066e-06, 8.677371937928895e-06, 7.811770226641195e-06, 7.032075579262789e-06, 6.330357265249942e-06, 5.710510051459054e-06, 5.18361445347299e-06, 4.670197557507335e-06, 4.2182842406200064e-06, 3.864154824092138e-06, 3.477868305143453e-06, 3.1460232946552457e-06, 2.8371435385441057e-06, 2.6696598313395362e-06, 2.4027529495848614e-06, 2.235077549237042e-06, 2.1114780521674377e-06, 1.9088132761336543e-06, 1.7180942399089831e-06, 1.5464162719429268e-06, 1.393697594626805e-06, 1.2610952753707542e-06, 1.1571203676325708e-06, 1.0418471313728039e-06, 9.467223211902363e-07, 8.544554105105816e-07], "accuracy_test": 0.8539979272959183, "start": "2016-01-29 15:43:24.737000", "learning_rate_per_epoch": [0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 0.0004498158523347229, 4.498158523347229e-05, 4.498158523347229e-05, 4.498158523347229e-05, 4.498158523347229e-05, 4.498158523347229e-05, 4.498158523347229e-05, 4.498158523347229e-05, 4.498158523347229e-05, 4.498158523347229e-05, 4.498158523347229e-05, 4.498158432397759e-06, 4.4981584323977586e-07, 4.4981582902892114e-08, 4.4981582902892114e-09, 4.49815823477806e-10, 4.498158096000182e-11, 4.4981579225278345e-12, 4.498158030948052e-13, 4.498157963185416e-14, 4.498157878482121e-15, 4.498157878482121e-16, 4.498157878482121e-17, 4.498157713045999e-18, 4.498157506250846e-19, 4.49815744162736e-20, 4.498157280068647e-21, 4.498157078120255e-22, 4.4981571412291276e-23, 4.498157062343037e-24, 4.498156865127811e-25, 4.498156988387327e-26, 4.4981569113501294e-27, 4.498156718757135e-28, 4.4981568391277565e-29, 4.4981568391277565e-30, 4.498157027206853e-31, 4.498156968432135e-32, 4.498156968432135e-33, 4.498156784761143e-34, 4.498156842158328e-35, 4.4981567704118465e-36, 4.498156860094948e-37, 4.498156860094948e-38, 4.498156860094948e-39, 4.4981540574980195e-40, 4.498168070482663e-41, 4.498168070482663e-42, 4.498168070482663e-43, 4.484155085839415e-44, 4.203895392974451e-45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_train_first": 0.5563908066860466, "accuracy_train_last": 0.9517167528954411, "batch_size_eval": 1024, "accuracy_train_std": [0.01883962323357498, 0.017134746731830953, 0.017374364615590217, 0.017376053889247265, 0.01638984008369068, 0.015901509727125687, 0.016746064242068235, 0.01703508413590324, 0.015247963029601807, 0.013465783924954974, 0.014943875692120901, 0.013728817567234517, 0.014361277290018876, 0.012829768396312976, 0.012348397590559744, 0.013948016294495925, 0.0119999348378067, 0.011918131637539327, 0.012983585977406115, 0.013253029693430356, 0.012033247228069347, 0.011899411244935145, 0.012917359526505101, 0.011806665041740686, 0.012143600920730078, 0.013572416433485529, 0.011000337309898809, 0.01252404413481671, 0.013917931675228768, 0.014175392392130625, 0.013076924072454792, 0.01251094858183245, 0.01141661891960465, 0.011982299451208538, 0.01115515524259054, 0.013685137904842888, 0.014129857280596441, 0.012084856948362926, 0.0139251875136449, 0.013436972245586619, 0.01305142511083247, 0.01237520397744463, 0.0128273876494025, 0.012072847395702734, 0.011829148706501208, 0.012980889653459657, 0.01340622824573938, 0.013033195165487736, 0.01313513894645952, 0.012726781952228022, 0.012900686520590201, 0.012443336990392876, 0.012330414405020581, 0.012581187020898419, 0.012767782350865816, 0.012692587689925384, 0.012902862394022252, 0.014350817033588103, 0.012643022800321669, 0.012040618376982195, 0.012678244312597321, 0.012362096821875545, 0.011998505084934774, 0.013482716470159067, 0.013123714825667116, 0.012574305985463267, 0.01225408268935182, 0.014195691776535466, 0.012699760945540381, 0.01299559554657463, 0.011367372818599094, 0.012394366473225291, 0.012850988221185772, 0.013972994816119534, 0.01205310835049348, 0.01190786305938071, 0.012100032995503659, 0.013594762684234846, 0.013534923363076585, 0.012956828035044922, 0.012431895242824639, 0.011827690875966565, 0.011996126648736524, 0.011108497359586321, 0.011816791741689238, 0.01282585708379616, 0.012530240386286792, 0.010336634638454975, 0.008891926559714266, 0.009074006536450078, 0.008758125891671582, 0.008477931237098696, 0.008020751556432804, 0.0080189645264333, 0.00786911525071503, 0.007843727565586565, 0.00794131151560782, 0.008095995474393271, 0.007943619571891745, 0.00818292633918318, 0.007937562764290215, 0.008157456188940093, 0.008194272637338877, 0.008085104942627467, 0.007988927335649886, 0.0082180891227929, 0.008168984950682232, 0.007948367826534826, 0.008215909240369012, 0.007667608020516451, 0.008009021294569839, 0.008061292217313692, 0.007696827571820703, 0.007929558135938935, 0.008188118218681999, 0.008033994135163333, 0.00792079963805549, 0.008034586448368141, 0.008094659034241058, 0.008083794697690584, 0.00844566121168511, 0.00818904970048963, 0.008104723890587941, 0.007997987605372969, 0.007764008798597874, 0.008055856129213803, 0.008113268423428108, 0.008196095234902912, 0.007835027748079215, 0.008024528011920572, 0.007787591483060109, 0.00825120537541509, 0.00816844575707794, 0.008306899144090754, 0.008362350060232435, 0.007909247176565102, 0.008100484102304167, 0.008235968449010521, 0.008043579497621432, 0.008136988687803652, 0.0083637142451794, 0.008214478792680146, 0.008134084068702453, 0.008073425755347153, 0.008027420224498663, 0.008107739667303823, 0.008042930268478165], "accuracy_test_std": 0.00788215141294965, "error_valid": [0.4505600527108433, 0.3829213337725903, 0.3467252800263554, 0.32283920839608427, 0.2967455760542168, 0.27577889683734935, 0.25602262565888556, 0.24828072053840367, 0.2420654296875, 0.22939953172063254, 0.23124088149472888, 0.22337690606174698, 0.22266507435993976, 0.21530997035015065, 0.21472020896084332, 0.2158394319465362, 0.20972562123493976, 0.20689741387424698, 0.20066153285015065, 0.20156750047063254, 0.19994970114834332, 0.19919668910015065, 0.18793533509036142, 0.18574836455195776, 0.19505659356174698, 0.1844864810805723, 0.1844555958207832, 0.18464973173945776, 0.1831951830760542, 0.18601309535015065, 0.17802704960466864, 0.1780167545180723, 0.17973603397966864, 0.17861681099397586, 0.17457819559487953, 0.17521943241716864, 0.17512824736445776, 0.1780167545180723, 0.1736222232680723, 0.17263536568147586, 0.1738663638930723, 0.16906444135918675, 0.17335749246987953, 0.16487287038780118, 0.1697159732680723, 0.16805699359939763, 0.16374335231551207, 0.1691968067582832, 0.1603356786521084, 0.17000129423945776, 0.16836290474397586, 0.1613843067582832, 0.1638257130082832, 0.1618725880082832, 0.16355068712349397, 0.16718338196536142, 0.1662671192582832, 0.16329625141189763, 0.16288886012801207, 0.15999005788780118, 0.16562588243599397, 0.16574795274849397, 0.1611401661332832, 0.15678534450301207, 0.16100780073418675, 0.15968561746987953, 0.1633374317582832, 0.16137401167168675, 0.15793545274849397, 0.16012242328689763, 0.15898261012801207, 0.15841343891189763, 0.15936941123870485, 0.15881053510918675, 0.15944147684487953, 0.1559926228350903, 0.15900320030120485, 0.15616469785391573, 0.15640883847891573, 0.15767072195030118, 0.1509053793298193, 0.1580163427146084, 0.15571759695030118, 0.1570397802146084, 0.15498517507530118, 0.15553375611822284, 0.15448659873870485, 0.13954254518072284, 0.1408750235316265, 0.1398984610316265, 0.14062058782003017, 0.14110886907003017, 0.14159715032003017, 0.14035585702183728, 0.1394101797816265, 0.1413838949548193, 0.1387998282191265, 0.1408956137048193, 0.14027496705572284, 0.1408956137048193, 0.14078383847891573, 0.14151626035391573, 0.1410176840173193, 0.1405294027673193, 0.14064117799322284, 0.14064117799322284, 0.14102797910391573, 0.1406514730798193, 0.14177069606551207, 0.1408956137048193, 0.13978668580572284, 0.14103827419051207, 0.1404073324548193, 0.13990875611822284, 0.1404073324548193, 0.1406514730798193, 0.14039703736822284, 0.14139419004141573, 0.14163833066641573, 0.14163833066641573, 0.14015289674322284, 0.1405294027673193, 0.13990875611822284, 0.1408956137048193, 0.14090590879141573, 0.14115004941641573, 0.1406514730798193, 0.14029555722891573, 0.14116034450301207, 0.14053969785391573, 0.1400411215173193, 0.14078383847891573, 0.14039703736822284, 0.14102797910391573, 0.13966461549322284, 0.14066176816641573, 0.13978668580572284, 0.14164862575301207, 0.14100738893072284, 0.1407735433923193, 0.1407735433923193, 0.14088531861822284, 0.14102797910391573, 0.1402852621423193, 0.14066176816641573, 0.1404073324548193, 0.1405294027673193], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.09398776731074371, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.000449815866719963, "optimization": "adam", "nb_data_augmentation": 2, "learning_rate_decay_method": "discrete", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 1.4946027806033835e-08, "rotation_range": [0, 0], "momentum": 0.9511371602609577}, "accuracy_valid_max": 0.8612001717808735, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8594705972326807, "accuracy_valid_std": [0.012721328201111066, 0.021627020833429707, 0.013628426406974876, 0.016169670245346417, 0.013354702096681822, 0.008637974188030762, 0.007773787404994396, 0.00430847083494404, 0.008575385151212638, 0.007222705967734549, 0.006904058854586432, 0.007888167803000033, 0.01029530972421178, 0.006202704019377578, 0.005908971929813122, 0.006507842810770024, 0.010372688847684625, 0.006748957908317808, 0.006544769811678663, 0.010865478405248286, 0.008031868532461102, 0.010454097948396543, 0.009532049843629643, 0.009505206937105744, 0.0115257938305077, 0.006100308775628853, 0.006481566295448226, 0.010520681307657948, 0.010874951006416089, 0.011708043856469235, 0.008324924920549898, 0.008133564670028166, 0.008792287736488187, 0.008233301744974731, 0.006660995554220337, 0.009213055798694879, 0.011568647255661065, 0.008589776992028396, 0.00748335090599157, 0.009455966670326712, 0.00800922629109238, 0.009817050857800911, 0.012425076220247388, 0.004736278537266693, 0.010952490253565593, 0.004373556316999645, 0.00831602994173025, 0.01083565756857758, 0.00740524001418226, 0.013654464217667993, 0.010198230314286478, 0.010006089105595027, 0.010412999714066397, 0.009479590655995502, 0.004843043702478021, 0.013987595903061046, 0.007714845942519607, 0.009189424867564031, 0.004234629424798679, 0.007180902536658137, 0.005137982048837707, 0.008823735839344746, 0.008202636805266877, 0.005456360217962544, 0.00999516732059313, 0.011097541630588945, 0.008109304450350243, 0.009422014473540121, 0.008315406317783014, 0.005930951559371923, 0.005647090139028811, 0.008297975737429188, 0.00517129389770891, 0.009524249480286474, 0.010555658802789452, 0.00965103416772513, 0.003708546262504463, 0.004383972450877346, 0.005642468071347563, 0.004228213037096212, 0.005211407791398878, 0.005745017331036377, 0.00783173254667081, 0.00605751853711398, 0.006361555007499659, 0.005113316846518524, 0.006251837245381508, 0.004797148745321816, 0.004338063284393055, 0.005026687253763272, 0.003812486335387478, 0.0051207295576894745, 0.0028049865207655043, 0.005561719456051397, 0.005631219353647199, 0.007336847841979834, 0.005161057713714485, 0.007403300830695818, 0.006567747542846376, 0.006781399248165793, 0.008175688923209353, 0.008201516134747178, 0.007093458290296807, 0.007621785024126061, 0.005796690147624411, 0.0065315788805942855, 0.007839612116236702, 0.007011372778894643, 0.007441083781438081, 0.0070061984907183366, 0.006559870221164482, 0.008748640603253656, 0.006956825006499029, 0.006343613360687611, 0.006835823587347707, 0.006943030601129347, 0.007020365920252805, 0.007587699755159813, 0.007558968306241725, 0.007415674928342857, 0.006641372822658084, 0.006759721949955563, 0.006884329149811275, 0.006585193345142297, 0.0077146900533838735, 0.007686433301609706, 0.006680523575416459, 0.008372362068106855, 0.008500034652297562, 0.008321299680119769, 0.006857914817404824, 0.007426936043424067, 0.005160985626757604, 0.007401607792784048, 0.007093836398429889, 0.007563716988346238, 0.006948172857575935, 0.007546246737268783, 0.006153568136786181, 0.006470410903998334, 0.007745064833705351, 0.006111367267450236, 0.007401607792784048, 0.007179695142358402, 0.007041336531408472, 0.00688794162683192, 0.007103675979571584], "accuracy_valid": [0.5494399472891567, 0.6170786662274097, 0.6532747199736446, 0.6771607916039157, 0.7032544239457832, 0.7242211031626506, 0.7439773743411144, 0.7517192794615963, 0.7579345703125, 0.7706004682793675, 0.7687591185052711, 0.776623093938253, 0.7773349256400602, 0.7846900296498494, 0.7852797910391567, 0.7841605680534638, 0.7902743787650602, 0.793102586125753, 0.7993384671498494, 0.7984324995293675, 0.8000502988516567, 0.8008033108998494, 0.8120646649096386, 0.8142516354480422, 0.804943406438253, 0.8155135189194277, 0.8155444041792168, 0.8153502682605422, 0.8168048169239458, 0.8139869046498494, 0.8219729503953314, 0.8219832454819277, 0.8202639660203314, 0.8213831890060241, 0.8254218044051205, 0.8247805675828314, 0.8248717526355422, 0.8219832454819277, 0.8263777767319277, 0.8273646343185241, 0.8261336361069277, 0.8309355586408133, 0.8266425075301205, 0.8351271296121988, 0.8302840267319277, 0.8319430064006024, 0.8362566476844879, 0.8308031932417168, 0.8396643213478916, 0.8299987057605422, 0.8316370952560241, 0.8386156932417168, 0.8361742869917168, 0.8381274119917168, 0.836449312876506, 0.8328166180346386, 0.8337328807417168, 0.8367037485881024, 0.8371111398719879, 0.8400099421121988, 0.834374117564006, 0.834252047251506, 0.8388598338667168, 0.8432146554969879, 0.8389921992658133, 0.8403143825301205, 0.8366625682417168, 0.8386259883283133, 0.842064547251506, 0.8398775767131024, 0.8410173898719879, 0.8415865610881024, 0.8406305887612951, 0.8411894648908133, 0.8405585231551205, 0.8440073771649097, 0.8409967996987951, 0.8438353021460843, 0.8435911615210843, 0.8423292780496988, 0.8490946206701807, 0.8419836572853916, 0.8442824030496988, 0.8429602197853916, 0.8450148249246988, 0.8444662438817772, 0.8455134012612951, 0.8604574548192772, 0.8591249764683735, 0.8601015389683735, 0.8593794121799698, 0.8588911309299698, 0.8584028496799698, 0.8596441429781627, 0.8605898202183735, 0.8586161050451807, 0.8612001717808735, 0.8591043862951807, 0.8597250329442772, 0.8591043862951807, 0.8592161615210843, 0.8584837396460843, 0.8589823159826807, 0.8594705972326807, 0.8593588220067772, 0.8593588220067772, 0.8589720208960843, 0.8593485269201807, 0.8582293039344879, 0.8591043862951807, 0.8602133141942772, 0.8589617258094879, 0.8595926675451807, 0.8600912438817772, 0.8595926675451807, 0.8593485269201807, 0.8596029626317772, 0.8586058099585843, 0.8583616693335843, 0.8583616693335843, 0.8598471032567772, 0.8594705972326807, 0.8600912438817772, 0.8591043862951807, 0.8590940912085843, 0.8588499505835843, 0.8593485269201807, 0.8597044427710843, 0.8588396554969879, 0.8594603021460843, 0.8599588784826807, 0.8592161615210843, 0.8596029626317772, 0.8589720208960843, 0.8603353845067772, 0.8593382318335843, 0.8602133141942772, 0.8583513742469879, 0.8589926110692772, 0.8592264566076807, 0.8592264566076807, 0.8591146813817772, 0.8589720208960843, 0.8597147378576807, 0.8593382318335843, 0.8595926675451807, 0.8594705972326807], "seed": 636482284, "model": "residualv3", "loss_std": [0.34161046147346497, 0.25342509150505066, 0.25368502736091614, 0.25025084614753723, 0.24849940836429596, 0.24614794552326202, 0.24410201609134674, 0.24164168536663055, 0.23961852490901947, 0.23920758068561554, 0.237965390086174, 0.2352253496646881, 0.23460833728313446, 0.23149047791957855, 0.23162013292312622, 0.2281113564968109, 0.22737865149974823, 0.2283545583486557, 0.22591502964496613, 0.22414764761924744, 0.22711820900440216, 0.22260206937789917, 0.21995797753334045, 0.217051163315773, 0.21475952863693237, 0.214716836810112, 0.21278958022594452, 0.2106848806142807, 0.21071259677410126, 0.21080675721168518, 0.2082565724849701, 0.20568279922008514, 0.20517756044864655, 0.2025463879108429, 0.2021457403898239, 0.20088456571102142, 0.20212125778198242, 0.20173324644565582, 0.19572432339191437, 0.19704487919807434, 0.19805750250816345, 0.19443735480308533, 0.19213172793388367, 0.19262444972991943, 0.19173136353492737, 0.1894703209400177, 0.18999753892421722, 0.18674036860466003, 0.18779973685741425, 0.18197858333587646, 0.1848708838224411, 0.18659183382987976, 0.1835176944732666, 0.18406106531620026, 0.1813017576932907, 0.18254894018173218, 0.17725065350532532, 0.17894898355007172, 0.17917516827583313, 0.17973266541957855, 0.1749250739812851, 0.1765875220298767, 0.1763620525598526, 0.17438657581806183, 0.17374061048030853, 0.1720532476902008, 0.17445021867752075, 0.17305541038513184, 0.1707831770181656, 0.17004264891147614, 0.1693960279226303, 0.17023849487304688, 0.16785751283168793, 0.16854728758335114, 0.1654885709285736, 0.16523464024066925, 0.16701637208461761, 0.16664862632751465, 0.16418753564357758, 0.1637430340051651, 0.16349752247333527, 0.1627960205078125, 0.1644255518913269, 0.1586059182882309, 0.16059796512126923, 0.16029229760169983, 0.15960441529750824, 0.147308349609375, 0.14283208549022675, 0.13998928666114807, 0.14121496677398682, 0.13923180103302002, 0.1378629058599472, 0.13760070502758026, 0.13645461201667786, 0.13754838705062866, 0.13725973665714264, 0.13649678230285645, 0.13517552614212036, 0.13521282374858856, 0.1357240527868271, 0.13473495841026306, 0.13226218521595, 0.13416104018688202, 0.13652288913726807, 0.13658803701400757, 0.13596662878990173, 0.13478292524814606, 0.1349593997001648, 0.1328737437725067, 0.1367882490158081, 0.13555680215358734, 0.1351562738418579, 0.13404884934425354, 0.13389191031455994, 0.13552075624465942, 0.13640588521957397, 0.13640648126602173, 0.13639609515666962, 0.13573004305362701, 0.13485528528690338, 0.13441622257232666, 0.1352524757385254, 0.13496384024620056, 0.13548654317855835, 0.13264767825603485, 0.13433291018009186, 0.1333918422460556, 0.1375100463628769, 0.1346372663974762, 0.1349477618932724, 0.13500086963176727, 0.1362193375825882, 0.1340261846780777, 0.13643960654735565, 0.13296546041965485, 0.1338275671005249, 0.13531672954559326, 0.13458675146102905, 0.13502807915210724, 0.13264866173267365, 0.13359786570072174, 0.1329648494720459, 0.13625796139240265, 0.1356854885816574, 0.13412009179592133, 0.13587678968906403]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:24 2016", "state": "available"}], "summary": "f4bcc8e985b30071caf01f51396125ad"}