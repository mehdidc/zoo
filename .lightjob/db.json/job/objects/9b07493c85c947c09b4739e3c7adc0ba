{"content": {"hp_model": {"f0": 32, "f1": 16, "f2": 32, "f3": 16, "nonlin": "rectify", "nbg1": 6, "nbg3": 5, "nbg2": 7, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.01454754781029647, 0.01267880618638536, 0.011834814402992479, 0.011643453695868, 0.011531547459141336, 0.010416044512530238, 0.009729704104217208, 0.009453217630393614, 0.0089401659259857, 0.010236475495407097, 0.012884728609578991, 0.013031594280957582, 0.013926268930408926, 0.014832358175477144, 0.013683854449491202, 0.014005531263322967, 0.014388046344988734, 0.014774517315902649, 0.015793570888530537, 0.017286760147115283, 0.017770640416566834, 0.01740339476597823, 0.018496697393161392, 0.01936082803953912, 0.019144322684568015, 0.019101399160026632, 0.019168818607433462, 0.018494799096619316, 0.018192710637432226, 0.017267375646743556, 0.016962387737080833, 0.017434037212122395, 0.017498818679055023, 0.016838456305005037, 0.01704960529225272, 0.017390057506989996, 0.016416680479535564, 0.017113701913638008, 0.017716246023799658, 0.0175811547286794, 0.01736505467356346, 0.01770059650409903, 0.01734111442296152, 0.018241179279263914, 0.017735686120233345, 0.017421000483993088, 0.016875092791374495, 0.01731011755202379, 0.016631642670592542, 0.01687780016878239, 0.01706974676872988, 0.017526554229312912, 0.017742573243264472, 0.018128077197554486, 0.018408671374704425, 0.01840295059691407, 0.018075393059285943, 0.018073798838528533, 0.01860243168420031, 0.018144273638400845, 0.017524839913334613, 0.01732152245625512, 0.01731675404644242, 0.01676700297804994, 0.017002709266241256, 0.01775087017447743, 0.017824816275745607, 0.018103526053958416, 0.017717259919514772, 0.017491950028701138, 0.016864627811675362, 0.016271688966730743], "moving_avg_accuracy_train": [0.03963542387643041, 0.08553619373500368, 0.13252846883363323, 0.17748566832347035, 0.21972338131070618, 0.2590647306277253, 0.2954367375737198, 0.32892932604410713, 0.3596399919769795, 0.3877351402391376, 0.4134578295536328, 0.4370570036569166, 0.4586985110939196, 0.4785315795062608, 0.49672070465710205, 0.5134489541607071, 0.5287764211246659, 0.5428059093243532, 0.5556742641802623, 0.567497599026771, 0.5783129505005243, 0.5882467296245213, 0.5973777209408622, 0.605751398095807, 0.613383002587629, 0.6204443258350031, 0.6269296890421543, 0.6329478775357333, 0.6385222852013646, 0.6436693883361285, 0.6484017625562255, 0.6527747955971607, 0.6568105427816306, 0.6605449496976351, 0.6640245345601437, 0.6672933447161632, 0.6703607958434763, 0.6732214111592302, 0.6759052469374562, 0.6783951038997645, 0.6807335953670232, 0.6829196178958893, 0.6849870195706783, 0.6869220858398932, 0.6887287136000346, 0.6904360227436764, 0.6920377051396207, 0.6935442874138185, 0.6949490395855964, 0.6962597834675683, 0.6974952565327717, 0.6986536492188263, 0.6997380553148469, 0.7007976901095896, 0.7018211158891438, 0.7027956414645428, 0.7037354574514403, 0.7046161690717909, 0.7054762388455826, 0.7062735531300904, 0.7070585653016237, 0.7078348307202893, 0.7085567210851836, 0.7092947780683503, 0.7099962317341528, 0.7106461412238513, 0.7112984530312373, 0.7119204108900276, 0.7125103998974626, 0.7130902181291541, 0.713644570572191, 0.7141807262006954], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 927360328, "moving_var_accuracy_train": [0.014138701432778792, 0.03168675735198829, 0.04839254688729699, 0.06174364027228838, 0.07162549583058854, 0.07839262214228314, 0.0824596659315701, 0.0843094806804336, 0.08436683763075467, 0.083034190070533, 0.08068568177361014, 0.07762940276146305, 0.07408165608262948, 0.07021364589820397, 0.06616987977216028, 0.062071400778038015, 0.05797864189201546, 0.05395221655512041, 0.05004734590988676, 0.046300732540932074, 0.042723405734346236, 0.03933918487007084, 0.03615564140483558, 0.03317114348620922, 0.030378201621664682, 0.02778914203353336, 0.02538876725353806, 0.023175857862882468, 0.02113793826399805, 0.01926257847371731, 0.01753787891817693, 0.015956201788153237, 0.01450716690737053, 0.0131819623717622, 0.011972733731924567, 0.010871626437256983, 0.009869147101297378, 0.008955880471030173, 0.008125119194287536, 0.007368401764093577, 0.006680778468766194, 0.006055708872359968, 0.005488605332288257, 0.004973445132255712, 0.004505475753803562, 0.004081162319030871, 0.0036961345656050847, 0.0033469492203849183, 0.0030300142563234613, 0.002742475276408257, 0.0024819652920210168, 0.00224584562535486, 0.002031844492049155, 0.0018387654759283044, 0.0016643155312717783, 0.0015064312790185619, 0.0013637374379197591, 0.0012343445707517686, 0.0011175675938187035, 0.001011532225051355, 0.0009159251995313173, 0.0008297559715801305, 0.0007514705057124624, 0.0006812260081348273, 0.0006175317425287541, 0.0005595800093790793, 0.0005074516046876682, 0.0004601879284219002, 0.00041730191883975794, 0.00037859742959199934, 0.000343503446312709, 0.00031174026740323087], "duration": 16679.664661, "accuracy_train": [0.3963542387643042, 0.4986431224621632, 0.5554589447212994, 0.5821004637320044, 0.5998627981958288, 0.613136874480897, 0.6227848000876707, 0.6303626222775932, 0.6360359853728313, 0.6405914745985604, 0.6449620333840901, 0.649449570586471, 0.6534720780269472, 0.6570291952173312, 0.6604228310146733, 0.6640031996931525, 0.6667236238002953, 0.6690713031215394, 0.671489457883444, 0.6739076126453488, 0.6756511137643042, 0.6776507417404947, 0.6795566427879292, 0.6811144924903101, 0.6820674430140273, 0.6839962350613695, 0.6852979579065154, 0.6871115739779439, 0.6886919541920451, 0.6899933165490033, 0.6909931305370985, 0.6921320929655776, 0.6931322674418604, 0.6941546119416758, 0.6953407983227206, 0.6967126361203396, 0.6979678559892949, 0.6989669490010152, 0.7000597689414914, 0.700803816560539, 0.7017800185723514, 0.7025938206556848, 0.70359363464378, 0.7043376822628277, 0.7049883634413068, 0.7058018050364525, 0.7064528467031193, 0.7071035278815984, 0.7075918091315984, 0.7080564784053156, 0.7086145141196013, 0.7090791833933185, 0.7094977101790328, 0.7103344032622739, 0.7110319479051311, 0.7115663716431341, 0.712193801333518, 0.7125425736549464, 0.7132168668097084, 0.7134493816906607, 0.7141236748454227, 0.7148212194882798, 0.7150537343692323, 0.7159372909168512, 0.716309314726375, 0.716495326631137, 0.7171692592977114, 0.71751803161914, 0.717820300964378, 0.718308582214378, 0.7186337425595238, 0.7190061268572352], "end": "2016-01-24 14:38:26.728000", "learning_rate_per_epoch": [0.0002657867153175175, 0.00013289335765875876, 8.859557419782504e-05, 6.644667882937938e-05, 5.315734233590774e-05, 4.429778709891252e-05, 3.79695302399341e-05, 3.322333941468969e-05, 2.953185685328208e-05, 2.657867116795387e-05, 2.4162429326679558e-05, 2.214889354945626e-05, 2.0445131667656824e-05, 1.898476511996705e-05, 1.7719114111969247e-05, 1.6611669707344845e-05, 1.5634512237738818e-05, 1.476592842664104e-05, 1.398877429892309e-05, 1.3289335583976936e-05, 1.2656510079978034e-05, 1.2081214663339779e-05, 1.155594418378314e-05, 1.107444677472813e-05, 1.0631468285282608e-05, 1.0222565833828412e-05, 9.84395228442736e-06, 9.492382559983525e-06, 9.165059054794256e-06, 8.859557055984624e-06, 8.573764716857113e-06, 8.305834853672422e-06, 8.054143108893186e-06, 7.817256118869409e-06, 7.59390604798682e-06, 7.38296421332052e-06, 7.183424713730346e-06, 6.994387149461545e-06, 6.815043889218941e-06, 6.644667791988468e-06, 6.482602657342795e-06, 6.328255039989017e-06, 6.181086519063683e-06, 6.040607331669889e-06, 5.906371370656416e-06, 5.77797209189157e-06, 5.655036602547625e-06, 5.537223387364065e-06, 5.424218670668779e-06, 5.315734142641304e-06, 5.211504230828723e-06, 5.111282916914206e-06, 5.014843736717012e-06, 4.92197614221368e-06, 4.832485501538031e-06, 4.746191279991763e-06, 4.662924766307697e-06, 4.582529527397128e-06, 4.5048595893604215e-06, 4.429778527992312e-06, 4.357159014034551e-06, 4.2868823584285565e-06, 4.218836693326011e-06, 4.152917426836211e-06, 4.089026333531365e-06, 4.027071554446593e-06, 3.966965778090525e-06, 3.9086280594347045e-06, 3.85198154617683e-06, 3.79695302399341e-06, 3.743474735529162e-06, 3.69148210666026e-06], "accuracy_valid": [0.3843229362763554, 0.4886459902108434, 0.5395728421498494, 0.5572833325489458, 0.5725127070783133, 0.5799089914344879, 0.5862566476844879, 0.5858595514871988, 0.5860728068524097, 0.588036226939006, 0.5896025508283133, 0.5911791698042168, 0.5927660838667168, 0.5923792827560241, 0.5950957148908133, 0.5951060099774097, 0.5946177287274097, 0.5949839396649097, 0.5939970820783133, 0.5943632930158133, 0.5953295604292168, 0.5954516307417168, 0.5949530544051205, 0.5943324077560241, 0.5942103374435241, 0.5946986186935241, 0.5938338314194277, 0.5937117611069277, 0.5929793392319277, 0.5925013530685241, 0.5923895778426205, 0.5922675075301205, 0.5926337184676205, 0.5935088008283133, 0.5930205195783133, 0.5933867305158133, 0.5936411662274097, 0.5931425898908133, 0.5921660273908133, 0.5921660273908133, 0.5909350291792168, 0.5915453807417168, 0.5911791698042168, 0.5911688747176205, 0.5905585231551205, 0.5899481715926205, 0.5893378200301205, 0.5890833843185241, 0.5895819606551205, 0.5889716090926205, 0.5890936794051205, 0.5893378200301205, 0.5894598903426205, 0.5894598903426205, 0.5894598903426205, 0.5898261012801205, 0.5894598903426205, 0.5890936794051205, 0.5889613140060241, 0.5884730327560241, 0.5877406108810241, 0.5876185405685241, 0.5878626811935241, 0.5877406108810241, 0.5872523296310241, 0.5874964702560241, 0.5873743999435241, 0.5873743999435241, 0.5874964702560241, 0.5871302593185241, 0.5867640483810241, 0.5868861186935241], "accuracy_test": 0.5452168367346939, "start": "2016-01-24 10:00:27.064000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0], "accuracy_train_last": 0.7190061268572352, "batch_size_eval": 1024, "accuracy_train_std": [0.018160706683962156, 0.01798057266624169, 0.018532827495153028, 0.01884164575658643, 0.018164063302143686, 0.017392946306335793, 0.017773368045651824, 0.017129583680618784, 0.016284711298240842, 0.01590793262856561, 0.015739584388642227, 0.01537458134772937, 0.015107773476859229, 0.015203117860067289, 0.01492017154828694, 0.014773480457862247, 0.01466029464766407, 0.014335663818513039, 0.01425277624407894, 0.013996035821188605, 0.013694083298807731, 0.013522910701358339, 0.013537724063885904, 0.013418172107678669, 0.013068313909083576, 0.013265003542521994, 0.01315976456781825, 0.013249960448631012, 0.013520158537275569, 0.013921286246605883, 0.013458025504436923, 0.013813750291096981, 0.013399109472335035, 0.013559380498784744, 0.01344002403992153, 0.01320370093370581, 0.013561491355956117, 0.013422528693571181, 0.013228823367012884, 0.013163869896789719, 0.013151293689182894, 0.01318598774827935, 0.013329643042326584, 0.01336953514493328, 0.013494241062702934, 0.013399606829442301, 0.013480561379530107, 0.013472192311136713, 0.013233605682194803, 0.013686541970410032, 0.013591558871273524, 0.013662381267210127, 0.013745881893368714, 0.013810641743118085, 0.013747713618688434, 0.013747026492698917, 0.013732133950930881, 0.013784162408460148, 0.013480725328519993, 0.013652229772804418, 0.013580348278051983, 0.013651068269580114, 0.013862408310819196, 0.013693714618303545, 0.013498374635463195, 0.01341439559125236, 0.013317586676325616, 0.013278487439025238, 0.013283425169814617, 0.013323095958157347, 0.013452889858414599, 0.013355176659547078], "accuracy_test_std": 0.00959881431426095, "error_valid": [0.6156770637236446, 0.5113540097891567, 0.46042715785015065, 0.4427166674510542, 0.42748729292168675, 0.42009100856551207, 0.41374335231551207, 0.4141404485128012, 0.4139271931475903, 0.41196377306099397, 0.41039744917168675, 0.4088208301957832, 0.4072339161332832, 0.40762071724397586, 0.40490428510918675, 0.4048939900225903, 0.4053822712725903, 0.4050160603350903, 0.40600291792168675, 0.40563670698418675, 0.4046704395707832, 0.4045483692582832, 0.4050469455948795, 0.40566759224397586, 0.40578966255647586, 0.40530138130647586, 0.4061661685805723, 0.4062882388930723, 0.4070206607680723, 0.40749864693147586, 0.4076104221573795, 0.4077324924698795, 0.4073662815323795, 0.40649119917168675, 0.40697948042168675, 0.40661326948418675, 0.4063588337725903, 0.40685741010918675, 0.40783397260918675, 0.40783397260918675, 0.4090649708207832, 0.4084546192582832, 0.4088208301957832, 0.4088311252823795, 0.4094414768448795, 0.4100518284073795, 0.4106621799698795, 0.41091661568147586, 0.4104180393448795, 0.4110283909073795, 0.4109063205948795, 0.4106621799698795, 0.4105401096573795, 0.4105401096573795, 0.4105401096573795, 0.4101738987198795, 0.4105401096573795, 0.4109063205948795, 0.41103868599397586, 0.41152696724397586, 0.41225938911897586, 0.41238145943147586, 0.41213731880647586, 0.41225938911897586, 0.41274767036897586, 0.41250352974397586, 0.41262560005647586, 0.41262560005647586, 0.41250352974397586, 0.41286974068147586, 0.41323595161897586, 0.41311388130647586], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.5318989706709385, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.00026578671348354097, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "optimization": "adam", "nb_data_augmentation": 0, "learning_rate_decay_method": "lin", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 3.48037037235184e-05, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.0006604614026996081}, "accuracy_valid_max": 0.5954516307417168, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.5868861186935241, "loss_train": [2.4628775119781494, 2.082486391067505, 1.869444489479065, 1.7608239650726318, 1.6943025588989258, 1.6472340822219849, 1.6116435527801514, 1.583633542060852, 1.5603841543197632, 1.5407142639160156, 1.5236186981201172, 1.5086251497268677, 1.4952452182769775, 1.4830642938613892, 1.471935510635376, 1.4617486000061035, 1.4523158073425293, 1.443559169769287, 1.4353517293930054, 1.4276822805404663, 1.4204421043395996, 1.4136414527893066, 1.4072123765945435, 1.4010955095291138, 1.395284652709961, 1.3897671699523926, 1.3845044374465942, 1.3794293403625488, 1.374587893486023, 1.369917869567871, 1.365423560142517, 1.3611030578613281, 1.3569300174713135, 1.3528538942337036, 1.3489336967468262, 1.345133900642395, 1.3414435386657715, 1.3378486633300781, 1.3343870639801025, 1.3310136795043945, 1.3277308940887451, 1.3245490789413452, 1.3214393854141235, 1.318418264389038, 1.3154782056808472, 1.3126155138015747, 1.3098176717758179, 1.3070752620697021, 1.304385781288147, 1.3017560243606567, 1.2991864681243896, 1.296671986579895, 1.2942062616348267, 1.2917882204055786, 1.289416790008545, 1.2870924472808838, 1.2848097085952759, 1.2825781106948853, 1.2803819179534912, 1.2782219648361206, 1.276106834411621, 1.2740249633789062, 1.2719764709472656, 1.2699719667434692, 1.267991304397583, 1.266044020652771, 1.264132022857666, 1.2622531652450562, 1.2603939771652222, 1.2585541009902954, 1.2567534446716309, 1.254974603652954], "accuracy_train_first": 0.3963542387643042, "model": "residualv5", "loss_std": [0.1978650540113449, 0.12236269563436508, 0.094553142786026, 0.08812229335308075, 0.084910087287426, 0.0825103372335434, 0.08129449188709259, 0.08079057931900024, 0.08038660883903503, 0.0801047682762146, 0.07985869795084, 0.07962001115083694, 0.07948938757181168, 0.07930535078048706, 0.0791408121585846, 0.07901423424482346, 0.07889939099550247, 0.07875785231590271, 0.0786861851811409, 0.07860296219587326, 0.07847246527671814, 0.07835983484983444, 0.07825904339551926, 0.07818487286567688, 0.07810613512992859, 0.07804031670093536, 0.07797792553901672, 0.07789725065231323, 0.0778161883354187, 0.0777365192770958, 0.0776565670967102, 0.07757768034934998, 0.07752177119255066, 0.07745504379272461, 0.07737302780151367, 0.07729251682758331, 0.07722035050392151, 0.07715942710638046, 0.07709074020385742, 0.07702019810676575, 0.07695706188678741, 0.07689643651247025, 0.07683531939983368, 0.07677014172077179, 0.07672076672315598, 0.07665878534317017, 0.07660684734582901, 0.07655031234025955, 0.07648955285549164, 0.07642998546361923, 0.07636817544698715, 0.07630474865436554, 0.07624687254428864, 0.0761914998292923, 0.07614476978778839, 0.07608963549137115, 0.07603807747364044, 0.0759829729795456, 0.07591774314641953, 0.07585161179304123, 0.07579614222049713, 0.075738824903965, 0.07568135112524033, 0.07562019675970078, 0.07555875927209854, 0.07550068944692612, 0.07544960081577301, 0.07540138810873032, 0.0753464549779892, 0.07528846710920334, 0.07522766292095184, 0.07516562938690186]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:10 2016", "state": "available"}], "summary": "451fd6bc39c64295b0a012e5114b2619"}