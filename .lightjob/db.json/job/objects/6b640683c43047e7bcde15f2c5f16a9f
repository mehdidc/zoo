{"content": {"hp_model": {"f1": 216, "f2": 15, "f3": 83, "nonlin": "rectify", "ds2": 2194, "ds1": 1215, "do2": 0.7863933520189578, "do3": 0.7440152514632177, "do1": 0.9436060217014125, "do4": 0.051608693733800504, "do5": 0.6426975907463494}, "accuracy_valid_std": [0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03880959706688695, 0.03607549418105908, 0.03607549418105908, 0.03607549418105908, 0.03607549418105908, 0.03607549418105908, 0.03607549418105908, 0.03607549418105908, 0.03607549418105908, 0.03607549418105908, 0.03607549418105908, 0.03607549418105908], "moving_avg_accuracy_train": [0.010073889307228913, 0.019140389683734937, 0.027300240022590357, 0.03464410532756024, 0.04125358410203313, 0.04720211499905873, 0.05255579280638177, 0.05737410283297251, 0.061710581856904166, 0.06561341297844267, 0.06912596098782732, 0.0722872541962735, 0.07513241808387507, 0.07769306558271648, 0.07999764833167375, 0.08207177280573529, 0.08393848483239066, 0.0856185256563805, 0.08713056239797137, 0.08849139546540315, 0.08971614522609174, 0.09081842001071148, 0.09181046731686925, 0.09270330989241124, 0.09350686821039902, 0.09423007069658804, 0.09488095293415814, 0.09546674694797125, 0.09599396156040303, 0.09646845471159164, 0.09689549854766139, 0.09727983800012416, 0.09762574350734066, 0.0979370584638355, 0.09821724192468087, 0.0984694070394417, 0.09869635564272644, 0.09890060938568271, 0.09908443775434335, 0.09924988328613793, 0.09939878426475306, 0.09958456472381992, 0.0997517671369801, 0.09990224930882426, 0.100037683263484, 0.10015957382267776, 0.10026927532595215, 0.1003680066788991, 0.10045686489655135, 0.10053683729243838, 0.1006088124487367, 0.1006735900894052], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.0009133492119687096, 0.0015618271524664934, 0.0020048928551925143, 0.002289794788231126, 0.0024539821964398825, 0.0025270491552917083, 0.002532301034344147, 0.002488015934520836, 0.0024084597939937466, 0.002304702631463617, 0.002185274309981344, 0.0020566908517311213, 0.0019238763844838175, 0.0017905009865553407, 0.0016592508027209296, 0.0015320436534539462, 0.0014102008122226903, 0.0012945835655328735, 0.0011857015049508727, 0.0010837981541925276, 0.000988918446560036, 0.0009009616892113088, 0.0008197229410090719, 0.0007449251576904689, 0.0006762439956550884, 0.0006133267926138493, 0.000555806942537123, 0.000503314639922984, 0.00045548477315874, 0.0004119625895975901, 0.00037240762857915764, 0.0003364963170537164, 0.0003039235409276491, 0.0002744034398541207, 0.0002476696208142902, 0.0002234749439387823, 0.00020159100056170014, 0.00018180737682913496, 0.00016393077496834136, 0.00014778404748742435, 0.00013320518625157477, 0.00012019529703715716, 0.00010842737715614072, 9.778844339691306e-05, 8.817468026189476e-05, 7.94909280114904e-05, 7.165014498872733e-05, 6.457286141034723e-05, 5.818663731491153e-05, 5.2425533840355595e-05, 4.722960426443756e-05, 4.254440912256899e-05], "duration": 78533.395845, "accuracy_train": [0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10073889307228916, 0.10125658885542169, 0.10125658885542169, 0.10125658885542169, 0.10125658885542169, 0.10125658885542169, 0.10125658885542169, 0.10125658885542169, 0.10125658885542169, 0.10125658885542169, 0.10125658885542169, 0.10125658885542169], "end": "2016-01-18 22:04:47.323000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0], "accuracy_valid": [0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09588675213675214, 0.09294871794871795, 0.09294871794871795, 0.09294871794871795, 0.09294871794871795, 0.09294871794871795, 0.09294871794871795, 0.09294871794871795, 0.09294871794871795, 0.09294871794871795, 0.09294871794871795, 0.09294871794871795], "accuracy_test": 0.0999599358974359, "start": "2016-01-18 00:15:53.927000", "learning_rate_per_epoch": [0.00621897354722023, 0.005628564395010471, 0.005094206426292658, 0.004610578995198011, 0.004172865301370621, 0.003776706987991929, 0.003418158506974578, 0.003093649633228779, 0.0027999484445899725, 0.0025341303553432226, 0.0022935480810701847, 0.002075806027278304, 0.0018787357257679105, 0.0017003746470436454, 0.0015389465261250734, 0.0013928439002484083, 0.001260611810721457, 0.0011409333674237132, 0.0010326168267056346, 0.0009345835424028337, 0.0008458571974188089, 0.0007655542576685548, 0.0006928750080987811, 0.0006270956946536899, 0.0005675612483173609, 0.0005136788240633905, 0.00046491180546581745, 0.0004207745660096407, 0.00038082757964730263, 0.00034467302612029016, 0.0003119508910458535, 0.00028233526973053813, 0.00025553128216415644, 0.00023127197346184403, 0.00020931575272697955, 0.00018944399198517203, 0.00017145878518931568, 0.00015518104191869497, 0.00014044865383766592, 0.0001271149085368961, 0.00011504702706588432, 0.00010412483243271708, 9.423955634701997e-05, 8.529275510227308e-05, 7.719533459749073e-05, 6.986665539443493e-05, 6.323373963823542e-05, 5.723053254769184e-05, 5.179725121706724e-05, 4.687978798756376e-05, 4.242917202645913e-05, 3.840108183794655e-05], "accuracy_train_last": 0.10125658885542169, "error_valid": [0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.9041132478632479, 0.907051282051282, 0.907051282051282, 0.907051282051282, 0.907051282051282, 0.907051282051282, 0.907051282051282, 0.907051282051282, 0.907051282051282, 0.907051282051282, 0.907051282051282, 0.907051282051282], "accuracy_train_std": [0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.038751373541754654, 0.03650184610776881, 0.03650184610776881, 0.03650184610776881, 0.03650184610776881, 0.03650184610776881, 0.03650184610776881, 0.03650184610776881, 0.03650184610776881, 0.03650184610776881, 0.03650184610776881, 0.03650184610776881], "accuracy_test_std": 0.03747493015417098, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.8504484086062112, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.006871313753708954, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "optimization": "adam", "nb_data_augmentation": 3, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 8.720161882943801e-08, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.09493677302391047}, "accuracy_valid_max": 0.09588675213675214, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.09294871794871795, "loss_train": [5.416304111480713, 2.3197169303894043, 2.318464756011963, 2.3178632259368896, 2.3173887729644775, 2.3169450759887695, 2.3165085315704346, 2.3160688877105713, 2.3156204223632812, 2.3151605129241943, 2.3146860599517822, 2.3141958713531494, 2.313688278198242, 2.3131632804870605, 2.3126211166381836, 2.3120617866516113, 2.3114871978759766, 2.310899257659912, 2.3102993965148926, 2.3096909523010254, 2.3090767860412598, 2.308461904525757, 2.3078508377075195, 2.3072500228881836, 2.306666612625122, 2.3061091899871826, 2.305584669113159, 2.305100440979004, 2.30466365814209, 2.304278612136841, 2.303948163986206, 2.303671360015869, 2.303445816040039, 2.303264856338501, 2.3031208515167236, 2.3030059337615967, 2.3029119968414307, 2.3028345108032227, 2.302769660949707, 2.302715539932251, 2.3026721477508545, 2.302638530731201, 2.3026134967803955, 2.302595853805542, 2.302583932876587, 2.3025760650634766, 2.3025708198547363, 2.30256724357605, 2.3025643825531006, 2.3025622367858887, 2.302560329437256, 2.3025591373443604], "accuracy_train_first": 0.10073889307228916, "model": "vgg", "loss_std": [79.65240478515625, 0.0046869912184774876, 0.0044349501840770245, 0.00420398311689496, 0.00397705240175128, 0.0037552136927843094, 0.0035393103025853634, 0.0033297634217888117, 0.003127132775261998, 0.0029320833273231983, 0.0027455538511276245, 0.0025685233995318413, 0.0024020206183195114, 0.0022469437681138515, 0.0021039729472249746, 0.001973444363102317, 0.0018555112183094025, 0.001749963266775012, 0.0016564646502956748, 0.0015742741525173187, 0.0015026903711259365, 0.0014407645212486386, 0.0013875204604119062, 0.00134198775049299, 0.0013031524140387774, 0.00127015623729676, 0.0012422464787960052, 0.001218644087202847, 0.0011988476617261767, 0.0011823236709460616, 0.0011686781654134393, 0.0011575409444049, 0.0011485370341688395, 0.0011413526954129338, 0.001135644386522472, 0.0011311349226161838, 0.0011275942670181394, 0.0011247718939557672, 0.0011225654743611813, 0.0011208170326426625, 0.0011194674298167229, 0.0011184068862348795, 0.001117604784667492, 0.001116991275921464, 0.0011165448231622577, 0.0011162204900756478, 0.0011160074500367045, 0.0011158521519973874, 0.0011157476110383868, 0.0011157023254781961, 0.0011156867258250713, 0.001115697668865323]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:01 2016", "state": "available"}], "summary": "61b37b895ec74d27ca9b2a0d107e5264"}