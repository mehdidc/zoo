{"content": {"hp_model": {"f0": 32, "f1": 16, "f2": 32, "f3": 64, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.013029441538893734, 0.010582231814825843, 0.009375107936650315, 0.016674506471518084, 0.017428113052983158, 0.014485401721809068, 0.011984983920858493, 0.010256837897058264, 0.008139786872199023, 0.00593717887926283, 0.0056322093235339375, 0.008179774440958423, 0.008624156017609234, 0.008633918092848508, 0.008712016539023704, 0.009369113842740112, 0.008730539540697326, 0.009447861844922065, 0.008636260085302083, 0.00753973023096579, 0.007367043348539723, 0.008575619350878319, 0.009327459189187166, 0.008102065360236329, 0.008687572152494301, 0.00895671326391578, 0.008926569717717357, 0.009792927178469035, 0.009360044155051324, 0.009653094103806322, 0.008216169415997378, 0.008699828291411037, 0.009013778201753406, 0.010228060335291242, 0.010904968269942455, 0.010412588099503312, 0.011090620021433597, 0.011618964638294366, 0.011967937385821388, 0.01108068966369129, 0.010497699379684991, 0.009507543384386322, 0.008629181190823877, 0.00893141239130228, 0.008790241635558416, 0.008330110483665666, 0.008468733733785478, 0.008762517710237457, 0.008912118987078855, 0.009129425282570165, 0.008978064216588416, 0.008941425407861052, 0.00846364831014754, 0.008475857694295688, 0.008732372736992943, 0.008880167171459893, 0.009598240707232565, 0.009993101706594112, 0.009944115209404913, 0.00982671141638274, 0.009738188304463595, 0.009738188304463595, 0.010044521702174802, 0.009899747575723488, 0.009899747575723488, 0.010064127812924402, 0.010172936123970258, 0.01026625433228651, 0.01026625433228651, 0.01026625433228651, 0.01026625433228651, 0.01013494845124966, 0.01057106174993929, 0.010216952097528834, 0.010317261338026617, 0.010317261338026617, 0.010114175027498347, 0.009980868628589778, 0.009980868628589778, 0.009603476590746663, 0.009603476590746663, 0.009603476590746663, 0.009852802594177739, 0.009852802594177739, 0.009899747575723488, 0.009775715970528247, 0.009775715970528247, 0.009775715970528247, 0.009927491541309789, 0.009927491541309789, 0.009927491541309789, 0.009927491541309789, 0.009927491541309789, 0.009927491541309789, 0.009927491541309789, 0.010065947207076148, 0.010065947207076148, 0.010316147605241454, 0.010316147605241454, 0.010316147605241454, 0.010316147605241454, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837, 0.010357787295227837], "moving_avg_accuracy_train": [0.04020878033868586, 0.08188048302533221, 0.12225828654196656, 0.16008128601276989, 0.19617938174473393, 0.23069480112840007, 0.26377396976163797, 0.2949679602612494, 0.3240768824429502, 0.3514466071623872, 0.37695107392053934, 0.4006956806469331, 0.4227700583994233, 0.4432367065254278, 0.462286769117394, 0.479978055176308, 0.49637210969120765, 0.5115057580105697, 0.5254933429122628, 0.5384053289594917, 0.5503118573638378, 0.5612835713944344, 0.5714160613445536, 0.5808096338103659, 0.5894451745879211, 0.5974566516151016, 0.6048622573907454, 0.6116644863685867, 0.6179794437510157, 0.6237512250011448, 0.6290691331108033, 0.6339598821059245, 0.6384940536348577, 0.6426608024680313, 0.6465247726607353, 0.6500976048377219, 0.6533968591541528, 0.6564312561567884, 0.6592110415841606, 0.6617500148009291, 0.6640908942674493, 0.6662348881682698, 0.6682226474480651, 0.670055808627262, 0.6717288691278156, 0.6732764402080665, 0.6747041314124352, 0.6760262558773195, 0.67724174453262, 0.678368200356905, 0.6794238632773331, 0.6803879107985754, 0.6812695405093694, 0.6820838975395509, 0.6828377091571813, 0.6835300905059059, 0.684162534314996, 0.6847596355288913, 0.6853063272166353, 0.685812300628462, 0.6862932533360108, 0.6867423868144713, 0.6871628829867525, 0.6875460158882434, 0.6878908354995852, 0.6882034982986023, 0.6884918702641463, 0.6887514050331358, 0.6889803360276074, 0.6892049390642894, 0.6894094069461125, 0.6895957531885629, 0.6897704402531968, 0.6899323089089864, 0.6900779906991971, 0.6902207300544342, 0.6903515206229571, 0.6904738824322468, 0.6905863332094171, 0.6906921892064894, 0.6907874596038546, 0.6908778532591022, 0.6909661829952537, 0.69104567975779, 0.6911171907952538, 0.6911885261753998, 0.6912504028687219, 0.6913037667439021, 0.6913517942315643, 0.6913973441192699, 0.6914336887205857, 0.6914687240105797, 0.6915002557715741, 0.6915239840588501, 0.6915453395173985, 0.6915692097277111, 0.6915883677681829, 0.691607935153417, 0.6916255458001277, 0.6916437205309769, 0.6916554274911221, 0.6916659637552527, 0.6916754463929703, 0.6916816556181067, 0.6916872439207294, 0.6916922733930899, 0.6917014502158334, 0.6917097093563025, 0.6917171425827247, 0.6917238324865047, 0.6917298533999066, 0.6917375973707779, 0.6917445669445621, 0.6917554898585869, 0.6917676456300188, 0.691776260675498, 0.6917840142164293, 0.6917909924032675, 0.6917995979202313, 0.6918050177366892, 0.6918098955715013, 0.6918142856228322, 0.69181823666903, 0.691821792610608, 0.6918249929580282, 0.6918278732707064, 0.6918304655521168, 0.691832798605386, 0.6918348983533285, 0.6918367881264766, 0.6918384889223099, 0.6918400196385599, 0.691841397283185, 0.6918426371633475, 0.6918437530554937, 0.6918447573584254, 0.6918479863798734, 0.6918508924991766, 0.6918535080065495], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 645700200, "moving_var_accuracy_train": [0.014550714146922215, 0.028724419975468235, 0.04052528112937279, 0.04934796661715102, 0.056140822594702294, 0.06124856791230528, 0.06497179369827046, 0.06723219971805203, 0.06813494390146965, 0.06806336599228252, 0.06711132981461349, 0.06547445397047211, 0.06331251195186159, 0.06075121392629859, 0.057942236496489226, 0.05496484726860522, 0.05188724775268222, 0.04875976878050117, 0.045644664684889716, 0.04258067266955524, 0.03959849417039123, 0.03672205133227483, 0.03397385237235073, 0.031370619968149854, 0.02890471105202223, 0.026591893824233385, 0.02442629141394828, 0.022400095144156307, 0.020518993810417715, 0.018766915558570026, 0.017144745322677967, 0.015645545622009684, 0.014266019462892812, 0.012995673679152307, 0.011830478702088025, 0.010762316999763422, 0.009784051011187468, 0.00888851399659516, 0.008069207460135716, 0.007320304179081355, 0.006637591211264205, 0.006015202478758588, 0.0054492429134724435, 0.004934562941305427, 0.004466298830121499, 0.00404122373334521, 0.0036554460795859742, 0.003305633589533185, 0.0029883669446203456, 0.002700950374674903, 0.0024408851550215115, 0.002205161128128282, 0.0019916404538380464, 0.001798445004807697, 0.0016237145919207978, 0.0014656576601172718, 0.0013226917606504523, 0.0011936313533221254, 0.0010769580642029477, 0.0009715663396239327, 0.000876491545223626, 0.0007906578786345303, 0.0007131834440492054, 0.0006431862170261282, 0.0005799377004028083, 0.0005228237525955306, 0.00047128980285058284, 0.0004247670472323549, 0.0003827620271111871, 0.0003449398431168488, 0.0003108221228374393, 0.00028005243485237387, 0.00025232183150209023, 0.00022732546150742538, 0.0002047839240126736, 0.00018448890232320797, 0.00016619396764621828, 0.00014970932259295039, 0.00013485219692923117, 0.00012146782666535364, 0.00010940273203634519, 9.85359979488919e-05, 8.875261743459994e-05, 7.99342333084237e-05, 7.19868344338938e-05, 6.483394961864971e-05, 5.838501318337288e-05, 5.257214119360386e-05, 4.733568683038376e-05, 4.2620791277775245e-05, 3.837060052040103e-05, 3.4544587712265505e-05, 3.1099077208601656e-05, 2.7994236772294947e-05, 2.519891759555375e-05, 2.2684153918461674e-05, 2.0419041801247975e-05, 1.8380583564207286e-05, 1.6545316421684686e-05, 1.4893757667089177e-05, 1.3405615376622833e-05, 1.2066052954717035e-05, 1.0860256943008085e-05, 9.77457823899842e-06, 8.797401477234405e-06, 7.917888989840982e-06, 7.1268580175378625e-06, 6.414786136395668e-06, 5.773804798451491e-06, 5.1968271119196064e-06, 4.67747066331139e-06, 4.210263318743949e-06, 3.789674161498149e-06, 3.4117805358054685e-06, 3.071932347236845e-06, 2.7654070835906236e-06, 2.4894074318043046e-06, 2.240904944447795e-06, 2.017480944302939e-06, 1.8159972195665768e-06, 1.6346116370620034e-06, 1.4713239263119912e-06, 1.3243320305753045e-06, 1.1920126300023288e-06, 1.0729035470145848e-06, 9.656878581232426e-07, 8.691795516171123e-07, 7.823105846934183e-07, 7.041192066968704e-07, 6.337394272101463e-07, 5.703915188473316e-07, 5.133734547927406e-07, 4.6205319045588157e-07, 4.158617071356495e-07, 3.7428674335962297e-07, 3.368671466430667e-07, 3.03274271194363e-07, 2.7302285383956494e-07, 2.4578213636496515e-07], "duration": 32630.781346, "accuracy_train": [0.4020878033868586, 0.45692580720514947, 0.4856585181916759, 0.50048828125, 0.5210622433324105, 0.5413335755813954, 0.5614864874607789, 0.5757138747577519, 0.5860571820782576, 0.59777412963732, 0.6064912747439092, 0.6143971411844776, 0.6214394581718347, 0.6274365396594684, 0.6337373324450905, 0.6391996297065338, 0.6439186003253046, 0.6477085928848284, 0.6513816070275009, 0.6546132033845515, 0.6574706130029531, 0.6600289976698044, 0.6626084708956257, 0.6653517860026762, 0.6671650415859174, 0.6695599448597269, 0.6715127093715394, 0.6728845471691584, 0.6748140601928756, 0.6756972562523071, 0.6769303060977299, 0.6779766230620156, 0.6793015973952565, 0.6801615419665928, 0.681300504395072, 0.6822530944306017, 0.6830901480020303, 0.6837408291805094, 0.6842291104305094, 0.6846007737518457, 0.6851588094661315, 0.6855308332756552, 0.6861124809662237, 0.6865542592400332, 0.6867864136327981, 0.6872045799303249, 0.6875533522517534, 0.6879253760612772, 0.6881811424303249, 0.6885063027754706, 0.688924829561185, 0.6890643384897563, 0.6892042079065154, 0.689413110811185, 0.6896220137158545, 0.689761522644426, 0.689854528596807, 0.6901335464539498, 0.6902265524063308, 0.6903660613349022, 0.6906218277039498, 0.6907845881206165, 0.6909473485372831, 0.6909942120016611, 0.6909942120016611, 0.6910174634897563, 0.6910872179540422, 0.6910872179540422, 0.6910407149778516, 0.691226366394426, 0.6912496178825213, 0.6912728693706165, 0.6913426238349022, 0.6913891268110927, 0.6913891268110927, 0.6915053842515688, 0.691528635739664, 0.6915751387158545, 0.6915983902039498, 0.6916448931801403, 0.6916448931801403, 0.6916913961563308, 0.6917611506206165, 0.6917611506206165, 0.691760790132429, 0.6918305445967147, 0.6918072931086194, 0.6917840416205242, 0.6917840416205242, 0.6918072931086194, 0.691760790132429, 0.6917840416205242, 0.6917840416205242, 0.6917375386443337, 0.6917375386443337, 0.6917840416205242, 0.691760790132429, 0.6917840416205242, 0.6917840416205242, 0.6918072931086194, 0.691760790132429, 0.691760790132429, 0.691760790132429, 0.6917375386443337, 0.6917375386443337, 0.6917375386443337, 0.6917840416205242, 0.6917840416205242, 0.6917840416205242, 0.6917840416205242, 0.6917840416205242, 0.6918072931086194, 0.6918072931086194, 0.6918537960848099, 0.6918770475729051, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918770475729051, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918537960848099, 0.6918770475729051, 0.6918770475729051, 0.6918770475729051], "end": "2016-01-24 17:01:48.658000", "learning_rate_per_epoch": [0.0014703181805089116, 0.0013590636663138866, 0.0012562274932861328, 0.0011611726367846131, 0.001073310268111527, 0.0009920961456373334, 0.0009170272387564182, 0.0008476385846734047, 0.0007835003780201077, 0.0007242152933031321, 0.0006694161565974355, 0.0006187635008245707, 0.000571943586692214, 0.0005286663654260337, 0.0004886637907475233, 0.00045168810174800456, 0.000417510251281783, 0.0003859185380861163, 0.00035671726800501347, 0.00032972556073218584, 0.00030477624386548996, 0.0002817147469613701, 0.0002603982575237751, 0.0002406947169220075, 0.000222482078243047, 0.0002056475350400433, 0.00019008682284038514, 0.0001757035352056846, 0.00016240858531091362, 0.00015011962386779487, 0.00013876052980776876, 0.00012826094462070614, 0.00011855582852149382, 0.00010958507482428104, 0.00010129310976481065, 9.362857235828415e-05, 8.654398698126897e-05, 7.999546505743638e-05, 7.39424503990449e-05, 6.834744999650866e-05, 6.317580846371129e-05, 5.839548975927755e-05, 5.3976880735717714e-05, 4.989261651644483e-05, 4.6117394958855584e-05, 4.2627831135177985e-05, 3.940231545129791e-05, 3.6420864489628e-05, 3.366500823176466e-05, 3.1117680919123814e-05, 2.87631009996403e-05, 2.6586685635265894e-05, 2.4574952476541512e-05, 2.2715441446052864e-05, 2.0996632883907296e-05, 1.9407882064115256e-05, 1.793934643501416e-05, 1.6581931049586274e-05, 1.532722671981901e-05, 1.4167462722980417e-05, 1.3095454050926492e-05, 1.210456139233429e-05, 1.1188646567461547e-05, 1.0342036148358602e-05, 9.559485988575034e-06, 8.836149390845094e-06, 8.167545274773147e-06, 7.54953225623467e-06, 6.978282272029901e-06, 6.450256933021592e-06, 5.962185696262168e-06, 5.511045401362935e-06, 5.094041625852697e-06, 4.708590950031066e-06, 4.352306405053241e-06, 4.022980647278018e-06, 3.7185739074629964e-06, 3.4372008030914003e-06, 3.177118287567282e-06, 2.9367154184001265e-06, 2.714503125389456e-06, 2.5091048883041367e-06, 2.3192485514300643e-06, 2.143758138117846e-06, 1.981546574825188e-06, 1.831608983593469e-06, 1.6930167703321786e-06, 1.5649113720428431e-06, 1.4464993682850036e-06, 1.3370471378948423e-06, 1.235876879945863e-06, 1.1423618389017065e-06, 1.055922780324181e-06, 9.760243528944557e-07, 9.021715641210903e-07, 8.339069950125122e-07, 7.708077873758157e-07, 7.124831427063327e-07, 6.585717073903652e-07, 6.087395831855247e-07, 5.62678110327397e-07, 5.201019916967198e-07, 4.807474738299788e-07, 4.4437078372538963e-07, 4.107465940705879e-07, 3.7966665900057706e-07, 3.5093844985567557e-07, 3.243840183131397e-07, 2.998388595187862e-07, 2.771509741705813e-07, 2.561798169153917e-07, 2.36795472119411e-07, 2.1887788648200512e-07, 2.023160732278484e-07, 1.8700742998589703e-07, 1.7285715614434594e-07, 1.5977758494045702e-07, 1.4768770029149891e-07, 1.3651262520397722e-07, 1.261831386045742e-07, 1.1663524901450728e-07, 1.0780981796187916e-07, 9.965217628860046e-08, 9.211180440615863e-08, 8.514198412967744e-08, 7.869954998795947e-08, 7.274459790096444e-08, 6.724023648985167e-08, 6.21523739141594e-08, 5.7449494050842986e-08, 5.310246820044995e-08, 4.9084366793294976e-08, 4.537030307005807e-08, 4.193726965695532e-08, 3.876400356261911e-08, 3.5830851174978307e-08, 3.311964036356585e-08, 3.061357745082205e-08, 2.8297142407041065e-08], "accuracy_valid": [0.4128079701618976, 0.4574871752635542, 0.48971520849021083, 0.4987778261483434, 0.5208122529179217, 0.5404464537838856, 0.5563876600150602, 0.5662047604480422, 0.5756453548569277, 0.5866125635353916, 0.5930719950112951, 0.5986769342996988, 0.6096132577183735, 0.6158491387424698, 0.6202539650790663, 0.6251470726656627, 0.6289518425263554, 0.6323698112763554, 0.6338346550263554, 0.6362966514495482, 0.6398675757718373, 0.6404779273343373, 0.6424413474209337, 0.6432958396084337, 0.6442621070218373, 0.6453607398343373, 0.6474565253200302, 0.6485654532191265, 0.6510171545557228, 0.6532247152673193, 0.6544557134789157, 0.6564191335655121, 0.6581281179405121, 0.6581281179405121, 0.6581281179405121, 0.6589826101280121, 0.6594605962914157, 0.6592164556664157, 0.6599488775414157, 0.6609357351280121, 0.6608136648155121, 0.6611798757530121, 0.6624108739646084, 0.6631535909262049, 0.6630315206137049, 0.6634080266378012, 0.6632859563253012, 0.6634080266378012, 0.6636521672628012, 0.6631535909262049, 0.6628991552146084, 0.6627770849021084, 0.6626550145896084, 0.6624108739646084, 0.6617902273155121, 0.6621564382530121, 0.6624005788780121, 0.6630109304405121, 0.6632550710655121, 0.6633771413780121, 0.6632550710655121, 0.6632550710655121, 0.6636212820030121, 0.6637433523155121, 0.6637433523155121, 0.6638654226280121, 0.6637433523155121, 0.6637433523155121, 0.6637433523155121, 0.6637433523155121, 0.6637433523155121, 0.6638654226280121, 0.6633668462914157, 0.6638654226280121, 0.6639874929405121, 0.6639874929405121, 0.6637433523155121, 0.6638654226280121, 0.6638654226280121, 0.6638654226280121, 0.6638654226280121, 0.6638654226280121, 0.6636212820030121, 0.6636212820030121, 0.6637433523155121, 0.6638654226280121, 0.6638654226280121, 0.6638654226280121, 0.6642316335655121, 0.6642316335655121, 0.6642316335655121, 0.6642316335655121, 0.6642316335655121, 0.6642316335655121, 0.6642316335655121, 0.6641095632530121, 0.6641095632530121, 0.6642316335655121, 0.6642316335655121, 0.6642316335655121, 0.6642316335655121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121, 0.6641095632530121], "accuracy_test": 0.655893255739796, "start": "2016-01-24 07:57:57.877000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0], "accuracy_train_last": 0.6918770475729051, "batch_size_eval": 1024, "accuracy_train_std": [0.016778786992508232, 0.015387662042420308, 0.012740355654313385, 0.012954251035489682, 0.014394182034650444, 0.01476858424494652, 0.013304864431961133, 0.014188194245865442, 0.014414501780255332, 0.014115623014881352, 0.014727962031911986, 0.01379995468530101, 0.013093482564705251, 0.012709869378719143, 0.013175358806389438, 0.013734600498134486, 0.01375974053996441, 0.012664038040678382, 0.013003169357178523, 0.012351861099434897, 0.012897935490641103, 0.012848975461930926, 0.013568641464821802, 0.01340602760207107, 0.013099405057384132, 0.013000175249550829, 0.013051746285356046, 0.013209023186323221, 0.01276337643374285, 0.013063773048007142, 0.01335041936926408, 0.01332393589464907, 0.013811277786066046, 0.013711103744281316, 0.01397446288466565, 0.014301233409308582, 0.014242355562203067, 0.01427004099922214, 0.014220767406076501, 0.014404434388968271, 0.014142576796083026, 0.014048032106605894, 0.014135395826517792, 0.013675230201662968, 0.013775742086933518, 0.013827571520286259, 0.013638018144162697, 0.013759151369055917, 0.013653570414923218, 0.01380090044094738, 0.013633038070299669, 0.013627736047130112, 0.013516954159196432, 0.013652362206093841, 0.013835789447361337, 0.013784052090818233, 0.013951954516170617, 0.013950901931056074, 0.013882411125136775, 0.01370266825582722, 0.013436230026478159, 0.013338771148528621, 0.013668968624577052, 0.013653590667562717, 0.013743101669652319, 0.013566686135083534, 0.01356766891034433, 0.013515688466277171, 0.01353633518077574, 0.013653884644513553, 0.013669960295206732, 0.013624452226661973, 0.013518717065588817, 0.013380418343403021, 0.013295297736800611, 0.01324960230923028, 0.013143588069021777, 0.013077257580127162, 0.013065645274914797, 0.013059663646219672, 0.013129026508459497, 0.013164370612117986, 0.013080477323689927, 0.01304745334632518, 0.013165425446602066, 0.013164224493758897, 0.013126088638336881, 0.01315528895700237, 0.01315528895700237, 0.013136463805666751, 0.01307890569029904, 0.013115529996933035, 0.013084330016172095, 0.013154816183520634, 0.013154816183520634, 0.01315528895700237, 0.013156799074114005, 0.013179431339015835, 0.013179431339015835, 0.013162365944536064, 0.013225652512600185, 0.013225652512600185, 0.013225652512600185, 0.013192735736052195, 0.013192735736052195, 0.013192735736052195, 0.013189764546645584, 0.013189764546645584, 0.013189764546645584, 0.013189764546645584, 0.013189764546645584, 0.013172712538957148, 0.013172712538957148, 0.013141874738608611, 0.01315228891471418, 0.013141874738608611, 0.013141874738608611, 0.013141874738608611, 0.01312117634085318, 0.013115932132524509, 0.013115932132524509, 0.013115932132524509, 0.013115932132524509, 0.013115932132524509, 0.013115932132524509, 0.013115932132524509, 0.013115932132524509, 0.013115932132524509, 0.013115932132524509, 0.013115932132524509, 0.013115932132524509, 0.013115932132524509, 0.013115932132524509, 0.013115932132524509, 0.013115932132524509, 0.013115932132524509, 0.013109057064829765, 0.013109057064829765, 0.013109057064829765], "accuracy_test_std": 0.008713280077411002, "error_valid": [0.5871920298381024, 0.5425128247364458, 0.5102847915097892, 0.5012221738516567, 0.47918774708207834, 0.45955354621611444, 0.44361233998493976, 0.43379523955195776, 0.4243546451430723, 0.4133874364646084, 0.40692800498870485, 0.4013230657003012, 0.3903867422816265, 0.3841508612575302, 0.37974603492093373, 0.3748529273343373, 0.3710481574736446, 0.3676301887236446, 0.3661653449736446, 0.36370334855045183, 0.3601324242281627, 0.3595220726656627, 0.35755865257906627, 0.35670416039156627, 0.3557378929781627, 0.3546392601656627, 0.3525434746799698, 0.3514345467808735, 0.34898284544427716, 0.3467752847326807, 0.34554428652108427, 0.34358086643448793, 0.34187188205948793, 0.34187188205948793, 0.34187188205948793, 0.34101738987198793, 0.34053940370858427, 0.34078354433358427, 0.34005112245858427, 0.33906426487198793, 0.33918633518448793, 0.33882012424698793, 0.3375891260353916, 0.33684640907379515, 0.33696847938629515, 0.3365919733621988, 0.3367140436746988, 0.3365919733621988, 0.3363478327371988, 0.33684640907379515, 0.3371008447853916, 0.3372229150978916, 0.3373449854103916, 0.3375891260353916, 0.33820977268448793, 0.33784356174698793, 0.33759942112198793, 0.33698906955948793, 0.33674492893448793, 0.33662285862198793, 0.33674492893448793, 0.33674492893448793, 0.33637871799698793, 0.33625664768448793, 0.33625664768448793, 0.33613457737198793, 0.33625664768448793, 0.33625664768448793, 0.33625664768448793, 0.33625664768448793, 0.33625664768448793, 0.33613457737198793, 0.33663315370858427, 0.33613457737198793, 0.33601250705948793, 0.33601250705948793, 0.33625664768448793, 0.33613457737198793, 0.33613457737198793, 0.33613457737198793, 0.33613457737198793, 0.33613457737198793, 0.33637871799698793, 0.33637871799698793, 0.33625664768448793, 0.33613457737198793, 0.33613457737198793, 0.33613457737198793, 0.33576836643448793, 0.33576836643448793, 0.33576836643448793, 0.33576836643448793, 0.33576836643448793, 0.33576836643448793, 0.33576836643448793, 0.33589043674698793, 0.33589043674698793, 0.33576836643448793, 0.33576836643448793, 0.33576836643448793, 0.33576836643448793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793, 0.33589043674698793], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.5968091776799641, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.001590680138469317, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "optimization": "nesterov_momentum", "nb_data_augmentation": 0, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 3.660209358559539e-06, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.07566693846261287}, "accuracy_valid_max": 0.6642316335655121, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.6641095632530121, "loss_train": [1.9380855560302734, 1.6661760807037354, 1.55534827709198, 1.4740843772888184, 1.4115052223205566, 1.3623292446136475, 1.3216478824615479, 1.2869971990585327, 1.2570611238479614, 1.231012225151062, 1.2080432176589966, 1.1877000331878662, 1.1697041988372803, 1.1535849571228027, 1.1391149759292603, 1.1260665655136108, 1.114319086074829, 1.1037096977233887, 1.0940804481506348, 1.085284948348999, 1.0772950649261475, 1.0699913501739502, 1.0632879734039307, 1.0571497678756714, 1.0515044927597046, 1.0463221073150635, 1.0415470600128174, 1.0371670722961426, 1.033131718635559, 1.0293892621994019, 1.0259524583816528, 1.0227724313735962, 1.0198434591293335, 1.0171374082565308, 1.0146446228027344, 1.0123400688171387, 1.010210394859314, 1.0082463026046753, 1.0064363479614258, 1.004754900932312, 1.0032011270523071, 1.0017566680908203, 1.000425100326538, 0.9991973638534546, 0.9980663061141968, 0.9970161318778992, 0.9960468411445618, 0.9951478242874146, 0.9943177700042725, 0.9935503602027893, 0.9928383231163025, 0.9921802282333374, 0.9915713667869568, 0.9910092949867249, 0.9904880523681641, 0.9900063872337341, 0.9895581007003784, 0.9891439080238342, 0.9887604713439941, 0.9884040355682373, 0.988075315952301, 0.9877697229385376, 0.9874864220619202, 0.9872241020202637, 0.986980676651001, 0.9867558479309082, 0.9865469336509705, 0.9863527417182922, 0.9861730337142944, 0.9860063195228577, 0.9858524203300476, 0.9857094883918762, 0.9855771660804749, 0.9854543805122375, 0.9853408932685852, 0.9852359294891357, 0.9851384162902832, 0.9850484132766724, 0.9849646091461182, 0.9848875403404236, 0.9848158955574036, 0.9847495555877686, 0.9846881628036499, 0.9846315383911133, 0.9845789670944214, 0.9845303893089294, 0.9844855070114136, 0.9844440221786499, 0.9844058156013489, 0.984370231628418, 0.9843376278877258, 0.9843074679374695, 0.9842795729637146, 0.9842537641525269, 0.9842299818992615, 0.9842081665992737, 0.9841879606246948, 0.984169602394104, 0.9841524958610535, 0.9841369390487671, 0.9841223955154419, 0.9841094017028809, 0.9840972423553467, 0.984086275100708, 0.9840761423110962, 0.984066903591156, 0.9840584397315979, 0.9840507507324219, 0.9840437769889832, 0.9840373992919922, 0.984031617641449, 0.9840264320373535, 0.9840217232704163, 0.9840174317359924, 0.984013557434082, 0.9840101003646851, 0.984006941318512, 0.9840040802955627, 0.984001636505127, 0.9839994311332703, 0.9839974045753479, 0.9839955568313599, 0.9839939475059509, 0.9839926362037659, 0.9839913249015808, 0.9839902520179749, 0.9839892387390137, 0.9839884042739868, 0.9839875102043152, 0.9839869737625122, 0.9839863181114197, 0.9839857220649719, 0.9839853048324585, 0.9839849472045898, 0.9839845299720764, 0.9839841723442078, 0.9839839935302734, 0.9839838147163391, 0.98398357629776], "accuracy_train_first": 0.4020878033868586, "model": "residualv3", "loss_std": [0.24428972601890564, 0.12509024143218994, 0.1274711787700653, 0.12828056514263153, 0.1280994564294815, 0.12820154428482056, 0.1286500245332718, 0.12919117510318756, 0.12969736754894257, 0.13007289171218872, 0.13040819764137268, 0.13071651756763458, 0.13104093074798584, 0.1312185525894165, 0.13133816421031952, 0.13145703077316284, 0.13149477541446686, 0.13150694966316223, 0.13154521584510803, 0.13154716789722443, 0.13150332868099213, 0.13146185874938965, 0.13141760230064392, 0.1313948929309845, 0.13133488595485687, 0.13124175369739532, 0.13116255402565002, 0.1310681402683258, 0.13098613917827606, 0.13088001310825348, 0.13078691065311432, 0.13069723546504974, 0.13060396909713745, 0.130512997508049, 0.1304309070110321, 0.13033868372440338, 0.13023820519447327, 0.13014312088489532, 0.13005836308002472, 0.12998522818088531, 0.1299070119857788, 0.12983763217926025, 0.1297655552625656, 0.12970684468746185, 0.12964554131031036, 0.12959107756614685, 0.129538893699646, 0.1294916421175003, 0.12945044040679932, 0.1294102817773819, 0.12937316298484802, 0.12933851778507233, 0.12930624186992645, 0.12927816808223724, 0.12925057113170624, 0.1292257308959961, 0.1292026937007904, 0.12918035686016083, 0.12915967404842377, 0.12914039194583893, 0.1291240155696869, 0.12910792231559753, 0.12909336388111115, 0.12907950580120087, 0.12906454503536224, 0.12905167043209076, 0.12903882563114166, 0.12902669608592987, 0.12901663780212402, 0.12900622189044952, 0.12899622321128845, 0.12898704409599304, 0.12897859513759613, 0.12897025048732758, 0.1289622187614441, 0.12895524501800537, 0.1289491206407547, 0.12894323468208313, 0.12893760204315186, 0.12893228232860565, 0.1289273053407669, 0.12892234325408936, 0.12891776859760284, 0.12891341745853424, 0.1289096176624298, 0.1289062201976776, 0.12890304625034332, 0.12889990210533142, 0.12889711558818817, 0.12889455258846283, 0.12889209389686584, 0.12888970971107483, 0.12888744473457336, 0.128885418176651, 0.12888352572917938, 0.12888170778751373, 0.12887981534004211, 0.12887805700302124, 0.12887638807296753, 0.12887471914291382, 0.12887313961982727, 0.12887153029441833, 0.12886987626552582, 0.1288682520389557, 0.12886665761470795, 0.12886519730091095, 0.12886379659175873, 0.1288624405860901, 0.12886102497577667, 0.12885963916778564, 0.1288582682609558, 0.1288570612668991, 0.1288558393716812, 0.1288546323776245, 0.12885349988937378, 0.12885241210460663, 0.12885136902332306, 0.1288503259420395, 0.1288493275642395, 0.12884840369224548, 0.12884752452373505, 0.1288466453552246, 0.12884581089019775, 0.12884503602981567, 0.12884429097175598, 0.12884366512298584, 0.12884306907653809, 0.1288425326347351, 0.12884202599525452, 0.1288415789604187, 0.12884116172790527, 0.12884078919887543, 0.12884044647216797, 0.1288401484489441, 0.128839910030365, 0.12883968651294708, 0.12883947789669037, 0.12883934378623962, 0.1288391798734665]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:11 2016", "state": "available"}], "summary": "ab8859a5b47e56610fe258eff70ae963"}