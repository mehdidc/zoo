{"content": {"hp_model": {"f0": 64, "f1": 16, "f2": 64, "f3": 16, "nonlin": "rectify", "nbg1": 2, "nbg3": 2, "nbg2": 2, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.05671865816690113, 0.06054615469978088, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535, 0.0600127032180535], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "duration": 4834.353858, "accuracy_train": [0.317371046686747, 0.4152390813253012, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458, 0.4158038403614458], "end": "2016-01-16 22:33:25.419000", "learning_rate_per_epoch": [9.373589819006156e-06, 1.8397700785044435e-07, 3.6109473189327446e-09, 7.087266190586305e-11, 1.391029544155209e-12, 2.7301967449517607e-14, 5.358602533665009e-16, 1.051741785451576e-17, 2.064271094644591e-19, 4.051579107898746e-21, 7.952101626572098e-23, 1.5607721478172186e-24, 3.063353354663227e-26, 6.01249424879943e-28, 1.180082201830044e-29, 2.3161670324901664e-31, 4.5459793847014474e-33, 8.922469335827866e-35, 1.7512279366598572e-36, 3.437164008091106e-38, 6.746173105906464e-40, 1.3240869189405197e-41, 2.5924021590009116e-43, 5.605193857299268e-45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.31850961538461536, 0.40691773504273504, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171, 0.4077190170940171], "accuracy_test": 0.42017227564102566, "start": "2016-01-16 21:12:51.065000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0], "accuracy_train_last": 0.4158038403614458, "error_valid": [0.6814903846153846, 0.5930822649572649, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983, 0.592280982905983], "accuracy_train_std": [0.059227149926363395, 0.06137277369210276, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895, 0.06145514820806895], "accuracy_test_std": 0.06008905874249187, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1.0, 1.2], "translation_range": [-3, 3], "momentum": 0.5684281928132043, "shear_range": [1, 1.1], "patience_check_each": 1, "learning_rate": 0.00047758243559800655, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "optimization": "rmsprop", "nb_data_augmentation": 2, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 2.556956722251339e-08, "valid_ratio": 0.15, "rotation_range": [-90, 90], "learning_rate_decay": 0.9803728339762343}, "accuracy_valid_max": 0.4077190170940171, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    args = parser.parse_args()\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.98, interval=[0.8, 1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256, 512],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1.0, 1.2)),\n        rotation_range=make_constant_param((-90, 90)),\n        shear_range=make_constant_param((1, 1.1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    model_class = residual\n\n    instantiate = instantiate_random\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        rng=rng,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.4077190170940171, "loss_train": [1.9307057857513428, 1.7518742084503174, 1.713979721069336, 1.7148411273956299, 1.7135422229766846, 1.714992642402649, 1.7146567106246948, 1.7137012481689453, 1.7141871452331543, 1.7143536806106567, 1.7150269746780396, 1.7132622003555298, 1.713762879371643, 1.7137166261672974, 1.7148345708847046, 1.7144901752471924, 1.7161073684692383, 1.713823914527893, 1.714034914970398, 1.7150875329971313, 1.7138121128082275, 1.7133179903030396, 1.7143365144729614, 1.7144050598144531, 1.7141586542129517, 1.7148288488388062, 1.7139424085617065, 1.7153970003128052, 1.7132915258407593, 1.7119500637054443, 1.713191270828247, 1.712894320487976, 1.715775489807129, 1.7138029336929321, 1.7143667936325073, 1.7144567966461182, 1.713281273841858, 1.7147189378738403, 1.7130100727081299, 1.714970350265503, 1.715347409248352, 1.713218092918396, 1.7137658596038818, 1.7143292427062988, 1.7126435041427612, 1.7139949798583984, 1.7135547399520874, 1.7141884565353394, 1.7135143280029297, 1.7135577201843262, 1.7154150009155273, 1.7148760557174683, 1.7142897844314575], "accuracy_train_first": 0.317371046686747, "model": "residual", "loss_std": [0.14918872714042664, 0.12656092643737793, 0.1040436327457428, 0.10590926557779312, 0.10650753974914551, 0.10517607629299164, 0.10638553649187088, 0.10641062259674072, 0.10514549911022186, 0.10686461627483368, 0.10773549973964691, 0.10581978410482407, 0.10583021491765976, 0.10587869584560394, 0.1035856306552887, 0.10565587878227234, 0.1055188924074173, 0.10696007311344147, 0.10608843713998795, 0.10501236468553543, 0.10673627257347107, 0.10534683614969254, 0.10660234838724136, 0.10590489953756332, 0.10653084516525269, 0.1050349548459053, 0.10526785999536514, 0.10464830696582794, 0.10593648999929428, 0.10605918616056442, 0.10465330630540848, 0.10571261495351791, 0.10612419992685318, 0.10498916357755661, 0.1064164936542511, 0.10727807134389877, 0.10508623719215393, 0.1071208193898201, 0.10328877717256546, 0.10655652731657028, 0.10546068847179413, 0.1059122085571289, 0.1062847226858139, 0.10649098455905914, 0.10512659698724747, 0.10648258775472641, 0.10448611527681351, 0.10628881305456161, 0.10756200551986694, 0.10506346076726913, 0.10698437690734863, 0.10510776937007904, 0.10590840131044388]}, "state": "available", "life": [{"dt": "Sun May 15 22:04:57 2016", "state": "available"}], "summary": "597a947e46f1b6f55f700d0ea674e453"}