{"content": {"hp_model": {"f0": 16, "f1": 32, "f2": 16, "f3": 64, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.4952737092971802, 1.0898929834365845, 0.9044809341430664, 0.7983995676040649, 0.7272160649299622, 0.6683040261268616, 0.6221796274185181, 0.5817751288414001, 0.5455732345581055, 0.5130727291107178, 0.48625728487968445, 0.4618059992790222, 0.44136205315589905, 0.41658151149749756, 0.4010602533817291, 0.3827711045742035, 0.3672803044319153, 0.3516318202018738, 0.33699360489845276, 0.32412397861480713, 0.3144306242465973, 0.3030007481575012, 0.2918968200683594, 0.2799765467643738, 0.27287307381629944, 0.2627246379852295, 0.25578412413597107, 0.24676315486431122, 0.2385980486869812, 0.23451784253120422, 0.22625961899757385, 0.22021833062171936, 0.21688377857208252, 0.20880450308322906, 0.20578421652317047, 0.19716036319732666, 0.19719624519348145, 0.19018647074699402, 0.18667399883270264, 0.1828688681125641, 0.17991912364959717, 0.17607182264328003, 0.1721039116382599, 0.1677854210138321, 0.1612214297056198, 0.15966276824474335, 0.15693137049674988, 0.15375633537769318, 0.1485995203256607, 0.14992216229438782, 0.14450033009052277, 0.1427697241306305, 0.13878627121448517, 0.13760171830654144, 0.13580484688282013, 0.13095778226852417, 0.13157561421394348, 0.12766066193580627, 0.12604133784770966, 0.12530551850795746, 0.12231826782226562, 0.11984056234359741, 0.11841008812189102, 0.11556925624608994, 0.11551516503095627, 0.11163736879825592, 0.10895046591758728, 0.10910292714834213, 0.10722886770963669, 0.1060653105378151, 0.10683181881904602, 0.10274568945169449, 0.1035139337182045, 0.09982013702392578, 0.09852893650531769, 0.0958353728055954, 0.09489975869655609, 0.09616764634847641, 0.09419117867946625, 0.08954121172428131, 0.09190317988395691, 0.09083275496959686, 0.09158343076705933, 0.08992565423250198, 0.08667232096195221, 0.08648893982172012, 0.0855124443769455, 0.05680272355675697, 0.04356139525771141, 0.039368510246276855, 0.03638732060790062, 0.03474532440304756, 0.032650258392095566, 0.03236949071288109, 0.031606778502464294, 0.03031395934522152, 0.029403194785118103, 0.028467094525694847, 0.027002109214663506, 0.02742602303624153, 0.0268819872289896, 0.026596924290060997, 0.026545638218522072, 0.026531614363193512, 0.026680713519454002, 0.02745470590889454, 0.02826666831970215, 0.027229519560933113, 0.026289787143468857, 0.026746712625026703, 0.02644464187324047, 0.027382267639040947, 0.0271904319524765, 0.026744456961750984, 0.026813140138983727, 0.02750176563858986, 0.026701675727963448, 0.027139605954289436, 0.0263957642018795, 0.02690522000193596, 0.0263943113386631, 0.027022967115044594, 0.02714533358812332, 0.02620800957083702, 0.027096014469861984, 0.026524726301431656, 0.02672744356095791, 0.027070358395576477, 0.026597613468766212, 0.02738243341445923, 0.026739055290818214, 0.027332758530974388, 0.02799076959490776, 0.02574683539569378, 0.02680608630180359, 0.02687610313296318, 0.02681717276573181, 0.02657051384449005, 0.027404751628637314, 0.026765665039420128, 0.027615875005722046, 0.02652243711054325, 0.026583010330796242, 0.02733457088470459, 0.027037398889660835], "moving_avg_accuracy_train": [0.06095529411764705, 0.1262150588235294, 0.18914649411764706, 0.24914949176470585, 0.3056204249411764, 0.3584936765647058, 0.40686783831999995, 0.4517528191938823, 0.4938716549215529, 0.5323833129588094, 0.5679708640158696, 0.6008161305554591, 0.6310074586763837, 0.6587773010440394, 0.6844501591749296, 0.7081933785515542, 0.7295269818728694, 0.7491648719208766, 0.7667919141405536, 0.7829080168441453, 0.7984007445714956, 0.8122594936437577, 0.8251206031029114, 0.8366791310279144, 0.8473171002780641, 0.8571265667208459, 0.8657950865193494, 0.8744744013968262, 0.8821446083159671, 0.8891842651314292, 0.8956164268535804, 0.9015653724035165, 0.9065617763396354, 0.9110797163527307, 0.9153152741292223, 0.9194402173045353, 0.9237926661623171, 0.9271428113107912, 0.9306191184150062, 0.9336230889264467, 0.9362748976808609, 0.938873290265716, 0.9414330200626737, 0.943433247468171, 0.9451675697801775, 0.9473072833903949, 0.9492659668160612, 0.9510593701344552, 0.9526099037092449, 0.9542924427500851, 0.9558231984750765, 0.95702676098051, 0.9582299672354002, 0.9592563822765661, 0.9605048616959684, 0.9612873167028422, 0.962198585032558, 0.9628751971175374, 0.9639523832881366, 0.9643453802534405, 0.964979077522214, 0.965972934475875, 0.9664297586753463, 0.9672338416313411, 0.9675175162917364, 0.9684928234860922, 0.9691847176080712, 0.9698497752590287, 0.970090680086067, 0.9708204356068721, 0.9712513332226556, 0.9715944351945076, 0.9723408740279981, 0.972650316036963, 0.9731476373744431, 0.9733928736369988, 0.9739335862732988, 0.9743849335283219, 0.9750099695872544, 0.9746948549814701, 0.9747006636009701, 0.9750941266526377, 0.9755705963403151, 0.9757264778827541, 0.9760644183297729, 0.9764979764967956, 0.9766340612000572, 0.9783471256682869, 0.9800088836896935, 0.9815327012030771, 0.9829347252004165, 0.9842553703274337, 0.985418068588808, 0.9864480264358095, 0.9874008708510521, 0.9883431367071234, 0.9891347053893522, 0.9899059407327699, 0.9905929937183166, 0.9912136943464849, 0.9917464425588952, 0.9922376806559469, 0.9926915596491758, 0.9931047566254346, 0.9934648691981852, 0.9938077940430725, 0.9941093675799417, 0.9943737249395946, 0.9946069406809293, 0.9948215407304835, 0.9950264454809645, 0.9952014479916916, 0.9953401267219342, 0.9954814081673878, 0.9956085614682961, 0.9957418229685253, 0.9958594053775551, 0.9959534648397996, 0.9960522360028785, 0.9961246594614143, 0.9961992523388022, 0.996264032987275, 0.9963293943944298, 0.9963741020138104, 0.9964237506359587, 0.9964707873370686, 0.9965107674268912, 0.996539690684202, 0.9965539569098995, 0.9965762082777331, 0.9965915286264303, 0.9966100228226108, 0.9966360793638791, 0.9966689420157265, 0.9966938125200363, 0.9967044312680327, 0.9966975175529941, 0.9967148246212241, 0.9967233421591016, 0.9967263020608386, 0.9967336718547547, 0.9967450105516321, 0.9967481565552925, 0.9967509879585867, 0.9967441244568457], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.06013333333333332, 0.12426666666666664, 0.18571999999999997, 0.24364133333333327, 0.29793053333333325, 0.3485108133333332, 0.3942863986666666, 0.4368044254666666, 0.4760306495866666, 0.5117342512946665, 0.5445874928318666, 0.5745954102153465, 0.6018958691938119, 0.6266662822744307, 0.6493196540469875, 0.6699743553089554, 0.6884302531113932, 0.7050672278002539, 0.7199471716868951, 0.7339124545182056, 0.7467612090663851, 0.7579917548264133, 0.7681925793437719, 0.7774133214093948, 0.785458655935122, 0.7929394570082764, 0.7998855113074488, 0.8065102935100372, 0.8123392641590336, 0.8177586710764636, 0.8229294706354838, 0.8270098569052687, 0.8302955378814085, 0.8336926507599344, 0.8365900523506076, 0.8391577137822135, 0.8422952757373254, 0.8445324148302596, 0.8467591733472337, 0.8490965893458436, 0.8507869304112593, 0.8530282373701333, 0.85500541363312, 0.8561582056031414, 0.8566490517094939, 0.8582774798718779, 0.8597430652180235, 0.8610087586962211, 0.8620545494932655, 0.8633824278772724, 0.8642041850895452, 0.8648237665805907, 0.8658080565891983, 0.8667605842636119, 0.867577859170584, 0.8682200732535257, 0.8688647325948399, 0.8694849260020225, 0.8704297667351536, 0.8707467900616382, 0.8712187777221411, 0.8719502332832603, 0.8724618766216009, 0.8730023556261075, 0.8728087867301635, 0.8733945747238138, 0.8736951172514323, 0.8743122721929558, 0.874227711640327, 0.8746849404762943, 0.8751631130953315, 0.875273468452465, 0.8758394549405519, 0.8758288427798301, 0.8763526251685138, 0.8763173626516624, 0.8766056263864962, 0.8768250637478465, 0.8770092240397286, 0.8769616349690891, 0.8768788048055135, 0.8776575909916289, 0.8780384985591326, 0.8781279820365526, 0.8778485171662307, 0.8778903321162742, 0.8782479655713133, 0.8798098356808487, 0.8814155187794306, 0.8828073002348209, 0.8838599035446721, 0.884913913190205, 0.8858091885378511, 0.8866282696840659, 0.8876321093823261, 0.8883488984440935, 0.8888473419330174, 0.8894826077397157, 0.8899476802990774, 0.890406245602503, 0.8909122877089194, 0.8912477256046941, 0.8915629530442247, 0.8918733244064689, 0.892125991965822, 0.8923267261025731, 0.8925607201589826, 0.8927846481430843, 0.8929595166621092, 0.8931702316625649, 0.8932932084963084, 0.8934305543133443, 0.8936341655486766, 0.8936840823271422, 0.8937956740944281, 0.8938961066849853, 0.8940131626831535, 0.8940785130815048, 0.8941239951066876, 0.8942182622626855, 0.894316436036417, 0.8944447924327753, 0.8944803131894978, 0.8944856152038814, 0.8945837203501599, 0.8945653483151439, 0.8945621468169628, 0.8945059321352664, 0.8944686722550731, 0.8945418050295657, 0.8945542911932759, 0.8945388620739483, 0.8945649758665535, 0.8946018116132315, 0.8945816304519083, 0.8945501340733841, 0.8945751206660457, 0.8946242752661078, 0.894561847739497, 0.894532329632214, 0.8945457633356593, 0.8946245203354267, 0.894682068301884, 0.8947338614716955, 0.8947671419911927], "moving_var_accuracy_train": [0.033439930928719726, 0.0684254698410519, 0.09722621279054613, 0.11990682905118803, 0.13661684279046188, 0.1481153851466212, 0.15436438236170535, 0.1570598976979739, 0.157319874835667, 0.15493621759510753, 0.1508408599477466, 0.14546607775948206, 0.13912311662688187, 0.1321512822703137, 0.12486801484476165, 0.11745487755758423, 0.10980549347786688, 0.10229576465991877, 0.09486260175065539, 0.08771390047276428, 0.0811027319373921, 0.07472104307628426, 0.06873761199733881, 0.0630662469077426, 0.05777811972487252, 0.05286633843941383, 0.0482559937149459, 0.04410836890413282, 0.040227020681361476, 0.03665032952594067, 0.033357650913125765, 0.030340395400218125, 0.027531032330832098, 0.024961635135406234, 0.0226269311689676, 0.0205173744578669, 0.01863613131161666, 0.0168735294330976, 0.015294938889533182, 0.013846659550082303, 0.01252528240210396, 0.011333518958118833, 0.010259137012007855, 0.009269231497870394, 0.008369379213020665, 0.007573646660722351, 0.006850809961507939, 0.00619467562451898, 0.005596845451366036, 0.005062639344844996, 0.004577464328166845, 0.004132754959690529, 0.0037325088113477375, 0.003368739680743548, 0.003045894020415231, 0.002746814740913744, 0.002479606956541057, 0.002235766496108814, 0.0020226328169131043, 0.0018217595547544373, 0.0016431977493350537, 0.0014877677392006105, 0.001340869160423553, 0.0012126011889822895, 0.001092065311900614, 0.0009914197978208117, 0.0008965862753229925, 0.0008109083629025683, 0.0007303398428335246, 0.0006620987466314814, 0.0005975599267659234, 0.0005388634047571303, 0.0004899916026707, 0.0004418542316158401, 0.00039989476506867375, 0.00036044655598205694, 0.0003270332317793429, 0.0002961633377029603, 0.00027006303460735736, 0.00024395040607962877, 0.00021955566913221036, 0.00019899342077623827, 0.0001811372889680931, 0.0001632422515687425, 0.00014794586012344905, 0.00013484302826883304, 0.00012152539686010596, 0.00013578416602489138, 0.0001470587069177851, 0.00015325101455285737, 0.0001556169546996104, 0.0001557521911932771, 0.00015234377729697422, 0.00014665671806667743, 0.00014016225857694029, 0.0001341368172109055, 0.00012636236429798445, 0.00011907936346261583, 0.00011141980336088983, 0.00010374524645307808, 9.592510772820797e-05, 8.850443076734162e-05, 8.150804295505726e-05, 7.489382433025696e-05, 6.857157148270917e-05, 6.277279137760746e-05, 5.731403162310499e-05, 5.221159178321831e-05, 4.747993884295295e-05, 4.3146423590075386e-05, 3.92096548419952e-05, 3.556432226664269e-05, 3.218097615197374e-05, 2.9142522558241605e-05, 2.6373781959804284e-05, 2.3896231410813915e-05, 2.163103887595184e-05, 1.9547559630296156e-05, 1.7680605351170094e-05, 1.5959751232169497e-05, 1.4413852985165711e-05, 1.3010236478398054e-05, 1.1747661852465623e-05, 1.059088460829514e-05, 9.553981018596713e-06, 8.618494977998862e-06, 7.771031148438945e-06, 7.001457026916297e-06, 6.303143050985521e-06, 5.677284856221156e-06, 5.111668788356897e-06, 4.603580227152472e-06, 4.149332694523037e-06, 3.7441190100487154e-06, 3.3752739869054134e-06, 3.0387614084959664e-06, 2.735315462747079e-06, 2.4644797279688318e-06, 2.2186846912354155e-06, 1.996895071276503e-06, 1.7976943889101506e-06, 1.619082044441049e-06, 1.4572629160482205e-06, 1.311608776044932e-06, 1.1808718673457806e-06], "duration": 162261.636199, "accuracy_train": [0.6095529411764706, 0.7135529411764706, 0.7555294117647059, 0.7891764705882353, 0.8138588235294117, 0.8343529411764706, 0.8422352941176471, 0.8557176470588236, 0.8729411764705882, 0.8789882352941176, 0.8882588235294118, 0.8964235294117647, 0.9027294117647059, 0.9087058823529411, 0.9155058823529412, 0.9218823529411765, 0.9215294117647059, 0.9259058823529411, 0.925435294117647, 0.9279529411764705, 0.9378352941176471, 0.9369882352941177, 0.9408705882352941, 0.9407058823529412, 0.9430588235294117, 0.9454117647058824, 0.9438117647058824, 0.9525882352941176, 0.9511764705882353, 0.9525411764705882, 0.9535058823529412, 0.9551058823529411, 0.9515294117647058, 0.9517411764705882, 0.953435294117647, 0.956564705882353, 0.962964705882353, 0.9572941176470589, 0.9619058823529412, 0.9606588235294118, 0.9601411764705883, 0.9622588235294117, 0.9644705882352941, 0.961435294117647, 0.9607764705882353, 0.966564705882353, 0.9668941176470588, 0.9672, 0.966564705882353, 0.9694352941176471, 0.9696, 0.9678588235294118, 0.9690588235294118, 0.9684941176470588, 0.9717411764705882, 0.9683294117647059, 0.9704, 0.968964705882353, 0.9736470588235294, 0.9678823529411764, 0.9706823529411764, 0.9749176470588236, 0.9705411764705882, 0.9744705882352941, 0.9700705882352941, 0.9772705882352941, 0.9754117647058823, 0.975835294117647, 0.9722588235294117, 0.9773882352941177, 0.9751294117647059, 0.9746823529411764, 0.9790588235294118, 0.9754352941176471, 0.9776235294117647, 0.9756, 0.9788, 0.9784470588235294, 0.980635294117647, 0.9718588235294118, 0.9747529411764706, 0.978635294117647, 0.9798588235294118, 0.9771294117647059, 0.9791058823529412, 0.9804, 0.9778588235294118, 0.993764705882353, 0.994964705882353, 0.9952470588235294, 0.9955529411764706, 0.9961411764705882, 0.9958823529411764, 0.9957176470588235, 0.9959764705882352, 0.9968235294117647, 0.9962588235294118, 0.9968470588235294, 0.9967764705882353, 0.9968, 0.9965411764705883, 0.9966588235294118, 0.9967764705882353, 0.9968235294117647, 0.9967058823529412, 0.9968941176470588, 0.9968235294117647, 0.9967529411764706, 0.9967058823529412, 0.9967529411764706, 0.9968705882352941, 0.9967764705882353, 0.9965882352941177, 0.9967529411764706, 0.9967529411764706, 0.9969411764705882, 0.9969176470588236, 0.9968, 0.9969411764705882, 0.9967764705882353, 0.9968705882352941, 0.9968470588235294, 0.9969176470588236, 0.9967764705882353, 0.9968705882352941, 0.9968941176470588, 0.9968705882352941, 0.9968, 0.9966823529411765, 0.9967764705882353, 0.9967294117647059, 0.9967764705882353, 0.9968705882352941, 0.996964705882353, 0.9969176470588236, 0.9968, 0.9966352941176471, 0.9968705882352941, 0.9968, 0.9967529411764706, 0.9968, 0.9968470588235294, 0.9967764705882353, 0.9967764705882353, 0.9966823529411765], "end": "2016-02-06 05:40:03.794000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0], "moving_var_accuracy_valid": [0.032544159999999996, 0.06630750399999999, 0.09366536319999999, 0.114492754576, 0.12956933424816, 0.1396376833472496, 0.1445325529260082, 0.14634934106009706, 0.1455626768824996, 0.14247913376856114, 0.13794523970721947, 0.13225499168774138, 0.12573732806288107, 0.11868575553425338, 0.11143575725481915, 0.10413173168732748, 0.09678413999184099, 0.08959682633383702, 0.08262985827107966, 0.07612213456499815, 0.0699957355494526, 0.06413128841712012, 0.05865467096291362, 0.05355440262478897, 0.048781509030987796, 0.044407019590153994, 0.04040054666408205, 0.03675548165075944, 0.03338572557512524, 0.030311482759642905, 0.027520968996394696, 0.02491871806575107, 0.022524007554468668, 0.020375470182206815, 0.018413477587784853, 0.016631465796052576, 0.015056917871646815, 0.01359626920637234, 0.012281268367171354, 0.011102313152409239, 0.01001779711342519, 0.009061228514037746, 0.008190288696408232, 0.0073832201907027195, 0.0066470665407335405, 0.006006225891180593, 0.005424934765724063, 0.004896859108978426, 0.004417016303601231, 0.00399118402226552, 0.003598143184282269, 0.0032417837968704575, 0.0029263248585728145, 0.0026418581534502455, 0.002383683782567318, 0.002149027354665543, 0.0019378648901960803, 0.001747540159937288, 0.0015808206600424124, 0.0014236431281439896, 0.0012832837664945931, 0.0011597706349861642, 0.001046149581638563, 0.0009441636814635185, 0.0008500845335744598, 0.0007681644083785576, 0.0006921608998388684, 0.0006263727318516027, 0.0005637998130499905, 0.0005093013556209516, 0.0004604290615412288, 0.00041449576013073854, 0.0003759292504599364, 0.0003383373389755395, 0.000306972736994242, 0.00027628665430067006, 0.00024940585269798586, 0.00022489864222819506, 0.0002027140131233302, 0.00018246299428779618, 0.00016427844238299817, 0.00015330916945785475, 0.00013928406768690406, 0.00012542772655279436, 0.00011358785942121142, 0.00010224480988951462, 9.317144409403294e-05, 0.0001058092438361689, 0.00011843228337019314, 0.00012402255560928815, 0.00012159206359954742, 0.00011943128423547793, 0.000114701817344857, 0.00010926968092713368, 0.00010741196009264602, 0.00010129484311500588, 9.340137200836175e-05, 8.76932986139655e-05, 8.087060112181068e-05, 7.46760802471818e-05, 6.951317974366038e-05, 6.357452900659034e-05, 5.8111391153628374e-05, 5.3167225480777415e-05, 4.842507099264478e-05, 4.3945211636295315e-05, 4.004346943857992e-05, 3.649041617329677e-05, 3.311658554648075e-05, 3.020453429458628e-05, 2.732019057986585e-05, 2.4757946382994415e-05, 2.2655269561076628e-05, 2.0412167767920487e-05, 1.8483025493862107e-05, 1.672550329169016e-05, 1.5176271922885393e-05, 1.369708080167895e-05, 1.2345990253043659e-05, 1.1191367898038695e-05, 1.0158973916872887e-05, 9.291354805560391e-06, 8.373574842427585e-06, 7.536470360393536e-06, 6.869444901891164e-06, 6.185538196737707e-06, 5.567076623379366e-06, 5.038809774985347e-06, 4.547423485534989e-06, 4.140816761326484e-06, 3.7281382237515937e-06, 3.3574669208854598e-06, 3.0278576002749484e-06, 2.737283690347377e-06, 2.4672208347637987e-06, 2.229426948028656e-06, 2.012103221541317e-06, 1.8326384717525688e-06, 1.6844493892859628e-06, 1.5238463182755208e-06, 1.3730858659422688e-06, 1.2916012644593047e-06, 1.1922470540037394e-06, 1.097165140555567e-06, 9.974169633019899e-07], "accuracy_test": 0.8892, "start": "2016-02-04 08:35:42.158000", "learning_rate_per_epoch": [0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 0.0007672210922464728, 7.672210631426424e-05, 7.672210631426424e-05, 7.672210631426424e-05, 7.672210631426424e-05, 7.672210631426424e-05, 7.672210631426424e-05, 7.672210631426424e-05, 7.672210631426424e-05, 7.672210631426424e-05, 7.672210631426424e-05, 7.672210813325364e-06, 7.672210813325364e-07, 7.672210955433911e-08, 7.67221131070528e-09, 7.672211199682977e-10, 7.672211477238733e-11, 7.672211824183428e-12, 7.672211932603645e-13, 7.672211661553102e-14, 7.672211830959692e-15, 7.672211619201455e-16, 7.672211354503659e-17, 7.672211023631414e-18, 7.672210816836261e-19, 7.67221068758929e-20, 7.672210849148003e-21, 7.672210748173807e-22, 7.672210621956063e-23, 7.6722103064117e-24, 7.672210207804087e-25, 7.672210331063604e-26, 7.672210022914813e-27, 7.67221011921131e-28, 7.672210359952553e-29, 7.67221051041583e-30, 7.672210416376282e-31, 7.672210651475152e-32, 7.672210651475152e-33, 7.672210559639656e-34, 7.672210559639656e-35, 7.672210703132619e-36, 7.672210882498822e-37, 7.672211106706576e-38, 7.672211386966269e-39, 7.672207183070876e-40, 7.672249222024806e-41, 7.672109092178373e-42, 7.679115584499998e-43, 7.707141553786494e-44, 8.407790785948902e-45, 1.401298464324817e-45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_train_first": 0.6095529411764706, "accuracy_train_last": 0.9966823529411765, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.3986666666666666, 0.2985333333333333, 0.2612, 0.23506666666666665, 0.2134666666666667, 0.1962666666666667, 0.1937333333333333, 0.18053333333333332, 0.17093333333333338, 0.16693333333333338, 0.15973333333333328, 0.15533333333333332, 0.15239999999999998, 0.15039999999999998, 0.14680000000000004, 0.14413333333333334, 0.14546666666666663, 0.1452, 0.14613333333333334, 0.14039999999999997, 0.13759999999999994, 0.14093333333333335, 0.14, 0.13959999999999995, 0.14213333333333333, 0.13973333333333338, 0.13759999999999994, 0.1338666666666667, 0.1352, 0.13346666666666662, 0.13053333333333328, 0.13626666666666665, 0.14013333333333333, 0.13573333333333337, 0.1373333333333333, 0.13773333333333337, 0.12946666666666662, 0.1353333333333333, 0.13319999999999999, 0.12986666666666669, 0.134, 0.12680000000000002, 0.12719999999999998, 0.13346666666666662, 0.13893333333333335, 0.12706666666666666, 0.12706666666666666, 0.12760000000000005, 0.1285333333333334, 0.1246666666666667, 0.12839999999999996, 0.12960000000000005, 0.1253333333333333, 0.1246666666666667, 0.12506666666666666, 0.126, 0.1253333333333333, 0.12493333333333334, 0.12106666666666666, 0.12639999999999996, 0.12453333333333338, 0.12146666666666661, 0.12293333333333334, 0.12213333333333332, 0.12893333333333334, 0.1213333333333333, 0.12360000000000004, 0.12013333333333331, 0.1265333333333334, 0.12119999999999997, 0.12053333333333338, 0.12373333333333336, 0.11906666666666665, 0.12426666666666664, 0.11893333333333334, 0.124, 0.12080000000000002, 0.12119999999999997, 0.1213333333333333, 0.12346666666666661, 0.12386666666666668, 0.11533333333333329, 0.11853333333333338, 0.12106666666666666, 0.1246666666666667, 0.12173333333333336, 0.11853333333333338, 0.1061333333333333, 0.1041333333333333, 0.10466666666666669, 0.10666666666666669, 0.10560000000000003, 0.1061333333333333, 0.10599999999999998, 0.10333333333333339, 0.10519999999999996, 0.10666666666666669, 0.1048, 0.10586666666666666, 0.10546666666666671, 0.10453333333333337, 0.10573333333333335, 0.10560000000000003, 0.10533333333333328, 0.10560000000000003, 0.10586666666666666, 0.10533333333333328, 0.10519999999999996, 0.10546666666666671, 0.10493333333333332, 0.10560000000000003, 0.10533333333333328, 0.10453333333333337, 0.10586666666666666, 0.10519999999999996, 0.10519999999999996, 0.10493333333333332, 0.10533333333333328, 0.10546666666666671, 0.10493333333333332, 0.1048, 0.10440000000000005, 0.10519999999999996, 0.10546666666666671, 0.10453333333333337, 0.10560000000000003, 0.10546666666666671, 0.10599999999999998, 0.10586666666666666, 0.1048, 0.10533333333333328, 0.10560000000000003, 0.10519999999999996, 0.10506666666666664, 0.10560000000000003, 0.10573333333333335, 0.10519999999999996, 0.10493333333333332, 0.10599999999999998, 0.10573333333333335, 0.10533333333333328, 0.10466666666666669, 0.1048, 0.1048, 0.10493333333333332], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.07907289064210096, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.0007672211020002014, "optimization": "adam", "nb_data_augmentation": 2, "learning_rate_decay_method": "discrete", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 3.4718790866563986e-08, "rotation_range": [0, 0], "momentum": 0.5074303145726603}, "accuracy_valid_max": 0.8966666666666666, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8950666666666667, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.6013333333333334, 0.7014666666666667, 0.7388, 0.7649333333333334, 0.7865333333333333, 0.8037333333333333, 0.8062666666666667, 0.8194666666666667, 0.8290666666666666, 0.8330666666666666, 0.8402666666666667, 0.8446666666666667, 0.8476, 0.8496, 0.8532, 0.8558666666666667, 0.8545333333333334, 0.8548, 0.8538666666666667, 0.8596, 0.8624, 0.8590666666666666, 0.86, 0.8604, 0.8578666666666667, 0.8602666666666666, 0.8624, 0.8661333333333333, 0.8648, 0.8665333333333334, 0.8694666666666667, 0.8637333333333334, 0.8598666666666667, 0.8642666666666666, 0.8626666666666667, 0.8622666666666666, 0.8705333333333334, 0.8646666666666667, 0.8668, 0.8701333333333333, 0.866, 0.8732, 0.8728, 0.8665333333333334, 0.8610666666666666, 0.8729333333333333, 0.8729333333333333, 0.8724, 0.8714666666666666, 0.8753333333333333, 0.8716, 0.8704, 0.8746666666666667, 0.8753333333333333, 0.8749333333333333, 0.874, 0.8746666666666667, 0.8750666666666667, 0.8789333333333333, 0.8736, 0.8754666666666666, 0.8785333333333334, 0.8770666666666667, 0.8778666666666667, 0.8710666666666667, 0.8786666666666667, 0.8764, 0.8798666666666667, 0.8734666666666666, 0.8788, 0.8794666666666666, 0.8762666666666666, 0.8809333333333333, 0.8757333333333334, 0.8810666666666667, 0.876, 0.8792, 0.8788, 0.8786666666666667, 0.8765333333333334, 0.8761333333333333, 0.8846666666666667, 0.8814666666666666, 0.8789333333333333, 0.8753333333333333, 0.8782666666666666, 0.8814666666666666, 0.8938666666666667, 0.8958666666666667, 0.8953333333333333, 0.8933333333333333, 0.8944, 0.8938666666666667, 0.894, 0.8966666666666666, 0.8948, 0.8933333333333333, 0.8952, 0.8941333333333333, 0.8945333333333333, 0.8954666666666666, 0.8942666666666667, 0.8944, 0.8946666666666667, 0.8944, 0.8941333333333333, 0.8946666666666667, 0.8948, 0.8945333333333333, 0.8950666666666667, 0.8944, 0.8946666666666667, 0.8954666666666666, 0.8941333333333333, 0.8948, 0.8948, 0.8950666666666667, 0.8946666666666667, 0.8945333333333333, 0.8950666666666667, 0.8952, 0.8956, 0.8948, 0.8945333333333333, 0.8954666666666666, 0.8944, 0.8945333333333333, 0.894, 0.8941333333333333, 0.8952, 0.8946666666666667, 0.8944, 0.8948, 0.8949333333333334, 0.8944, 0.8942666666666667, 0.8948, 0.8950666666666667, 0.894, 0.8942666666666667, 0.8946666666666667, 0.8953333333333333, 0.8952, 0.8952, 0.8950666666666667], "seed": 606298036, "model": "residualv3", "loss_std": [0.3423466086387634, 0.2584860324859619, 0.25035208463668823, 0.24616967141628265, 0.237563356757164, 0.23608165979385376, 0.22958996891975403, 0.2212345004081726, 0.2220689207315445, 0.2132493108510971, 0.2086877077817917, 0.20450548827648163, 0.1980285495519638, 0.19299575686454773, 0.18683113157749176, 0.18441341817378998, 0.1837807446718216, 0.17400139570236206, 0.16966189444065094, 0.1665814369916916, 0.1640440821647644, 0.15943124890327454, 0.15611039102077484, 0.15281957387924194, 0.14807775616645813, 0.1448565572500229, 0.14291469752788544, 0.13903295993804932, 0.13963398337364197, 0.13576602935791016, 0.1311327964067459, 0.13148148357868195, 0.1298065334558487, 0.124167799949646, 0.12441299855709076, 0.12048527598381042, 0.11876361817121506, 0.1141257956624031, 0.11555219441652298, 0.11284240335226059, 0.11423809081315994, 0.10952261835336685, 0.11098475009202957, 0.10746360570192337, 0.10366913676261902, 0.10368674248456955, 0.10405617207288742, 0.10078974068164825, 0.10072072595357895, 0.09888997673988342, 0.10041654855012894, 0.09502141922712326, 0.09616270661354065, 0.0971042737364769, 0.09386501461267471, 0.09115371108055115, 0.09268928319215775, 0.09036342799663544, 0.08881352841854095, 0.089536152780056, 0.08794838935136795, 0.08667919039726257, 0.08563600480556488, 0.08564333617687225, 0.08674830198287964, 0.08217476308345795, 0.07983644306659698, 0.08130259066820145, 0.08245296776294708, 0.0809699296951294, 0.08135783672332764, 0.07855203747749329, 0.07903166860342026, 0.07701395452022552, 0.08018728345632553, 0.07563725858926773, 0.07510494440793991, 0.07408510893583298, 0.07594045251607895, 0.07033863663673401, 0.07393055409193039, 0.0745609775185585, 0.07608020305633545, 0.07254338264465332, 0.06813747435808182, 0.0704551711678505, 0.06907708197832108, 0.0523180216550827, 0.042150016874074936, 0.037782810628414154, 0.03582530841231346, 0.035752635449171066, 0.03251834213733673, 0.032597899436950684, 0.03400692716240883, 0.031373005360364914, 0.0313241071999073, 0.03134062886238098, 0.028455259278416634, 0.031136605888605118, 0.02897058241069317, 0.028637446463108063, 0.028960345312952995, 0.028855348005890846, 0.02857191488146782, 0.03080638125538826, 0.030650822445750237, 0.02937084622681141, 0.027391625568270683, 0.028614792972803116, 0.028280481696128845, 0.029168272390961647, 0.02938958629965782, 0.029221128672361374, 0.028326598927378654, 0.0299239344894886, 0.027683932334184647, 0.02928255870938301, 0.0287169236689806, 0.03003913350403309, 0.028868146240711212, 0.028715677559375763, 0.03046248108148575, 0.02930183708667755, 0.029766719788312912, 0.029518699273467064, 0.028711222112178802, 0.02977042645215988, 0.02913532964885235, 0.02948755770921707, 0.028919631615281105, 0.02906963787972927, 0.03028630092740059, 0.02830001339316368, 0.029789481312036514, 0.030026255175471306, 0.029277464374899864, 0.027931245043873787, 0.030110353603959084, 0.029302377253770828, 0.031512416899204254, 0.02837737835943699, 0.028180792927742004, 0.029551276937127113, 0.029467586427927017]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:42 2016", "state": "available"}], "summary": "4580b8eadc9b2bf03b935fde83e84b31"}