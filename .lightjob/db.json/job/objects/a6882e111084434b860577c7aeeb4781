{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 64, "f3": 64, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.010650419481754006, 0.015273966430366735, 0.010381279204470274, 0.016981432044984077, 0.015866355132293522, 0.01964052848780703, 0.015260795852236896, 0.014627389214749102, 0.015669349502532782, 0.018667200102536963, 0.011653954504977308, 0.013070352265720724, 0.01947923107347014, 0.021122222075168274, 0.015796069810008136, 0.013605174889261856, 0.020372679560381364, 0.014917679512272098, 0.022693504277460436, 0.024914374492328063, 0.015465087319070392, 0.025651086550092492, 0.02058049348356571, 0.014958271345520994, 0.01901646700634492, 0.016440280104780852, 0.01693407873673691, 0.019507705733046662, 0.01491905004494017, 0.016185567497079712, 0.019953676688801006, 0.017941702515529512, 0.019300408171050762, 0.020870275820544737, 0.012350011466162892, 0.016364355380244583, 0.012820056167947807, 0.01707340718361521, 0.013955246463764266, 0.018183304974973065, 0.014330645527984607, 0.014445003442577454, 0.0157092267385085, 0.016722437537613, 0.016528841930505175, 0.015601877573418667, 0.015698142260221922, 0.015586081862874792, 0.015600358564835111, 0.015477612544762813, 0.015959003974776353, 0.016208487609772806, 0.016303818942949497, 0.01646556519552014, 0.01630694044889966, 0.01630694044889966, 0.016128289740460437, 0.016241014118337737, 0.01607394882840892, 0.015322838354175965, 0.015392697698588122, 0.01582857707804083, 0.016397659346374088, 0.01641558342175903, 0.017343512092707205, 0.017523988987535034, 0.017922278115241812, 0.017922278115241812, 0.017922278115241812, 0.01800889837488405, 0.017981337715285994, 0.018104983191993846, 0.018307959808086974, 0.018382565590597838, 0.01842120493236802, 0.01829806755273112, 0.018530541834941603, 0.018438870734165495, 0.01840003919769345, 0.018365412617769458, 0.018284326249252313, 0.01839135815912821, 0.018479005169751657, 0.01812072322544336, 0.018524456494751065, 0.019231853356566634], "moving_avg_accuracy_train": [0.04338639358965484, 0.09300582440764579, 0.14026511761287602, 0.1895624655553536, 0.23907444340804085, 0.2896214722930581, 0.3331463258597102, 0.37973480125869674, 0.4223292774820334, 0.4597043801128906, 0.48285621825285663, 0.5117034608378699, 0.5444742852448082, 0.5692707039079428, 0.5909224160476025, 0.6162813816456847, 0.6442441290419781, 0.6678183433987622, 0.689727598079281, 0.7131264576131303, 0.7346340767673765, 0.7544233395871319, 0.7738171745618352, 0.7897024029343708, 0.8054752535243317, 0.8203614243005438, 0.8348587373372207, 0.8477412695535724, 0.859381979426842, 0.8704213403735082, 0.880419652389821, 0.8892926833152446, 0.8984267823182993, 0.9063428408781822, 0.9143531392296866, 0.9217321796579546, 0.9284198190195863, 0.9345409649438551, 0.9400105408435725, 0.9450330684544903, 0.9495232245162487, 0.9536712497194318, 0.9574067975511061, 0.9607850666412798, 0.9638394597152932, 0.9666023283259436, 0.9691075112660051, 0.9713900776977749, 0.9734536880816057, 0.9753062871294345, 0.9769806017189089, 0.9784898099982454, 0.9798550728960769, 0.9810954352481728, 0.9822187368114876, 0.9832320333672805, 0.9841393499698751, 0.9849722109538769, 0.9857264361370974, 0.9864075639508055, 0.9870252292807619, 0.9875927538217703, 0.9881081762062969, 0.9885674060547517, 0.9889946638112183, 0.9893768706432287, 0.9897231819408475, 0.990037187257514, 0.9903221171913232, 0.9905785541317516, 0.9908139976757562, 0.9910282220141698, 0.9912210239187421, 0.9913945456328571, 0.9915507151755607, 0.9916912677639939, 0.9918177650935838, 0.9919339378390243, 0.9920408184587302, 0.9921393361652749, 0.9922256769523558, 0.9923033836607286, 0.9923756448470735, 0.992440679914784, 0.9925015366245331, 0.9925586328121168], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 136982863, "moving_var_accuracy_train": [0.016941412338447988, 0.0374060623369157, 0.05376642325154543, 0.07026183755384621, 0.08529857735642651, 0.09976373878270878, 0.10683708080642448, 0.11568774708579978, 0.12044757701988335, 0.120974903987899, 0.11370148207244177, 0.10982080450802506, 0.10850406644801605, 0.10318742120987145, 0.09708784883609252, 0.09316675817832568, 0.09088731953803338, 0.08680027982708649, 0.08244039081028035, 0.0791239113766156, 0.07537471937411093, 0.07136178174324406, 0.06761069108415384, 0.06312068629976693, 0.05904766301138929, 0.05513727943365732, 0.05151510025784221, 0.04785722695880606, 0.044291059400108176, 0.04095876087109435, 0.03776258097256484, 0.03469489897554006, 0.0319762949593645, 0.02934264131153951, 0.026985861097506586, 0.024777327126534042, 0.02270211509596184, 0.020769119433201387, 0.018961453834586185, 0.01729234050354945, 0.015744559966325018, 0.014324958987468703, 0.01301805194714638, 0.011818961070842343, 0.01072102881721334, 0.009717626922129465, 0.0088023477039851, 0.00796900391922557, 0.007210429917649304, 0.006520276034972516, 0.005893478395576007, 0.005324629942692167, 0.004808942433444706, 0.004341894678980708, 0.0039190614687019485, 0.00353639625102159, 0.0031901656366755252, 0.0028773919897760246, 0.00259477249144146, 0.002339470658184775, 0.0021089571865047685, 0.0019009602247961122, 0.0017132551444267404, 0.0015438276584674733, 0.0013910878353348732, 0.0012532937903633043, 0.0011290437949606998, 0.001017026809514683, 0.0009160547941678401, 0.0008250411538908028, 0.0007430359414634435, 0.0006691453759216182, 0.0006025653914991168, 0.0005425798404166301, 0.0004885413567095814, 0.00043986501630966077, 0.0003960225288482351, 0.0003565417409244601, 0.0003209903780338326, 0.00028897869187697505, 0.0002601479152729012, 0.00023418746873834627, 0.00021081571697597956, 0.00018977221131867062, 0.0001708283220388968, 0.00015377482960673638], "duration": 26702.429037, "accuracy_train": [0.43386393589654854, 0.5395807017695644, 0.5655987564599483, 0.6332385970376523, 0.684682244082226, 0.7445447322582134, 0.7248700079595791, 0.7990310798495754, 0.8056795634920635, 0.7960803037906055, 0.6912227615125508, 0.7713286441029901, 0.8394117049072536, 0.7924384718761536, 0.7857878253045404, 0.8445120720284238, 0.8959088556086194, 0.8799862726098191, 0.8869108902039498, 0.923716193417774, 0.9282026491555924, 0.9325267049649317, 0.9483616893341639, 0.9326694582871908, 0.9474309088339794, 0.9543369612864526, 0.9653345546673128, 0.9636840595007383, 0.964148368286268, 0.9697755888935032, 0.9704044605366371, 0.9691499616440569, 0.9806336733457919, 0.9775873679171282, 0.9864458243932264, 0.9881435435123662, 0.988608573274271, 0.9896312782622739, 0.98923672394103, 0.9902358169527501, 0.9899346290720746, 0.9910034765480805, 0.9910267280361758, 0.9911894884528424, 0.9913289973814139, 0.9914681458217978, 0.9916541577265596, 0.9919331755837025, 0.9920261815360835, 0.991979678559893, 0.9920494330241787, 0.9920726845122739, 0.9921424389765596, 0.9922586964170359, 0.9923284508813216, 0.9923517023694168, 0.9923051993932264, 0.992467959809893, 0.9925144627860835, 0.9925377142741787, 0.9925842172503692, 0.9927004746908453, 0.9927469776670359, 0.9927004746908453, 0.9928399836194168, 0.9928167321313216, 0.9928399836194168, 0.9928632351075121, 0.9928864865956073, 0.9928864865956073, 0.9929329895717978, 0.992956241059893, 0.992956241059893, 0.992956241059893, 0.992956241059893, 0.992956241059893, 0.992956241059893, 0.9929794925479882, 0.9930027440360835, 0.9930259955241787, 0.9930027440360835, 0.9930027440360835, 0.9930259955241787, 0.9930259955241787, 0.9930492470122739, 0.9930724985003692], "end": "2016-01-23 18:07:33.191000", "learning_rate_per_epoch": [0.00014073999773245305, 0.00013622839469462633, 0.00013186142314225435, 0.00012763444101437926, 0.0001235429517691955, 0.00011958262621192262, 0.00011574925156310201, 0.00011203876056242734, 0.00010844721691682935, 0.00010497080802451819, 0.00010160583769902587, 9.834873344516382e-05, 9.51960391830653e-05, 9.214440797222778e-05, 8.919060201151296e-05, 8.633148536318913e-05, 8.356402395293117e-05, 8.088527101790532e-05, 7.829238893464208e-05, 7.578262739116326e-05, 7.335332338698208e-05, 7.100189395714551e-05, 6.872583617223427e-05, 6.652274169027805e-05, 6.439027492888272e-05, 6.232616578927264e-05, 6.032822057022713e-05, 5.8394321968080476e-05, 5.652241816278547e-05, 5.471052281791344e-05, 5.2956707804696634e-05, 5.125911411596462e-05, 4.9615937314229086e-05, 4.802543480764143e-05, 4.648591857403517e-05, 4.499575516092591e-05, 4.3553358409553766e-05, 4.215720036881976e-05, 4.080579674337059e-05, 3.9497714169556275e-05, 3.8231566577451304e-05, 3.700600427691825e-05, 3.581973214750178e-05, 3.467148417257704e-05, 3.356004526722245e-05, 3.2484236726304516e-05, 3.1442912586499006e-05, 3.043497054022737e-05, 2.9459339202730916e-05, 2.8514983569039032e-05, 2.7600899557000957e-05, 2.6716117645264603e-05, 2.585969923529774e-05, 2.5030734832398593e-05, 2.422834404569585e-05, 2.3451673769159243e-05, 2.2699901819578372e-05, 2.1972227841615677e-05, 2.1267880583764054e-05, 2.0586112441378646e-05, 1.992619945667684e-05, 1.928743949974887e-05, 1.8669155906536616e-05, 1.8070692021865398e-05, 1.7491413018433377e-05, 1.6930704077822156e-05, 1.6387968571507372e-05, 1.5862631698837504e-05, 1.5354135030065663e-05, 1.4861939234833699e-05, 1.4385521353688091e-05, 1.3924375707574654e-05, 1.3478012078849133e-05, 1.3045957530266605e-05, 1.2627752767002676e-05, 1.2222953955642879e-05, 1.1831131814687978e-05, 1.1451869795564562e-05, 1.1084765901614446e-05, 1.072942995961057e-05, 1.0385484529251698e-05, 1.005256490316242e-05, 9.730317287903745e-06, 9.418399713467807e-06, 9.11648112378316e-06, 8.82424046722008e-06], "accuracy_valid": [0.4247002659073795, 0.5144954819277108, 0.5341811582266567, 0.5687579419239458, 0.5990328501506024, 0.6196936182228916, 0.5803046169051205, 0.6175169427710843, 0.604149508189006, 0.5876891354480422, 0.5006500611822289, 0.5539565488516567, 0.5801104809864458, 0.5509650908320783, 0.5413730115775602, 0.5694800687123494, 0.5970179546310241, 0.5796530849962349, 0.5981974774096386, 0.5958781414721386, 0.6038141825112951, 0.6032023602221386, 0.6089705501694277, 0.6047495646649097, 0.6082896037274097, 0.6119825983621988, 0.6134680322853916, 0.6069365352033133, 0.6131224115210843, 0.6193479974585843, 0.6119414180158133, 0.6123385142131024, 0.6249529367469879, 0.6183199595256024, 0.6252382577183735, 0.6265501458960843, 0.6259809746799698, 0.6256750635353916, 0.6236513436558735, 0.6255529932228916, 0.6236616387424698, 0.6263265954442772, 0.6248514566076807, 0.6263163003576807, 0.6263163003576807, 0.6262045251317772, 0.6258383141942772, 0.6257162438817772, 0.6247396813817772, 0.6247396813817772, 0.6242411050451807, 0.6241190347326807, 0.6241190347326807, 0.6237528237951807, 0.6235086831701807, 0.6235086831701807, 0.6232645425451807, 0.6235086831701807, 0.6231424722326807, 0.6233969079442772, 0.6233969079442772, 0.6235189782567772, 0.6233969079442772, 0.6231527673192772, 0.6228983316076807, 0.6232645425451807, 0.6233866128576807, 0.6233866128576807, 0.6233866128576807, 0.6236307534826807, 0.6237528237951807, 0.6238748941076807, 0.6238748941076807, 0.6235086831701807, 0.6236307534826807, 0.6235086831701807, 0.6233866128576807, 0.6232645425451807, 0.6232645425451807, 0.6231424722326807, 0.6230204019201807, 0.6231424722326807, 0.6233866128576807, 0.6233866128576807, 0.6236307534826807, 0.6234983880835843], "accuracy_test": 0.6170886075949367, "start": "2016-01-23 10:42:30.762000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0], "accuracy_train_last": 0.9930724985003692, "batch_size_eval": 1024, "accuracy_train_std": [0.01964212733578449, 0.02057607588514453, 0.01901398564321419, 0.025662331860971613, 0.029395381880157397, 0.02788339250930643, 0.03409694989988517, 0.0339857987025078, 0.03510425109845598, 0.031859312310214556, 0.029969838408690573, 0.028028783750167305, 0.0326865645130944, 0.02544668946645107, 0.027607616762300394, 0.024261075573258066, 0.02697807830540664, 0.026986911301490165, 0.025477966728732974, 0.02043159191657913, 0.01913663280941911, 0.017632030494046047, 0.0143351908255276, 0.01721678895903915, 0.014050684269783328, 0.015569143766350829, 0.012202080622214099, 0.012202610583589792, 0.011989957840933829, 0.01091788040872751, 0.009890611545386991, 0.010187161140242006, 0.0070987735275006595, 0.008078163538517947, 0.005736278931520393, 0.00565724520868015, 0.005064508194417486, 0.004531225343767894, 0.004833275084319841, 0.004450372254920739, 0.004855267017616991, 0.004482663194077674, 0.004571444501309491, 0.004661148623515072, 0.004506109571820753, 0.004485850408190194, 0.004450945246291682, 0.0042890344368754565, 0.00422960008870769, 0.004222195843816618, 0.004107880737916911, 0.004005049611533949, 0.003992247717078875, 0.00397190856908303, 0.003961456785827609, 0.003940443995211936, 0.003959349357964776, 0.003878656919223661, 0.0038632766420684025, 0.0038465085963872783, 0.0038182773069062466, 0.003807386198833895, 0.003848327161520307, 0.003860687403979364, 0.0038098884600018847, 0.003834579194067628, 0.003833653913487703, 0.0038207197846025693, 0.0037656240272109028, 0.003698699855998311, 0.003701896042477883, 0.003718571219327156, 0.003718571219327156, 0.003736845073222368, 0.003736845073222368, 0.003736845073222368, 0.003736845073222368, 0.003704505761943926, 0.003702526006568756, 0.003706530253167906, 0.003817269576589032, 0.003817269576589032, 0.003785331733490091, 0.003785331733490091, 0.0037529780683324943, 0.00376871008015914], "accuracy_test_std": 0.0446029962589555, "error_valid": [0.5752997340926205, 0.4855045180722892, 0.4658188417733433, 0.4312420580760542, 0.40096714984939763, 0.3803063817771084, 0.4196953830948795, 0.38248305722891573, 0.39585049181099397, 0.41231086455195776, 0.4993499388177711, 0.4460434511483433, 0.4198895190135542, 0.44903490916792166, 0.45862698842243976, 0.43051993128765065, 0.40298204536897586, 0.4203469150037651, 0.4018025225903614, 0.4041218585278614, 0.39618581748870485, 0.3967976397778614, 0.3910294498305723, 0.3952504353350903, 0.3917103962725903, 0.3880174016378012, 0.3865319677146084, 0.39306346479668675, 0.38687758847891573, 0.38065200254141573, 0.38805858198418675, 0.38766148578689763, 0.37504706325301207, 0.38168004047439763, 0.3747617422816265, 0.37344985410391573, 0.3740190253200302, 0.3743249364646084, 0.3763486563441265, 0.3744470067771084, 0.3763383612575302, 0.37367340455572284, 0.3751485433923193, 0.3736836996423193, 0.3736836996423193, 0.37379547486822284, 0.37416168580572284, 0.37428375611822284, 0.37526031861822284, 0.37526031861822284, 0.3757588949548193, 0.3758809652673193, 0.3758809652673193, 0.3762471762048193, 0.3764913168298193, 0.3764913168298193, 0.3767354574548193, 0.3764913168298193, 0.3768575277673193, 0.37660309205572284, 0.37660309205572284, 0.37648102174322284, 0.37660309205572284, 0.37684723268072284, 0.3771016683923193, 0.3767354574548193, 0.3766133871423193, 0.3766133871423193, 0.3766133871423193, 0.3763692465173193, 0.3762471762048193, 0.3761251058923193, 0.3761251058923193, 0.3764913168298193, 0.3763692465173193, 0.3764913168298193, 0.3766133871423193, 0.3767354574548193, 0.3767354574548193, 0.3768575277673193, 0.3769795980798193, 0.3768575277673193, 0.3766133871423193, 0.3766133871423193, 0.3763692465173193, 0.37650161191641573], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.8278805461511762, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.00014540099825340803, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "optimization": "rmsprop", "nb_data_augmentation": 0, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 1.3297651075846745e-10, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.03205625567074092}, "accuracy_valid_max": 0.6265501458960843, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import os\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.6234983880835843, "loss_train": [1.6652637720108032, 1.2867833375930786, 1.0991668701171875, 0.9566918015480042, 0.8328932523727417, 0.7158721685409546, 0.6016010642051697, 0.49033939838409424, 0.3835224211215973, 0.28656038641929626, 0.20971180498600006, 0.15526869893074036, 0.12106076627969742, 0.09505151957273483, 0.07798383384943008, 0.06252826750278473, 0.05152670294046402, 0.0457683689892292, 0.039649657905101776, 0.033390212804079056, 0.030750786885619164, 0.024721501395106316, 0.023279275745153427, 0.01943463273346424, 0.01651688851416111, 0.015363037586212158, 0.01444869115948677, 0.011375895701348782, 0.010527058504521847, 0.00758051173761487, 0.006932235788553953, 0.005027678795158863, 0.0028809946961700916, 0.0014269703533500433, 0.0008094579097814858, 0.0005427548312582076, 0.00045632082037627697, 0.00041341979522258043, 0.00038192086503840983, 0.0003610432322602719, 0.00033936751424334943, 0.0003220629005227238, 0.0003042137832380831, 0.00029214841197244823, 0.0002814503968693316, 0.00027220507035963237, 0.00026389030972495675, 0.0002564657188486308, 0.000249684089794755, 0.00024358544033020735, 0.00023796828463673592, 0.00023283323389478028, 0.00022805531625635922, 0.00022364773030858487, 0.00021958247816655785, 0.0002157502603949979, 0.00021218966867309064, 0.00020889504230581224, 0.0002057821984635666, 0.0002028664603130892, 0.00020010012667626143, 0.0001975165941985324, 0.00019504388910718262, 0.00019270015764050186, 0.00019051518756896257, 0.00018842842837329954, 0.0001864330843091011, 0.00018455000827088952, 0.00018276835908181965, 0.00018107698997482657, 0.00017944240244105458, 0.0001779136946424842, 0.00017641908198129386, 0.00017501902766525745, 0.00017367658438161016, 0.00017238612053915858, 0.00017115307855419815, 0.00016998036880977452, 0.00016884742944967002, 0.00016776431584730744, 0.00016671537014190108, 0.00016572308959439397, 0.00016476163000334054, 0.00016384743503294885, 0.0001629749167477712, 0.00016212825721595436], "accuracy_train_first": 0.43386393589654854, "model": "residualv4", "loss_std": [0.21730853617191315, 0.11043386161327362, 0.10171256214380264, 0.10001896321773529, 0.09956718981266022, 0.09521499276161194, 0.08937003463506699, 0.08175002038478851, 0.07476493716239929, 0.06835553050041199, 0.058236975222826004, 0.05161213129758835, 0.044550783932209015, 0.044197551906108856, 0.03245888277888298, 0.027131492272019386, 0.021923890337347984, 0.020061569288372993, 0.021492457017302513, 0.017236223444342613, 0.015396889299154282, 0.013777593150734901, 0.012884355150163174, 0.01267376821488142, 0.01163223572075367, 0.011007174849510193, 0.011574341915547848, 0.009824845008552074, 0.0077817197889089584, 0.006247906945645809, 0.006094817537814379, 0.00453050946816802, 0.003069165861234069, 0.0009657955379225314, 0.00029269064543768764, 0.00013363467587623745, 0.00010379595187259838, 0.00010788824874907732, 0.00010850908438442275, 0.00013603428669739515, 0.00010991204180754721, 8.650473318994045e-05, 5.880503886146471e-05, 5.561262514675036e-05, 5.3633229981642216e-05, 5.2059236622881144e-05, 5.0605176511453465e-05, 4.938855272484943e-05, 4.829409590456635e-05, 4.730953514808789e-05, 4.644307409762405e-05, 4.566610368783586e-05, 4.4955584598938e-05, 4.4312957470538095e-05, 4.373534466139972e-05, 4.3202657252550125e-05, 4.270518184057437e-05, 4.223630821797997e-05, 4.180539690423757e-05, 4.140411692787893e-05, 4.102876118849963e-05, 4.0662289393367246e-05, 4.03084559366107e-05, 3.996253872173838e-05, 3.964208735851571e-05, 3.933376501663588e-05, 3.903319520759396e-05, 3.875479887938127e-05, 3.8486672565340996e-05, 3.8242196751525626e-05, 3.800881313509308e-05, 3.778246173169464e-05, 3.756665682885796e-05, 3.7353569496190175e-05, 3.715244383784011e-05, 3.695767009048723e-05, 3.6773690226254985e-05, 3.6599627492250875e-05, 3.6431720218388364e-05, 3.6261095374356955e-05, 3.610655039665289e-05, 3.595975795178674e-05, 3.581141208996996e-05, 3.5672259400598705e-05, 3.55345182470046e-05, 3.54071453330107e-05]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:09 2016", "state": "available"}], "summary": "87f7b840af8527ea2356c38c580f1a47"}