{"content": {"hp_model": {"f0": 64, "f1": 16, "f2": 16, "f3": 64, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.4600780010223389, 1.1248540878295898, 0.9783094525337219, 0.887745201587677, 0.8194839358329773, 0.7682827115058899, 0.7230671048164368, 0.6823901534080505, 0.6459650993347168, 0.6130995154380798, 0.5817806124687195, 0.5582149624824524, 0.5428128242492676, 0.5234619379043579, 0.5144272446632385, 0.5048007965087891, 0.495145708322525, 0.48452839255332947, 0.4820498824119568, 0.4747476577758789, 0.47089746594429016, 0.4675403833389282, 0.4642208516597748, 0.4630543291568756, 0.46380507946014404, 0.45755472779273987, 0.45601123571395874, 0.4577285647392273, 0.45605647563934326, 0.45641836524009705, 0.4559630751609802, 0.4564322531223297, 0.45301371812820435, 0.4564482271671295, 0.4500592350959778, 0.45271843671798706, 0.4550352096557617, 0.4561912417411804, 0.4473024606704712, 0.4584181606769562, 0.4535858929157257, 0.45048603415489197, 0.45059725642204285, 0.4545082151889801, 0.44888272881507874, 0.4558427929878235, 0.44960564374923706, 0.45202159881591797, 0.4541008174419403, 0.45035308599472046, 0.4487975537776947, 0.4452667832374573, 0.45145195722579956, 0.4496229588985443, 0.44866275787353516, 0.44485196471214294, 0.44814079999923706, 0.44665461778640747, 0.449233740568161, 0.443388968706131, 0.44953739643096924, 0.44680964946746826, 0.4439147710800171, 0.44701001048088074, 0.44616377353668213, 0.44602683186531067, 0.4476674795150757, 0.44526976346969604, 0.4458133578300476, 0.4439527690410614, 0.4453604519367218, 0.44223207235336304, 0.44607484340667725, 0.44394630193710327, 0.44506123661994934, 0.44450968503952026, 0.4420055150985718, 0.4409509599208832, 0.4397920072078705, 0.44314390420913696, 0.4424903094768524, 0.4392843246459961, 0.4423782229423523, 0.44235268235206604, 0.4373416006565094, 0.44039982557296753, 0.4417281746864319, 0.43962159752845764, 0.438361257314682, 0.44190362095832825, 0.4414930045604706, 0.4374054968357086, 0.43968990445137024, 0.43868735432624817, 0.4372054934501648, 0.4398044943809509, 0.4395844340324402, 0.4379458427429199, 0.43810880184173584, 0.4387744665145874, 0.43512821197509766, 0.4404033124446869, 0.43645432591438293, 0.4366474449634552, 0.43801847100257874, 0.43691885471343994, 0.43763867020606995, 0.43649178743362427, 0.4372749626636505, 0.43707531690597534, 0.4375993311405182, 0.43537235260009766, 0.43505147099494934, 0.44017189741134644, 0.43443024158477783, 0.43785613775253296, 0.4377651810646057, 0.43812069296836853, 0.43581461906433105, 0.441184937953949, 0.4351476728916168, 0.4335370659828186, 0.4366734027862549, 0.4385826885700226, 0.43677935004234314, 0.4389750361442566, 0.4387766718864441, 0.43779614567756653, 0.4356248378753662, 0.4379367232322693, 0.4389772117137909, 0.4389406442642212, 0.4385721683502197, 0.4375024735927582, 0.43508070707321167, 0.43710288405418396, 0.43734732270240784, 0.4393957853317261, 0.4385169446468353, 0.43461111187934875, 0.4389355182647705, 0.4394806921482086, 0.43793150782585144, 0.4359017014503479, 0.43908894062042236, 0.43361368775367737, 0.4375799298286438, 0.4377225339412689, 0.4342247247695923, 0.4353416860103607, 0.43891429901123047, 0.43745166063308716, 0.44192659854888916, 0.43711400032043457, 0.43886497616767883, 0.44172894954681396, 0.4399069547653198, 0.44212037324905396, 0.44050833582878113, 0.4406614303588867, 0.44117626547813416, 0.43804293870925903, 0.43742135167121887, 0.4459640085697174, 0.44099676609039307, 0.44333383440971375, 0.4431062340736389, 0.44039982557296753, 0.43863797187805176, 0.44337987899780273, 0.4400562644004822, 0.44385311007499695, 0.44064489006996155, 0.44239678978919983, 0.44263383746147156, 0.44293761253356934, 0.44291019439697266, 0.4478817284107208, 0.44355177879333496, 0.4408652186393738, 0.44121769070625305, 0.44403690099716187, 0.4427851736545563, 0.4436946213245392, 0.44287416338920593, 0.4492393434047699, 0.4451974928379059, 0.4409084618091583, 0.44515278935432434, 0.44620177149772644, 0.4455327093601227, 0.4444672465324402, 0.4469011723995209, 0.44514843821525574, 0.44512155652046204, 0.4481494724750519], "moving_avg_accuracy_train": [0.057764705882352926, 0.11890352941176469, 0.1779990588235294, 0.23415679999999997, 0.2865717082352941, 0.33492159623529405, 0.3809070836705881, 0.42398343412705874, 0.4631968554202352, 0.49924422870174107, 0.5327080411256846, 0.5633290017189985, 0.5917537486059221, 0.6163595502159182, 0.6382130069590322, 0.6606293533219525, 0.6798134768132866, 0.6982933056025462, 0.7156945632775856, 0.7322356951851211, 0.7468427139019032, 0.7608972660411246, 0.7732569512017181, 0.785470079610958, 0.7971301304733917, 0.8077582938966408, 0.8157565821540355, 0.8227691592327495, 0.8309016550741805, 0.8376844307432331, 0.8436148111983215, 0.8489662712549599, 0.8537661147176993, 0.8596365620694587, 0.8632634940978069, 0.8670265564527321, 0.8717991949251058, 0.8767369224914188, 0.8810632302422768, 0.8849686719239315, 0.8893235694374206, 0.891758271317208, 0.893196561832546, 0.8971874938845856, 0.8969652150843623, 0.8996686935759262, 0.9002618242183336, 0.9030921123847355, 0.9060276070286148, 0.9079942580904593, 0.910063067575531, 0.9124849961120955, 0.9131188494420625, 0.9150657880272679, 0.9171309739304235, 0.9182578765373812, 0.9194297359424667, 0.9205432329364553, 0.922679497878104, 0.92429390103147, 0.9245233344577348, 0.9239298245413732, 0.9253203714990006, 0.9275412755255712, 0.9284506773847788, 0.9255444331757127, 0.9253805780934355, 0.9267813438135037, 0.9272373270792122, 0.9269065355477616, 0.928013529051809, 0.9280121761466281, 0.9294909585319653, 0.9300712744434746, 0.9294547352344212, 0.9314551440639203, 0.9296249237751754, 0.9304765490447167, 0.9320994823755391, 0.9330354164909264, 0.9326542277830102, 0.933172334416474, 0.9351609833277678, 0.9362542967596968, 0.9369300435543154, 0.9366982156694721, 0.9372825117495838, 0.9381989664569784, 0.938870834517163, 0.9393013981242703, 0.9376583171353726, 0.9387277795394824, 0.940069119232593, 0.939358677897569, 0.9395145748136944, 0.9402595879205602, 0.9392900997167395, 0.940128148568595, 0.9398706278293825, 0.9403118003405618, 0.9402688556006232, 0.9404231465111491, 0.9407361259776812, 0.9414342780857954, 0.9401802620419217, 0.9409340005436119, 0.9412406004892506, 0.9407824227932667, 0.9416712393374694, 0.9412876448154872, 0.9413377038633503, 0.9420909923005447, 0.9416089518940196, 0.9426715861163824, 0.9435267804459205, 0.9408164553425049, 0.9419512803964897, 0.9429561523568407, 0.9425640665329214, 0.9431100128208056, 0.9439825409504897, 0.9438384045024996, 0.9431769169934261, 0.9420945194117306, 0.9427344792352634, 0.9425763254293842, 0.9427963399452693, 0.9429567059507424, 0.9422139765321387, 0.9437125788789249, 0.9435672033439736, 0.9444834241860468, 0.9450609641203833, 0.9445807500612862, 0.9448967927022164, 0.9454047604908182, 0.9460101667946776, 0.9434585618799157, 0.9433856468683948, 0.9441153174756729, 0.9443414327869292, 0.9435708189200009, 0.9435737370280008, 0.943802245678142, 0.9447043740515043, 0.9460715837051774, 0.9469773665111303, 0.9478561004482525, 0.9486257845210744, 0.9487914413630846, 0.947872297226776, 0.9484097733864514, 0.9487358548713356, 0.9491281517371433, 0.948325924798723, 0.9482368617306154, 0.9484367049693186, 0.948414210942975, 0.9495586722016186, 0.9499439814520451, 0.9506695833068406, 0.9511508602702742, 0.9508710683608937, 0.9483463144659808, 0.9475163889017356, 0.9486165147174443, 0.9478819220692293, 0.9479360828034828, 0.947629533346664, 0.9470101094237624, 0.9480408631872684, 0.9484461886332475, 0.9479592168287463, 0.9474997657341069, 0.9480321421018727, 0.9492853984799208, 0.9497780351025169, 0.9484261139452064, 0.9484658554918621, 0.9479886817073817, 0.9478509900072318, 0.9474847145359204, 0.9461597724940931, 0.9459955599505662, 0.9467371804260978, 0.9455293447364292, 0.9465411161451392, 0.9471975927659195, 0.9482001864305041, 0.9486648736698067, 0.9485819157145907, 0.9494507829666611, 0.9496751164347008, 0.950128781261819, 0.9509370796062253, 0.9514739598808969], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.056573333333333316, 0.11578266666666662, 0.17253773333333328, 0.2255239599999999, 0.27455823066666657, 0.3193824075999999, 0.36179083350666663, 0.4007584168226666, 0.43504257514039996, 0.46593831762635995, 0.4938778191970573, 0.5193300372773516, 0.5422770335496164, 0.5621426635279881, 0.5783683971751893, 0.595558224124337, 0.6093757350452366, 0.6223181615407128, 0.6343930120533082, 0.6461003775146441, 0.6557303397631797, 0.6650773057868617, 0.6731562418748422, 0.6806672843540247, 0.6878805559186223, 0.6937991669934267, 0.6978992502940841, 0.7015093252646757, 0.7062250594048748, 0.7097892201310539, 0.7123836314512819, 0.714838601639487, 0.7171680748088716, 0.7206646006613178, 0.7217981405951861, 0.7227116598690009, 0.7244804938821008, 0.7270324444938907, 0.7294092000445016, 0.731214946706718, 0.7339601187027129, 0.7348041068324417, 0.7348303628158641, 0.7362539932009444, 0.7352019272141834, 0.7374284011594318, 0.737578894376822, 0.7394476716058065, 0.7406629044452259, 0.7413032806673698, 0.7418396192672996, 0.743628990673903, 0.7425727582731794, 0.7432088157791947, 0.7442212675346085, 0.7447458074478143, 0.7449245600363662, 0.7458721040327295, 0.7468715602961232, 0.7481310709331775, 0.7477312971731931, 0.7469981674558738, 0.747565017376953, 0.7486885156392576, 0.7491796640753319, 0.7479683643344655, 0.7481048612343523, 0.7477477084442503, 0.747319604266492, 0.7464276438398428, 0.7462648794558585, 0.746571724843606, 0.7475145523592455, 0.7482297637899876, 0.7478867874109889, 0.7490847753365567, 0.7467629644695677, 0.7466333346892776, 0.7480900012203499, 0.7486276677649816, 0.7480582343218167, 0.7482257442229684, 0.749376503134005, 0.7502121861539378, 0.750310967538544, 0.750813204118023, 0.7512652170395541, 0.7520186953355986, 0.7526968258020387, 0.7524804765551681, 0.7510724288996513, 0.7512718526763529, 0.7520513340753843, 0.7505395340011791, 0.7509789139343945, 0.7512676892076218, 0.7503142536201929, 0.7514828282581736, 0.7506278787656896, 0.7502850908891207, 0.7499632484668752, 0.750220256953521, 0.7503582312581689, 0.7510824081323519, 0.7495608339857834, 0.7501514172538718, 0.7507762755284846, 0.7502719813089695, 0.7508581165114059, 0.750238971526932, 0.7505217410409054, 0.7513762336034816, 0.7507586102431334, 0.75156274921882, 0.752406474296938, 0.7503258268672441, 0.7518932441805197, 0.7529305864291345, 0.7522108611195544, 0.7531897750075989, 0.7534974641735056, 0.7532810510894883, 0.7525396126472061, 0.7515123180491522, 0.7520544195775702, 0.7520623109531466, 0.7523760798578318, 0.7526451385387153, 0.751233958018177, 0.7527638955496927, 0.7527275059947234, 0.7535214220619176, 0.7546626131890591, 0.7537430185368199, 0.7545020500164712, 0.7547851783481574, 0.7547599938466749, 0.7532173277953408, 0.7529089283491401, 0.7534580355142262, 0.7536188986294702, 0.7522570087665231, 0.7520446412232042, 0.7521468437675505, 0.7520654927241287, 0.7538056101183824, 0.7546517157732109, 0.7553332108625566, 0.7559198897763009, 0.7558212341320041, 0.754652444052137, 0.75429386631359, 0.7535311463488976, 0.7545513650473412, 0.7544695618759404, 0.7549959390216797, 0.755069678452845, 0.7552960439408939, 0.7564597728801378, 0.7564937955921239, 0.7566310826995782, 0.7563813077629538, 0.7565431769866584, 0.7543555259546593, 0.7533199733591934, 0.753987976023274, 0.7542158450876133, 0.7543809272455186, 0.7539961678543001, 0.7527298844022035, 0.7540302292953165, 0.7550538730324515, 0.755495152395873, 0.7552123038229523, 0.7556510734406572, 0.7562059660965914, 0.7563453694869322, 0.7549908325382391, 0.7544250826177484, 0.7546092410226403, 0.7540549835870429, 0.7542894852283386, 0.7540072033721714, 0.7540064830349543, 0.7547391680647921, 0.7546519179249795, 0.7557067261324817, 0.7555227201859003, 0.7563837815006436, 0.7568120700172458, 0.7559975296821879, 0.7563844433806358, 0.7563193323759057, 0.7573140658049817, 0.7575559925578169, 0.7579737266353685], "moving_var_accuracy_train": [0.030030851211072657, 0.060669367773010366, 0.08603296536382005, 0.10581289587382918, 0.11995750973427499, 0.1290011637873604, 0.1351330329005787, 0.1383198773283589, 0.13832712128116834, 0.13618912723751753, 0.13264865519126967, 0.12782257872105823, 0.1223120169692235, 0.1155298245281355, 0.10827500421993036, 0.10196993705629903, 0.09508521869784596, 0.08865023347678448, 0.08251044404716414, 0.07672188104549015, 0.0709699779030729, 0.06565075403527246, 0.06046053498716615, 0.055756926038314794, 0.051404844509514165, 0.04728098077832435, 0.043128636235927324, 0.03925835874789875, 0.035927760270606894, 0.032749038655536425, 0.02979065950106164, 0.027069336673595647, 0.02456974948163729, 0.022422933902461584, 0.02029903223565975, 0.018396574756677272, 0.016761919982901392, 0.015305158366283395, 0.013943094978451273, 0.012686057753165395, 0.011588138169025807, 0.010482674311314187, 0.00945302499664137, 0.0086510703447732, 0.007786407981081139, 0.007073546346562156, 0.006369357947536604, 0.005804516932726817, 0.0053016193986923366, 0.004806266906414587, 0.004364159969942833, 0.003980535613474581, 0.0035860979825223147, 0.003261603312961142, 0.00297382791699636, 0.0026878743106668354, 0.002431446169787736, 0.0021994604328095576, 0.002020587040636853, 0.0018419850144475527, 0.0016582602702765858, 0.0014956045294363047, 0.0013634466640649752, 0.0012714937299156122, 0.0011517874625978227, 0.0011126250149626135, 0.0010016041498582446, 0.0009191030362950841, 0.0008290640193130309, 0.0007471424247172428, 0.0006834570938075462, 0.0006151114008999635, 0.000573281436898619, 0.0005189841922231155, 0.00047050685836750504, 0.00045947089189699464, 0.0004436711594552986, 0.0004058314339072602, 0.00038895350388318435, 0.0003579419075099777, 0.00032345546023836516, 0.0002935258245672803, 0.0002997657625420615, 0.0002805471946317849, 0.00025660217874254153, 0.00023142565838200568, 0.00021135570972690923, 0.00019777914183056913, 0.00018206388786017703, 0.000165525964252046, 0.00017327080405153225, 0.00016623747215061788, 0.00016580645448638218, 0.0001537683510523402, 0.00013861025058322304, 0.000129744626289518, 0.000125229330056694, 0.000119027329953891, 0.00010772144933862257, 9.870100306634335e-05, 8.88475010159045e-05, 8.017700207995229e-05, 7.304090719019382e-05, 7.012356376575364e-05, 7.726421353381098e-05, 7.465088774080136e-05, 6.803183070671271e-05, 6.311798884591536e-05, 6.39161436045604e-05, 5.8848832059757374e-05, 5.2986502028238226e-05, 5.2794843051911216e-05, 4.960662532842571e-05, 5.480868621041144e-05, 5.591003366083948e-05, 0.0001164317897905974, 0.00011637906193990215, 0.00011382906465620938, 0.00010382973983045517, 9.612928199070185e-05, 9.336810182544278e-05, 8.421826948365146e-05, 7.973453405722857e-05, 8.230534137524913e-05, 7.776074441934965e-05, 7.02097836142416e-05, 6.362446273761889e-05, 5.7493471765259494e-05, 5.670894749206746e-05, 7.125033368699684e-05, 6.431550673375856e-05, 6.543910174342721e-05, 6.189716295086505e-05, 5.77828965387696e-05, 5.2903553442867874e-05, 4.9935479566894987e-05, 4.824058274497929e-05, 0.00010201271323981431, 9.185929130597883e-05, 8.746513493151215e-05, 7.917877464422147e-05, 7.660550876691784e-05, 6.894503452841474e-05, 6.252047690427699e-05, 6.359294963207664e-05, 7.405701480274113e-05, 7.403529574650532e-05, 7.358132616210842e-05, 7.155491569349763e-05, 6.464640382789104e-05, 6.578519693489384e-05, 6.180660284137863e-05, 5.6582904770299807e-05, 5.230968577157213e-05, 5.287082974095852e-05, 4.7655136837769316e-05, 4.324905903449071e-05, 3.892870696203197e-05, 4.682396041865531e-05, 4.3477733342967004e-05, 4.3868442473814296e-05, 4.156624586621954e-05, 3.8114172892589915e-05, 9.167219567223167e-05, 8.870396408469693e-05, 9.072605896972759e-05, 8.651009030205889e-05, 7.788548173806695e-05, 7.094268668954377e-05, 6.730159198695579e-05, 7.013351267709837e-05, 6.459875986381153e-05, 6.0273157722842996e-05, 5.6145699725846165e-05, 5.308195112586095e-05, 6.190961995533737e-05, 5.790287553711016e-05, 6.856180532365319e-05, 6.171983930606326e-05, 5.7597108760814446e-05, 5.2008028923344616e-05, 4.8014645518969764e-05, 5.9012423694887155e-05, 5.335387316046277e-05, 5.2968494211966264e-05, 6.080144826990475e-05, 6.393443589426174e-05, 6.141964628751428e-05, 6.432442816514791e-05, 5.983539342196855e-05, 5.3913792280774214e-05, 5.531678576817912e-05, 5.0238036735305975e-05, 4.706653904005264e-05, 4.824000105817755e-05, 4.60101648163428e-05], "duration": 86467.162306, "accuracy_train": [0.5776470588235294, 0.6691529411764706, 0.7098588235294118, 0.7395764705882353, 0.7583058823529412, 0.7700705882352941, 0.7947764705882353, 0.8116705882352941, 0.8161176470588235, 0.8236705882352942, 0.8338823529411765, 0.8389176470588235, 0.8475764705882353, 0.8378117647058824, 0.8348941176470588, 0.8623764705882353, 0.8524705882352941, 0.8646117647058823, 0.8723058823529412, 0.8811058823529412, 0.8783058823529412, 0.8873882352941177, 0.8844941176470589, 0.8953882352941176, 0.9020705882352941, 0.9034117647058824, 0.8877411764705883, 0.8858823529411765, 0.9040941176470588, 0.8987294117647059, 0.8969882352941176, 0.8971294117647058, 0.8969647058823529, 0.9124705882352941, 0.8959058823529412, 0.9008941176470588, 0.9147529411764705, 0.9211764705882353, 0.92, 0.9201176470588235, 0.9285176470588236, 0.9136705882352941, 0.9061411764705882, 0.9331058823529412, 0.894964705882353, 0.924, 0.9056, 0.928564705882353, 0.9324470588235294, 0.9256941176470588, 0.9286823529411765, 0.9342823529411765, 0.9188235294117647, 0.9325882352941176, 0.9357176470588235, 0.9284, 0.9299764705882353, 0.930564705882353, 0.9419058823529411, 0.9388235294117647, 0.9265882352941176, 0.9185882352941176, 0.9378352941176471, 0.9475294117647058, 0.936635294117647, 0.8993882352941176, 0.9239058823529411, 0.9393882352941176, 0.9313411764705882, 0.9239294117647059, 0.9379764705882353, 0.928, 0.9428, 0.9352941176470588, 0.9239058823529411, 0.9494588235294118, 0.9131529411764706, 0.9381411764705883, 0.9467058823529412, 0.9414588235294118, 0.9292235294117647, 0.9378352941176471, 0.9530588235294117, 0.9460941176470589, 0.9430117647058823, 0.9346117647058824, 0.9425411764705882, 0.9464470588235294, 0.9449176470588235, 0.9431764705882353, 0.9228705882352941, 0.9483529411764706, 0.9521411764705883, 0.9329647058823529, 0.9409176470588235, 0.9469647058823529, 0.930564705882353, 0.9476705882352942, 0.9375529411764706, 0.9442823529411765, 0.9398823529411765, 0.9418117647058823, 0.9435529411764706, 0.9477176470588236, 0.9288941176470589, 0.9477176470588236, 0.944, 0.9366588235294118, 0.9496705882352942, 0.9378352941176471, 0.9417882352941176, 0.9488705882352941, 0.9372705882352941, 0.9522352941176471, 0.9512235294117647, 0.9164235294117647, 0.9521647058823529, 0.952, 0.9390352941176471, 0.9480235294117647, 0.9518352941176471, 0.9425411764705882, 0.9372235294117647, 0.9323529411764706, 0.9484941176470588, 0.9411529411764706, 0.9447764705882353, 0.9444, 0.9355294117647058, 0.9572, 0.9422588235294118, 0.9527294117647059, 0.9502588235294117, 0.9402588235294118, 0.9477411764705882, 0.9499764705882353, 0.9514588235294118, 0.9204941176470588, 0.9427294117647059, 0.9506823529411764, 0.9463764705882353, 0.936635294117647, 0.9436, 0.9458588235294118, 0.9528235294117647, 0.9583764705882353, 0.9551294117647059, 0.955764705882353, 0.9555529411764706, 0.9502823529411765, 0.9396, 0.9532470588235294, 0.9516705882352942, 0.9526588235294118, 0.9411058823529411, 0.947435294117647, 0.9502352941176471, 0.9482117647058823, 0.9598588235294118, 0.9534117647058824, 0.9572, 0.9554823529411764, 0.9483529411764706, 0.9256235294117647, 0.9400470588235295, 0.9585176470588235, 0.9412705882352941, 0.9484235294117647, 0.9448705882352941, 0.941435294117647, 0.9573176470588235, 0.9520941176470589, 0.9435764705882352, 0.943364705882353, 0.9528235294117647, 0.960564705882353, 0.9542117647058823, 0.9362588235294118, 0.9488235294117647, 0.9436941176470588, 0.9466117647058824, 0.9441882352941177, 0.934235294117647, 0.9445176470588236, 0.9534117647058824, 0.9346588235294118, 0.9556470588235294, 0.9531058823529411, 0.9572235294117647, 0.9528470588235294, 0.9478352941176471, 0.9572705882352941, 0.9516941176470588, 0.9542117647058823, 0.9582117647058823, 0.9563058823529412], "end": "2016-02-07 23:18:37.171000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0], "moving_var_accuracy_valid": [0.028804878399999987, 0.05747609694399998, 0.08071872558063999, 0.09791471496991841, 0.10976248077123392, 0.11686909423386749, 0.12136845610141186, 0.12289786343667529, 0.1211867086970064, 0.11765895996113454, 0.11291860569719207, 0.10745708377433459, 0.10145045713817517, 0.09485720071429588, 0.08774095053437554, 0.0816262668358128, 0.07518195262467414, 0.069171314994524, 0.06356640162918534, 0.05844332312067432, 0.05343361636478088, 0.048876546692933585, 0.044576314898463296, 0.04062642524073372, 0.03703206429664203, 0.033644127480471006, 0.03043101088007487, 0.02750520356370701, 0.024954826543665664, 0.022573673064437444, 0.02037688448888044, 0.01839343794761718, 0.01660293216007741, 0.01505267018140109, 0.013558967378296045, 0.01221058129763912, 0.0110176821317683, 0.009974525985916605, 0.009027914089851184, 0.008154469169939019, 0.0074068459765334665, 0.006672572222548227, 0.0060053212046833945, 0.005423029595474969, 0.004890688221491969, 0.0044462340754025985, 0.004001814501738662, 0.003633064006548934, 0.0032830487235800698, 0.002958434586575051, 0.002665180059761517, 0.002427478704062293, 0.0021947714756151097, 0.0019789354504122256, 0.0017902674323843687, 0.0016137169682308456, 0.0014526328437989872, 0.001315450116044487, 0.0011928953198419709, 0.001087883091261451, 0.0009805331536678547, 0.0008873171509428195, 0.000801477305345786, 0.0007326898099198226, 0.000661591870004164, 0.0006086379065637575, 0.0005479417985404901, 0.0004942956417257391, 0.0004465155362362927, 0.00040902432323703763, 0.00036836032111557795, 0.0003323716758318573, 0.0003071348217668924, 0.0002810250861061809, 0.0002539812726645227, 0.0002414997210263261, 0.00026586700024230757, 0.00023943153513751936, 0.00023458527806848164, 0.00021372851808057895, 0.00019527395628827197, 0.00017599909676229932, 0.0001703174017280385, 0.00015957095654347132, 0.00014370168074662667, 0.00013160168690786426, 0.00012028035934815698, 0.00011336188929683372, 0.00010616444873277932, 9.59692668290944e-05, 0.00010421572394804266, 9.415208013766353e-05, 9.020519338682041e-05, 0.00010175452922743704, 9.331656883610483e-05, 8.473543237834143e-05, 8.444324391488927e-05, 8.828901968418615e-05, 8.603856542805578e-05, 7.849224064015413e-05, 7.157525947894978e-05, 6.501221379092657e-05, 5.868232459052156e-05, 5.7533981437384093e-05, 7.261727424519739e-05, 6.849464418959054e-05, 6.515921054080047e-05, 6.093210342524776e-05, 5.7930883362539214e-05, 5.558785963247818e-05, 5.0748701051525496e-05, 5.224524880185412e-05, 5.0453851458898484e-05, 5.1228221742974214e-05, 5.2512247635683824e-05, 8.622286641233787e-05, 9.971175307670864e-05, 9.94252882358866e-05, 9.414480010354963e-05, 9.335477169505344e-05, 8.487134813089578e-05, 7.680572492421082e-05, 7.407273110503393e-05, 7.6163465715248e-05, 7.119198574774255e-05, 6.407334763724467e-05, 5.8552071203447175e-05, 5.3348397246931304e-05, 6.593643167615607e-05, 8.040916816160151e-05, 7.238016914283912e-05, 7.081487672429912e-05, 7.545424374986914e-05, 7.551970829472534e-05, 7.315289654916818e-05, 6.655906176408213e-05, 5.9908863919708175e-05, 7.533634444118785e-05, 6.865870196282145e-05, 6.450649987527814e-05, 5.8288742364364515e-05, 6.915256411710866e-05, 6.264320746649588e-05, 5.6472894960483906e-05, 5.088516739482773e-05, 7.304872756740656e-05, 7.218690782285957e-05, 6.914813705179273e-05, 6.533105267710366e-05, 5.8885543834757754e-05, 6.529162170844323e-05, 5.9919661488832467e-05, 5.9163371040811576e-05, 6.261464967061553e-05, 5.641341053321501e-05, 5.326572557590335e-05, 4.798809055169035e-05, 4.365045350413757e-05, 5.147379355002846e-05, 4.6336832099403695e-05, 4.1872778638321776e-05, 3.8246988445181525e-05, 3.465810441090801e-05, 7.426464731008064e-05, 7.648950518085863e-05, 7.28566026957425e-05, 6.60382612205139e-05, 5.967970416819066e-05, 5.504409185354925e-05, 6.397094669767938e-05, 7.279192359731674e-05, 7.494334974276672e-05, 6.920156205772532e-05, 6.30014356887819e-05, 5.84339611166908e-05, 5.536171774150995e-05, 5.000044571450571e-05, 6.151333425143147e-05, 5.824265757910414e-05, 5.2723620684024424e-05, 5.0216070359856655e-05, 4.56893825018044e-05, 4.183759166851476e-05, 3.765383717163464e-05, 3.8719899631008306e-05, 3.4916422949983246e-05, 4.14383638465079e-05, 3.759925115725331e-05, 4.051216533125523e-05, 3.811182827921044e-05, 4.02719290682157e-05, 3.759205605181366e-05, 3.387100543306513e-05, 3.9389356244052105e-05, 3.597717760328319e-05, 3.39499756788862e-05], "accuracy_test": 0.4967, "start": "2016-02-06 23:17:30.009000", "learning_rate_per_epoch": [0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844, 0.0014945740113034844], "accuracy_train_first": 0.5776470588235294, "accuracy_train_last": 0.9563058823529412, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.4342666666666667, 0.3513333333333334, 0.31666666666666665, 0.2976, 0.28413333333333335, 0.2772, 0.2565333333333333, 0.24853333333333338, 0.25639999999999996, 0.256, 0.2546666666666667, 0.25160000000000005, 0.2512, 0.25906666666666667, 0.27559999999999996, 0.24973333333333336, 0.26626666666666665, 0.2612, 0.25693333333333335, 0.24853333333333338, 0.25760000000000005, 0.2508, 0.2541333333333333, 0.25173333333333336, 0.24719999999999998, 0.25293333333333334, 0.2652, 0.266, 0.2513333333333333, 0.2581333333333333, 0.26426666666666665, 0.26306666666666667, 0.2618666666666667, 0.24786666666666668, 0.268, 0.2690666666666667, 0.25960000000000005, 0.25, 0.24919999999999998, 0.2525333333333334, 0.2413333333333333, 0.25760000000000005, 0.26493333333333335, 0.25093333333333334, 0.27426666666666666, 0.24253333333333338, 0.26106666666666667, 0.24373333333333336, 0.24839999999999995, 0.25293333333333334, 0.2533333333333333, 0.24026666666666663, 0.26693333333333336, 0.25106666666666666, 0.2466666666666667, 0.2505333333333334, 0.2534666666666666, 0.24560000000000004, 0.2441333333333333, 0.24053333333333338, 0.2558666666666667, 0.25960000000000005, 0.2473333333333333, 0.24119999999999997, 0.24639999999999995, 0.26293333333333335, 0.2506666666666667, 0.2554666666666666, 0.2565333333333333, 0.26160000000000005, 0.2552, 0.2506666666666667, 0.244, 0.2453333333333333, 0.2552, 0.2401333333333333, 0.27413333333333334, 0.2545333333333333, 0.2388, 0.24653333333333338, 0.25706666666666667, 0.25026666666666664, 0.24026666666666663, 0.24226666666666663, 0.24880000000000002, 0.2446666666666667, 0.2446666666666667, 0.24119999999999997, 0.24119999999999997, 0.24946666666666661, 0.26160000000000005, 0.24693333333333334, 0.24093333333333333, 0.26306666666666667, 0.24506666666666665, 0.24613333333333332, 0.25826666666666664, 0.238, 0.25706666666666667, 0.2528, 0.25293333333333334, 0.2474666666666666, 0.24839999999999995, 0.24239999999999995, 0.26413333333333333, 0.24453333333333338, 0.24360000000000004, 0.25426666666666664, 0.24386666666666668, 0.2553333333333333, 0.24693333333333334, 0.24093333333333333, 0.2548, 0.24119999999999997, 0.24, 0.26839999999999997, 0.23399999999999999, 0.23773333333333335, 0.25426666666666664, 0.238, 0.24373333333333336, 0.2486666666666667, 0.2541333333333333, 0.25773333333333337, 0.24306666666666665, 0.24786666666666668, 0.24480000000000002, 0.24493333333333334, 0.2614666666666666, 0.2334666666666667, 0.24760000000000004, 0.2393333333333333, 0.23506666666666665, 0.2545333333333333, 0.2386666666666667, 0.2426666666666667, 0.24546666666666672, 0.2606666666666667, 0.24986666666666668, 0.24160000000000004, 0.24493333333333334, 0.26, 0.24986666666666668, 0.24693333333333334, 0.2486666666666667, 0.23053333333333337, 0.23773333333333335, 0.23853333333333337, 0.2388, 0.24506666666666665, 0.2558666666666667, 0.24893333333333334, 0.2533333333333333, 0.23626666666666662, 0.24626666666666663, 0.24026666666666663, 0.24426666666666663, 0.2426666666666667, 0.23306666666666664, 0.24319999999999997, 0.2421333333333333, 0.24586666666666668, 0.242, 0.2653333333333333, 0.256, 0.24, 0.24373333333333336, 0.2441333333333333, 0.24946666666666661, 0.2586666666666667, 0.23426666666666662, 0.23573333333333335, 0.24053333333333338, 0.2473333333333333, 0.24039999999999995, 0.2388, 0.24239999999999995, 0.2572, 0.2506666666666667, 0.24373333333333336, 0.25093333333333334, 0.24360000000000004, 0.24853333333333338, 0.246, 0.2386666666666667, 0.24613333333333332, 0.2348, 0.24613333333333332, 0.23586666666666667, 0.2393333333333333, 0.2513333333333333, 0.2401333333333333, 0.24426666666666663, 0.23373333333333335, 0.24026666666666663, 0.23826666666666663], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.020709473541825774, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.0014945740128447372, "optimization": "rmsprop", "nb_data_augmentation": 0, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 1.2609400752820371e-05, "rotation_range": [0, 0], "momentum": 0.5294631948370221}, "accuracy_valid_max": 0.7694666666666666, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7617333333333334, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.5657333333333333, 0.6486666666666666, 0.6833333333333333, 0.7024, 0.7158666666666667, 0.7228, 0.7434666666666667, 0.7514666666666666, 0.7436, 0.744, 0.7453333333333333, 0.7484, 0.7488, 0.7409333333333333, 0.7244, 0.7502666666666666, 0.7337333333333333, 0.7388, 0.7430666666666667, 0.7514666666666666, 0.7424, 0.7492, 0.7458666666666667, 0.7482666666666666, 0.7528, 0.7470666666666667, 0.7348, 0.734, 0.7486666666666667, 0.7418666666666667, 0.7357333333333334, 0.7369333333333333, 0.7381333333333333, 0.7521333333333333, 0.732, 0.7309333333333333, 0.7404, 0.75, 0.7508, 0.7474666666666666, 0.7586666666666667, 0.7424, 0.7350666666666666, 0.7490666666666667, 0.7257333333333333, 0.7574666666666666, 0.7389333333333333, 0.7562666666666666, 0.7516, 0.7470666666666667, 0.7466666666666667, 0.7597333333333334, 0.7330666666666666, 0.7489333333333333, 0.7533333333333333, 0.7494666666666666, 0.7465333333333334, 0.7544, 0.7558666666666667, 0.7594666666666666, 0.7441333333333333, 0.7404, 0.7526666666666667, 0.7588, 0.7536, 0.7370666666666666, 0.7493333333333333, 0.7445333333333334, 0.7434666666666667, 0.7384, 0.7448, 0.7493333333333333, 0.756, 0.7546666666666667, 0.7448, 0.7598666666666667, 0.7258666666666667, 0.7454666666666667, 0.7612, 0.7534666666666666, 0.7429333333333333, 0.7497333333333334, 0.7597333333333334, 0.7577333333333334, 0.7512, 0.7553333333333333, 0.7553333333333333, 0.7588, 0.7588, 0.7505333333333334, 0.7384, 0.7530666666666667, 0.7590666666666667, 0.7369333333333333, 0.7549333333333333, 0.7538666666666667, 0.7417333333333334, 0.762, 0.7429333333333333, 0.7472, 0.7470666666666667, 0.7525333333333334, 0.7516, 0.7576, 0.7358666666666667, 0.7554666666666666, 0.7564, 0.7457333333333334, 0.7561333333333333, 0.7446666666666667, 0.7530666666666667, 0.7590666666666667, 0.7452, 0.7588, 0.76, 0.7316, 0.766, 0.7622666666666666, 0.7457333333333334, 0.762, 0.7562666666666666, 0.7513333333333333, 0.7458666666666667, 0.7422666666666666, 0.7569333333333333, 0.7521333333333333, 0.7552, 0.7550666666666667, 0.7385333333333334, 0.7665333333333333, 0.7524, 0.7606666666666667, 0.7649333333333334, 0.7454666666666667, 0.7613333333333333, 0.7573333333333333, 0.7545333333333333, 0.7393333333333333, 0.7501333333333333, 0.7584, 0.7550666666666667, 0.74, 0.7501333333333333, 0.7530666666666667, 0.7513333333333333, 0.7694666666666666, 0.7622666666666666, 0.7614666666666666, 0.7612, 0.7549333333333333, 0.7441333333333333, 0.7510666666666667, 0.7466666666666667, 0.7637333333333334, 0.7537333333333334, 0.7597333333333334, 0.7557333333333334, 0.7573333333333333, 0.7669333333333334, 0.7568, 0.7578666666666667, 0.7541333333333333, 0.758, 0.7346666666666667, 0.744, 0.76, 0.7562666666666666, 0.7558666666666667, 0.7505333333333334, 0.7413333333333333, 0.7657333333333334, 0.7642666666666666, 0.7594666666666666, 0.7526666666666667, 0.7596, 0.7612, 0.7576, 0.7428, 0.7493333333333333, 0.7562666666666666, 0.7490666666666667, 0.7564, 0.7514666666666666, 0.754, 0.7613333333333333, 0.7538666666666667, 0.7652, 0.7538666666666667, 0.7641333333333333, 0.7606666666666667, 0.7486666666666667, 0.7598666666666667, 0.7557333333333334, 0.7662666666666667, 0.7597333333333334, 0.7617333333333334], "seed": 766721195, "model": "residualv3", "loss_std": [0.3572048842906952, 0.2786853611469269, 0.2717209756374359, 0.26705875992774963, 0.26207399368286133, 0.2583564519882202, 0.25261572003364563, 0.24817128479480743, 0.24389411509037018, 0.23859725892543793, 0.2304433286190033, 0.22388452291488647, 0.21729254722595215, 0.20540311932563782, 0.2063552737236023, 0.19482257962226868, 0.19451506435871124, 0.18543125689029694, 0.1771569699048996, 0.17420779168605804, 0.1710536628961563, 0.16688500344753265, 0.16443543136119843, 0.1649934947490692, 0.15904878079891205, 0.15629948675632477, 0.1540706306695938, 0.15245668590068817, 0.14706221222877502, 0.1491081714630127, 0.14568452537059784, 0.14422538876533508, 0.14130471646785736, 0.14634062349796295, 0.14308609068393707, 0.14260736107826233, 0.1430295705795288, 0.14440223574638367, 0.1376795917749405, 0.14275777339935303, 0.138108491897583, 0.13629944622516632, 0.1333976686000824, 0.1413913369178772, 0.13382406532764435, 0.14013861119747162, 0.13698765635490417, 0.1386653184890747, 0.13457989692687988, 0.13574498891830444, 0.1317981332540512, 0.12912480533123016, 0.13891319930553436, 0.133573517203331, 0.13024945557117462, 0.12700875103473663, 0.13393430411815643, 0.13015452027320862, 0.1344311535358429, 0.1279439777135849, 0.13440659642219543, 0.13420863449573517, 0.12558425962924957, 0.13195887207984924, 0.12853266298770905, 0.12815706431865692, 0.1314147561788559, 0.12988799810409546, 0.13222093880176544, 0.12751467525959015, 0.1279655247926712, 0.1301705539226532, 0.12993504106998444, 0.1260366588830948, 0.1287924200296402, 0.1301841288805008, 0.12427573651075363, 0.12752912938594818, 0.13111236691474915, 0.13218443095684052, 0.12444839626550674, 0.12616340816020966, 0.12708307802677155, 0.1309519112110138, 0.12593728303909302, 0.12660779058933258, 0.1284717172384262, 0.1251710206270218, 0.12414086610078812, 0.12352049350738525, 0.12926432490348816, 0.12557990849018097, 0.12849344313144684, 0.12995079159736633, 0.12409867346286774, 0.12239693850278854, 0.12684381008148193, 0.12455892562866211, 0.1246076226234436, 0.12105365842580795, 0.12425333261489868, 0.13124164938926697, 0.1243075579404831, 0.12538599967956543, 0.12602879106998444, 0.12488975375890732, 0.12468919903039932, 0.12347362190485, 0.12350986897945404, 0.12489239871501923, 0.12440642714500427, 0.11843001842498779, 0.12347207963466644, 0.12665468454360962, 0.1207006573677063, 0.12818382680416107, 0.12505146861076355, 0.1231643557548523, 0.12175247073173523, 0.12784375250339508, 0.11845603585243225, 0.12059260904788971, 0.12309932708740234, 0.1244240552186966, 0.12718862295150757, 0.12402670830488205, 0.1255629062652588, 0.12235739082098007, 0.11695403605699539, 0.12712247669696808, 0.12431897222995758, 0.12622112035751343, 0.1271521896123886, 0.11876237392425537, 0.12192653864622116, 0.12212876975536346, 0.12114359438419342, 0.12380114942789078, 0.12451469153165817, 0.1168462261557579, 0.12488477677106857, 0.1257949322462082, 0.11856887489557266, 0.12182647734880447, 0.12396269291639328, 0.11958910524845123, 0.11894386261701584, 0.11916573345661163, 0.12051574140787125, 0.11926697939634323, 0.12211374938488007, 0.11912273615598679, 0.12484870105981827, 0.12107103317975998, 0.11723821610212326, 0.12323147803544998, 0.1253388226032257, 0.12740543484687805, 0.12261543422937393, 0.12664912641048431, 0.12669943273067474, 0.11856572329998016, 0.11496885865926743, 0.12981773912906647, 0.12197601050138474, 0.12201549857854843, 0.12767262756824493, 0.12321896851062775, 0.11721981316804886, 0.12149139493703842, 0.12168064713478088, 0.1264285147190094, 0.1154768168926239, 0.11652929335832596, 0.1211073100566864, 0.1230165883898735, 0.12179108709096909, 0.12848436832427979, 0.12392769008874893, 0.11968481540679932, 0.12133083492517471, 0.12379179894924164, 0.12133312970399857, 0.12267599999904633, 0.12386609613895416, 0.12514416873455048, 0.12217112630605698, 0.1163402646780014, 0.12115729600191116, 0.12339501827955246, 0.1213071420788765, 0.12044918537139893, 0.11749494820833206, 0.11638274788856506, 0.11804582178592682, 0.1264314502477646]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:45 2016", "state": "available"}], "summary": "9e518af953b6cbbad6496d1392fed65d"}