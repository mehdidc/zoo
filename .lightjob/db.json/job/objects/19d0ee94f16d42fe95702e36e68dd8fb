{"content": {"hp_model": {"f0": 64, "f1": 64, "f2": 64, "f3": 64, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.7081879377365112, 1.2685307264328003, 0.9848899245262146, 0.8434176445007324, 0.7478907704353333, 0.675212562084198, 0.6209514141082764, 0.5760142803192139, 0.5419104099273682, 0.5129309892654419, 0.48801517486572266, 0.4656365215778351, 0.44540897011756897, 0.42860934138298035, 0.412416934967041, 0.39727526903152466, 0.38555026054382324, 0.37191492319107056, 0.360288143157959, 0.35003119707107544, 0.3385453522205353, 0.3309432566165924, 0.32231712341308594, 0.3144547641277313, 0.3048182427883148, 0.2982969880104065, 0.29086047410964966, 0.28479939699172974, 0.2772654592990875, 0.2707361578941345, 0.2652586102485657, 0.25939807295799255, 0.2552548944950104, 0.24887067079544067, 0.2438780665397644, 0.2399427443742752, 0.23442111909389496, 0.22927427291870117, 0.22525106370449066, 0.22191038727760315, 0.21757958829402924, 0.21352002024650574, 0.20968027412891388, 0.20533259212970734, 0.2012212574481964, 0.20042581856250763, 0.19590958952903748, 0.19252994656562805, 0.1882268786430359, 0.1850862354040146, 0.18275047838687897, 0.18026061356067657, 0.17806217074394226, 0.17433014512062073, 0.1709725707769394, 0.1695839911699295, 0.16664855182170868, 0.16358226537704468, 0.162198007106781, 0.15963426232337952, 0.15700535476207733, 0.15504467487335205, 0.1529688686132431, 0.15082386136054993, 0.14759737253189087, 0.14676661789417267, 0.14453904330730438, 0.1416940838098526, 0.13974297046661377, 0.13860474526882172, 0.1371702253818512, 0.13515275716781616, 0.13304126262664795, 0.1308917999267578, 0.1299205720424652, 0.1284949779510498, 0.1264399290084839, 0.12594056129455566, 0.1244477927684784, 0.12229150533676147, 0.1213097795844078, 0.11833006143569946, 0.1173815056681633, 0.11715780943632126, 0.11562596261501312, 0.11310594528913498, 0.11228197067975998, 0.11122133582830429, 0.10896135866641998, 0.10784778743982315, 0.1075129434466362, 0.10595205426216125, 0.10580036789178848, 0.10306249558925629, 0.10180659592151642, 0.10089632123708725, 0.10034675151109695, 0.09839900583028793, 0.09632272273302078, 0.09805528819561005, 0.09559117257595062, 0.09480279684066772, 0.09390317648649216, 0.09339924156665802, 0.09232673794031143, 0.09170855581760406, 0.08978554606437683, 0.09032977372407913, 0.08836827427148819, 0.08702842146158218, 0.08687832206487656, 0.08702240884304047, 0.08534570783376694, 0.08491954952478409, 0.08355065435171127, 0.08267133682966232, 0.08253884315490723, 0.08011578768491745, 0.08134477585554123, 0.07873671501874924, 0.07840964198112488, 0.0785498395562172, 0.07782299071550369, 0.07739615440368652, 0.07545392215251923, 0.07461531460285187, 0.07457936555147171, 0.07474032789468765, 0.07345358282327652, 0.07212566584348679, 0.07170160859823227, 0.07220962643623352, 0.07016623765230179, 0.07051608711481094, 0.07045666873455048, 0.07071042060852051, 0.06828270107507706, 0.06825817376375198, 0.06765833497047424], "moving_avg_accuracy_train": [0.021287386229928016, 0.053185722432747315, 0.10469238119030314, 0.16207177840719011, 0.21891354837354934, 0.2712126452134738, 0.32343299227619804, 0.3715286667242888, 0.41747413113574694, 0.45945766982634356, 0.49859573076683583, 0.5352078471108332, 0.5687098120882881, 0.5992520253239036, 0.6273353274288334, 0.6530984724268138, 0.6767759814214432, 0.6983901898153823, 0.7185588708615295, 0.7368875032590421, 0.7530622576858141, 0.7689703760306048, 0.7834223969765938, 0.7968083592792112, 0.8092043534777206, 0.8200933921921024, 0.8305840601826558, 0.839846444671727, 0.8489406252726145, 0.8571322551133855, 0.8648116055641178, 0.8719090328745389, 0.8785013665979747, 0.8847296166526014, 0.8903978207196226, 0.8954154990227987, 0.9002568582313532, 0.9046326827095282, 0.9088941204244096, 0.9128037830808889, 0.9165131056252825, 0.9199467909676085, 0.9231580876114345, 0.9262621322325354, 0.9291209847046492, 0.9315961875330954, 0.9340586019620025, 0.9364422217111235, 0.9386710766960189, 0.940793303622901, 0.9428103728487892, 0.9446583232842407, 0.9464677828070532, 0.9480055795251943, 0.949410522910807, 0.950988903095963, 0.952407084064975, 0.9537206132692195, 0.9549633155197247, 0.9561793316975418, 0.957427170030187, 0.9585107690974433, 0.9595418478782213, 0.9604116179630459, 0.9613292336215216, 0.9622690560546352, 0.963268356065866, 0.9640305062473931, 0.9647652695357675, 0.96548475731318, 0.966274166439051, 0.9670287043332596, 0.9677845183487617, 0.9682811002555799, 0.968874544395535, 0.9695248294643333, 0.9701565890024422, 0.970783337355797, 0.9714380916773878, 0.9722272973156199, 0.9727260298971808, 0.973163263476538, 0.9736753562872453, 0.9740432699133197, 0.9746138825041675, 0.9749157731966264, 0.9754339405936489, 0.9758910267045497, 0.9764559000746079, 0.9769084104385941, 0.977338921254277, 0.9777496685253055, 0.9781472428549456, 0.9784399555849549, 0.9788056314919449, 0.9792161921142066, 0.979446151696852, 0.9797485185200608, 0.9801461345990257, 0.9804528357962844, 0.9806405112190554, 0.9810000813019302, 0.9813585355598415, 0.9816137511253045, 0.9818225548437541, 0.9821150738379686, 0.9823922918256188, 0.982641788014504, 0.9828872248749676, 0.9831453204303372, 0.9834566975385124, 0.9836578818763463, 0.9839575664185012, 0.9840482099992885, 0.98431115082914, 0.9845547369736162, 0.984827406877445, 0.984954263250424, 0.9852126292611143, 0.9854660850100213, 0.9856058395292757, 0.985808348507319, 0.9860347844149389, 0.9862664424686923, 0.9863866151111274, 0.9865621637559763, 0.9867713108101498, 0.9869246659267631, 0.9870626494828963, 0.9872659618405776, 0.9874256193767579, 0.9876785931533678, 0.9877737721189926, 0.9878269171535403, 0.9880003057203476, 0.9880470373876077, 0.988151874905999, 0.9882927316487417, 0.988361373996972], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.021146402014307227, 0.0524935876317771, 0.10387485292733431, 0.1608495899614081, 0.2162284157920745, 0.2674356641036803, 0.31822101217938153, 0.3643327164960819, 0.4080784616951183, 0.4478148138030914, 0.4847647012574961, 0.5196747557458278, 0.5509605569502359, 0.5792642624092033, 0.6055606159593221, 0.6290523176822905, 0.6506709234517121, 0.6705600622812397, 0.6886423631879048, 0.7050792434447921, 0.7196090285317889, 0.7339472773634744, 0.7466533002860125, 0.7585444991071854, 0.7692831991399909, 0.7787272730983562, 0.7876063871382947, 0.79535139013192, 0.8030828467983214, 0.8098468748067423, 0.8157137439431614, 0.8212014456971886, 0.8259175621873341, 0.8305669580770345, 0.8348490706277647, 0.8384455947585123, 0.841905281564664, 0.845066798306541, 0.8477737679958417, 0.8505060979921912, 0.8529560764836348, 0.8552698908985243, 0.8572770226671056, 0.8591831565261481, 0.860652477356967, 0.861901623917204, 0.8637145971147155, 0.865062422747747, 0.8664016541646139, 0.8677625653200651, 0.8691237217210406, 0.8701687455391474, 0.8712588398764224, 0.872038435228012, 0.8724094516920331, 0.8732845939192906, 0.8741067840002531, 0.8747766014115983, 0.8753976740923511, 0.8759353139685077, 0.8766145023570484, 0.8770029568182562, 0.8772681461232529, 0.8775200530376596, 0.877757946783216, 0.8781572156402859, 0.8786152433703085, 0.8787792096676903, 0.8790020805401532, 0.8790663279643005, 0.8791017956008523, 0.8794887498886587, 0.879715967943844, 0.8797332406901223, 0.8801313221651612, 0.8802078042652867, 0.8803742944053996, 0.8805984072276608, 0.8806240627868978, 0.8807723116286899, 0.880573057216574, 0.8805921292716485, 0.880742541956306, 0.8809786581484766, 0.8812277838151802, 0.8810359283440536, 0.8810320978402205, 0.8811364546507015, 0.8814186287921825, 0.8814243268598769, 0.8816288856554405, 0.8816522381478784, 0.8816600188511629, 0.8814584724442093, 0.8814245945616107, 0.8812852706946815, 0.8812076778307857, 0.8812375595205987, 0.8813132811664304, 0.8812461237952692, 0.8810381682775645, 0.8811795686467206, 0.8812478528400305, 0.8812848945515094, 0.8811707182081807, 0.8813131296328446, 0.8813059930626324, 0.8813382502605107, 0.8813916958011012, 0.881438767278973, 0.8813845048677172, 0.8813814082966082, 0.8812422850215408, 0.8813307706571879, 0.8814195262345413, 0.8813386558305902, 0.8815486932031035, 0.8815180002758654, 0.8816877481586705, 0.8813460629512371, 0.8813691656169567, 0.8812699467209236, 0.8813159565669035, 0.8813807499821258, 0.8813689103943048, 0.8811832382931273, 0.8813233682006368, 0.8814850767024858, 0.8813742666978999, 0.8813833714663629, 0.88126846593682, 0.8814865518073699, 0.8815698772836359, 0.8817567925108446, 0.8817897093629228, 0.8817705064047932, 0.8817288096799765, 0.8817401107526415, 0.8817879323204496], "moving_var_accuracy_train": [0.004078375312519161, 0.012828072453840078, 0.035421688275761795, 0.061511076472945306, 0.08443885014182728, 0.10061172490009077, 0.11509323423624403, 0.12440265591817022, 0.1309612616262143, 0.13372869315245625, 0.1341419141648458, 0.13279174631703888, 0.12961400660149053, 0.1250480470453098, 0.11964128905482954, 0.11365081691102927, 0.10733135510964316, 0.10080278563914849, 0.09438348833150463, 0.0879685883884225, 0.08152633367647769, 0.0756513143722767, 0.06996593111985877, 0.06458199388877676, 0.05950674054942437, 0.054623206971591697, 0.05015137330842474, 0.045908361875392725, 0.04206186277506748, 0.03845960169259463, 0.03514439333344163, 0.03208331526993786, 0.029266113518234407, 0.02668862205509758, 0.02430891668569638, 0.022104618877114228, 0.020105105820279096, 0.01826692579702536, 0.01660367187990315, 0.015080873850700054, 0.013696618129275166, 0.012433068071618585, 0.011282573099668564, 0.010241031626789777, 0.009290485801226597, 0.008416576882481465, 0.007629490557610531, 0.00691767628982507, 0.006270618811735801, 0.00568409155472487, 0.005152299513610609, 0.004667803849556514, 0.0042304907584831365, 0.003828725051351753, 0.0034636173394675704, 0.003139677161600849, 0.0028438105807885757, 0.0025749577534433465, 0.0023313607580497065, 0.0021115329403471527, 0.0019143935508522073, 0.0017335218782140154, 0.00156973780146215, 0.0014195725213200373, 0.001285193435658153, 0.0011646234879443902, 0.0010571485437619647, 0.0009566615454785843, 0.0008658542847402107, 0.0007839278202228042, 0.0007111435391125996, 0.0006451531321055104, 0.000585779112329223, 0.0005294205434079132, 0.00047964807259234565, 0.00043548910136942913, 0.0003955322722584109, 0.00035951436651846755, 0.00032742125886139786, 0.00030028474283001354, 0.00027249487623820615, 0.0002469659474406433, 0.0002246295041175811, 0.00020338479763208316, 0.00018597670642838128, 0.00016819927769728268, 0.00015379582698958792, 0.00014029659370563567, 0.00012913867165287963, 0.00011806769515322629, 0.00010792898169968294, 9.865450341563132e-05, 9.021164120236638e-05, 8.196160376291537e-05, 7.496891320719995e-05, 6.898906210744771e-05, 6.256608858355702e-05, 5.713231098719806e-05, 5.284196680474e-05, 4.840436074386558e-05, 4.388092324828939e-05, 4.065644672394795e-05, 3.774720714668686e-05, 3.455870129570897e-05, 3.149522210168357e-05, 2.911580614930145e-05, 2.689587384846257e-05, 2.4766521598030226e-05, 2.283202271049525e-05, 2.1148340280759646e-05, 1.9906107584143724e-05, 1.8279773065836266e-05, 1.726009318251234e-05, 1.5608030192902744e-05, 1.466946809363949e-05, 1.3736529172302487e-05, 1.3032016143158611e-05, 1.1873647383131284e-05, 1.1287059604138572e-05, 1.0736511993610921e-05, 9.838642725118137e-06, 9.223867428299484e-06, 8.762939667806351e-06, 8.369634785845178e-06, 7.662644483168827e-06, 7.1737359752264324e-06, 6.850044790128895e-06, 6.376700437239305e-06, 5.91038554938388e-06, 5.691370227518506e-06, 5.3516479644992375e-06, 5.39244475291989e-06, 4.934731597104617e-06, 4.466677989667906e-06, 4.290582546596483e-06, 3.881178930461085e-06, 3.5919791847770333e-06, 3.4113468640839965e-06, 3.112618125410732e-06], "duration": 200213.746078, "accuracy_train": [0.2128738622992802, 0.3402707482581211, 0.5682523100083057, 0.6784863533591731, 0.7304894780707826, 0.7419045167727943, 0.7934161158407161, 0.8043897367571059, 0.8309833108388703, 0.8373095180417128, 0.8508382792312662, 0.8647168942068106, 0.870227496885382, 0.8741319444444444, 0.8800850463732004, 0.8849667774086378, 0.8898735623731081, 0.8929180653608343, 0.9000770002768549, 0.9018451948366556, 0.8986350475267626, 0.9121434411337209, 0.9134905854904946, 0.9172820200027685, 0.9207683012643041, 0.9180947406215393, 0.9250000720976375, 0.9232079050733666, 0.9307882506806018, 0.9308569236803249, 0.9339257596207088, 0.9357858786683279, 0.9378323701088963, 0.9407838671442414, 0.9414116573228128, 0.9405746037513842, 0.9438290911083426, 0.9440151030131044, 0.9472470598583426, 0.9479907469892026, 0.9498970085248246, 0.9508499590485419, 0.9520597574058692, 0.9541985338224437, 0.9548506569536729, 0.9538730129891103, 0.9562203318221669, 0.9578947994532114, 0.9587307715600776, 0.9598933459648394, 0.9609639958817828, 0.9612898772033037, 0.9627529185123662, 0.9618457499884644, 0.9620550133813216, 0.9651943247623662, 0.9651707127860835, 0.9655423761074198, 0.966147635774271, 0.9671234772978959, 0.9686577150239941, 0.9682631607027501, 0.9688215569052234, 0.9682395487264673, 0.9695877745478036, 0.9707274579526578, 0.9722620561669435, 0.970889857881137, 0.971378139131137, 0.971960147309893, 0.97337884857189, 0.973819545381137, 0.9745868444882798, 0.9727503374169435, 0.9742155416551311, 0.975377395083518, 0.9758424248454227, 0.9764240725359912, 0.9773308805717055, 0.9793301480597084, 0.9772146231312293, 0.977098365690753, 0.9782841915836102, 0.9773544925479882, 0.9797493958217978, 0.977632789428756, 0.9800974471668512, 0.9800048017026578, 0.9815397604051311, 0.9809810037144703, 0.9812135185954227, 0.9814463939645626, 0.9817254118217055, 0.9810743701550388, 0.9820967146548542, 0.9829112377145626, 0.9815157879406607, 0.9824698199289406, 0.9837246793097084, 0.9832131465716132, 0.9823295900239941, 0.9842362120478036, 0.9845846238810447, 0.9839106912144703, 0.9837017883098007, 0.9847477447858989, 0.9848872537144703, 0.9848872537144703, 0.98509615661914, 0.9854681804286637, 0.9862590915120893, 0.9854685409168512, 0.9866547272978959, 0.984864002226375, 0.9866776182978036, 0.9867470122739018, 0.9872814360119048, 0.9860959706072352, 0.9875379233573275, 0.9877471867501846, 0.9868636302025655, 0.9876309293097084, 0.988072707583518, 0.9883513649524732, 0.9874681688930418, 0.9881421015596161, 0.9886536342977114, 0.9883048619762828, 0.9883045014880952, 0.9890957730597084, 0.9888625372023809, 0.9899553571428571, 0.9886303828096161, 0.9883052224644703, 0.9895608028216132, 0.9884676223929494, 0.9890954125715209, 0.9895604423334257, 0.9889791551310447], "end": "2016-01-31 23:31:57.558000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0], "moving_var_accuracy_valid": [0.004024532863356272, 0.012465893992245639, 0.034979614403372966, 0.06069673890395241, 0.08222839416700675, 0.09760519526712418, 0.11105703995294294, 0.11908793943256592, 0.12440235749648046, 0.12617292085647178, 0.1258432764168632, 0.12422735591458146, 0.12061383253613905, 0.11576234696689697, 0.1104095961605029, 0.10433537699302087, 0.09810811633244179, 0.09185750528961961, 0.08561448121537031, 0.07948457238704652, 0.07343614704041068, 0.06794280075240362, 0.06260150784373583, 0.057613962544004214, 0.052890443395155, 0.048404113852019176, 0.044273250462025356, 0.04038579105816421, 0.03688519075200777, 0.03360844035089531, 0.030557377696980588, 0.02777267376215291, 0.02519558217867523, 0.022870575900060166, 0.02074854670112825, 0.018790106903422876, 0.017018821108250533, 0.015406895690407997, 0.013932155285456332, 0.012606130401791264, 0.011399538913088961, 0.01030776865609902, 0.009313248991917154, 0.008414624209322732, 0.0075925919217253645, 0.006847376033713396, 0.0061922202766761135, 0.005589347954442012, 0.00504655502608912, 0.004558568236037493, 0.00411938613316499, 0.003717276192872186, 0.003356243324562399, 0.0030260889123161416, 0.0027247189000337, 0.0024591398752916937, 0.0022193098565256226, 0.002001416769153931, 0.0018047466737115352, 0.0016268735160682834, 0.001468337836265613, 0.001322862124454942, 0.0011912088403168092, 0.0010726590701268612, 0.0009659025040217484, 0.0008707469942016073, 0.0007855603993946736, 0.0007072463239753002, 0.0006369687344099015, 0.0005733090105524975, 0.000515989431076431, 0.00046573809055645333, 0.00041962893390222786, 0.000377668725641881, 0.0003413280728246158, 0.00030724791114691065, 0.00027677259073301296, 0.0002495473706736288, 0.0002245985574757438, 0.00020233650120000387, 0.00018246017196673264, 0.00016421742845962228, 0.00014799930139501274, 0.00013370112896135777, 0.00012088958844551635, 0.00010913190629717505, 9.821884772229408e-05, 8.849497604510852e-05, 8.036207865568284e-05, 7.232616300189361e-05, 6.547014540928579e-05, 5.8928038918484763e-05, 5.303577988072869e-05, 4.809779048005911e-05, 4.3298340830417516e-05, 3.914320700644057e-05, 3.528307217854458e-05, 3.176280119916485e-05, 2.863812498807553e-05, 2.581490350177941e-05, 2.36226226276957e-05, 2.1440306944503724e-05, 1.9338240829557163e-05, 1.7416765542105006e-05, 1.5792415124277625e-05, 1.4395702736722968e-05, 1.295659083876021e-05, 1.167029649621885e-05, 1.0528974678878063e-05, 9.496018727251583e-06, 8.572916538003992e-06, 7.715711182977295e-06, 7.118337635668998e-06, 6.476971241544986e-06, 5.900172089992661e-06, 5.369015081110347e-06, 5.229154853669786e-06, 4.714717870344774e-06, 4.502575176761422e-06, 5.103056687894001e-06, 4.597554617574795e-06, 4.226398659787406e-06, 3.822810947152531e-06, 3.478313532342802e-06, 3.1317437616664636e-06, 3.1288365479006854e-06, 2.9926804119183484e-06, 2.928759126858656e-06, 2.7463929282197896e-06, 2.472499706676699e-06, 2.344079262484872e-06, 2.5377243586380825e-06, 2.34644013772892e-06, 2.4262318434183286e-06, 2.1933603314331335e-06, 1.977343080698174e-06, 1.7952563243722858e-06, 1.6168801201254744e-06, 1.4757742292415816e-06], "accuracy_test": 0.7925801179846939, "start": "2016-01-29 15:55:03.812000", "learning_rate_per_epoch": [0.0021681003272533417, 0.0010840501636266708, 0.0007227001478895545, 0.0005420250818133354, 0.00043362006545066833, 0.00036135007394477725, 0.0003097286098636687, 0.0002710125409066677, 0.00024090004444587976, 0.00021681003272533417, 0.00019710003107320517, 0.00018067503697238863, 0.00016677695384714752, 0.00015486430493183434, 0.00014454002666752785, 0.00013550627045333385, 0.00012753531336784363, 0.00012045002222293988, 0.00011411054583732039, 0.00010840501636266708, 0.00010324287723051384, 9.855001553660259e-05, 9.426523320144042e-05, 9.033751848619431e-05, 8.672401600051671e-05, 8.338847692357376e-05, 8.030001481529325e-05, 7.743215246591717e-05, 7.476207974832505e-05, 7.227001333376393e-05, 6.993872375460342e-05, 6.775313522666693e-05, 6.570001278305426e-05, 6.376765668392181e-05, 6.194572779349983e-05, 6.022501111146994e-05, 5.8597306633600965e-05, 5.7055272918660194e-05, 5.5592317949049175e-05, 5.420250818133354e-05, 5.288049578666687e-05, 5.162143861525692e-05, 5.042093835072592e-05, 4.927500776830129e-05, 4.818000888917595e-05, 4.713261660072021e-05, 4.612979682860896e-05, 4.5168759243097156e-05, 4.4246946345083416e-05, 4.3362008000258356e-05, 4.2511772335274145e-05, 4.169423846178688e-05, 4.0907554648583755e-05, 4.0150007407646626e-05, 3.9420006942236796e-05, 3.8716076232958585e-05, 3.803684739978053e-05, 3.7381039874162525e-05, 3.674746403703466e-05, 3.6135006666881964e-05, 3.5542627301765606e-05, 3.496936187730171e-05, 3.4414289984852076e-05, 3.3876567613333464e-05, 3.3355390769429505e-05, 3.285000639152713e-05, 3.235970871173777e-05, 3.188382834196091e-05, 3.142174318782054e-05, 3.0972863896749914e-05, 3.053662658203393e-05, 3.011250555573497e-05, 2.9700004233745858e-05, 2.9298653316800483e-05, 2.890800533350557e-05, 2.8527636459330097e-05, 2.8157148335594684e-05, 2.7796158974524587e-05, 2.7444308216217905e-05, 2.710125409066677e-05, 2.676667099876795e-05, 2.6440247893333435e-05, 2.6121691917069256e-05, 2.581071930762846e-05, 2.5507062673568726e-05, 2.521046917536296e-05, 2.4920693249441683e-05, 2.4637503884150647e-05, 2.4360679162782617e-05, 2.4090004444587976e-05, 2.3825279640732333e-05, 2.3566308300360106e-05, 2.3312906705541536e-05, 2.306489841430448e-05, 2.2822108803666197e-05, 2.2584379621548578e-05, 2.2351550796884112e-05, 2.2123473172541708e-05, 2.1900003048358485e-05, 2.1681004000129178e-05, 2.146633960364852e-05, 2.1255886167637073e-05, 2.1049518181825988e-05, 2.084711923089344e-05, 2.0648574718507007e-05, 2.0453777324291877e-05, 2.0262619727873243e-05, 2.0075003703823313e-05, 1.989082920772489e-05, 1.9710003471118398e-05, 1.9532435544533655e-05, 1.9358038116479293e-05, 1.918672933243215e-05, 1.9018423699890263e-05, 1.8853046640288085e-05, 1.8690519937081262e-05, 1.8530772649683058e-05, 1.837373201851733e-05, 1.8219330740976147e-05, 1.8067503333440982e-05, 1.7918184312293306e-05, 1.7771313650882803e-05, 1.762683314154856e-05, 1.7484680938650854e-05, 1.734480247250758e-05, 1.7207144992426038e-05, 1.707165574771352e-05, 1.6938283806666732e-05, 1.6806980056571774e-05, 1.6677695384714752e-05, 1.6550384316360578e-05, 1.6425003195763566e-05, 1.6301506548188627e-05, 1.6179854355868883e-05, 1.606000296305865e-05, 1.5941914170980453e-05, 1.5825549780856818e-05, 1.571087159391027e-05, 1.559784504934214e-05], "accuracy_train_first": 0.2128738622992802, "accuracy_train_last": 0.9889791551310447, "batch_size_eval": 1024, "accuracy_train_std": [0.011280581959083472, 0.017207415714666066, 0.01490519822573022, 0.01758308331613488, 0.01665864456972565, 0.015377644288075492, 0.01655754281183398, 0.016644829030370293, 0.014432345238489748, 0.014669118258984796, 0.013773847875436434, 0.013255539124082094, 0.013127142017495897, 0.013714375158665254, 0.013505387176341812, 0.014216506050868454, 0.012588750732582386, 0.013774876928533528, 0.013814597674802904, 0.012636709428415127, 0.013293124656297457, 0.012850923775988333, 0.013244836127229542, 0.011258005840027816, 0.011932645857615998, 0.012420101427290373, 0.012943849356063263, 0.012454802044352894, 0.011536017693104677, 0.012330468296699685, 0.012220587503937721, 0.011165384617168013, 0.01154161005918224, 0.011414416296333342, 0.011539117924797808, 0.011566184118221004, 0.011247362017165908, 0.011458151824614396, 0.010088496614377945, 0.01062640630931242, 0.010005655085753719, 0.010324813386379026, 0.009231327027279407, 0.009508976502207446, 0.00855283348542883, 0.009475623085742901, 0.009692107018431134, 0.009412121301204801, 0.009288665965578693, 0.008879283850349395, 0.008999839205105735, 0.008408485230581101, 0.00897252909598439, 0.009044530544186727, 0.009147293278040404, 0.008472869798781462, 0.008575616654587663, 0.008880683824896403, 0.008578786647823388, 0.008491989122820561, 0.008356483175296017, 0.0078001997461626315, 0.007942486334235301, 0.008132828002957239, 0.00798046952632067, 0.007726591002416086, 0.007223868160971727, 0.008098038482443757, 0.006955381060180795, 0.006642444515889363, 0.006978609831122775, 0.007160229608476163, 0.007176782023730593, 0.007436757569601652, 0.006806653573662444, 0.007205271706917538, 0.006497742854214536, 0.0063410935708765265, 0.00637652060648003, 0.0059571815659338586, 0.006301788566252227, 0.0064637997213450845, 0.005949997677159455, 0.006140122800013401, 0.005507193086673744, 0.006333855573750746, 0.005447536660889113, 0.00567396564061748, 0.0057280343603802715, 0.005893064291508447, 0.005906780931943628, 0.005563614176281698, 0.005105052751671738, 0.00538935025805973, 0.005629803313081718, 0.006041720058284477, 0.005343995443210167, 0.005493653190229232, 0.005982325106195037, 0.005648838660537912, 0.005594713549728186, 0.00571001196395971, 0.005205787677214493, 0.005418970462731368, 0.0052329206368770895, 0.005173249863517671, 0.004838876058249988, 0.005575798516897912, 0.0051422221258585425, 0.005505340868646215, 0.005046123206459874, 0.00520487459031396, 0.00470289970103704, 0.00524860785073317, 0.004920432186796811, 0.004655821195407176, 0.0051871667613219655, 0.004779408157035539, 0.0046203732321861354, 0.004567914646015883, 0.005112243492993805, 0.005074080625558958, 0.00480211823304218, 0.004862060187245139, 0.004650300361132346, 0.004696640546159123, 0.005268016388254188, 0.004686545052183766, 0.005152028193660756, 0.004576215748864258, 0.004634984553261947, 0.0038138111149205118, 0.004649226066711709, 0.004360742957661515, 0.004318676203856624, 0.004903186188349161, 0.004683714790239776, 0.00455375082650021, 0.004359148834720603], "accuracy_test_std": 0.008369654246666925, "error_valid": [0.7885359798569277, 0.665381741810994, 0.43369375941265065, 0.3263777767319277, 0.2853621517319277, 0.27169910109186746, 0.22471085513930722, 0.22066194465361444, 0.1982098315135542, 0.19455801722515065, 0.18268631165286142, 0.16613475385918675, 0.1674672322100903, 0.1660023884600903, 0.1577722020896084, 0.15952236681099397, 0.15476162462349397, 0.15043768825301207, 0.1486169286521084, 0.14698883424322284, 0.14962290568524095, 0.1370084831513554, 0.1389924934111446, 0.13443471150225905, 0.13406850056475905, 0.1362760612763554, 0.13248158650225905, 0.13494358292545183, 0.12733404320406627, 0.12927687311746983, 0.13148443382906627, 0.12940923851656627, 0.1316373894013554, 0.12758847891566272, 0.12661191641566272, 0.12918568806475905, 0.12695753717996983, 0.12647955101656627, 0.12786350480045183, 0.12490293204066272, 0.12499411709337349, 0.12390577936746983, 0.12465879141566272, 0.12366163874246983, 0.12612363516566272, 0.12685605704066272, 0.11996864410768071, 0.12280714655496983, 0.12154526308358427, 0.11998923428087349, 0.11862587067018071, 0.1204260400978916, 0.11893031108810237, 0.12094520660768071, 0.12425140013177716, 0.1188391260353916, 0.11849350527108427, 0.11919504188629515, 0.11901267178087349, 0.11922592714608427, 0.11727280214608427, 0.11950095303087349, 0.12034515013177716, 0.12021278473268071, 0.12010100950677716, 0.11824936464608427, 0.11726250705948793, 0.11974509365587349, 0.11899208160768071, 0.12035544521837349, 0.12057899567018071, 0.11702866152108427, 0.11823906955948793, 0.12011130459337349, 0.11628594455948793, 0.11910385683358427, 0.11812729433358427, 0.11738457737198793, 0.11914503717996983, 0.11789344879518071, 0.12122023249246983, 0.11923622223268071, 0.11790374388177716, 0.11689629612198793, 0.11653008518448793, 0.12069077089608427, 0.11900237669427716, 0.11792433405496983, 0.11604180393448793, 0.11852439053087349, 0.11653008518448793, 0.11813758942018071, 0.11826995481927716, 0.12035544521837349, 0.11888030638177716, 0.11996864410768071, 0.11949065794427716, 0.11849350527108427, 0.11800522402108427, 0.11935829254518071, 0.12083343138177716, 0.11754782803087349, 0.11813758942018071, 0.11838173004518071, 0.11985686888177716, 0.11740516754518071, 0.11875823606927716, 0.11837143495858427, 0.11812729433358427, 0.11813758942018071, 0.11910385683358427, 0.11864646084337349, 0.12000982445406627, 0.11787285862198793, 0.11778167356927716, 0.11938917780496983, 0.11656097044427716, 0.11875823606927716, 0.11678452089608427, 0.12172910391566272, 0.11842291039156627, 0.11962302334337349, 0.11826995481927716, 0.11803610928087349, 0.11873764589608427, 0.12048781061746983, 0.11741546263177716, 0.11705954678087349, 0.11962302334337349, 0.11853468561746983, 0.11976568382906627, 0.11655067535768071, 0.11768019342996983, 0.11656097044427716, 0.11791403896837349, 0.11840232021837349, 0.11864646084337349, 0.11815817959337349, 0.11778167356927716], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.08299812668015784, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "valid_ratio": 0.15, "learning_rate": 0.002168100365695422, "optimization": "rmsprop", "nb_data_augmentation": 4, "learning_rate_decay_method": "lin", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 5.378721082236588e-08, "rotation_range": [0, 0], "momentum": 0.747624232668135}, "accuracy_valid_max": 0.8839581960655121, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8822183264307228, "accuracy_valid_std": [0.014632109535941903, 0.010086012119676803, 0.010797049041055664, 0.009041556687051937, 0.014597295699584852, 0.012471642377643035, 0.01296566053374442, 0.011657324982875882, 0.008216705934300498, 0.009177601020527846, 0.010799745125938481, 0.010302058736476235, 0.00892622853244091, 0.009455894385567647, 0.01076215976134381, 0.011097205500863365, 0.009906729170060522, 0.007803007603316731, 0.0073994191851529355, 0.00965604967584937, 0.01019297526217343, 0.010634764046507468, 0.00677462804360494, 0.009262911452461024, 0.00902724450127141, 0.011186846108355108, 0.010590819274322653, 0.009617752509132651, 0.008989826162630585, 0.009570380774453479, 0.01131990237912749, 0.009944377642967604, 0.00846323223536502, 0.009018875764167116, 0.008448394666931472, 0.010080902088172044, 0.009165051088406782, 0.011316531657110374, 0.0056585303595247174, 0.008778591363021135, 0.00917351531006411, 0.008212192085779557, 0.007369321555948366, 0.00910056325677384, 0.007323769839753304, 0.008079819954732352, 0.010675230609747573, 0.010486315199876785, 0.011385651001288803, 0.008872157428521911, 0.010057283979970513, 0.013022623738729769, 0.016024596467025903, 0.009755879563437124, 0.010582379290356046, 0.013499503076668357, 0.011396076940857208, 0.014643359290372299, 0.009175364554272902, 0.010153932199487277, 0.010927469762929165, 0.008633487550011103, 0.010405963779793744, 0.011555249818421286, 0.009217958920956863, 0.00994873913830428, 0.010817427113766072, 0.007334682229474022, 0.01124922344118261, 0.009549437581618555, 0.010121485287116875, 0.010594294919456728, 0.011962285521577841, 0.009052633079499139, 0.009585971945501311, 0.010030197834005227, 0.01083793222346696, 0.010832411725867746, 0.008633096698234838, 0.010379127983521705, 0.008140743466692258, 0.009339105352569915, 0.008894831163572193, 0.011492481694351067, 0.010066348499752017, 0.011732925595498602, 0.007464183962023098, 0.005639556739751162, 0.010081817285543934, 0.008394790133140033, 0.009765802969593469, 0.009227625026893746, 0.0075578340456292185, 0.007332123921912636, 0.0074208720904089635, 0.009302817421330585, 0.008724369865704523, 0.009786557762074157, 0.009790812821591955, 0.00929226470943525, 0.009731907418337732, 0.006614992854726705, 0.009058124646340185, 0.00950513514059218, 0.008458831017536167, 0.009039514365232352, 0.007905761969131375, 0.010294417499065732, 0.009539198739946141, 0.009201751272380312, 0.010018305745493176, 0.007715023276600522, 0.005681180641657127, 0.010768314284609604, 0.008023516891137143, 0.006316478892691748, 0.007991275811182662, 0.009188883587787352, 0.010621543112087005, 0.0069465470056271125, 0.00638291844644231, 0.00698600301681315, 0.006651785639194016, 0.00781340018679135, 0.011207006220412609, 0.0061277017358065955, 0.008005114123080938, 0.007658560350087382, 0.007669277571791757, 0.0051573936249177865, 0.005001122684262513, 0.008107911973082195, 0.006378702585726731, 0.006134691955528105, 0.005356992185042575, 0.00799931622100545, 0.0072530990179744915, 0.006670492384306196, 0.007812743640677145], "accuracy_valid": [0.2114640201430723, 0.33461825818900603, 0.5663062405873494, 0.6736222232680723, 0.7146378482680723, 0.7283008989081325, 0.7752891448606928, 0.7793380553463856, 0.8017901684864458, 0.8054419827748494, 0.8173136883471386, 0.8338652461408133, 0.8325327677899097, 0.8339976115399097, 0.8422277979103916, 0.840477633189006, 0.845238375376506, 0.8495623117469879, 0.8513830713478916, 0.8530111657567772, 0.850377094314759, 0.8629915168486446, 0.8610075065888554, 0.865565288497741, 0.865931499435241, 0.8637239387236446, 0.867518413497741, 0.8650564170745482, 0.8726659567959337, 0.8707231268825302, 0.8685155661709337, 0.8705907614834337, 0.8683626105986446, 0.8724115210843373, 0.8733880835843373, 0.870814311935241, 0.8730424628200302, 0.8735204489834337, 0.8721364951995482, 0.8750970679593373, 0.8750058829066265, 0.8760942206325302, 0.8753412085843373, 0.8763383612575302, 0.8738763648343373, 0.8731439429593373, 0.8800313558923193, 0.8771928534450302, 0.8784547369164157, 0.8800107657191265, 0.8813741293298193, 0.8795739599021084, 0.8810696889118976, 0.8790547933923193, 0.8757485998682228, 0.8811608739646084, 0.8815064947289157, 0.8808049581137049, 0.8809873282191265, 0.8807740728539157, 0.8827271978539157, 0.8804990469691265, 0.8796548498682228, 0.8797872152673193, 0.8798989904932228, 0.8817506353539157, 0.8827374929405121, 0.8802549063441265, 0.8810079183923193, 0.8796445547816265, 0.8794210043298193, 0.8829713384789157, 0.8817609304405121, 0.8798886954066265, 0.8837140554405121, 0.8808961431664157, 0.8818727056664157, 0.8826154226280121, 0.8808549628200302, 0.8821065512048193, 0.8787797675075302, 0.8807637777673193, 0.8820962561182228, 0.8831037038780121, 0.8834699148155121, 0.8793092291039157, 0.8809976233057228, 0.8820756659450302, 0.8839581960655121, 0.8814756094691265, 0.8834699148155121, 0.8818624105798193, 0.8817300451807228, 0.8796445547816265, 0.8811196936182228, 0.8800313558923193, 0.8805093420557228, 0.8815064947289157, 0.8819947759789157, 0.8806417074548193, 0.8791665686182228, 0.8824521719691265, 0.8818624105798193, 0.8816182699548193, 0.8801431311182228, 0.8825948324548193, 0.8812417639307228, 0.8816285650414157, 0.8818727056664157, 0.8818624105798193, 0.8808961431664157, 0.8813535391566265, 0.8799901755459337, 0.8821271413780121, 0.8822183264307228, 0.8806108221950302, 0.8834390295557228, 0.8812417639307228, 0.8832154791039157, 0.8782708960843373, 0.8815770896084337, 0.8803769766566265, 0.8817300451807228, 0.8819638907191265, 0.8812623541039157, 0.8795121893825302, 0.8825845373682228, 0.8829404532191265, 0.8803769766566265, 0.8814653143825302, 0.8802343161709337, 0.8834493246423193, 0.8823198065700302, 0.8834390295557228, 0.8820859610316265, 0.8815976797816265, 0.8813535391566265, 0.8818418204066265, 0.8822183264307228], "seed": 905221666, "model": "residualv3", "loss_std": [0.32901227474212646, 0.1610819697380066, 0.13646581768989563, 0.12982571125030518, 0.12223733216524124, 0.11972074210643768, 0.11249615252017975, 0.1111927479505539, 0.10774976015090942, 0.10647080093622208, 0.10477923601865768, 0.1026410311460495, 0.10118378698825836, 0.09896816313266754, 0.09660559892654419, 0.0955394059419632, 0.09535842388868332, 0.09342093765735626, 0.09159442782402039, 0.09175587445497513, 0.08939940482378006, 0.08822786062955856, 0.0868622362613678, 0.0865759328007698, 0.08342280238866806, 0.08375732600688934, 0.0816153809428215, 0.08070705085992813, 0.07915323227643967, 0.07741588354110718, 0.07845166325569153, 0.07571630924940109, 0.07587958127260208, 0.07506773620843887, 0.07358577102422714, 0.07284117490053177, 0.07244691252708435, 0.07064438611268997, 0.06912866979837418, 0.0692949965596199, 0.06908387690782547, 0.06602824479341507, 0.06648212671279907, 0.06478964537382126, 0.06444050371646881, 0.06481796503067017, 0.06389329582452774, 0.06302215158939362, 0.061437059193849564, 0.06060688942670822, 0.05857662111520767, 0.060027848929166794, 0.06019775569438934, 0.057257600128650665, 0.05687485262751579, 0.05610513314604759, 0.05714792013168335, 0.05617557466030121, 0.05387831851840019, 0.05631512030959129, 0.05348462983965874, 0.053280994296073914, 0.05280005931854248, 0.05250731483101845, 0.05247395485639572, 0.050926681607961655, 0.05085379257798195, 0.04978565871715546, 0.05047931149601936, 0.049790844321250916, 0.04942363500595093, 0.048010844737291336, 0.04762645810842514, 0.04586385563015938, 0.045965224504470825, 0.04605356231331825, 0.044431813061237335, 0.045403048396110535, 0.044338300824165344, 0.04442698508501053, 0.043612781912088394, 0.04180855676531792, 0.04255426675081253, 0.042480241507291794, 0.041166625916957855, 0.04124926030635834, 0.040646348148584366, 0.04079444333910942, 0.039406221359968185, 0.040657635778188705, 0.04082256928086281, 0.0397358313202858, 0.03992875665426254, 0.037908885627985, 0.03756602853536606, 0.037657734006643295, 0.03783563897013664, 0.03681302070617676, 0.03645014017820358, 0.037186380475759506, 0.03607230260968208, 0.03646976128220558, 0.03617515042424202, 0.03604739531874657, 0.035365886986255646, 0.03485647216439247, 0.03498672693967819, 0.03524310886859894, 0.034159231930971146, 0.03333960101008415, 0.03399508446455002, 0.03449977561831474, 0.03316739946603775, 0.033858247101306915, 0.03192150592803955, 0.031891509890556335, 0.03305159881711006, 0.031048301607370377, 0.03319726884365082, 0.02949966862797737, 0.030652621760964394, 0.031109372153878212, 0.03140401840209961, 0.02956688031554222, 0.02935025282204151, 0.028925858438014984, 0.029987750574946404, 0.029680192470550537, 0.028480544686317444, 0.0281427800655365, 0.029518164694309235, 0.027609946206212044, 0.028083352372050285, 0.027674755081534386, 0.027251334860920906, 0.027859846130013466, 0.028275640681385994, 0.027368469163775444, 0.027761656790971756]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:27 2016", "state": "available"}], "summary": "09d51f41433e6fc20c505bdcdc496e91"}