{"content": {"hp_model": {"f1": 50, "f2": 143, "f3": 223, "nonlin": "very_leaky_rectify", "ds2": 2541, "ds1": 704, "do2": 0.15415859961480916, "do3": 0.6403542288479354, "do1": 0.6914445073622858, "do4": 0.7168676459806517, "do5": 0.43773050451687445}, "accuracy_valid_std": [0.09240140586619153, 0.09858121404165013, 0.09920044030902384, 0.10095403057938747, 0.10309163033156815, 0.10388240580611066, 0.10443367529561288, 0.10478352241302101, 0.10526791592503915, 0.10439447476254068, 0.10351013173476892, 0.10363075765158385, 0.10296699533050593, 0.10267559197618391, 0.10205674276427631, 0.10233457264273754, 0.10186056783378657, 0.10309240882650927, 0.10396924091864483, 0.10454880049842762, 0.10512957587616534, 0.10428259971431432, 0.10324073459853021, 0.10460610246829076, 0.1031601153973097, 0.10234651008241616, 0.1026722047602155, 0.10202038749877915, 0.10161093326545442, 0.10282738088158744, 0.10225376225418202, 0.10329073352274122, 0.1025700146310665, 0.1026484911188194, 0.10313521699875652, 0.10376757250604277, 0.10359900042448676, 0.10293971130857371, 0.10302517709443143, 0.10333975904776103, 0.10396400884049348, 0.10393527060154524, 0.10403329109187898, 0.1036877929466936, 0.10273576157541081, 0.10384222430221372, 0.10341196028783127, 0.10377650949689914, 0.10399256763706238, 0.10384797773604078, 0.10393801609001481, 0.10383810224317302, 0.1037164278006102, 0.10422306644858217, 0.10334985472683479, 0.10351125167919963, 0.1035569867505268], "moving_avg_accuracy_train": [0.01564853162650602, 0.033236069277108427, 0.0510250376506024, 0.06826816641566263, 0.08456587914156624, 0.09941030779367467, 0.11284088846009034, 0.12486958199359938, 0.13570717198701052, 0.145322166384695, 0.15379446781851466, 0.16123363925955475, 0.16771946208058722, 0.17340374704722727, 0.1783666479449142, 0.18269912848174807, 0.18647599650706723, 0.1898163486635894, 0.19280854662855576, 0.19543092991750743, 0.19775577743780487, 0.19985049336872318, 0.20174515035715207, 0.2034762264358947, 0.2049800721657992, 0.20624646630464097, 0.20737445521634554, 0.2083237566826628, 0.20916400902644472, 0.20991788297319786, 0.2105563657602154, 0.2111074686420252, 0.21160816756095518, 0.21204938393738978, 0.2124135343990725, 0.21274126981458696, 0.2130809417789114, 0.21338194022150217, 0.2136646046330869, 0.21390253046495894, 0.21409548524978836, 0.2142667913934842, 0.2144444985493165, 0.21461384764016797, 0.21481097191229576, 0.21503074068492162, 0.21521676676703186, 0.21539124972888288, 0.21557887550900662, 0.2157618576870216, 0.21597831122554836, 0.21618723838612605, 0.21636586018004356, 0.21655485774637653, 0.21672024923077501, 0.21689028003058908, 0.21706683937692775], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.0022038888785918327, 0.004767393316234865, 0.0071386805467498985, 0.00910074189855094, 0.010581206669560571, 0.011506299560672353, 0.011979094077939003, 0.012083389883252842, 0.011932131106715127, 0.011570951051451152, 0.01105987497057556, 0.010451958919080684, 0.009785356106165046, 0.009097620355786274, 0.00840953178809, 0.007737512097699401, 0.007092143476655566, 0.006483350701756252, 0.0059155948695345665, 0.005385927429608665, 0.004895978930581498, 0.004445871551004535, 0.004033591921838304, 0.0036572023491680283, 0.0033118360820653934, 0.002995086260892889, 0.0027070288656679564, 0.0024444365385667298, 0.002206347100721136, 0.0019908273239973603, 0.0017954135340214838, 0.0016186056100963868, 0.0014590013437535071, 0.001314853256395663, 0.0011845613807847904, 0.001067071937229553, 0.00096140313689673, 0.0008660782237690357, 0.0007801894939183209, 0.0007026800228397367, 0.0006327471044966601, 0.0005697365062008057, 0.0005130470740798312, 0.00046200047870299815, 0.0004161501526406555, 0.00037496982219738316, 0.00033778429130667246, 0.000304279860911792, 0.0002741687057209163, 0.0002470531774460647, 0.00022276952891052502, 0.00020088543104531604, 0.00018108403964814526, 0.00016329711640404888, 0.00014721359385164783, 0.00013275242872245172, 0.00011975774467522245], "duration": 36636.673258, "accuracy_train": [0.15648531626506024, 0.19152390813253012, 0.2111257530120482, 0.22345632530120482, 0.2312452936746988, 0.2330101656626506, 0.23371611445783133, 0.2331278237951807, 0.23324548192771086, 0.23185711596385541, 0.23004518072289157, 0.22818618222891565, 0.22609186746987953, 0.22456231174698796, 0.2230327560240964, 0.22169145331325302, 0.22046780873493976, 0.21987951807228914, 0.21973832831325302, 0.21903237951807228, 0.21867940512048192, 0.21870293674698796, 0.21879706325301204, 0.2190559111445783, 0.21851468373493976, 0.21764401355421686, 0.21752635542168675, 0.21686746987951808, 0.21672628012048192, 0.21670274849397592, 0.2163027108433735, 0.21606739457831325, 0.2161144578313253, 0.2160203313253012, 0.21569088855421686, 0.21569088855421686, 0.21613798945783133, 0.2160909262048193, 0.2162085843373494, 0.21604386295180722, 0.21583207831325302, 0.21580854668674698, 0.21604386295180722, 0.21613798945783133, 0.21658509036144577, 0.21700865963855423, 0.21689100150602408, 0.21696159638554216, 0.21726750753012047, 0.21740869728915663, 0.21792639307228914, 0.2180675828313253, 0.2179734563253012, 0.2182558358433735, 0.21820877259036145, 0.21842055722891565, 0.21865587349397592], "end": "2016-01-18 11:34:47.186000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0], "accuracy_valid": [0.15705128205128205, 0.19123931623931623, 0.21167200854700854, 0.22449252136752137, 0.2309027777777778, 0.2310363247863248, 0.23517628205128205, 0.2327724358974359, 0.23210470085470086, 0.23076923076923078, 0.22930021367521367, 0.22889957264957264, 0.2282318376068376, 0.22689636752136752, 0.22529380341880342, 0.2247596153846154, 0.22275641025641027, 0.22248931623931623, 0.22275641025641027, 0.2222222222222222, 0.22142094017094016, 0.21968482905982906, 0.21901709401709402, 0.21901709401709402, 0.218616452991453, 0.21928418803418803, 0.21928418803418803, 0.21915064102564102, 0.21901709401709402, 0.22008547008547008, 0.2203525641025641, 0.22128739316239315, 0.22088675213675213, 0.22102029914529914, 0.22102029914529914, 0.22155448717948717, 0.22182158119658119, 0.2222222222222222, 0.2220886752136752, 0.22235576923076922, 0.22288995726495728, 0.22355769230769232, 0.2231570512820513, 0.22369123931623933, 0.2232905982905983, 0.22382478632478633, 0.22435897435897437, 0.2250267094017094, 0.22542735042735043, 0.2263621794871795, 0.22622863247863248, 0.2264957264957265, 0.22702991452991453, 0.22769764957264957, 0.22756410256410256, 0.22756410256410256, 0.22796474358974358], "accuracy_test": 0.235, "start": "2016-01-18 01:24:10.513000", "learning_rate_per_epoch": [0.0004751585947815329, 0.00023757929739076644, 0.00015838618855923414, 0.00011878964869538322, 9.503171895630658e-05, 7.919309427961707e-05, 6.787979509681463e-05, 5.939482434769161e-05, 5.279539982439019e-05, 4.751585947815329e-05, 4.319623621995561e-05, 3.9596547139808536e-05, 3.655066029750742e-05, 3.3939897548407316e-05, 3.167723843944259e-05, 2.9697412173845805e-05, 2.7950505682383664e-05, 2.6397699912195094e-05, 2.500834671081975e-05, 2.3757929739076644e-05, 2.2626598365604877e-05, 2.1598118109977804e-05, 2.0659068468376063e-05, 1.9798273569904268e-05, 1.9006343791261315e-05, 1.827533014875371e-05, 1.759846600180026e-05, 1.6969948774203658e-05, 1.6384778064093553e-05, 1.5838619219721295e-05, 1.5327696019085124e-05, 1.4848706086922903e-05, 1.4398744497157168e-05, 1.3975252841191832e-05, 1.3575959201261867e-05, 1.3198849956097547e-05, 1.2842124306189362e-05, 1.2504173355409876e-05, 1.2183553735667374e-05, 1.1878964869538322e-05, 1.1589233508857433e-05, 1.1313299182802439e-05, 1.1050199645978864e-05, 1.0799059054988902e-05, 1.0559079782979097e-05, 1.0329534234188031e-05, 1.0109756658494007e-05, 9.899136784952134e-06, 9.69711436482612e-06, 9.503171895630658e-06, 9.31683462113142e-06, 9.137665074376855e-06, 8.96525671123527e-06, 8.79923300090013e-06, 8.63924651639536e-06, 8.484974387101829e-06, 8.33611557027325e-06], "accuracy_train_last": 0.21865587349397592, "error_valid": [0.842948717948718, 0.8087606837606838, 0.7883279914529915, 0.7755074786324786, 0.7690972222222222, 0.7689636752136753, 0.764823717948718, 0.7672275641025641, 0.7678952991452992, 0.7692307692307692, 0.7706997863247863, 0.7711004273504274, 0.7717681623931624, 0.7731036324786325, 0.7747061965811965, 0.7752403846153846, 0.7772435897435898, 0.7775106837606838, 0.7772435897435898, 0.7777777777777778, 0.7785790598290598, 0.780315170940171, 0.780982905982906, 0.780982905982906, 0.7813835470085471, 0.780715811965812, 0.780715811965812, 0.780849358974359, 0.780982905982906, 0.7799145299145299, 0.7796474358974359, 0.7787126068376069, 0.7791132478632479, 0.7789797008547008, 0.7789797008547008, 0.7784455128205128, 0.7781784188034189, 0.7777777777777778, 0.7779113247863247, 0.7776442307692308, 0.7771100427350427, 0.7764423076923077, 0.7768429487179487, 0.7763087606837606, 0.7767094017094017, 0.7761752136752137, 0.7756410256410257, 0.7749732905982906, 0.7745726495726496, 0.7736378205128205, 0.7737713675213675, 0.7735042735042735, 0.7729700854700855, 0.7723023504273504, 0.7724358974358975, 0.7724358974358975, 0.7720352564102564], "accuracy_train_std": [0.08941372787037281, 0.09956246191324569, 0.10227662443618032, 0.10518644418274553, 0.10531849365549505, 0.10524790321711432, 0.105707837963372, 0.10551104541944932, 0.10567602575487998, 0.10557895557594628, 0.10537024078190776, 0.10569220287265861, 0.10525919329311514, 0.10499114265819712, 0.10489653743378331, 0.10513873579014792, 0.10426697479186087, 0.10416211144900402, 0.10402225697706742, 0.104139611233054, 0.10353091755537068, 0.10372961970878777, 0.10372961970878777, 0.10452016084848563, 0.1041114791249877, 0.10402107254513182, 0.10399147333689089, 0.10362742677662838, 0.10325509319982558, 0.1032403846458025, 0.10341671977682484, 0.1030118929492848, 0.10294169763392405, 0.10319609616086274, 0.1032153578577551, 0.10308703612911359, 0.10328461393025962, 0.10334035617124597, 0.10312962374496977, 0.1031111703760196, 0.10320519628516255, 0.10279043006793254, 0.10275396402806666, 0.10301370715478098, 0.10323798441852236, 0.10300354988039231, 0.10291578576164467, 0.10265948707845071, 0.10272164671591164, 0.10247990382833304, 0.10271472487558529, 0.10265847031878782, 0.10287247445748363, 0.10304563194347288, 0.10288827701584202, 0.10260288921659619, 0.1024886380133299], "accuracy_test_std": 0.11157956802210699, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.7817056441388814, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0004751585825253051, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "optimization": "adadelta", "nb_data_augmentation": 1, "learning_rate_decay_method": "lin", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 1.7387794281584455e-09, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.0089020490360759}, "accuracy_valid_max": 0.23517628205128205, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.22796474358974358, "loss_train": [2.303550958633423, 2.3002710342407227, 2.2974791526794434, 2.29544997215271, 2.2936248779296875, 2.2910468578338623, 2.2896170616149902, 2.286940574645996, 2.284825563430786, 2.2819790840148926, 2.2803187370300293, 2.2774457931518555, 2.2750792503356934, 2.2720532417297363, 2.269176959991455, 2.2664148807525635, 2.262938976287842, 2.2600209712982178, 2.2564280033111572, 2.254384756088257, 2.2501182556152344, 2.2465929985046387, 2.2427127361297607, 2.239060401916504, 2.2352166175842285, 2.2322797775268555, 2.2287611961364746, 2.2246882915496826, 2.2195956707000732, 2.215880870819092, 2.212996006011963, 2.211372137069702, 2.207613468170166, 2.202981472015381, 2.2009406089782715, 2.198133707046509, 2.194200277328491, 2.192896604537964, 2.190777063369751, 2.1876416206359863, 2.1856637001037598, 2.1837308406829834, 2.1810731887817383, 2.1784989833831787, 2.1752045154571533, 2.174062967300415, 2.1730258464813232, 2.170139789581299, 2.1680939197540283, 2.1659600734710693, 2.164930582046509, 2.1638240814208984, 2.1616952419281006, 2.159754991531372, 2.1583263874053955, 2.1570065021514893, 2.155331611633301], "accuracy_train_first": 0.15648531626506024, "model": "vgg", "loss_std": [0.011380723677575588, 0.01113069523125887, 0.01214658934623003, 0.013040942139923573, 0.014415651559829712, 0.015317855402827263, 0.01658715307712555, 0.017705464735627174, 0.019332842901349068, 0.02047501876950264, 0.02122640796005726, 0.023000633344054222, 0.024465130642056465, 0.025292178615927696, 0.027581224218010902, 0.028704557567834854, 0.031019194051623344, 0.03248776122927666, 0.03449340909719467, 0.03583579137921333, 0.03756321594119072, 0.04017243906855583, 0.041691575199365616, 0.04436740651726723, 0.04683367535471916, 0.04878757521510124, 0.05105925351381302, 0.0541660450398922, 0.056354034692049026, 0.058207206428050995, 0.0625128298997879, 0.06333959102630615, 0.06700365990400314, 0.07040008902549744, 0.07123233377933502, 0.07325474172830582, 0.07622173428535461, 0.07783332467079163, 0.08165601640939713, 0.08096375316381454, 0.08350662887096405, 0.08685515820980072, 0.0871843472123146, 0.08887317776679993, 0.08988071978092194, 0.09247279167175293, 0.09326721727848053, 0.09269213676452637, 0.09607228636741638, 0.0970582589507103, 0.09746163338422775, 0.10017747431993484, 0.09880193322896957, 0.10149799287319183, 0.10186713933944702, 0.1010991781949997, 0.10464190691709518]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:00 2016", "state": "available"}], "summary": "ad5644292767b382b7594da05cceeb3b"}