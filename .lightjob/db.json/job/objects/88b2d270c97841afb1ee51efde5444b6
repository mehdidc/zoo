{"content": {"hp_model": {"f0": 16, "f1": 64, "f2": 32, "f3": 32, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.563302755355835, 1.1395866870880127, 0.9039219617843628, 0.7598429918289185, 0.6625568270683289, 0.5884735584259033, 0.526189923286438, 0.47181370854377747, 0.42245328426361084, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN], "moving_avg_accuracy_train": [0.023042657288205978, 0.04846808021294757, 0.07887759371250921, 0.11922032399957316, 0.16634088544190082, 0.2207954279654479, 0.2762949618577182, 0.32951516156411137, 0.378687126310478, 0.3508049818895631, 0.3257110519107397, 0.3031265149297986, 0.2828004316469516, 0.26450695669238933, 0.24804282923328327, 0.23322511452008785, 0.21988917127821195, 0.20788682236052364, 0.19708470833460418, 0.18736280571127664, 0.17861309335028186, 0.17073835222538655, 0.16365108521298077, 0.15727254490181558, 0.1515318586217669, 0.14636524096972311, 0.1417152850828837, 0.1375303247847282, 0.13376386051638828, 0.13037404267488234, 0.127323206617527, 0.12457745416590718, 0.12210627695944935, 0.11988221747363731, 0.11788056393640646, 0.1160790757528987, 0.11445773638774172, 0.11299853095910044, 0.11168524607332328, 0.11050328967612384, 0.10943952891864435, 0.1084821442369128, 0.10762049802335441, 0.10684501643115185, 0.10614708299816955, 0.10551894290848549, 0.10495361682776982, 0.10444482335512573, 0.10398690922974604, 0.10357478651690433, 0.10320387607534678, 0.102870056677945, 0.10256961922028338, 0.10229922550838792, 0.10205587116768201, 0.1018368522610467, 0.10163973524507491, 0.10146232993070031, 0.10130266514776316], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.02301334243222891, 0.04865919733621987, 0.07886643154649847, 0.11871825201195403, 0.16355735254494536, 0.2153397950012942, 0.2670946250361798, 0.3155387063955136, 0.35944252589150444, 0.3338788091174895, 0.3108714640208761, 0.29016485343392406, 0.2715289039056672, 0.25475654933023606, 0.239661430212348, 0.22607582300624876, 0.21384877652075943, 0.20284443468381902, 0.19294052703057266, 0.18402701014265094, 0.1760048449435214, 0.1687848962643048, 0.16228694245300984, 0.1564387840228444, 0.1511754414356955, 0.14643843310726148, 0.14217512561167087, 0.13833814886563933, 0.13488486979421094, 0.13177691862992538, 0.1289797625820684, 0.1264623221389971, 0.12419662574023294, 0.12215749898134519, 0.1203222848983462, 0.11867059222364712, 0.11718406881641795, 0.1158461977499117, 0.11464211379005607, 0.113558438226186, 0.11258313021870293, 0.11170535301196818, 0.11091535352590691, 0.11020435398845176, 0.10956445440474212, 0.10898854477940345, 0.10847022611659865, 0.10800373932007433, 0.10758390120320244, 0.10720604689801773, 0.1068659780233515, 0.10655991603615189, 0.10628446024767224, 0.10603655003804056, 0.10581343084937204, 0.10561262357957038, 0.10543189703674888, 0.10526924314820953, 0.10512285464852411], "moving_var_accuracy_train": [0.004778676494115409, 0.01011887802282165, 0.017429636822059683, 0.030334496122986797, 0.0472841723064497, 0.06924342988884391, 0.09004087126029282, 0.10652829104535891, 0.11763640099398433, 0.1128694866921647, 0.10724988591898707, 0.10111544912287983, 0.09472225116518293, 0.08826188708188341, 0.08187530581060228, 0.07566385725343688, 0.06969809796744802, 0.06402479558658063, 0.05867248703478326, 0.0536558768468621, 0.048979306359777194, 0.044639479653856534, 0.0406275958718171, 0.03693100827314582, 0.03353450675652469, 0.030421301522533917, 0.0275737701780265, 0.02497401819449809, 0.02260429265281041, 0.020447281172516697, 0.018486321461104762, 0.01670554172372447, 0.015089948002423473, 0.013625471167549, 0.01229898360274208, 0.011098293479545733, 0.01001212280362423, 0.009030074047608593, 0.00814258909756863, 0.007340903376135694, 0.006616997321064504, 0.005963546857817382, 0.0053738740798117, 0.004841899017129135, 0.004362093115108092, 0.003929434843347698, 0.0035393677012107642, 0.003187760768269935, 0.002870871859558942, 0.002585313279777008, 0.002328020122800215, 0.002096221029030929, 0.0018874112901215317, 0.0016993281759442721, 0.0015299283503661086, 0.0013773672388626714, 0.0012399802110382749, 0.0011162654437445625, 0.0010048683349562996], "duration": 18750.960415, "accuracy_train": [0.2304265728820598, 0.277296886535622, 0.35256321520856404, 0.48230489658314873, 0.5904259384228497, 0.7108863106773717, 0.7757907668881506, 0.8084969589216501, 0.8212348090277777, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289, 0.0998656821013289], "end": "2016-02-03 17:04:43.787000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0], "moving_var_accuracy_valid": [0.004766525369127251, 0.010209261696023542, 0.017400628514132828, 0.02995407401241768, 0.04505357104064525, 0.06468100605728644, 0.0823199673390169, 0.09520943177386301, 0.10303639689350558, 0.09861428974187349, 0.09351690212323809, 0.08802408540891135, 0.08234736440139785, 0.07664443486329396, 0.07103075496761363, 0.06558879797927802, 0.060375424173175075, 0.0554277416092357, 0.050767753929548416, 0.046406035586394966, 0.042344628238094595, 0.03857931434465983, 0.035101393543797356, 0.031899062802636456, 0.02895848149908007, 0.026264586580304942, 0.02380171003949208, 0.021554040550489154, 0.019505962722546726, 0.017642300694248308, 0.015948487362428047, 0.014410676183644942, 0.013015808986822804, 0.011751650429589833, 0.01060679748320479, 0.009570670533109202, 0.008633491246360444, 0.007786251212639751, 0.007020674455017211, 0.006329176184065051, 0.005704819597043691, 0.00514127207276129, 0.004632761758176954, 0.0041740352654396125, 0.0037603169821907373, 0.0033872703310406835, 0.0030509611860625213, 0.002747823556838253, 0.0024746275775538347, 0.002228449784681971, 0.0020066456277694246, 0.0018068241304525594, 0.001626824600429966, 0.0014646952756353262, 0.0013186737876229625, 0.0011871693208971132, 0.001068746347556924, 0.0009621098193883442, 0.0008660917037850712], "accuracy_test": 0.10013751594387754, "start": "2016-02-03 11:52:12.827000", "learning_rate_per_epoch": [0.002242224058136344, 0.0015854918165132403, 0.001294548623263836, 0.001121112029068172, 0.0010027530370280147, 0.0009153841529041529, 0.0008474810165353119, 0.0007927459082566202, 0.0007474080193787813, 0.0007090534782037139, 0.0006760559626854956, 0.000647274311631918, 0.0006218810449354351, 0.0005992595688439906, 0.0005789397400803864, 0.000560556014534086, 0.0005438192165456712, 0.0005284972721710801, 0.0005144014721736312, 0.0005013765185140073, 0.0004892934230156243, 0.0004780437739100307, 0.0004675360396504402, 0.00045769207645207644, 0.0004484447999857366, 0.0004397363227326423, 0.00043151620775461197, 0.00042374050826765597, 0.0004163705452810973, 0.0004093722382094711, 0.0004027153190691024, 0.0003963729541283101, 0.0003903211036231369, 0.00038453825982287526, 0.00037900503957644105, 0.00037370400968939066, 0.0003686193667817861, 0.00036373676266521215, 0.0003590431879274547, 0.00035452673910185695, 0.0003501765604596585, 0.0003459826693870127, 0.00034193595638498664, 0.0003380279813427478, 0.0003342510317452252, 0.0003305978898424655, 0.00032706197816878557, 0.000323637155815959, 0.0003203177184332162, 0.00031709836912341416, 0.00031397416023537517, 0.00031094052246771753, 0.00030799314845353365, 0.00030512805096805096, 0.0003023414174094796, 0.0002996297844219953, 0.0002969898341689259, 0.00029441845254041255, 0.00029191270004957914], "accuracy_train_first": 0.2304265728820598, "accuracy_train_last": 0.0998656821013289, "batch_size_eval": 1024, "accuracy_train_std": [0.01617373999436555, 0.01577736073925177, 0.01827625519124145, 0.01874888218566718, 0.01929408501537196, 0.02248888284584602, 0.022482857872870833, 0.02364518307280274, 0.025777871332171066, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826, 0.0109423746276826], "accuracy_test_std": 0.008047845183879404, "error_valid": [0.7698665756777108, 0.7205281085278614, 0.649268460560994, 0.5226153637989458, 0.43289074265813254, 0.31861822289156627, 0.26711190464984935, 0.2484645613704819, 0.24542309864457834, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446, 0.8961946418486446], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.01931559178823237, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "valid_ratio": 0.15, "learning_rate": 0.0022422240221142034, "optimization": "rmsprop", "nb_data_augmentation": 0, "learning_rate_decay_method": "sqrt", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 3.6370789073745604e-08, "rotation_range": [0, 0], "momentum": 0.5869650005209619}, "accuracy_valid_max": 0.7545769013554217, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.10380535815135541, "accuracy_valid_std": [0.015029212286304643, 0.018013593077278473, 0.01768627164152136, 0.018908097928238783, 0.020289215122126347, 0.019983935073420823, 0.017370894371135683, 0.012506348316743453, 0.014230479963607202, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275, 0.009135780737915275], "accuracy_valid": [0.23013342432228917, 0.2794718914721386, 0.35073153943900603, 0.4773846362010542, 0.5671092573418675, 0.6813817771084337, 0.7328880953501506, 0.7515354386295181, 0.7545769013554217, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541, 0.10380535815135541], "seed": 61958696, "model": "residualv3", "loss_std": [0.34691691398620605, 0.1335795670747757, 0.12218423932790756, 0.10533856600522995, 0.09831979125738144, 0.09301847964525223, 0.08903088420629501, 0.08589772135019302, 0.08244912326335907, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:34 2016", "state": "available"}], "summary": "bcdb5c23e672372c21d5081a10bb4e2b"}