{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 16, "f3": 16, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.013168662439629338, 0.020009137033695064, 0.014756346872733094, 0.013122568545567122, 0.01766545935054519, 0.014394156719539046, 0.014776444515390308, 0.014472115009695937, 0.017135482098436145, 0.016197856428989247, 0.014905783247775278, 0.012902582193392177, 0.01558930677712378, 0.016000764155070686, 0.0158928883812534, 0.016421024443118964, 0.016590703544874057, 0.015026156220003571, 0.010776517423917354, 0.013693293794379759, 0.016902658555179445, 0.015236118778440137, 0.014812313982134171, 0.017116145720191604, 0.017861525423159958, 0.014811766360856108, 0.01815264714871776, 0.017640252100359584, 0.016944624647502633, 0.01505449994231385, 0.014669487950036043, 0.015668083325144074, 0.014780918215323704, 0.017877967339362092, 0.018517962201987027, 0.018268833912263877, 0.016055107233856548, 0.013777332751003374, 0.013645180231461461, 0.013287154772809314, 0.014627117046805044, 0.01596806226156979, 0.014620898910754696, 0.014162116268530546, 0.014280155036667453, 0.016794054459900076, 0.014694028480701263, 0.016450729770977224, 0.012678980541011338, 0.015808035667745943, 0.013119270557609553, 0.013519351342766144, 0.015444468613640652, 0.013832083420162029, 0.01542150505543085, 0.01443607503230336, 0.015513263814952062, 0.01280870891871642, 0.014409469093009827], "moving_avg_accuracy_train": [0.03999629057655038, 0.08123046694755905, 0.13119873984144287, 0.1806820736253864, 0.2276952861248817, 0.27240404530885903, 0.31384832031839394, 0.35238707560544524, 0.3878970227029849, 0.4205115228597812, 0.45045036630562296, 0.47797879356279593, 0.5038794977763299, 0.5277435169851772, 0.5501067636278371, 0.5708867640311571, 0.5902232055797764, 0.6081375357116289, 0.6248832482718798, 0.64056822886182, 0.655258806855806, 0.6689337671170692, 0.6815873901342752, 0.6933847688937804, 0.7044209365630495, 0.714681261349897, 0.7241595861366035, 0.7332689684005732, 0.7418905174238418, 0.7500730525792981, 0.7577534823596667, 0.7652122430834176, 0.7722087237919179, 0.7788078618236249, 0.7850191284628756, 0.7909044541905544, 0.7963779586549893, 0.8018155733134383, 0.806781470070319, 0.8116229091074916, 0.8163219650671282, 0.8205744029677151, 0.8247711875925013, 0.8286389385095616, 0.8323501401158775, 0.8360368489782746, 0.8392268595746332, 0.8423884766637276, 0.8455360932426944, 0.8484854218971533, 0.8511490822325856, 0.8537974205082658, 0.8559113158409295, 0.8581927848474604, 0.8607969148794641, 0.8630781052321416, 0.8651078169149997, 0.8669508695200575, 0.8692978248634098], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 90617090, "moving_var_accuracy_train": [0.014397329338954675, 0.028259912114018258, 0.04790537556659523, 0.06515224091129423, 0.07852919616586913, 0.08866613487922011, 0.09525817277089174, 0.09909947642547962, 0.10053813586876223, 0.10005767286618504, 0.09811891470143812, 0.0951273519965755, 0.09165223510573076, 0.08761243431035977, 0.08335222408292772, 0.07890327742549279, 0.07437803142881202, 0.06982853730258783, 0.06536945357468396, 0.06104667576217675, 0.056884325922135534, 0.05287893417324615, 0.04903206833507562, 0.0453814648119251, 0.041939491302150564, 0.03869301055451988, 0.035632257265928544, 0.032815859146415834, 0.03020325319981987, 0.027785512813970396, 0.025537862547073895, 0.023484774296174033, 0.02157685354729638, 0.019811105797420445, 0.018177213717053213, 0.016671225875635798, 0.015273736548171905, 0.01401247177191873, 0.012833165770126833, 0.01176080498067008, 0.010783454624809237, 0.009867858215213448, 0.009039589404373684, 0.008270265938344104, 0.0075671965007741895, 0.006932803250821468, 0.006331108434183242, 0.005787959994327404, 0.005298331406048346, 0.004846785121051621, 0.004425962386389459, 0.004046489408352407, 0.0036820574488142803, 0.003360697611382702, 0.003085661289256683, 0.0028239296251573523, 0.0025786142282813963, 0.00235132439159835, 0.0021657657468917243], "duration": 13662.796877, "accuracy_train": [0.39996290576550386, 0.45233805428663715, 0.5809131958863972, 0.6260320776808785, 0.6508141986203396, 0.6747828779646549, 0.6868467954042082, 0.6992358731889073, 0.7074865465808416, 0.7140420242709486, 0.7198999573181986, 0.7257346388773532, 0.7369858356981359, 0.7425196898648025, 0.7513759834117756, 0.7579067676610374, 0.7642511795173496, 0.7693665068983019, 0.7755946613141381, 0.7817330541712809, 0.7874740088016795, 0.7920084094684385, 0.7954699972891289, 0.7995611777293282, 0.803746445586471, 0.8070241844315246, 0.8094645092169619, 0.8152534087763011, 0.8194844586332595, 0.8237158689784054, 0.8268773503829827, 0.8323410895971761, 0.8351770501684201, 0.8382001041089886, 0.8409205282161315, 0.843872385739664, 0.8456394988349022, 0.8507541052394795, 0.8514745408822444, 0.8551958604420451, 0.8586134687038575, 0.8588463440729974, 0.8625422492155776, 0.8634486967631044, 0.8657509545727206, 0.8692172287398486, 0.8679369549418604, 0.8708430304655776, 0.873864642453396, 0.8750293797872831, 0.8751220252514765, 0.8776324649893872, 0.8749363738349022, 0.8787260059062385, 0.8842340851674971, 0.8836088184062385, 0.8833752220607235, 0.8835383429655776, 0.8904204229535806], "end": "2016-01-23 14:30:13.075000", "learning_rate_per_epoch": [0.00043326569721102715, 0.0003063651092816144, 0.0002501460548955947, 0.00021663284860551357, 0.00019376230193302035, 0.00017687998479232192, 0.00016375903214793652, 0.0001531825546408072, 0.00014442189421970397, 0.00013701064744964242, 0.0001306345220655203, 0.00012507302744779736, 0.00012016628170385957, 0.00011579512647585943, 0.00011186872143298388, 0.00010831642430275679, 0.00010508236300665885, 0.00010212170309387147, 9.939797018887475e-05, 9.688115096651018e-05, 9.454632527194917e-05, 9.237255289917812e-05, 9.034213871927932e-05, 8.843999239616096e-05, 8.665314089739695e-05, 8.497039380017668e-05, 8.338202314916998e-05, 8.187951607396826e-05, 8.04554219939746e-05, 7.910313433967531e-05, 7.781681779306382e-05, 7.65912773204036e-05, 7.542187813669443e-05, 7.430445111822337e-05, 7.323527097469196e-05, 7.221094710985199e-05, 7.122843817342073e-05, 7.028497930150479e-05, 6.937803846085444e-05, 6.850532372482121e-05, 6.76647323416546e-05, 6.685435073450208e-05, 6.607239629374817e-05, 6.531726103276014e-05, 6.458743882831186e-05, 6.388153997249901e-05, 6.319829844869673e-05, 6.253651372389868e-05, 6.189510168042034e-05, 6.127302185632288e-05, 6.066933201509528e-05, 6.0083140851929784e-05, 5.951361890765838e-05, 5.8959991292795166e-05, 5.842153404955752e-05, 5.789756323792972e-05, 5.738744221162051e-05, 5.689057434210554e-05, 5.640638846671209e-05], "accuracy_valid": [0.40136424604668675, 0.4386486375188253, 0.5506209407944277, 0.5915365563817772, 0.6040186135165663, 0.6187891213290663, 0.6219938347138554, 0.6280973503388554, 0.6319844808923193, 0.6301328360316265, 0.6270707831325302, 0.6281694159450302, 0.6303872717432228, 0.6274472891566265, 0.6311093985316265, 0.6308343726468373, 0.6296136695218373, 0.625941265060241, 0.6261545204254518, 0.6269487128200302, 0.6297063253012049, 0.6289636083396084, 0.6249146978539157, 0.6244470067771084, 0.6237145849021084, 0.6206113516566265, 0.6182111257530121, 0.6181905355798193, 0.6175595938441265, 0.614588725997741, 0.614588725997741, 0.613123882247741, 0.611048686935241, 0.6098382788968373, 0.6095941382718373, 0.6050260612763554, 0.6020654885165663, 0.6029096856174698, 0.6020346032567772, 0.6003359139683735, 0.5984636789344879, 0.6003256188817772, 0.5989931405308735, 0.5972738610692772, 0.6002344338290663, 0.5958193124058735, 0.5932352456701807, 0.5920145425451807, 0.5943235833960843, 0.5900202371987951, 0.5876288356551205, 0.5901628976844879, 0.585961031626506, 0.5863375376506024, 0.589623141001506, 0.5878126764871988, 0.5861845820783133, 0.5836622858621988, 0.5834887401167168], "accuracy_test": 0.32436708860759494, "start": "2016-01-23 10:42:30.278000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0], "accuracy_train_last": 0.8904204229535806, "batch_size_eval": 1024, "accuracy_train_std": [0.018315944753254033, 0.014192937252675166, 0.021245017872464897, 0.02235844991407944, 0.02204887661014247, 0.02142062473254916, 0.021933651213366892, 0.02437670282366394, 0.02414048701804177, 0.025131624761875287, 0.025561466451696043, 0.025291089548059826, 0.026576166893236327, 0.026351687603332365, 0.02762098501648788, 0.028377931667873085, 0.029117642870980554, 0.029011631226498465, 0.030543866238539937, 0.030589275001600788, 0.031536055249465164, 0.03184456044726338, 0.03269388596278418, 0.03253199966088578, 0.0323016686702755, 0.03278356414844306, 0.032997293635551615, 0.03212558796140953, 0.03294906394612892, 0.03256692615836465, 0.03274922004867591, 0.0322454150987594, 0.03213137554261465, 0.031985046037295864, 0.032180002255048266, 0.03216832070592602, 0.032433840137213274, 0.032014139250426475, 0.03231856900147103, 0.03047039055471675, 0.03134253731806886, 0.03223316585853426, 0.031511436043998364, 0.03229686008310316, 0.032463157482714076, 0.03113767745711096, 0.03276412747434021, 0.032611585088078134, 0.033186849995084595, 0.031634403122619795, 0.031349399583667795, 0.03179288067596038, 0.03180329792020525, 0.03189663099486311, 0.03306898138215648, 0.030283858954815075, 0.03025317435935847, 0.03136958270616759, 0.029645075542964788], "accuracy_test_std": 0.04163522934600794, "error_valid": [0.5986357539533133, 0.5613513624811747, 0.4493790592055723, 0.40846344361822284, 0.39598138648343373, 0.38121087867093373, 0.3780061652861446, 0.3719026496611446, 0.3680155191076807, 0.3698671639683735, 0.3729292168674698, 0.3718305840549698, 0.36961272825677716, 0.3725527108433735, 0.3688906014683735, 0.3691656273531627, 0.3703863304781627, 0.37405873493975905, 0.37384547957454817, 0.3730512871799698, 0.37029367469879515, 0.3710363916603916, 0.37508530214608427, 0.3755529932228916, 0.3762854150978916, 0.3793886483433735, 0.38178887424698793, 0.3818094644201807, 0.3824404061558735, 0.38541127400225905, 0.38541127400225905, 0.38687611775225905, 0.38895131306475905, 0.3901617211031627, 0.3904058617281627, 0.3949739387236446, 0.39793451148343373, 0.3970903143825302, 0.39796539674322284, 0.3996640860316265, 0.40153632106551207, 0.39967438111822284, 0.4010068594691265, 0.40272613893072284, 0.39976556617093373, 0.4041806875941265, 0.4067647543298193, 0.4079854574548193, 0.40567641660391573, 0.40997976280120485, 0.4123711643448795, 0.40983710231551207, 0.41403896837349397, 0.41366246234939763, 0.41037685899849397, 0.4121873235128012, 0.41381541792168675, 0.4163377141378012, 0.4165112598832832], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.8643018518485724, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.00043326569241986266, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "optimization": "rmsprop", "nb_data_augmentation": 0, "learning_rate_decay_method": "sqrt", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 2.723211176199974e-07, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.09660359878216908}, "accuracy_valid_max": 0.6319844808923193, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import os\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.5834887401167168, "loss_train": [1.8853576183319092, 1.4314841032028198, 1.2107458114624023, 1.0895074605941772, 1.0057953596115112, 0.9414156079292297, 0.8891401886940002, 0.8443838357925415, 0.8048255443572998, 0.7679104804992676, 0.7342119812965393, 0.7021085023880005, 0.6716638803482056, 0.6428962349891663, 0.6155654191970825, 0.5898250341415405, 0.5644025802612305, 0.5402140617370605, 0.5171422958374023, 0.4945666790008545, 0.4725314676761627, 0.45113393664360046, 0.43088364601135254, 0.410857230424881, 0.39194220304489136, 0.3729422688484192, 0.3551492393016815, 0.33759209513664246, 0.3206249475479126, 0.30457615852355957, 0.28901389241218567, 0.27390244603157043, 0.2597726285457611, 0.2457619458436966, 0.23205959796905518, 0.21899572014808655, 0.206546813249588, 0.19480401277542114, 0.18310435116291046, 0.17186963558197021, 0.1608114093542099, 0.1506875604391098, 0.14081893861293793, 0.13125644624233246, 0.12262020260095596, 0.11409679055213928, 0.1062527596950531, 0.09962635487318039, 0.09181343764066696, 0.08528048545122147, 0.07969344407320023, 0.07400030642747879, 0.0692664235830307, 0.06524793058633804, 0.06148712337017059, 0.05635145306587219, 0.05418172478675842, 0.0503024086356163, 0.04699249565601349], "accuracy_train_first": 0.39996290576550386, "model": "residualv4", "loss_std": [0.23489344120025635, 0.11740835011005402, 0.09793606400489807, 0.09318619966506958, 0.0920569896697998, 0.09094355255365372, 0.09002836048603058, 0.08966050297021866, 0.08872190862894058, 0.08823081105947495, 0.08734006434679031, 0.08648836612701416, 0.08583483844995499, 0.08484772592782974, 0.08326511830091476, 0.08239582926034927, 0.08141733705997467, 0.0803801491856575, 0.07914949208498001, 0.07806859165430069, 0.07656768709421158, 0.07533182948827744, 0.07434119284152985, 0.07294987887144089, 0.07157919555902481, 0.0701790377497673, 0.06837348639965057, 0.06707439571619034, 0.06533878296613693, 0.06360528618097305, 0.06214753910899162, 0.060524746775627136, 0.05919494479894638, 0.05770493671298027, 0.05569491535425186, 0.053883232176303864, 0.05244870111346245, 0.05082746967673302, 0.04962918162345886, 0.0483386293053627, 0.04690559208393097, 0.045263856649398804, 0.04442540183663368, 0.04275420308113098, 0.041414231061935425, 0.039934877306222916, 0.039077986031770706, 0.037462811917066574, 0.03645332157611847, 0.03516073897480965, 0.034220632165670395, 0.03293151035904884, 0.031127624213695526, 0.030073072761297226, 0.029389703646302223, 0.027073698118329048, 0.0259803906083107, 0.02496722899377346, 0.024412747472524643]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:09 2016", "state": "available"}], "summary": "26142ad676250fada29243d507f980b9"}