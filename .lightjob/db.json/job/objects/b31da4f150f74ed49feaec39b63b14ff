{"content": {"hp_model": {"f0": 16, "f1": 16, "f2": 16, "f3": 16, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.013928797320784317, 0.009211833455381083, 0.013577137297071966, 0.014653469001789605, 0.011078298891224978, 0.011600751402677436, 0.014817745580982426, 0.016554096216462495, 0.01870847132049579, 0.019574221869833656, 0.02072975939499578, 0.01856096477161327, 0.01809746015551393, 0.017302849471154676, 0.01810223518928215, 0.018652626776687366, 0.018046607818601824, 0.0185393620535902, 0.01678011745843709, 0.017202482830078705, 0.014202586034600636, 0.01299263860432359, 0.01117994476953404, 0.010494797813544407, 0.011251210801129598, 0.008679271281888785, 0.007445601016474018, 0.0076315141741023764, 0.009748014889947197, 0.009992687948108408, 0.01014089812789551, 0.010728024936915189, 0.012878705069230357, 0.01263624207614763, 0.010632652617238794, 0.012634996786037078, 0.011731958423313938, 0.011010828667443663, 0.01368838404888915, 0.012861771930177872, 0.013215455775172563, 0.012975871816185364, 0.014892367231238799, 0.014682769449032242, 0.014901703754414613, 0.014110148477744293, 0.013435051541940517, 0.013570140067300422, 0.01329035055694481, 0.015439513040214056, 0.014216381946520244, 0.014477193448517037, 0.01312900148575226, 0.013044302131742836, 0.01370734973060805, 0.012448460394365151, 0.012925069772381665, 0.012793116985078184, 0.011440434590299276, 0.01204060802652696, 0.013124786355675289, 0.01213549021721023, 0.011427700102435125, 0.011358916897950004, 0.01068785025162738, 0.011717425015965966, 0.010962487905944214, 0.011219924105554625, 0.01051683344378971, 0.009815810845995192, 0.011257528548765681, 0.01093084568656624, 0.010989356872837013, 0.009459680471331083, 0.00998913387640886, 0.00957178738017835, 0.009304143238925302, 0.01104926232121325, 0.009723964965129587, 0.009286683339131423, 0.009991108516768687, 0.008377485735676293, 0.009759425491940976, 0.00875256309357132, 0.008903940000533997, 0.008688955378571736, 0.008560400227521027, 0.007861948968793773, 0.007437472554962607, 0.007040593089361057, 0.00941661705184374], "moving_avg_accuracy_train": [0.02187826241809708, 0.04842419257855758, 0.07755086362155084, 0.10754436991351166, 0.13709335943448053, 0.16628617329838757, 0.194695976799575, 0.2217548958981797, 0.2473724795999361, 0.27133035452315585, 0.29373418187192, 0.314530103010817, 0.3339904436060531, 0.35227183295599596, 0.3694244845279674, 0.3855501149903608, 0.40072323627786954, 0.41488825302591315, 0.42819952620869467, 0.44077018777317956, 0.4526369162561514, 0.4637889770991594, 0.47425355109236267, 0.4839993694731135, 0.4931193422883991, 0.50171089527809, 0.5096850363473648, 0.5171175657275785, 0.5240812097292946, 0.5306786604617915, 0.5368465558531815, 0.5427045813482897, 0.5482372570093725, 0.5534142306555191, 0.5582526154930219, 0.5628628921670032, 0.567235319410482, 0.5713006762141274, 0.5751662192885434, 0.5787917645281553, 0.5822872701247583, 0.5855587471485967, 0.5887286519533936, 0.5917280506527111, 0.5945528872737171, 0.5973113709254521, 0.5999289369406035, 0.6023685598578388, 0.6047199694047699, 0.6068920776172553, 0.608914296177512, 0.6108016861484006, 0.6126584111924291, 0.6144131690891976, 0.6160319787260512, 0.6175911778980196, 0.6191176900396961, 0.6206123505588439, 0.6220480455855546, 0.6234773548893561, 0.6248194647365685, 0.6261320673931258, 0.627392464843551, 0.6285639528322486, 0.6297090088744668, 0.630799977132692, 0.6318609396734371, 0.632906522812498, 0.6339731056733672, 0.6350353007469497, 0.6360982692072307, 0.6370874568559982, 0.6379591605982315, 0.6387506694126701, 0.6394627750039336, 0.6401338969705944, 0.6408147087489411, 0.6414646777792241, 0.6421147180243267, 0.6426789000032709, 0.6431866998331395, 0.6436855363097739, 0.6441297667434882, 0.6445505004731169, 0.6450129022357443, 0.6454523513590229, 0.6458036777425927, 0.6461197993901681, 0.64642065701229, 0.6466866704281246, 0.6469726936250223], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 889066951, "moving_var_accuracy_train": [0.0043079252979160735, 0.010219310440880883, 0.016832646091213474, 0.023245875259265168, 0.028779572768731602, 0.03357159892349296, 0.03747849144592841, 0.04032030822639907, 0.042194622756207625, 0.04314097841811664, 0.04334426389516407, 0.04290207052978465, 0.042020207181549536, 0.04082606923247242, 0.03939138341277028, 0.03779256869178027, 0.036085324309051314, 0.03428262117339739, 0.0324490689997774, 0.030626355889319022, 0.028831093504384293, 0.027067300303361227, 0.025346136052758143, 0.023666351230677552, 0.02204828124497372, 0.02050778616544835, 0.01902928988103777, 0.017623543329823646, 0.016297620036885015, 0.015059595238706027, 0.013896022116867602, 0.01281526806949288, 0.011809235762280233, 0.010869521691248274, 0.009993259232645433, 0.009185225168476795, 0.00843876573162475, 0.00774363329193079, 0.0071037517720791985, 0.00651167779943153, 0.0059704770538713285, 0.005469752405741713, 0.00501321183341082, 0.004592858183086936, 0.004205389682196638, 0.0038533338024889763, 0.003529665288833157, 0.0032302645997545395, 0.0029570002814956766, 0.002703762740126826, 0.002470190777263166, 0.0022552318676567445, 0.0020607355318931746, 0.0018823745561903009, 0.0017177220023346013, 0.0015678297206219473, 0.001432018902427923, 0.0013089231027926225, 0.0011965817744008557, 0.0010953099227341719, 0.0010019902600386156, 0.0009172975656407646, 0.0008398652246740363, 0.0007682301591755993, 0.0007032075233164211, 0.0006435986766488725, 0.0005893695825997659, 0.0005402718212459848, 0.0004964830301132829, 0.00045698905247103976, 0.00042145926475190595, 0.0003881197681169833, 0.0003561465980332973, 0.00032617031405997315, 0.0002981171320119538, 0.0002723590610579718, 0.00024929469704999384, 0.00022816736500793855, 0.00020915359938942322, 0.00019110295119876959, 0.00017431340208382335, 0.0001591216023492299, 0.0001449855082184496, 0.00013208010923782985, 0.00012079643682477519, 0.00011045483292985109, 0.00010052022168699634, 9.13675955828885e-05, 8.304547380369973e-05, 7.537779465996518e-05, 6.857629861644124e-05], "duration": 57230.012613, "accuracy_train": [0.21878262418097086, 0.2873375640227021, 0.3396909030084902, 0.3774859265411591, 0.4030342651232004, 0.4290214980735511, 0.4503842083102621, 0.465285167785622, 0.4779307329157438, 0.48695122883213365, 0.4953686280107974, 0.5016933932608896, 0.5091335089631783, 0.5168043371054817, 0.5237983486757106, 0.5306807891519011, 0.5372813278654485, 0.5423734037583057, 0.5480009848537284, 0.5539061418535438, 0.5594374726028978, 0.5641575246862311, 0.5684347170311923, 0.5717117348998708, 0.575199097625969, 0.5790348721853082, 0.581452305970838, 0.5840103301495017, 0.5867540057447398, 0.5900557170542635, 0.5923576143756921, 0.5954268108042635, 0.5980313379591178, 0.600006993470838, 0.6017980790305464, 0.604355382232835, 0.6065871646017903, 0.6078888874469361, 0.6099561069582872, 0.6114216716846622, 0.613746820494186, 0.6150020403631414, 0.617257795196567, 0.618722638946567, 0.6199764168627722, 0.6221377237910668, 0.6234870310769657, 0.6243251661129567, 0.6258826553271503, 0.6264410515296235, 0.6271142632198229, 0.6277881958863972, 0.6293689365886859, 0.6302059901601145, 0.6306012654577335, 0.6316239704457365, 0.632856299314784, 0.6340642952311738, 0.6349693008259505, 0.6363411386235696, 0.6368984533614802, 0.6379454913021411, 0.6387360418973791, 0.6391073447305279, 0.6400145132544297, 0.6406186914567183, 0.641409602540144, 0.6423167710640458, 0.6435723514211886, 0.6445950564091916, 0.64566498534976, 0.6459901456949059, 0.6458044942783315, 0.6458742487426172, 0.6458717253253046, 0.6461739946705427, 0.6469420147540605, 0.6473143990517718, 0.647965080230251, 0.6477565378137689, 0.6477568983019564, 0.6481750645994832, 0.6481278406469178, 0.6483371040397748, 0.6491745180993909, 0.6494073934685308, 0.6489656151947213, 0.6489648942183462, 0.6491283756113879, 0.649080791170635, 0.6495469023971022], "end": "2016-01-22 06:21:32.805000", "learning_rate_per_epoch": [0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217, 0.005928906612098217], "accuracy_valid": [0.21397749199924698, 0.279796922063253, 0.3321974421121988, 0.3648519860692771, 0.3983727880271084, 0.42224856457078314, 0.4409356174698795, 0.4537735904555723, 0.46113898955195787, 0.4677719667733434, 0.47425198842243976, 0.48098644578313254, 0.4867649308170181, 0.49484216161521083, 0.5009353821536144, 0.5047401520143072, 0.5113731292356928, 0.5165000823606928, 0.51904296875, 0.5230815841490963, 0.5275070006588856, 0.5319633024284638, 0.5352592008659638, 0.5390639707266567, 0.539562547063253, 0.539562547063253, 0.5436217526355422, 0.5444762448230422, 0.5463072995105422, 0.5469279461596386, 0.5490031414721386, 0.5492472820971386, 0.5508444912462349, 0.5510783367846386, 0.5503356198230422, 0.5530623470444277, 0.5503459149096386, 0.5492369870105422, 0.5523093349962349, 0.5534491481551205, 0.5545580760542168, 0.5524519954819277, 0.5517195736069277, 0.5517195736069277, 0.5522181499435241, 0.5511195171310241, 0.5503665050828314, 0.5498782238328314, 0.5509974468185241, 0.5513842479292168, 0.5497458584337349, 0.5490134365587349, 0.5501223644578314, 0.5493899425828314, 0.5498885189194277, 0.5484030849962349, 0.5492678722703314, 0.5506312358810241, 0.5511092220444277, 0.5503665050828314, 0.5495326030685241, 0.5468264660203314, 0.5469382412462349, 0.5460528637989458, 0.5465308499623494, 0.5449130506400602, 0.546154343938253, 0.546642625188253, 0.5454013318900602, 0.5439158979668675, 0.5439056028802711, 0.5442821089043675, 0.5437938276543675, 0.5417186323418675, 0.5414744917168675, 0.5404979292168675, 0.5407420698418675, 0.5396331419427711, 0.5387786497552711, 0.5392772260918675, 0.5377917921686747, 0.5378123823418675, 0.5370490752070783, 0.5365916792168675, 0.5369681852409638, 0.5358695524284638, 0.5350047651543675, 0.5352592008659638, 0.5351577207266567, 0.534313523625753, 0.5340796780873494], "accuracy_test": 0.4029, "start": "2016-01-21 14:27:42.793000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0], "accuracy_train_last": 0.6495469023971022, "batch_size_eval": 1024, "accuracy_train_std": [0.013656081094463812, 0.01487375595421044, 0.016628861479529893, 0.013885261423839456, 0.013279643997856375, 0.01482266748752118, 0.013637890678981007, 0.01385437748762827, 0.014081713502866128, 0.013258575503733496, 0.012532817442260556, 0.013607980415402385, 0.014341580847430388, 0.015407437151122595, 0.015890120570122554, 0.01657495564676352, 0.016952567905381407, 0.016388635738259306, 0.016477774835491916, 0.016925209814434822, 0.01696449995889491, 0.016279465185892593, 0.016105729442031883, 0.016958516167672626, 0.017159650499988025, 0.01662666092774147, 0.01638715120668971, 0.01680632361414169, 0.016738771970800908, 0.01712396845099872, 0.016967223674737773, 0.01593020277949736, 0.015726916424200422, 0.015581828857988561, 0.015093843944630312, 0.01464889060828016, 0.014767569016597032, 0.013941260059509407, 0.01475798014677503, 0.015362765550920091, 0.015124993339432785, 0.01507754606038666, 0.014616637946559593, 0.015020726213057615, 0.015543281048205293, 0.015740528954358773, 0.014724919503153019, 0.01443199867614947, 0.0142024293422488, 0.013635625909223504, 0.013700812902923066, 0.013836764474408538, 0.013883460647252658, 0.013762750392607655, 0.01377665765393582, 0.014184728852718662, 0.014061838873624794, 0.013966634930521336, 0.014080264678580654, 0.013814498315856096, 0.014603548213555029, 0.014141823922671137, 0.014177949197086856, 0.014658762754685434, 0.013895056572138714, 0.013807194793925998, 0.01382403680845011, 0.014212416937016959, 0.014280533527990979, 0.013897736907924117, 0.013522551974402018, 0.014057299878020211, 0.013385180242067371, 0.012730443418503686, 0.012860172866685437, 0.013395742396792622, 0.01257923984523072, 0.012750167023118915, 0.012812341478309501, 0.013215163375896273, 0.013614209594798345, 0.01435452897262075, 0.014448718994487264, 0.0133175572525531, 0.012967039634624143, 0.013179025838513441, 0.012361230177012947, 0.012075693446050828, 0.012050808493669768, 0.012292963512244305, 0.012028947838287767], "accuracy_test_std": 0.11828076766744455, "error_valid": [0.786022508000753, 0.720203077936747, 0.6678025578878012, 0.6351480139307228, 0.6016272119728916, 0.5777514354292168, 0.5590643825301205, 0.5462264095444277, 0.5388610104480421, 0.5322280332266567, 0.5257480115775602, 0.5190135542168675, 0.5132350691829819, 0.5051578383847892, 0.49906461784638556, 0.4952598479856928, 0.4886268707643072, 0.4834999176393072, 0.48095703125, 0.47691841585090367, 0.47249299934111444, 0.4680366975715362, 0.4647407991340362, 0.4609360292733433, 0.460437452936747, 0.460437452936747, 0.45637824736445776, 0.45552375517695776, 0.45369270048945776, 0.4530720538403614, 0.4509968585278614, 0.4507527179028614, 0.4491555087537651, 0.4489216632153614, 0.44966438017695776, 0.4469376529555723, 0.4496540850903614, 0.45076301298945776, 0.4476906650037651, 0.4465508518448795, 0.4454419239457832, 0.4475480045180723, 0.4482804263930723, 0.4482804263930723, 0.44778185005647586, 0.44888048286897586, 0.44963349491716864, 0.45012177616716864, 0.44900255318147586, 0.4486157520707832, 0.4502541415662651, 0.4509865634412651, 0.44987763554216864, 0.45061005741716864, 0.4501114810805723, 0.4515969150037651, 0.45073212772966864, 0.44936876411897586, 0.4488907779555723, 0.44963349491716864, 0.45046739693147586, 0.45317353397966864, 0.4530617587537651, 0.4539471362010542, 0.45346915003765065, 0.45508694935993976, 0.453845656061747, 0.453357374811747, 0.45459866810993976, 0.45608410203313254, 0.4560943971197289, 0.45571789109563254, 0.45620617234563254, 0.45828136765813254, 0.45852550828313254, 0.45950207078313254, 0.45925793015813254, 0.4603668580572289, 0.4612213502447289, 0.46072277390813254, 0.4622082078313253, 0.46218761765813254, 0.46295092479292166, 0.46340832078313254, 0.4630318147590362, 0.4641304475715362, 0.46499523484563254, 0.4647407991340362, 0.4648422792733433, 0.465686476374247, 0.46592032191265065], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.8776816039541394, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.005928906564266472, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "optimization": "adadelta", "nb_data_augmentation": 0, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 4.891672541248837e-09, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.016334818533554032}, "accuracy_valid_max": 0.5545580760542168, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import os\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.5340796780873494, "loss_train": [2.27885103225708, 2.049798011779785, 1.921256422996521, 1.824903130531311, 1.7476136684417725, 1.6847712993621826, 1.6320340633392334, 1.587937831878662, 1.5509668588638306, 1.5187946557998657, 1.4904836416244507, 1.4651411771774292, 1.4418466091156006, 1.420331358909607, 1.4002597332000732, 1.3812371492385864, 1.3630964756011963, 1.3458514213562012, 1.329222321510315, 1.313567042350769, 1.2983793020248413, 1.2838102579116821, 1.2696655988693237, 1.255922555923462, 1.2427289485931396, 1.2300809621810913, 1.2178517580032349, 1.205865740776062, 1.194246768951416, 1.182900071144104, 1.1717665195465088, 1.1608095169067383, 1.1501836776733398, 1.1396461725234985, 1.129310965538025, 1.1191591024398804, 1.1092361211776733, 1.0994296073913574, 1.0898271799087524, 1.0803357362747192, 1.071104884147644, 1.0619970560073853, 1.0530160665512085, 1.0441728830337524, 1.0355514287948608, 1.0268696546554565, 1.0182304382324219, 1.0097500085830688, 1.0014127492904663, 0.9932090640068054, 0.9850921034812927, 0.9770751595497131, 0.9691035747528076, 0.9611295461654663, 0.9532495737075806, 0.9452895522117615, 0.9374454021453857, 0.9296604990959167, 0.9219722151756287, 0.9141181707382202, 0.9066107273101807, 0.8990288972854614, 0.8914509415626526, 0.8840609788894653, 0.8766607642173767, 0.8692455291748047, 0.8619685769081116, 0.854572057723999, 0.8472500443458557, 0.8400141000747681, 0.8328782320022583, 0.8257279992103577, 0.8185519576072693, 0.8115677237510681, 0.8045655488967896, 0.7974854707717896, 0.7905253171920776, 0.783649206161499, 0.7768192887306213, 0.7701374888420105, 0.7633422017097473, 0.7566749453544617, 0.7499811053276062, 0.7433898448944092, 0.7366613745689392, 0.7302340865135193, 0.7238506078720093, 0.7174422144889832, 0.7110790610313416, 0.7047011852264404, 0.6983463764190674], "accuracy_train_first": 0.21878262418097086, "model": "residualv4", "loss_std": [0.1036410927772522, 0.11399105191230774, 0.12918417155742645, 0.142254039645195, 0.15606237947940826, 0.16778460144996643, 0.17787128686904907, 0.18667201697826385, 0.1942756325006485, 0.20062626898288727, 0.2059607058763504, 0.2105696201324463, 0.21425172686576843, 0.21774180233478546, 0.22059492766857147, 0.22315767407417297, 0.22548918426036835, 0.22770074009895325, 0.22927650809288025, 0.23087114095687866, 0.23236392438411713, 0.23384344577789307, 0.23505036532878876, 0.23607276380062103, 0.23689796030521393, 0.2377980351448059, 0.2384290099143982, 0.23909446597099304, 0.23982666432857513, 0.24030864238739014, 0.24089886248111725, 0.2414047122001648, 0.24174395203590393, 0.2420705258846283, 0.24242280423641205, 0.24276190996170044, 0.24302849173545837, 0.24325361847877502, 0.24358738958835602, 0.24386277794837952, 0.2439659982919693, 0.24407686293125153, 0.24412401020526886, 0.24416345357894897, 0.24424900114536285, 0.24439305067062378, 0.24447163939476013, 0.24456511437892914, 0.24467483162879944, 0.24481011927127838, 0.24478088319301605, 0.24474680423736572, 0.24468502402305603, 0.2447604537010193, 0.2446778118610382, 0.24465446174144745, 0.24462302029132843, 0.24455511569976807, 0.24450206756591797, 0.24437513947486877, 0.2442692667245865, 0.24414823949337006, 0.24398817121982574, 0.24375103414058685, 0.24343860149383545, 0.24324093759059906, 0.24302078783512115, 0.24266907572746277, 0.24240757524967194, 0.2419801950454712, 0.24176348745822906, 0.24136358499526978, 0.24103447794914246, 0.2405356913805008, 0.2401256263256073, 0.23965303599834442, 0.23905107378959656, 0.23869308829307556, 0.23812012374401093, 0.237803116440773, 0.23725804686546326, 0.23691758513450623, 0.23640413582324982, 0.235881045460701, 0.23535975813865662, 0.23485992848873138, 0.23439733684062958, 0.23383282124996185, 0.23324549198150635, 0.2326275110244751, 0.23187224566936493]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:07 2016", "state": "available"}], "summary": "48791f36dbc32159559f16b19947a83e"}