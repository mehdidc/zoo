{"content": {"hp_model": {"f0": 32, "f1": 16, "f2": 32, "f3": 64, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.3687694072723389, 0.9832395911216736, 0.8088421821594238, 0.6918343901634216, 0.599990963935852, 0.5220115184783936, 0.4492872655391693, 0.38355356454849243, 0.32384052872657776, 0.27505889534950256, 0.23142148554325104, 0.18978145718574524, 0.1483575701713562, 0.11106913536787033, 0.0824315994977951, 0.062125857919454575, 0.04675622656941414, 0.03348899632692337, 0.022799525409936905, 0.013957888819277287, 0.008795587345957756, 0.005589708685874939, 0.003620062256231904, 0.0028231581673026085, 0.0022025376092642546, 0.0018367684679105878, 0.0015875180251896381, 0.001397924148477614, 0.0012463709572330117, 0.001122418325394392, 0.0010187436128035188, 0.0009308322332799435, 0.0008551313076168299, 0.0007892780704423785, 0.0007316349074244499, 0.0006807709578424692, 0.0006357654929161072, 0.0005956538370810449, 0.0005597395356744528, 0.0005276264855638146, 0.0004987621796317399, 0.00047275074757635593, 0.000449287734227255, 0.0004281075962353498, 0.000408921972848475, 0.00039156313869170845, 0.000375858333427459, 0.0003616397734731436, 0.00034876816789619625, 0.0003370975027792156, 0.0003265452978666872, 0.0003169778501614928, 0.000308334972942248, 0.00030053412774577737, 0.0002934856165666133, 0.0002871209289878607, 0.00028139029745943844, 0.0002762304211501032, 0.0002715804148465395, 0.0002673954877536744, 0.0002636303543113172, 0.00026024351245723665, 0.0002571975637692958, 0.00025446026120334864, 0.0002519961853977293, 0.0002497806563042104, 0.0002477878879290074, 0.0002459939569234848, 0.00024437878164462745, 0.00024292347370646894, 0.00024161400506272912, 0.00024043292796704918, 0.00023936913930810988, 0.0002384095569141209, 0.0002375448530074209, 0.00023676452110521495, 0.00023606049944646657, 0.00023542452254332602, 0.00023485053679905832], "moving_avg_accuracy_train": [0.055671885093669236, 0.11344373284076226, 0.16820496240829177, 0.22270182699018315, 0.2764468691492767, 0.3281439740625144, 0.37583812455216553, 0.41886022785230154, 0.45446060024287427, 0.486449818169399, 0.5145707237878596, 0.543480257081139, 0.5748085396567553, 0.6077094823353673, 0.6381670454009724, 0.6679031718467093, 0.6957817570764441, 0.7235995949462268, 0.7494633299075841, 0.7733613979584923, 0.7953161238245572, 0.8155543217099587, 0.8339012332889628, 0.8504436806445903, 0.8653551347527503, 0.878787069194142, 0.8908851107866326, 0.9017733482198741, 0.91157973735622, 0.9204078127277409, 0.9283577308597287, 0.9355149823273272, 0.9419565086481659, 0.9477538823369207, 0.9529715186568001, 0.9576673913446915, 0.9618960019126033, 0.9657017514237238, 0.9691269259837324, 0.9722095830877401, 0.974983974481347, 0.9774809267355932, 0.9797281837644147, 0.9817507150903542, 0.9835709932836997, 0.9852115688065202, 0.9866857616282491, 0.9880125351678051, 0.9892066313534055, 0.9902813179204458, 0.9912485358307821, 0.9921190319500848, 0.9929024784574572, 0.9936075803140924, 0.994242171985064, 0.9948133044889386, 0.9953296488912352, 0.9957943588533021, 0.9962125978191624, 0.9965890128884366, 0.9969277864507834, 0.9972326826568956, 0.9975070892423965, 0.9977540551693473, 0.9979763245036031, 0.9981763669044332, 0.9983564050651804, 0.9985184394098529, 0.9986642703200581, 0.9987955181392428, 0.998913641176509, 0.9990199519100487, 0.9991156315702343, 0.9992017432644014, 0.9992792437891518, 0.9993489942614271, 0.9994117696864749, 0.999468267569018, 0.9995191156633066], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05439673733998492, 0.1106518407614834, 0.16347987604715733, 0.21493459340290844, 0.2642539752712019, 0.3105355678137353, 0.3520201616818347, 0.3885078339549163, 0.41842822902328003, 0.4443006028453496, 0.4669865652453026, 0.48948030329908554, 0.5120003229032885, 0.5348959407917999, 0.5553921336102103, 0.5747359974799875, 0.5926734658325159, 0.6107328088200474, 0.6272700677535548, 0.6424170079379131, 0.6566322501505224, 0.6693943475187534, 0.6809046492126611, 0.6912903938169974, 0.7006497709921502, 0.7091617481945165, 0.7168835628328961, 0.7239074677035975, 0.7302656031809787, 0.7359757180793718, 0.7410415793004256, 0.745527612211874, 0.7494917996446776, 0.7530097107005412, 0.7562124517445685, 0.7590959481928528, 0.7616910949963085, 0.7640277566280782, 0.7661063380341709, 0.7679648542684046, 0.769624282339305, 0.7711665957281155, 0.7725424707467949, 0.7737441371698565, 0.7748500510131118, 0.7758708170432012, 0.7768383345952817, 0.7777213074234042, 0.7784671548437144, 0.7791506245532436, 0.7797535402605699, 0.7802839573659135, 0.7807857468232227, 0.781212943272301, 0.7815730060139715, 0.781897062481475, 0.782176506270978, 0.7824534492526904, 0.7827271119987317, 0.7829856155014188, 0.7832192981624968, 0.7834418195887171, 0.7836420888723152, 0.7838223312275536, 0.7839967563785181, 0.7841537390143861, 0.7843194374491673, 0.7844563590092205, 0.7845917954445183, 0.7847014812050364, 0.7848001983895027, 0.7849012508867723, 0.7849921981343149, 0.7850618436258533, 0.7851367315994879, 0.7851919237445091, 0.785241596675028, 0.7852863023124951, 0.7853143303549655], "moving_var_accuracy_train": [0.0278942291089444, 0.05514308372706963, 0.0766179057280917, 0.09568528939859561, 0.11211352646888072, 0.1249554897296854, 0.13293252867508226, 0.13629738815888218, 0.13407412797212104, 0.12987650574686513, 0.12400592316739995, 0.119127180887777, 0.11604761440123826, 0.11418510122338627, 0.11111555943210541, 0.10796213843286662, 0.10416086421928422, 0.10070926673110145, 0.09665873513335337, 0.0921329205291106, 0.087257718366886, 0.0822182084130354, 0.07702587005212203, 0.0717861561275332, 0.06660870368735773, 0.06157158508416254, 0.05673169006910897, 0.05212550449182185, 0.04777844145368066, 0.04370201154119987, 0.03990062117182766, 0.03637159529177887, 0.03310787511467951, 0.03009957347839516, 0.027334629689454364, 0.02479962770321689, 0.0224805952589107, 0.020362889297092186, 0.018432186754281737, 0.016674493052241567, 0.015076318975461694, 0.013624800012955393, 0.012307771489042147, 0.011113810036817592, 0.010032249747446357, 0.00905324816511642, 0.008167482548885512, 0.007366577246224355, 0.006642752312906109, 0.005988871642571892, 0.005398404072689382, 0.004865383536863934, 0.004384369279046768, 0.003950406868796165, 0.0035589905412163492, 0.0032060272181275522, 0.0028878240001908445, 0.0026009851983113588, 0.0023424609929732975, 0.0021094900884153587, 0.0018995739873127293, 0.0017104532438499704, 0.0015400856102324699, 0.001386625978730895, 0.00124840801377036, 0.0011239273650524933, 0.0010118263522011707, 0.0009108800131407345, 0.0008199834117160025, 0.0007381401044547688, 0.0006644516714766889, 0.0005981082220776115, 0.0005383797912462095, 0.00048460854913643937, 0.00043620175120482463, 0.0003926253622397858, 0.0003533982928017166, 0.0003180871916181315, 0.00028630174221455347], "duration": 12860.169108, "accuracy_train": [0.5567188509366925, 0.6333903625645995, 0.6610560285160576, 0.7131736082272057, 0.7601522485811185, 0.7934179182816538, 0.8050854789590256, 0.8060591575535253, 0.7748639517580289, 0.7743527795081212, 0.7676588743540051, 0.8036660567206534, 0.8567630828373015, 0.9038179664428755, 0.9122851129914176, 0.9355283098583426, 0.9466890241440569, 0.973960135774271, 0.9822369445598007, 0.9884440104166666, 0.99290865661914, 0.9976981026785714, 0.9990234375, 0.9993257068452381, 0.9995582217261905, 0.9996744791666666, 0.9997674851190477, 0.9997674851190477, 0.9998372395833334, 0.9998604910714286, 0.9999069940476191, 0.9999302455357143, 0.9999302455357143, 0.9999302455357143, 0.9999302455357143, 0.9999302455357143, 0.9999534970238095, 0.9999534970238095, 0.9999534970238095, 0.9999534970238095, 0.9999534970238095, 0.9999534970238095, 0.9999534970238095, 0.9999534970238095, 0.9999534970238095, 0.9999767485119048, 0.9999534970238095, 0.9999534970238095, 0.9999534970238095, 0.9999534970238095, 0.9999534970238095, 0.9999534970238095, 0.9999534970238095, 0.9999534970238095, 0.9999534970238095, 0.9999534970238095, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048, 0.9999767485119048], "end": "2016-02-02 11:31:09.581000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0], "moving_var_accuracy_valid": [0.0266310452991178, 0.052449670717877435, 0.0723219154553894, 0.08891801535329258, 0.10191782666879833, 0.11100391627637626, 0.11539226840434896, 0.11583519361508433, 0.11230874462299861, 0.10710228770539897, 0.1010239349449678, 0.09547525571516086, 0.09049209169040791, 0.08616076638783768, 0.08132553502949903, 0.07656064715126136, 0.07180035737421683, 0.0675555804590669, 0.06326135081046501, 0.05900008390195528, 0.0549187335122281, 0.05089270032413114, 0.046995813697481015, 0.04326700554661142, 0.039728686461911196, 0.03640790161876251, 0.03330374924867171, 0.0304173914804985, 0.027739485313187255, 0.02525898549124419, 0.02296405349131856, 0.020848768563730087, 0.01890532474537866, 0.0171261735546135, 0.015505874150908018, 0.014030117701722621, 0.012687719013933736, 0.011468087000772826, 0.010360162806651337, 0.009355233269322388, 0.008444493256092584, 0.007621452505787062, 0.006876344543811592, 0.0062017061091612525, 0.005592542907103462, 0.005042666285986776, 0.004546824469310353, 0.004099158791516141, 0.003694249507733977, 0.003329028734555174, 0.002999397427250923, 0.0027019897652766005, 0.002434056922684141, 0.002192293701670673, 0.0019742311381050594, 0.0017777531376417309, 0.0016006806233609845, 0.0014413028377609639, 0.001297846575672005, 0.0011686633346529177, 0.0010522884694624225, 0.0009475052645823238, 0.0008531157081976677, 0.0007680965231374977, 0.0006915606880233489, 0.0006226264111526909, 0.0005606108737790226, 0.0005047185140235867, 0.00045441174987328374, 0.0004090788535804992, 0.0003682586739650298, 0.00033152471103336666, 0.00029844668254655027, 0.00026864566874231985, 0.00024183157574544367, 0.00021767583372674757, 0.0001959304569543099, 0.00017635539860507096, 0.00015872692888504634], "accuracy_test": 0.7674505739795918, "start": "2016-02-02 07:56:49.412000", "learning_rate_per_epoch": [0.0014110615011304617, 0.0012785698054358363, 0.001158518367446959, 0.0010497391922399402, 0.0009511738317087293, 0.000861863256432116, 0.0007809385424479842, 0.0007076122565194964, 0.0006411709473468363, 0.0005809681606478989, 0.0005264180945232511, 0.00047699001152068377, 0.00043220299994572997, 0.00039162125904113054, 0.000354849937139079, 0.00032153126085177064, 0.000291341042611748, 0.0002639855374582112, 0.00023919859086163342, 0.00021673901937901974, 0.00019638829689938575, 0.00017794840096030384, 0.00016123992099892348, 0.00014610028301831335, 0.0001323821779806167, 0.00011995214299531654, 0.00010868922981899232, 9.84838479780592e-05, 8.923669520299882e-05, 8.08578115538694e-05, 7.32656626496464e-05, 6.638637569267303e-05, 6.015302278683521e-05, 5.4504947911482304e-05, 4.9387203034712e-05, 4.474998786463402e-05, 4.0548184188082814e-05, 3.674090839922428e-05, 3.3291118597844616e-05, 3.0165245334501378e-05, 2.7332876925356686e-05, 2.4766453861957416e-05, 2.244100505777169e-05, 2.0333904103608802e-05, 1.842465098889079e-05, 1.6694666555849835e-05, 1.512711969553493e-05, 1.3706757272302639e-05, 1.2419760423654225e-05, 1.1253606317040976e-05, 1.0196948096563574e-05, 9.239504834113177e-06, 8.371960575459525e-06, 7.5858747550228145e-06, 6.873598522361135e-06, 6.228201527846977e-06, 5.643404165311949e-06, 5.113516181154409e-06, 4.6333821046573576e-06, 4.198330316285137e-06, 3.8041278003220214e-06, 3.4469389902369585e-06, 3.1232882520271232e-06, 2.8300269150349777e-06, 2.564301212260034e-06, 2.3235259050125023e-06, 2.105358134940616e-06, 1.907675368784112e-06, 1.7285540252487408e-06, 1.5662512851122301e-06, 1.4191880381986266e-06, 1.2859333082815283e-06, 1.1651904969767202e-06, 1.0557848781900248e-06, 9.566518883730168e-07, 8.668269515510474e-07, 7.854361570025503e-07, 7.116875622159569e-07, 6.448635758715682e-07], "accuracy_train_first": 0.5567188509366925, "accuracy_train_last": 0.9999767485119048, "batch_size_eval": 1024, "accuracy_train_std": [0.017471635459663543, 0.016089713255429024, 0.014145012593798554, 0.014863836504316512, 0.0198668367591815, 0.02154956476798333, 0.024358798095353257, 0.0237841968970268, 0.022882917110443192, 0.02376450516280655, 0.023771910886965276, 0.02858242122796808, 0.02665425784811054, 0.02481632287019603, 0.018895462611308683, 0.019633954687150918, 0.015724725254849758, 0.010953518488336374, 0.008708100330460598, 0.006442340791445637, 0.004236103521097528, 0.0020196698161485276, 0.001022008043891179, 0.0008111404177135607, 0.0005719109875487743, 0.0005072875797356638, 0.00041593526367183587, 0.00041593526367183587, 0.0003639433557128564, 0.0003417256895623853, 0.0002866635976083043, 0.0002515032976746644, 0.0002515032976746644, 0.0002515032976746644, 0.0002515032976746644, 0.0002515032976746644, 0.00020796763183591793, 0.00020796763183591793, 0.00020796763183591793, 0.00020796763183591793, 0.00020796763183591793, 0.00020796763183591793, 0.00020796763183591793, 0.00020796763183591793, 0.00020796763183591793, 0.0001488821669790004, 0.00020796763183591793, 0.00020796763183591793, 0.00020796763183591793, 0.00020796763183591793, 0.00020796763183591793, 0.00020796763183591793, 0.00020796763183591793, 0.00020796763183591793, 0.00020796763183591793, 0.00020796763183591793, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004, 0.0001488821669790004], "accuracy_test_std": 0.013082131881731678, "error_valid": [0.45603262660015065, 0.3830522284450302, 0.36106780638177716, 0.32197295039533136, 0.2918715879141567, 0.2729300993034638, 0.2746184935052711, 0.28310311558734935, 0.3122882153614458, 0.32284803275602414, 0.3288397731551205, 0.30807605421686746, 0.28531950065888556, 0.25904349821159633, 0.26014213102409633, 0.2511692276920181, 0.24588931899472888, 0.22673310429216864, 0.22389460184487953, 0.22126053040286142, 0.21543056993599397, 0.21574677616716864, 0.21550263554216864, 0.21523790474397586, 0.21511583443147586, 0.21423045698418675, 0.21362010542168675, 0.2128773884600903, 0.2125111775225903, 0.2126332478350903, 0.2133656697100903, 0.2140980915850903, 0.2148305134600903, 0.21532908979668675, 0.21496287885918675, 0.2149525837725903, 0.2149525837725903, 0.21494228868599397, 0.21518642931099397, 0.21530849962349397, 0.2154408650225903, 0.2149525837725903, 0.2150746540850903, 0.2154408650225903, 0.2151967243975903, 0.21494228868599397, 0.21445400743599397, 0.21433193712349397, 0.21482021837349397, 0.21469814806099397, 0.21482021837349397, 0.21494228868599397, 0.21469814806099397, 0.21494228868599397, 0.21518642931099397, 0.21518642931099397, 0.21530849962349397, 0.21505406391189763, 0.21480992328689763, 0.21468785297439763, 0.21467755788780118, 0.21455548757530118, 0.21455548757530118, 0.21455548757530118, 0.21443341726280118, 0.21443341726280118, 0.21418927663780118, 0.21431134695030118, 0.21418927663780118, 0.21431134695030118, 0.21431134695030118, 0.21418927663780118, 0.21418927663780118, 0.21431134695030118, 0.21418927663780118, 0.21431134695030118, 0.21431134695030118, 0.21431134695030118, 0.21443341726280118], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.09389508385217325, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "valid_ratio": 0.15, "learning_rate": 0.001557282635508894, "optimization": "adam", "nb_data_augmentation": 0, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 3.103045526817634e-08, "rotation_range": [0, 0], "momentum": 0.8195510315787058}, "accuracy_valid_max": 0.7874888224774097, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7855665827371988, "accuracy_valid_std": [0.008606126276883485, 0.013605747466500366, 0.010950106553492057, 0.010038706459210716, 0.012288466455462296, 0.008934826883222568, 0.007073805510939928, 0.009368142296084446, 0.015912844852465132, 0.01453540159658235, 0.016663219307226397, 0.0182868711796405, 0.01211241392633205, 0.009682581525558813, 0.011444114897301296, 0.010638260204827029, 0.011840657181466393, 0.015406347446412075, 0.019253365517185615, 0.01582086299841671, 0.020713464810472926, 0.017605326916071192, 0.01814944484690312, 0.019113177044948478, 0.017941111283581557, 0.019621607131440656, 0.019461764802790344, 0.019757201678836073, 0.019822841033912044, 0.019506557580362835, 0.019739419665973056, 0.019978518882325817, 0.02002221618334728, 0.019359153696241013, 0.019312473610220822, 0.020337966105059765, 0.020102142227297504, 0.021126050064684446, 0.020976257746351402, 0.021044834477319658, 0.020317758896399227, 0.0200486995816333, 0.020404244829048998, 0.020614816858424662, 0.020603091364985348, 0.021137332577545274, 0.021308111484886327, 0.020907344452878875, 0.020713131112554708, 0.020507298572473655, 0.02027689342708258, 0.02032657887693934, 0.02042575419986146, 0.020303106523978792, 0.020597761111845726, 0.020707431415402388, 0.020586684333560302, 0.021572290871923396, 0.02160090076949097, 0.021811805741678826, 0.02278511894020245, 0.022692153810900347, 0.022755106405525284, 0.022755106405525284, 0.022776796820514752, 0.022776796820514752, 0.022359021933136485, 0.022258067793240657, 0.022241417514768342, 0.02214531082932376, 0.022220545714153515, 0.022316328398140805, 0.022236057080497487, 0.022247353656790148, 0.022160874855919395, 0.022177585603531634, 0.022177585603531634, 0.022177585603531634, 0.022198983046097867], "accuracy_valid": [0.5439673733998494, 0.6169477715549698, 0.6389321936182228, 0.6780270496046686, 0.7081284120858433, 0.7270699006965362, 0.7253815064947289, 0.7168968844126506, 0.6877117846385542, 0.6771519672439759, 0.6711602268448795, 0.6919239457831325, 0.7146804993411144, 0.7409565017884037, 0.7398578689759037, 0.7488307723079819, 0.7541106810052711, 0.7732668957078314, 0.7761053981551205, 0.7787394695971386, 0.784569430064006, 0.7842532238328314, 0.7844973644578314, 0.7847620952560241, 0.7848841655685241, 0.7857695430158133, 0.7863798945783133, 0.7871226115399097, 0.7874888224774097, 0.7873667521649097, 0.7866343302899097, 0.7859019084149097, 0.7851694865399097, 0.7846709102033133, 0.7850371211408133, 0.7850474162274097, 0.7850474162274097, 0.785057711314006, 0.784813570689006, 0.784691500376506, 0.7845591349774097, 0.7850474162274097, 0.7849253459149097, 0.7845591349774097, 0.7848032756024097, 0.785057711314006, 0.785545992564006, 0.785668062876506, 0.785179781626506, 0.785301851939006, 0.785179781626506, 0.785057711314006, 0.785301851939006, 0.785057711314006, 0.784813570689006, 0.784813570689006, 0.784691500376506, 0.7849459360881024, 0.7851900767131024, 0.7853121470256024, 0.7853224421121988, 0.7854445124246988, 0.7854445124246988, 0.7854445124246988, 0.7855665827371988, 0.7855665827371988, 0.7858107233621988, 0.7856886530496988, 0.7858107233621988, 0.7856886530496988, 0.7856886530496988, 0.7858107233621988, 0.7858107233621988, 0.7856886530496988, 0.7858107233621988, 0.7856886530496988, 0.7856886530496988, 0.7856886530496988, 0.7855665827371988], "seed": 915125517, "model": "residualv3", "loss_std": [0.2716473937034607, 0.12187328934669495, 0.10074463486671448, 0.09311260282993317, 0.0864281877875328, 0.08090692013502121, 0.0762745663523674, 0.07091591507196426, 0.06588532030582428, 0.06081193685531616, 0.05429696664214134, 0.04918171465396881, 0.04298047721385956, 0.03681478276848793, 0.031397320330142975, 0.025159671902656555, 0.019317468628287315, 0.015259787440299988, 0.011432097293436527, 0.006412680726498365, 0.004349288064986467, 0.0025936609599739313, 0.0011528910836204886, 0.0011438780929893255, 0.0005174848483875394, 0.000387995271012187, 0.0003178825427312404, 0.0002685600775294006, 0.00023109620087780058, 0.00020143196161370724, 0.0001773256663000211, 0.0001571728935232386, 0.00014002632815390825, 0.00012536613212432712, 0.00011272782285232097, 0.00010164742707274854, 9.194970334647223e-05, 8.341739885509014e-05, 7.585855200886726e-05, 6.917159771546721e-05, 6.318176747299731e-05, 5.782641164842062e-05, 5.302374847815372e-05, 4.870857810601592e-05, 4.4834494474343956e-05, 4.1368475649505854e-05, 3.8254329410847276e-05, 3.544267383404076e-05, 3.290323002147488e-05, 3.0604107450926676e-05, 2.852932630048599e-05, 2.6667639758670703e-05, 2.4981864044093527e-05, 2.3462400349671952e-05, 2.2085463569965214e-05, 2.0848454369115643e-05, 1.9741662981687114e-05, 1.87461992027238e-05, 1.7848115021479316e-05, 1.7046988432412036e-05, 1.632254134165123e-05, 1.567434628668707e-05, 1.5092987268872093e-05, 1.4572769941878505e-05, 1.410516688338248e-05, 1.3684906662092544e-05, 1.3306997061590664e-05, 1.2967881957592908e-05, 1.2661480468523223e-05, 1.2387472452246584e-05, 1.2140289072704036e-05, 1.191760748042725e-05, 1.1715605978679378e-05, 1.1533313227118924e-05, 1.1369034837116487e-05, 1.1221341992495582e-05, 1.1087319762737025e-05, 1.0967014532070607e-05, 1.0857943379960489e-05]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:31 2016", "state": "available"}], "summary": "12134a6255eceb85293c861bccc6f137"}