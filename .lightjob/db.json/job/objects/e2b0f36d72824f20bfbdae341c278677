{"content": {"hp_model": {"f0": 32, "f1": 32, "f2": 16, "f3": 32, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.8363860845565796, 1.5445005893707275, 1.394490361213684, 1.303373098373413, 1.2366853952407837, 1.1832526922225952, 1.1392831802368164, 1.1024774312973022, 1.0701898336410522, 1.0415244102478027, 1.0158110857009888, 0.9924440979957581, 0.9706996083259583, 0.9502925276756287, 0.9312062859535217, 0.9133849740028381, 0.89626145362854, 0.8797471523284912, 0.8640884757041931, 0.8489529490470886, 0.834101676940918, 0.8196617364883423, 0.805493175983429, 0.7916514873504639, 0.7782046794891357, 0.7648680806159973, 0.7518589496612549, 0.7388653755187988, 0.7261297106742859, 0.7136470675468445, 0.7013161778450012, 0.6889219880104065, 0.6768532395362854, 0.6647184491157532, 0.6528208255767822, 0.6408513784408569, 0.6289803385734558, 0.61722332239151, 0.6054401397705078, 0.5939350128173828, 0.5824097394943237, 0.5710394382476807, 0.5598068237304688, 0.5486354827880859, 0.537467360496521, 0.5265152454376221, 0.5156119465827942, 0.5047760009765625, 0.49409377574920654, 0.48358118534088135, 0.4729355573654175, 0.4624720513820648, 0.4521959722042084, 0.4422134757041931, 0.4324091970920563, 0.42285510897636414, 0.41355228424072266, 0.4044634997844696, 0.39556610584259033, 0.3870445191860199, 0.37874454259872437, 0.37044471502304077, 0.36260831356048584, 0.3549271821975708, 0.3474849760532379, 0.34040307998657227, 0.33351200819015503, 0.3267328441143036, 0.3202582597732544, 0.31410449743270874, 0.3080574572086334, 0.3023078143596649, 0.2968408465385437, 0.2914522886276245, 0.28628814220428467], "moving_avg_accuracy_train": [0.0379880469326781, 0.07900262831937521, 0.12599546992519148, 0.17275230371778677, 0.21814167225243114, 0.2605749895406155, 0.3005178849606311, 0.33761929601352514, 0.37153594144562596, 0.4031116733035089, 0.43229698688747137, 0.4592751565022956, 0.48455507080200144, 0.5078347303538611, 0.5295605182600124, 0.5494136715719772, 0.5679465021122693, 0.585009663103285, 0.6011917916273049, 0.6163532344941517, 0.6304146986623999, 0.6435046389971104, 0.6558457659173514, 0.6672783730765391, 0.6779954387543042, 0.6880615056035415, 0.6974742802404466, 0.7062920443421863, 0.7144581136194387, 0.7221400001510903, 0.7295698450164722, 0.7366240068095831, 0.7431309346400681, 0.7492150342708379, 0.7550906495337688, 0.7608552145810841, 0.7661037769927154, 0.7712714784393464, 0.7761270228365524, 0.7806155953833236, 0.7849830845599229, 0.7893415440533584, 0.7934524586022031, 0.797417348660449, 0.8012367936866615, 0.8051090609888147, 0.8087265629452581, 0.8118660212167622, 0.8149542754765922, 0.8180730678901733, 0.8209613973195484, 0.823930484320244, 0.8268699826363277, 0.8299294797065359, 0.8328573771816187, 0.8356970619556126, 0.8380970293307877, 0.8406405774243793, 0.8432342210073843, 0.8458591077844606, 0.8481517153707248, 0.8506660689697727, 0.8531335282065164, 0.8553728787588806, 0.8577068396429132, 0.8600397751242198, 0.862099889527634, 0.8641050550656882, 0.8660189499951659, 0.8678623631697912, 0.8698003447376403, 0.871642148349886, 0.873699697196145, 0.8756328713661116, 0.8778609733202627], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.03737028190888553, 0.07801478374435239, 0.12365068771178461, 0.16874337967102782, 0.21179571127282562, 0.2517268917456936, 0.28887859780832303, 0.3231238858531684, 0.35426408692334854, 0.3830390148273992, 0.4096444577535448, 0.4339413012760066, 0.4565775034149722, 0.4772227580621798, 0.4964922285379648, 0.5139100531709906, 0.5299258331983945, 0.5447236007351063, 0.5584241275215354, 0.5710384518740506, 0.5824136988364949, 0.5929565968839448, 0.6026791977377189, 0.6116370580373657, 0.6197357534007978, 0.6270134017052964, 0.6334045937730951, 0.6389195854970657, 0.644067213026049, 0.6486013920434742, 0.6527655433605877, 0.6566241723358994, 0.6597388164727914, 0.6625542032272442, 0.6651867370649114, 0.6674705683000618, 0.6694792473040165, 0.6714101582287353, 0.6730869429047323, 0.6744597127520602, 0.6756432889636764, 0.6769058790714504, 0.6780320621545162, 0.6789591482018658, 0.6800031041930497, 0.6809792856788651, 0.6816604774987798, 0.6821260362530434, 0.6824351758506306, 0.6826991354398898, 0.6827800666812924, 0.6829007034148952, 0.6831313467876376, 0.6832534766043558, 0.6832392641095829, 0.6831298461229469, 0.6829723937960439, 0.6826831728181714, 0.682413755432815, 0.6819627307460847, 0.6813238454256179, 0.6809197470746977, 0.6807147499651195, 0.6803105260039992, 0.6798480386803313, 0.6793331143303705, 0.678783203687996, 0.6782028348911091, 0.6776296158315916, 0.6770282694592759, 0.676486028215532, 0.6759003548461626, 0.6754464910012301, 0.6749494757960619, 0.6745387832051606], "moving_var_accuracy_train": [0.01298782538783419, 0.026828805825984785, 0.044020869703090326, 0.05929459628955672, 0.07190688964436492, 0.08092147842464595, 0.08718824463299008, 0.09085805248873335, 0.09212529677616162, 0.09188600867979378, 0.09036345057276245, 0.08787750023738226, 0.08484141681664828, 0.08123475807463787, 0.07735937100846174, 0.07317076317547097, 0.06894487912844054, 0.06467075438264433, 0.060560430496491, 0.05657321159508385, 0.05269541340656981, 0.04896799090760937, 0.04544192253980191, 0.042074070843928515, 0.038900363230209435, 0.03592225822350833, 0.03312743533844395, 0.03051446847838493, 0.028063183817514405, 0.025787967861929488, 0.02370599442824932, 0.02178324577285487, 0.01998598218368965, 0.01832053038017489, 0.01679918303461929, 0.015418336622819918, 0.014124429627037033, 0.01295233290850694, 0.011869286420195394, 0.010863683329744502, 0.009948989652139466, 0.009125056209328785, 0.008364647154247031, 0.007669665617388123, 0.007033992498423638, 0.006465543335115208, 0.005936765885247532, 0.005431795080869418, 0.004974451402142692, 0.004564548056999521, 0.004183175273332915, 0.00384419704455892, 0.0035375431932553616, 0.003268033574833335, 0.0030183834699713708, 0.0027891194095151094, 0.002562046059180746, 0.002364068185402392, 0.002188204250183122, 0.0020313941004970384, 0.0018755591363486986, 0.0017449009889032327, 0.0016252060857778333, 0.0015078176952674162, 0.0014060622864144215, 0.0013144393494124368, 0.0012211920566675822, 0.0011352590505158276, 0.0010547000896739685, 0.0009798136298980063, 0.0009156342199241162, 0.0008546009628464317, 0.0008072424318544678, 0.0007601526500118529, 0.0007288173298734958], "duration": 15778.562835, "accuracy_train": [0.3798804693267811, 0.4481338607996493, 0.5489310443775379, 0.5935638078511444, 0.6266459890642304, 0.6424748451342747, 0.6600039437407714, 0.6715319954895718, 0.676785750334533, 0.6872932600244555, 0.6949648091431341, 0.7020786830357143, 0.712074299499354, 0.717351666320598, 0.7250926094153747, 0.7280920513796604, 0.7347419769748985, 0.7385781120224253, 0.7468309483434846, 0.7528062202957733, 0.7569678761766335, 0.7613141020095053, 0.7669159081995202, 0.7701718375092286, 0.7744490298541897, 0.7786561072466777, 0.7821892519725913, 0.7856519212578442, 0.7879527371147103, 0.7912769789359542, 0.7964384488049095, 0.8001114629475821, 0.8016932851144334, 0.8039719309477666, 0.8079711869001477, 0.8127363000069213, 0.8133408386973975, 0.8177807914590256, 0.8198269224114065, 0.8210127483042636, 0.8242904871493172, 0.8285676794942783, 0.8304506895418051, 0.8331013591846622, 0.8356117989225729, 0.8399594667081949, 0.8412840805532484, 0.8401211456602989, 0.8427485638150609, 0.846142199612403, 0.8469563621839239, 0.8506522673265043, 0.8533254674810816, 0.8574649533384091, 0.8592084544573644, 0.8612542249215578, 0.8596967357073644, 0.8635325102667036, 0.8665770132544297, 0.869483088778147, 0.8687851836471022, 0.8732952513612033, 0.8753406613372092, 0.8755270337301587, 0.8787124875992063, 0.8810361944559801, 0.8806409191583611, 0.8821515449081765, 0.8832440043604651, 0.8844530817414176, 0.8872421788482835, 0.888218380860096, 0.8922176368124769, 0.8930314388958103, 0.8979138909076227], "end": "2016-02-01 14:10:01.280000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0], "moving_var_accuracy_valid": [0.012568841729546197, 0.026179737321670997, 0.04230548516782616, 0.056375094464224326, 0.06741911432496232, 0.07502769545807692, 0.07994716928254537, 0.08250711013376072, 0.08298380822460588, 0.08213739568509514, 0.08029430245625314, 0.07757790165702277, 0.07443169031680551, 0.07082456014015738, 0.067083916557896, 0.06310595043662796, 0.05910390228194089, 0.05516427737038184, 0.05133718954137462, 0.04763556119707126, 0.044036571268473525, 0.04063328843477648, 0.03742072029755513, 0.034400837618131515, 0.03155105365562545, 0.028872625773658643, 0.026352989220720213, 0.02399142650208737, 0.021830766474472945, 0.019832718841284184, 0.018005508362882124, 0.01633895868471595, 0.014792371889139637, 0.013384472323420007, 0.012108397200736169, 0.01094450044665839, 0.009886363524060906, 0.008931282924647604, 0.008063459093829767, 0.007274073657930386, 0.006559273965975683, 0.005917693773400352, 0.005337338991089569, 0.004811340488833324, 0.004340015036953751, 0.003914589905897617, 0.0035273071159675237, 0.0031765271089538145, 0.0028597345036756004, 0.002574388125290898, 0.002317008261554323, 0.0020854384143923397, 0.0018773733402416158, 0.0016897702474466389, 0.001520795040657044, 0.001368823287253535, 0.0012321640796454064, 0.0011097005106472393, 0.0009993837311303056, 0.0009012761674296365, 0.0008148221207610457, 0.0007348095679798891, 0.0006617068255163189, 0.0005970067160613816, 0.0005392310951762258, 0.0004876943094342466, 0.0004416464939221915, 0.00040051329599357244, 0.0003634191872059628, 0.0003303318256208428, 0.0002999448731565105, 0.00027303750550115684, 0.00024758768645867366, 0.00022505213484032174, 0.00020406493699428116], "accuracy_test": 0.23312938456632654, "start": "2016-02-01 09:47:02.717000", "learning_rate_per_epoch": [0.004510191734880209, 0.003189187264069915, 0.002603960456326604, 0.0022550958674401045, 0.002017019083723426, 0.0018412781646475196, 0.0017046922584995627, 0.0015945936320349574, 0.0015033973613753915, 0.0014262478798627853, 0.001359874033369124, 0.001301980228163302, 0.0012509021908044815, 0.0012053995160385966, 0.0011645265622064471, 0.0011275479337200522, 0.0010938822524622083, 0.0010630624601617455, 0.0010347090428695083, 0.001008509541861713, 0.0009842045838013291, 0.000961576122790575, 0.0009404400479979813, 0.0009206390823237598, 0.000902038358617574, 0.000884521403349936, 0.0008679868187755346, 0.0008523461292497814, 0.0008375216275453568, 0.0008234446286223829, 0.0008100543636828661, 0.0007972968160174787, 0.0007851236150600016, 0.0007734915125183761, 0.0007623615674674511, 0.0007516986806876957, 0.0007414710125885904, 0.0007316497503779829, 0.0007222087006084621, 0.0007131239399313927, 0.000704373640473932, 0.000695937720593065, 0.0006877978448756039, 0.000679937016684562, 0.0006723396945744753, 0.0006649915012530982, 0.0006578791071660817, 0.000650990114081651, 0.0006443131132982671, 0.000637837452813983, 0.0006315531791187823, 0.0006254510954022408, 0.0006195225287228823, 0.0006137593882158399, 0.0006081541650928557, 0.0006026997580192983, 0.0005973895313218236, 0.0005922171985730529, 0.0005871769972145557, 0.0005822632811032236, 0.000577470927964896, 0.0005727949319407344, 0.0005682307528331876, 0.0005637739668600261, 0.0005594204412773252, 0.0005551662761718035, 0.0005510076298378408, 0.0005469411262311041, 0.0005429633310995996, 0.000539071043021977, 0.0005352612934075296, 0.0005315312300808728, 0.0005278780590742826, 0.0005242991610430181, 0.0005207920912653208], "accuracy_train_first": 0.3798804693267811, "accuracy_train_last": 0.8979138909076227, "batch_size_eval": 1024, "accuracy_train_std": [0.018661092968161593, 0.016866659614000596, 0.016555904704524144, 0.017287639953227345, 0.015732476771017745, 0.015777756969071723, 0.015505930439728642, 0.016687299174020197, 0.01682218800794825, 0.015968529728656564, 0.015524644993348593, 0.015742837225977475, 0.015536376395674175, 0.01622524105278234, 0.01691678774190429, 0.016616901554687768, 0.016134767752995022, 0.015548984773780155, 0.01440570249151567, 0.014095045953357596, 0.014569595505956635, 0.015122613741401603, 0.014449152399701974, 0.013600238499774342, 0.013544640923026475, 0.014014968576296185, 0.014257944436540436, 0.014816970866064467, 0.01518022992339003, 0.015930448091013245, 0.015534337893211035, 0.016106620028568445, 0.01618291999179964, 0.01570315737005265, 0.015529899822804876, 0.01606746521642085, 0.017019539207652482, 0.01658532685105731, 0.016633102836422744, 0.01668475400180585, 0.016643753340221515, 0.016344978979919447, 0.01555208728744749, 0.015570755749983184, 0.01596476850898697, 0.016113349505987386, 0.016489007982734852, 0.017013832994101804, 0.016658306628221042, 0.016751377031077146, 0.01654001923478825, 0.016736330054154546, 0.01666053894736769, 0.015258145069232426, 0.015447982365096362, 0.015286807406615551, 0.015660868732317933, 0.01644070086475617, 0.015936284934025744, 0.016408727517969728, 0.016726141324690327, 0.017072928761541765, 0.01701001462409534, 0.017236503755315023, 0.017395333535737363, 0.01779840763338258, 0.018172281902274153, 0.017920251188025937, 0.01770406685961209, 0.017177878566779572, 0.017152745184741934, 0.017366817372774863, 0.016860888230773818, 0.016624688173391976, 0.01676456812389263], "accuracy_test_std": 0.012161045789188085, "error_valid": [0.6262971809111446, 0.5561846997364458, 0.4656261765813253, 0.4254223926957832, 0.40073330431099397, 0.38889248399849397, 0.37675604762801207, 0.36866852174322284, 0.3654741034450302, 0.3579866340361446, 0.3509065559111446, 0.3473871070218373, 0.3396966773343373, 0.33696995011295183, 0.3300825371799698, 0.32932952513177716, 0.3259321465549698, 0.32209649143448793, 0.31827113140060237, 0.31543262895331325, 0.31520907850150603, 0.31215732068900603, 0.30981739457831325, 0.30774219926581325, 0.30737598832831325, 0.3074877635542168, 0.3090746776167168, 0.3114454889871988, 0.30960413921310237, 0.3105909967996988, 0.3097570947853916, 0.30864816688629515, 0.3122293862951807, 0.3121073159826807, 0.31112045839608427, 0.31197495058358427, 0.3124426416603916, 0.31121164344879515, 0.31182199501129515, 0.31318535862198793, 0.31370452513177716, 0.31173080995858427, 0.3118322900978916, 0.31269707737198793, 0.31060129188629515, 0.31023508094879515, 0.31220879612198793, 0.31368393495858427, 0.31478256777108427, 0.31492522825677716, 0.31649155214608427, 0.3160135659826807, 0.3147928628576807, 0.3156473550451807, 0.3168886483433735, 0.31785491575677716, 0.31844467714608427, 0.3199198159826807, 0.3200110010353916, 0.32209649143448793, 0.32442612245858427, 0.32271713808358427, 0.32113022402108427, 0.32332748964608427, 0.3243143472326807, 0.32530120481927716, 0.3261659920933735, 0.3270204842808735, 0.32752935570406627, 0.32838384789156627, 0.3283941429781627, 0.3293707054781627, 0.3286382836031627, 0.32952366105045183, 0.32915745011295183], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.03318144342525727, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "valid_ratio": 0.15, "learning_rate": 0.004510191928336573, "optimization": "nesterov_momentum", "nb_data_augmentation": 0, "learning_rate_decay_method": "sqrt", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 7.356240837463459e-05, "rotation_range": [0, 0], "momentum": 0.7148492444372858}, "accuracy_valid_max": 0.6926240116716867, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.6708425498870482, "accuracy_valid_std": [0.011664144983049709, 0.013610550109342433, 0.011680552217572781, 0.010057442701613259, 0.017378869340109297, 0.018887462478753853, 0.015742642468953662, 0.014737015091471777, 0.015462285273405405, 0.014190780483510454, 0.015009655794908058, 0.016792397523545142, 0.01951173185575814, 0.016858305006762286, 0.0140082160507295, 0.01220322298008561, 0.015409527929319447, 0.01178946367825962, 0.01137923863235053, 0.010302259142889273, 0.010954494621089961, 0.011535332019869041, 0.01163767407738662, 0.011521742747329733, 0.009494750679569515, 0.009388578956726786, 0.009535484718444565, 0.012058204974018969, 0.01212010043507097, 0.012494008107607075, 0.014712813615894826, 0.012723588664938515, 0.015521472482534004, 0.015946968012292385, 0.01615776343127592, 0.01586235522613557, 0.013710795676725977, 0.01310907370600537, 0.013249580383860144, 0.014048309273638674, 0.01715591032920231, 0.015097460585741653, 0.013716392310021999, 0.014148146740439243, 0.013184706674273836, 0.012828215794036917, 0.01366647926685196, 0.014349355871663319, 0.01356816117114017, 0.015555457997752077, 0.013048876700022801, 0.014373255557518992, 0.014237666470092563, 0.013708746594984129, 0.016443536452518785, 0.015233301878667138, 0.012465810775840483, 0.012968172054818889, 0.010252297753875652, 0.010077685096392798, 0.01125101384004349, 0.011468480055829317, 0.011300396002486463, 0.012326427104339224, 0.012972546037957772, 0.013773953703412776, 0.013995500394790162, 0.013879860702363368, 0.01561061607101718, 0.015970772928735562, 0.017437148045972593, 0.016501382615879107, 0.01628616898009263, 0.018844493079884013, 0.01900972479984648], "accuracy_valid": [0.3737028190888554, 0.4438153002635542, 0.5343738234186747, 0.5745776073042168, 0.599266695689006, 0.611107516001506, 0.6232439523719879, 0.6313314782567772, 0.6345258965549698, 0.6420133659638554, 0.6490934440888554, 0.6526128929781627, 0.6603033226656627, 0.6630300498870482, 0.6699174628200302, 0.6706704748682228, 0.6740678534450302, 0.6779035085655121, 0.6817288685993976, 0.6845673710466867, 0.684790921498494, 0.687842679310994, 0.6901826054216867, 0.6922578007341867, 0.6926240116716867, 0.6925122364457832, 0.6909253223832832, 0.6885545110128012, 0.6903958607868976, 0.6894090032003012, 0.6902429052146084, 0.6913518331137049, 0.6877706137048193, 0.6878926840173193, 0.6888795416039157, 0.6880250494164157, 0.6875573583396084, 0.6887883565512049, 0.6881780049887049, 0.6868146413780121, 0.6862954748682228, 0.6882691900414157, 0.6881677099021084, 0.6873029226280121, 0.6893987081137049, 0.6897649190512049, 0.6877912038780121, 0.6863160650414157, 0.6852174322289157, 0.6850747717432228, 0.6835084478539157, 0.6839864340173193, 0.6852071371423193, 0.6843526449548193, 0.6831113516566265, 0.6821450842432228, 0.6815553228539157, 0.6800801840173193, 0.6799889989646084, 0.6779035085655121, 0.6755738775414157, 0.6772828619164157, 0.6788697759789157, 0.6766725103539157, 0.6756856527673193, 0.6746987951807228, 0.6738340079066265, 0.6729795157191265, 0.6724706442959337, 0.6716161521084337, 0.6716058570218373, 0.6706292945218373, 0.6713617163968373, 0.6704763389495482, 0.6708425498870482], "seed": 260643682, "model": "residualv3", "loss_std": [0.23584741353988647, 0.13692648708820343, 0.13225126266479492, 0.12998609244823456, 0.12841138243675232, 0.12732438743114471, 0.12620249390602112, 0.1253662258386612, 0.12455136328935623, 0.12393598258495331, 0.12343347072601318, 0.12288763374090195, 0.12198852747678757, 0.12114845216274261, 0.12053531408309937, 0.11964212357997894, 0.11885523796081543, 0.1179651990532875, 0.11710495501756668, 0.11591341346502304, 0.11490852385759354, 0.11388559639453888, 0.11267679929733276, 0.11161042004823685, 0.11033117771148682, 0.1092560887336731, 0.1080804392695427, 0.10698582231998444, 0.1057838723063469, 0.10473461449146271, 0.10371913015842438, 0.10246922075748444, 0.10132868587970734, 0.10008814185857773, 0.09882111847400665, 0.09736475348472595, 0.09586714953184128, 0.09445028007030487, 0.09305088967084885, 0.0915723592042923, 0.09004079550504684, 0.08835601061582565, 0.08681280165910721, 0.08504921197891235, 0.08326497673988342, 0.08162631094455719, 0.08002939820289612, 0.07825394719839096, 0.07658436894416809, 0.07488032430410385, 0.07301723957061768, 0.07128234952688217, 0.0695507600903511, 0.06763897836208344, 0.06577324867248535, 0.06400031596422195, 0.0621124766767025, 0.06033788621425629, 0.058497924357652664, 0.0568246990442276, 0.054893963038921356, 0.053122878074645996, 0.051355503499507904, 0.04954223707318306, 0.047950614243745804, 0.0464656725525856, 0.044694676995277405, 0.04317839443683624, 0.041662950068712234, 0.040099676698446274, 0.03865283355116844, 0.03720714896917343, 0.035784728825092316, 0.034339841455221176, 0.03286387771368027]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:28 2016", "state": "available"}], "summary": "feef846af56bd56b75fc0243e94a4c38"}