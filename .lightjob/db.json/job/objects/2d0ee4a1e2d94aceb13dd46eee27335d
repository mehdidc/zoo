{"content": {"hp_model": {"f0": 64, "f1": 16, "f2": 16, "f3": 32, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.8123689889907837, 1.561421275138855, 1.4591549634933472, 1.3817692995071411, 1.31967294216156, 1.26774263381958, 1.2224159240722656, 1.182421326637268, 1.1468340158462524, 1.114575743675232, 1.0853006839752197, 1.0578336715698242, 1.032610297203064, 1.0087110996246338, 0.98614501953125, 0.9643082618713379, 0.9435100555419922, 0.9237568378448486, 0.9047306776046753, 0.8864875435829163, 0.8688939213752747, 0.8516060709953308, 0.8349354863166809, 0.8188537359237671, 0.8028458952903748, 0.787412703037262, 0.7719790935516357, 0.7571674585342407, 0.7424473762512207, 0.7280227541923523, 0.7133843898773193, 0.6991288661956787, 0.6848994493484497, 0.6705719232559204, 0.6566433906555176, 0.6424184441566467, 0.6281179189682007, 0.613916277885437, 0.5997189283370972, 0.5854392051696777, 0.5713593363761902, 0.5575070977210999, 0.5431993007659912, 0.529201865196228, 0.5153677463531494, 0.5014434456825256, 0.48716115951538086, 0.4728724956512451, 0.45822834968566895, 0.44367706775665283, 0.4288959503173828, 0.4148492217063904, 0.3999706208705902, 0.38555970788002014, 0.3709927201271057, 0.35655730962753296, 0.34139153361320496, 0.32731539011001587, 0.31258586049079895, 0.29897940158843994, 0.2860521972179413, 0.2736317813396454, 0.2599770128726959, 0.24652041494846344, 0.23419086635112762, 0.2269238382577896, 0.21536363661289215, 0.20811253786087036, 0.19827689230442047, 0.19062983989715576, 0.18429233133792877, 0.18371586501598358, 0.18391147255897522, 0.1773904263973236, 0.16341088712215424, 0.16291065514087677, 0.15792593359947205, 0.15724074840545654, 0.15201371908187866, 0.1398252248764038, 0.13774634897708893, 0.13348770141601562, 0.1352226585149765, 0.1337968111038208, 0.11783560365438461, 0.11881810426712036, 0.12003274261951447], "moving_avg_accuracy_train": [0.042418338610880395, 0.08543254076400422, 0.12718393170767578, 0.1671781580747912, 0.2051790605443516, 0.24138571916438117, 0.2756060752425905, 0.3078805768164765, 0.33797634244370667, 0.3660970064355394, 0.3923424227055144, 0.41714407640672374, 0.4406070325591946, 0.4625070519523154, 0.48313535899061094, 0.5026050658702504, 0.520855429444032, 0.5379502913711219, 0.5541424576935889, 0.5693568600646878, 0.5836123279664877, 0.5970907493030523, 0.6097514263857131, 0.621548214406518, 0.6325163489978429, 0.6428338103109139, 0.6525380162295734, 0.6618599560587202, 0.6706843965858769, 0.6789682620329555, 0.6868932047019375, 0.6944301208504222, 0.7016641719113748, 0.7085768883661859, 0.7151750072826588, 0.7214062830574844, 0.7273677457274189, 0.733156131067237, 0.7385863867658843, 0.7437828256375147, 0.748687413107678, 0.7534037390784254, 0.7579298115068693, 0.7621845301531555, 0.7662252212812046, 0.7699618246952584, 0.7734735051940789, 0.776810728952541, 0.7800862366970525, 0.7830853469409224, 0.7858590230199475, 0.7884296641553374, 0.790775757211703, 0.7929730551754718, 0.7949179991618928, 0.7968591470008715, 0.7986921745130859, 0.8003699092062495, 0.8021099520157833, 0.8035063628277247, 0.8048723785037007, 0.8065388484906323, 0.8082385621788521, 0.8094311579208691, 0.810955428762457, 0.8118973362830367, 0.8131565683420254, 0.8141690776034762, 0.8153568844518403, 0.8163585533975293, 0.8170671401950964, 0.8183837036188315, 0.8196940966382699, 0.8209921050426876, 0.8212350115269293, 0.8228716797460064, 0.822884595837251, 0.8236307150014495, 0.8247301938254555, 0.8254522605563281, 0.8263531285390859, 0.8261993695046218, 0.8252287272950695, 0.8253293506088442, 0.827393674539977, 0.8288074626553776, 0.828645543534312], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.04207734257341866, 0.08404968997082077, 0.1247881697689194, 0.16345284276755456, 0.20024491259471477, 0.23559680970120714, 0.26888350839034847, 0.3002707893754853, 0.32969739431406625, 0.35689949458521986, 0.38199276590041775, 0.4055665091240055, 0.4275163294088941, 0.4481531624412728, 0.46748726614255215, 0.4856611204770921, 0.502359386253178, 0.5180002360314747, 0.532506305943011, 0.5462066825023243, 0.5591016333691852, 0.5712584645729294, 0.5825811191510281, 0.5928447504588168, 0.6022895381670768, 0.6110004551617395, 0.6189613212607763, 0.6264587791196384, 0.6332420827777047, 0.6396034037262144, 0.6452930009947827, 0.6506211580677442, 0.6554928301468884, 0.6599373406657085, 0.6639994647975563, 0.6677509737489, 0.6713857384786788, 0.6745105423604796, 0.67742155161276, 0.679966158734993, 0.6821209982925931, 0.6840837384482736, 0.6859428603677535, 0.6875062068140354, 0.6887423201781891, 0.6898059940809274, 0.6906635853260725, 0.6914974821116129, 0.6921147413835088, 0.6925084947959863, 0.6925332830234661, 0.6923969010219478, 0.6919658929133524, 0.6913195789420473, 0.6908976172827824, 0.690234001544715, 0.689588948764114, 0.6889575141192539, 0.6884055480047683, 0.6876646378767313, 0.686970316173019, 0.6864949995406568, 0.6862248764691213, 0.6856633533835796, 0.6847001453983843, 0.6835769105554586, 0.6827724892194158, 0.6812682895256369, 0.6804272051137358, 0.6790720846117748, 0.6783357569393774, 0.6779527942443101, 0.6774382588899093, 0.6765274878766714, 0.6756061667527844, 0.6750374434321746, 0.673677130235418, 0.6726461018410177, 0.6721596884283767, 0.6712040735012017, 0.6703287245095153, 0.6687851039881572, 0.667230094624733, 0.6661591465327417, 0.666288925591817, 0.6657718435559786, 0.6644805096333627], "moving_var_accuracy_train": [0.01619383905456576, 0.03122644943093742, 0.04379241229942537, 0.053809014353819455, 0.06142473021494687, 0.06708055634929845, 0.07091179564544356, 0.07319540714748414, 0.07402766241093825, 0.07374184185991844, 0.07256705455058504, 0.07084644733235894, 0.06871639540183798, 0.06616125350642578, 0.06337487161717896, 0.060449009829272815, 0.05740179078152244, 0.05429172044212663, 0.05122222464984387, 0.04818330454044676, 0.04519393937229533, 0.042309556010599436, 0.03952123510726221, 0.03682158946500623, 0.03422213030622638, 0.031757967347124196, 0.02942971512501748, 0.02726883067211983, 0.02524278436046379, 0.02333610776512514, 0.021567739435372497, 0.019922211437098856, 0.018400973746161196, 0.016990947210606636, 0.015683669048669236, 0.014464761323839677, 0.01333813652594091, 0.012305871516926808, 0.01134067345780835, 0.010449632904546844, 0.009621164418364503, 0.008859241552489181, 0.008157685381887944, 0.0075048405205306425, 0.006901301131608236, 0.006336830864112677, 0.00581413487703357, 0.005332954951056614, 0.004896220014810146, 0.004487549973623098, 0.004108034487182995, 0.0037567048010873237, 0.0034305716946407285, 0.0031309675902508978, 0.002851916095218647, 0.002600636980091727, 0.0023708131908273694, 0.002159065015050433, 0.0019704082543564815, 0.0017909170973221954, 0.001628619377033089, 0.0014907515392858714, 0.001367677624954583, 0.0012437104238940174, 0.0011402499958912508, 0.001034209704298047, 0.0009450597222737062, 0.0008597803250870491, 0.0007865002585595295, 0.0007168802987943956, 0.0006497111261621339, 0.0006003400667843742, 0.0005557602288944725, 0.0005153476383664772, 0.0004643439065706097, 0.00044201766164758184, 0.00039781739691154103, 0.00036304590148504524, 0.00033762099449648, 0.00030855131832133057, 0.0002850002545904194, 0.0002567130056974916, 0.0002395210218184227, 0.00021566004509805545, 0.00023244694022208338, 0.00022719141771710698, 0.00020470823616129628], "duration": 33657.217854, "accuracy_train": [0.424183386108804, 0.4725603601421189, 0.5029464502007198, 0.5271261953788299, 0.547187182770395, 0.5672456467446475, 0.5835892799464747, 0.5983510909814507, 0.6088382330887782, 0.619182982362034, 0.6285511691352897, 0.640358959717608, 0.6517736379314323, 0.6596072264904024, 0.6687901223352712, 0.6778324277870063, 0.6851087016080657, 0.6918040487149317, 0.6998719545957918, 0.7062864814045773, 0.7119115390826873, 0.7183965413321337, 0.7236975201296604, 0.7277193065937615, 0.7312295603197674, 0.735690962128553, 0.7398758694975083, 0.745757414521041, 0.7501043613302879, 0.753523051056663, 0.758217688722776, 0.7622623661867847, 0.7667706314599483, 0.7707913364594868, 0.7745580775309154, 0.7774877650309154, 0.781020909756829, 0.7852515991255999, 0.7874586880537099, 0.790550775482189, 0.7928287003391473, 0.7958506728151532, 0.7986644633628645, 0.8004769979697305, 0.8025914414336471, 0.8035912554217424, 0.8050786296834626, 0.8068457427787007, 0.809565806397656, 0.8100773391357512, 0.8108221077311739, 0.8115654343738464, 0.8118905947189923, 0.8127487368493909, 0.8124224950396824, 0.8143294775516795, 0.8151894221230158, 0.8154695214447213, 0.8177703373015872, 0.8160740601351975, 0.8171665195874861, 0.8215370783730158, 0.8235359853728312, 0.8201645195990217, 0.8246738663367479, 0.820374503968254, 0.8244896568729235, 0.8232816609565338, 0.8260471460871169, 0.8253735739087301, 0.8234444213732004, 0.8302327744324474, 0.8314876338132153, 0.8326741806824474, 0.8234211698851052, 0.8376016937177003, 0.8230008406584534, 0.8303457874792359, 0.8346255032415099, 0.8319508611341824, 0.8344609403839055, 0.8248155381944444, 0.8164929474090993, 0.8262349604328165, 0.8459725899201735, 0.8415315556939831, 0.8271882714447213], "end": "2016-02-03 21:08:19.772000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0], "moving_var_accuracy_valid": [0.01593452482236748, 0.0301961738545646, 0.04211317009544896, 0.05135646552872655, 0.058403726595353596, 0.06381116359707045, 0.06740208602395856, 0.0695283300903221, 0.07036882278519176, 0.06999152883912964, 0.06865942634289987, 0.06679497603475472, 0.06445162992612942, 0.06183937683197295, 0.05901970724216207, 0.05609033735030356, 0.05299079233463244, 0.04989343873725439, 0.04679792944203435, 0.043807439358633765, 0.040923213243499214, 0.03816098882339624, 0.03549871250131106, 0.03289692039977995, 0.03041006449348883, 0.028051978718131095, 0.02581715934773914, 0.02374135028207395, 0.021781334130524372, 0.019967398355361463, 0.01826200217353182, 0.016691305276325986, 0.01523577344831381, 0.01388997916724956, 0.012649488922687468, 0.011511204405126834, 0.010478987596381736, 0.009518968430441019, 0.008643337361198673, 0.007837278853737476, 0.007095340970034713, 0.006420478013299726, 0.005809537220773168, 0.005250579967695771, 0.004739273757167548, 0.004275529000993093, 0.0038545952655875313, 0.003475394193669189, 0.0031312838553809435, 0.002819550845591388, 0.0025376012911382433, 0.0022840085624774623, 0.002057279618136791, 0.0018553111520686497, 0.0016713825016387916, 0.0015082077241052093, 0.0013611317895025384, 0.0012286069979488522, 0.00110848829747783, 0.0010025799980904982, 0.0009066607419356619, 0.0008180280008510964, 0.000736881899029969, 0.000666031482707338, 0.0006077782610413003, 0.0005583553435484328, 0.0005083436523665181, 0.00047787283759874796, 0.00043645236073035936, 0.0004093342888308369, 0.00037328046591799627, 0.0003372723631585152, 0.0003059278465210198, 0.0002828005964159075, 0.00026216003029420074, 0.00023885504320342925, 0.00023162360682251832, 0.00021802842209080197, 0.0001983549619536947, 0.00018673826475968272, 0.00017496056099893274, 0.00017890938372466176, 0.00018278093243522645, 0.0001748252075333635, 0.0001574942702175972, 0.00014415120768191783, 0.00014474397661101395], "accuracy_test": 0.28431720344387756, "start": "2016-02-03 11:47:22.554000", "learning_rate_per_epoch": [0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195, 0.0001613441709196195], "accuracy_train_first": 0.424183386108804, "accuracy_train_last": 0.8271882714447213, "batch_size_eval": 1024, "accuracy_train_std": [0.016010407741034217, 0.01851836476405745, 0.015867725369378336, 0.01653454880240086, 0.0159002903247939, 0.017315522609095618, 0.01801622711914378, 0.018939097544633292, 0.017857324210103533, 0.017400002061351085, 0.017901129769809766, 0.017457478583624907, 0.017035910753735686, 0.017164704684751012, 0.018171825721874105, 0.018479636975166674, 0.017234277568023017, 0.017943779750850868, 0.016211735601749298, 0.017166796343032042, 0.017845109186642928, 0.018349279286886063, 0.018171977996922443, 0.017361941516510965, 0.017208895344657412, 0.01765422123213936, 0.017525040180515997, 0.017062717333528002, 0.016983718122740195, 0.015772540470439373, 0.017306947490389888, 0.017675401522749646, 0.019013467223065874, 0.020018272395238033, 0.01909230335104757, 0.01877258026032972, 0.019477926961331538, 0.01928646612027443, 0.019287726433387845, 0.019567141420827747, 0.01950396288901101, 0.019713131966721458, 0.019326369007285706, 0.01945092140697634, 0.020528687581879777, 0.020796583602810104, 0.020903922851603477, 0.020913478235180093, 0.02062505116470185, 0.021367300232385155, 0.020902807421218, 0.021465911811726038, 0.022246401267108237, 0.023087119894158337, 0.024105901709238764, 0.02357224008978873, 0.024190867533404978, 0.02335004461038263, 0.024377994821244718, 0.023616809200705604, 0.02396147426024816, 0.024181870554225934, 0.025130152509406707, 0.02621350113705597, 0.0262609723512956, 0.025225063058016396, 0.024112354095375828, 0.023991125914904377, 0.023641883368457343, 0.023820941195824466, 0.024153963415040617, 0.02514917283940588, 0.02438962617534044, 0.02352155078366818, 0.02546967000397835, 0.02543851498044742, 0.026573956855830215, 0.0261356444971045, 0.024189520843497653, 0.02461169428379552, 0.02511341267561531, 0.024533326899661704, 0.023537168816750408, 0.023692365052591965, 0.02300370573518068, 0.024470999570800973, 0.022673581290595792], "accuracy_test_std": 0.014146057244304075, "error_valid": [0.5792265742658133, 0.5381991834525602, 0.5085655120481928, 0.4885651002447289, 0.4686264589608433, 0.4462361163403614, 0.4315362034073795, 0.4172436817582832, 0.40546316123870485, 0.39828160297439763, 0.3921677922628012, 0.38226980186370485, 0.3749352880271084, 0.3661153402673193, 0.35850580054593373, 0.35077419051204817, 0.34735622176204817, 0.3412321159638554, 0.3369390648531627, 0.3304899284638554, 0.32484380882906627, 0.3193300545933735, 0.31551498964608427, 0.31478256777108427, 0.31270737245858427, 0.31060129188629515, 0.3093908838478916, 0.30606410015060237, 0.3057081842996988, 0.3031447077371988, 0.30350062358810237, 0.30142542827560237, 0.30066212114081325, 0.3000620646649097, 0.29944141801581325, 0.29848544568900603, 0.29590137895331325, 0.29736622270331325, 0.2963793651167168, 0.2971323771649097, 0.29848544568900603, 0.29825160015060237, 0.2973250423569277, 0.2984236751694277, 0.3001326595444277, 0.3006209407944277, 0.3016180934676205, 0.30099744681852414, 0.3023299251694277, 0.3039477244917168, 0.3072436229292168, 0.3088305369917168, 0.31191318006400603, 0.3144972467996988, 0.31290003765060237, 0.3157385400978916, 0.31621652626129515, 0.31672539768448793, 0.31656214702560237, 0.31900355327560237, 0.3192785791603916, 0.31778285015060237, 0.3162062311746988, 0.31939035438629515, 0.3239687264683735, 0.3265322030308735, 0.3244673028049698, 0.3322695077183735, 0.3271425545933735, 0.3331239999058735, 0.3282911921121988, 0.32549387001129515, 0.3271925592996988, 0.3316694512424698, 0.3326857233621988, 0.33008106645331325, 0.3385656885353916, 0.33663315370858427, 0.3322180322853916, 0.3373964608433735, 0.3375494164156627, 0.34510748070406627, 0.34676498964608427, 0.3434793862951807, 0.33254306287650603, 0.33888189476656627, 0.3471414956701807], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.065806123751648, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.0001613441650017059, "optimization": "nesterov_momentum", "nb_data_augmentation": 0, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 3.5810591083289486e-07, "rotation_range": [0, 0], "momentum": 0.8969722452843839}, "accuracy_valid_max": 0.7040986210466867, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.6528585043298193, "accuracy_valid_std": [0.00869724812560375, 0.00933894878241193, 0.009446678699648261, 0.00977155649538305, 0.008727763373504957, 0.011354834280589834, 0.009602567838046494, 0.012634883797426132, 0.014363954047335993, 0.015290433433806353, 0.015496176212417992, 0.018289667604048647, 0.018949078764203632, 0.017510691143780226, 0.016331704737014164, 0.01602124160319832, 0.015897228047441682, 0.01569399507956207, 0.015940369690188628, 0.018728445526012404, 0.018454491901417062, 0.017518466222756643, 0.015408939276082827, 0.015687059256994026, 0.01653913775175271, 0.016666943048289397, 0.016747685391294176, 0.01563317656268003, 0.01619842475872974, 0.01687522449504973, 0.01705920739230285, 0.0169172948265668, 0.0161573946826462, 0.017322270695169915, 0.014910585672913819, 0.01873886527678544, 0.01688387924303732, 0.016117828370152635, 0.015180646983054635, 0.016550304413714075, 0.01724130137154855, 0.017668016049879342, 0.014309340208123595, 0.013310513959277955, 0.0120166017361679, 0.015303615748783932, 0.013708968044680208, 0.011858845326681147, 0.011402772731710899, 0.011003164101772303, 0.00828919236045733, 0.008884894179143878, 0.009876791309655584, 0.010745361658159319, 0.010754744966296996, 0.011779560560496088, 0.013321309722571704, 0.013258898866881143, 0.008605298459066596, 0.008519077995122769, 0.01106750871461267, 0.009627275589713914, 0.0109117864189566, 0.00956970259640292, 0.014860098413013598, 0.013763216821409787, 0.01639205024319064, 0.013377537903688253, 0.015507088561189321, 0.010845298222043012, 0.006759092182200107, 0.009717592973252991, 0.010295526544359366, 0.013627574794561649, 0.007283278224337867, 0.009287713711768853, 0.010004278284563234, 0.010727777338687235, 0.00779317599793051, 0.013265707906255763, 0.014950999502476494, 0.013706245708614628, 0.011915611716707892, 0.016987803309473727, 0.00987667315737818, 0.011407167946877048, 0.01063599867223915], "accuracy_valid": [0.42077342573418675, 0.46180081654743976, 0.4914344879518072, 0.5114348997552711, 0.5313735410391567, 0.5537638836596386, 0.5684637965926205, 0.5827563182417168, 0.5945368387612951, 0.6017183970256024, 0.6078322077371988, 0.6177301981362951, 0.6250647119728916, 0.6338846597326807, 0.6414941994540663, 0.6492258094879518, 0.6526437782379518, 0.6587678840361446, 0.6630609351468373, 0.6695100715361446, 0.6751561911709337, 0.6806699454066265, 0.6844850103539157, 0.6852174322289157, 0.6872926275414157, 0.6893987081137049, 0.6906091161521084, 0.6939358998493976, 0.6942918157003012, 0.6968552922628012, 0.6964993764118976, 0.6985745717243976, 0.6993378788591867, 0.6999379353350903, 0.7005585819841867, 0.701514554310994, 0.7040986210466867, 0.7026337772966867, 0.7036206348832832, 0.7028676228350903, 0.701514554310994, 0.7017483998493976, 0.7026749576430723, 0.7015763248305723, 0.6998673404555723, 0.6993790592055723, 0.6983819065323795, 0.6990025531814759, 0.6976700748305723, 0.6960522755082832, 0.6927563770707832, 0.6911694630082832, 0.688086819935994, 0.6855027532003012, 0.6870999623493976, 0.6842614599021084, 0.6837834737387049, 0.6832746023155121, 0.6834378529743976, 0.6809964467243976, 0.6807214208396084, 0.6822171498493976, 0.6837937688253012, 0.6806096456137049, 0.6760312735316265, 0.6734677969691265, 0.6755326971950302, 0.6677304922816265, 0.6728574454066265, 0.6668760000941265, 0.6717088078878012, 0.6745061299887049, 0.6728074407003012, 0.6683305487575302, 0.6673142766378012, 0.6699189335466867, 0.6614343114646084, 0.6633668462914157, 0.6677819677146084, 0.6626035391566265, 0.6624505835843373, 0.6548925192959337, 0.6532350103539157, 0.6565206137048193, 0.667456937123494, 0.6611181052334337, 0.6528585043298193], "seed": 979895676, "model": "residualv3", "loss_std": [0.2626833915710449, 0.2283310741186142, 0.24027496576309204, 0.24747686088085175, 0.25236666202545166, 0.2556922435760498, 0.2574881911277771, 0.2589026987552643, 0.26025390625, 0.261360764503479, 0.2619022727012634, 0.2620442807674408, 0.26205649971961975, 0.2616783678531647, 0.2610335052013397, 0.2603239417076111, 0.25944581627845764, 0.2583577036857605, 0.2574050724506378, 0.2562503218650818, 0.25522634387016296, 0.2538430690765381, 0.25238630175590515, 0.2509971261024475, 0.24978728592395782, 0.24848458170890808, 0.24713769555091858, 0.24566611647605896, 0.24468114972114563, 0.24317826330661774, 0.24150350689888, 0.23971863090991974, 0.2379433810710907, 0.2363739162683487, 0.23454473912715912, 0.23249010741710663, 0.23023803532123566, 0.2277955412864685, 0.2254045605659485, 0.22274437546730042, 0.2202761471271515, 0.21776729822158813, 0.21498781442642212, 0.2126029133796692, 0.20935985445976257, 0.20711097121238708, 0.20398132503032684, 0.20073552429676056, 0.1974974125623703, 0.1943376213312149, 0.19074313342571259, 0.18678466975688934, 0.18354152143001556, 0.17976535856723785, 0.17588892579078674, 0.1718844324350357, 0.16720546782016754, 0.1632876992225647, 0.15865658223628998, 0.1535552740097046, 0.1502390205860138, 0.145772784948349, 0.1414938122034073, 0.13742303848266602, 0.13082747161388397, 0.1288137286901474, 0.12411154806613922, 0.12237975001335144, 0.11810614913702011, 0.11608105897903442, 0.11257683485746384, 0.11248981952667236, 0.11288710683584213, 0.110646553337574, 0.10437192767858505, 0.10360516607761383, 0.10147641599178314, 0.1014099046587944, 0.10046927630901337, 0.09250227361917496, 0.09176798164844513, 0.09025295078754425, 0.09075985103845596, 0.09020697325468063, 0.08320200443267822, 0.08536624163389206, 0.0858171284198761]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:34 2016", "state": "available"}], "summary": "28d72dc702b5612fde9e5b53fb07e554"}