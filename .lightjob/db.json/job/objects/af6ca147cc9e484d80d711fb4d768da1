{"content": {"hp_model": {"f0": 16, "f1": 64, "f2": 64, "f3": 16, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.041294324446141735, 0.05928795341559411, 0.06335704295118845, 0.06876802181459947, 0.06959631650836046, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047, 0.06959631650836047], "moving_avg_accuracy_train": [0.014982586596385537, 0.05141966302710842, 0.09400689476656623, 0.13357081372364454, 0.16939718491152106, 0.2016479784685617, 0.2306783989951995, 0.25680577746917355, 0.28032041809575015, 0.30148359465966906, 0.3205304535671961, 0.33767262658397046, 0.3531005822990674, 0.3669857424426546, 0.3794823865718831, 0.3907293662881887, 0.40085164803286377, 0.4099617016030713, 0.41816074981625817, 0.4255398932081263, 0.4321811222608076, 0.43815822840822083, 0.4435376239408927, 0.44837907992029735, 0.45273639030176155, 0.4566579696450793, 0.46018739105406536, 0.46336387032215276, 0.46622270166343144, 0.46879564987058225, 0.471111303257018, 0.47319539130481014, 0.4750710705478231, 0.47675918186653476, 0.47827848205337525, 0.47964585222153167, 0.4808764853728725, 0.48198405520907917, 0.4829808680616652, 0.48387799962899264, 0.4846854180395873, 0.48541209460912255, 0.48606610352170426, 0.4866547115430278, 0.487184458762219, 0.48766123125949107, 0.48809032650703593, 0.4884765122298263, 0.4888240793803376, 0.4891368898157978, 0.48941841920771195, 0.4896717956604347, 0.4898998344678852, 0.49010506939459064, 0.4902897808286255, 0.4904560211192569], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.0020203011100637246, 0.013767215848422425, 0.028713545028652743, 0.03992992367496782, 0.047488691159894604, 0.052100845209434844, 0.05447564853207226, 0.05517184283216557, 0.054631103463122443, 0.05319891349729068, 0.0511440676557508, 0.04867434775180897, 0.045949109334551, 0.043089377451013475, 0.04018593473634536, 0.037305792237361746, 0.03449735830309282, 0.03179456015725201, 0.02922012366594627, 0.026788177114131406, 0.024506312712689875, 0.02237721362249789, 0.020399933326920475, 0.01857089725823305, 0.01688468291625349, 0.015334623685541575, 0.013913272656327299, 0.012612755575559874, 0.011425036267744784, 0.010342113203260433, 0.009356162138389391, 0.008459636731469005, 0.007645336611926131, 0.00690645042915278, 0.006236579843757104, 0.005629749169972272, 0.0050804043745536565, 0.004583404335576966, 0.004134006624786996, 0.0037278495677501556, 0.0033609319313830455, 0.003029591267775145, 0.0027304816899172573, 0.0024605516555504295, 0.0022170221790415536, 0.0019973657692647934, 0.0017992862969215045, 0.0016206999219417382, 0.0014597171560645956, 0.0013146260937749316, 0.0011838768135840427, 0.0010660669288667878, 0.0009599282512594401, 0.0008643145185097543, 0.0007781901314835479, 0.0007006198408432561], "duration": 51439.752985, "accuracy_train": [0.14982586596385541, 0.37935335090361444, 0.47729198042168675, 0.4896460843373494, 0.49183452560240964, 0.4919051204819277, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976, 0.49195218373493976], "end": "2016-01-18 04:16:36.010000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0], "accuracy_valid": [0.14810363247863248, 0.37272970085470086, 0.47315705128205127, 0.4855769230769231, 0.48677884615384615, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717, 0.48717948717948717], "accuracy_test": 0.48717948717948717, "start": "2016-01-17 13:59:16.257000", "learning_rate_per_epoch": [0.00017752349958755076, 1.7049964299076237e-05, 1.6375369114030036e-06, 1.5727465552117792e-07, 1.5105197093134848e-08, 1.4507548495856781e-09, 1.3933545983668694e-10, 1.3382254505922564e-11, 1.2852775484531453e-12, 1.2344246176458629e-13, 1.1855837153489611e-14, 1.1386751789607837e-15, 1.0936226346968503e-16, 1.0503526183308545e-17, 1.0087946300863688e-18, 9.688809166333948e-20, 9.305464428349751e-21, 8.937286660819826e-22, 8.583676289066524e-23, 8.244056365467317e-24, 7.9178738196415545e-25, 7.604596939617594e-26, 7.303715683679381e-27, 7.014738562208826e-28, 6.737195446076855e-29, 6.470633350542017e-30, 6.2146176398594795e-31, 5.968731845784701e-32, 5.732574442957328e-33, 5.505760695749756e-34, 5.287921159144491e-35, 5.078700599093098e-36, 4.8777580763160894e-37, 4.684765814771234e-38, 4.4994096209220546e-39, 4.321380256223444e-40, 4.150365791637243e-41, 3.9866941310041046e-42, 3.825544807606751e-43, 3.6433760072445244e-44, 2.802596928649634e-45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_train_last": 0.49195218373493976, "error_valid": [0.8518963675213675, 0.6272702991452992, 0.5268429487179487, 0.5144230769230769, 0.5132211538461539, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128, 0.5128205128205128], "accuracy_train_std": [0.045249641279897945, 0.06222128272826963, 0.06172617455855865, 0.06313924357458361, 0.06347965381310197, 0.06342205978743727, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194, 0.0634396415667194], "accuracy_test_std": 0.05828879454585426, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1.0, 1.2], "translation_range": [-3, 3], "momentum": 0.6218270106286332, "shear_range": [1, 1.1], "patience_check_each": 1, "learning_rate": 0.001848367092765546, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "optimization": "rmsprop", "nb_data_augmentation": 4, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 9.785015017737649e-07, "valid_ratio": 0.15, "rotation_range": [-90, 90], "learning_rate_decay": 0.9039565753410236}, "accuracy_valid_max": 0.48717948717948717, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.98, interval=[0.8, 1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256, 512],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1.0, 1.2)),\n        rotation_range=make_constant_param((-90, 90)),\n        shear_range=make_constant_param((1, 1.1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.48717948717948717, "loss_train": [3366.2021484375, 2.027630567550659, 1.6310062408447266, 1.58504319190979, 1.57892644405365, 1.578052282333374, 1.5776585340499878, 1.5779423713684082, 1.5779950618743896, 1.5786617994308472, 1.5786044597625732, 1.578768253326416, 1.5782843828201294, 1.5787805318832397, 1.5800138711929321, 1.5776628255844116, 1.5795493125915527, 1.5787686109542847, 1.5774636268615723, 1.5787347555160522, 1.5779638290405273, 1.5784766674041748, 1.5765914916992188, 1.5802035331726074, 1.5777685642242432, 1.5790212154388428, 1.5793148279190063, 1.5787146091461182, 1.578776478767395, 1.57823646068573, 1.5775965452194214, 1.5779504776000977, 1.5795986652374268, 1.578363299369812, 1.577163815498352, 1.578516960144043, 1.5801482200622559, 1.5782188177108765, 1.5782586336135864, 1.5774149894714355, 1.5782967805862427, 1.576609492301941, 1.580527901649475, 1.5800659656524658, 1.5789716243743896, 1.5778615474700928, 1.5793555974960327, 1.5798094272613525, 1.5780361890792847, 1.5794681310653687, 1.5785356760025024, 1.5776238441467285, 1.5776407718658447, 1.5792429447174072, 1.5787931680679321, 1.5784598588943481], "accuracy_train_first": 0.14982586596385541, "model": "residualv2", "loss_std": [49179.7265625, 0.3909643292427063, 0.11641084402799606, 0.1128416508436203, 0.11479385942220688, 0.11475106328725815, 0.11359554529190063, 0.11588943004608154, 0.11529133468866348, 0.11534040421247482, 0.11422806233167648, 0.11503349989652634, 0.11551305651664734, 0.11303215473890305, 0.11374755203723907, 0.11522689461708069, 0.11348311603069305, 0.11447910964488983, 0.1130705401301384, 0.1135159432888031, 0.11569155752658844, 0.11346593499183655, 0.11426910758018494, 0.11397983133792877, 0.11303873360157013, 0.11480524390935898, 0.11448857188224792, 0.11565189808607101, 0.11262384802103043, 0.11425907909870148, 0.11497995257377625, 0.11622703075408936, 0.11456667631864548, 0.11481823027133942, 0.11474701017141342, 0.11516468971967697, 0.11609245836734772, 0.1158289834856987, 0.11511261016130447, 0.11448944360017776, 0.11343694478273392, 0.1116810217499733, 0.11560384929180145, 0.11470206081867218, 0.11313838511705399, 0.11369506269693375, 0.11508946865797043, 0.11430007219314575, 0.11456216126680374, 0.11376799643039703, 0.11536196619272232, 0.11477987468242645, 0.11628905683755875, 0.11530449241399765, 0.11427418887615204, 0.11407292634248734]}, "state": "available", "life": [{"dt": "Sun May 15 22:04:59 2016", "state": "available"}], "summary": "ab10545eec9a71674354811a1b36c366"}