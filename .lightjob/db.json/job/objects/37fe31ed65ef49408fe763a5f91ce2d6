{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 16, "f3": 32, "nonlin": "very_leaky_rectify", "nbg1": 6, "nbg3": 6, "nbg2": 4, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.008278606302076776, 0.010538132328990936, 0.010028825435646772, 0.0083619096276315, 0.009137154821036017, 0.011144721767181731, 0.009456617780125886, 0.007880471281210562, 0.008880391262831123, 0.006715956808386314, 0.007402207880811216, 0.007670468812850133, 0.005435899433157304, 0.010018171881357762, 0.009718424644383406, 0.011108927578834768, 0.008862180009967496, 0.01323998741591299, 0.014438228907147804, 0.012974066613824775, 0.011479677851512124, 0.012213988728089271, 0.012391623919175058, 0.013913885612906284, 0.013135041161863086, 0.011291674851188538, 0.01355856196401541, 0.011078745516398843, 0.00968355737590661, 0.013268634742538555, 0.010443729196523786, 0.012212993413375452, 0.011966484180310152, 0.011139652149583568, 0.010299269333720894, 0.011073424283314806, 0.010079667818674925, 0.012370155136529127, 0.010467039587790147, 0.009450996606620257, 0.009490637746492569, 0.009374551074304014, 0.010275385115446291, 0.009849121508828357, 0.01098456340660657, 0.008947317769893088, 0.01099397993300182, 0.00946088633970878, 0.010267649873657692, 0.011397697004564946, 0.010133881704097916, 0.010833074949100753, 0.010940041039328875, 0.009646400954573585, 0.009592206888027656, 0.009962689670841776, 0.011164660167905472, 0.010843207840471228, 0.011195812754358145, 0.008957655543274757, 0.0103368143700695, 0.011071158155417182, 0.011344272527666758, 0.011492410925965311, 0.010109235321761504, 0.010546348480988661, 0.011205429913336817, 0.00967171632725322, 0.0107309698691731, 0.009724143474738002, 0.009807249554004588, 0.011415942784789234, 0.010591664475320823, 0.009037552837763373, 0.010921278965091784, 0.010416902544611839, 0.010566216905880091, 0.011023403874053532, 0.011128697746254593, 0.010819116231609636, 0.009696568549850832, 0.010103532042768216, 0.01188685348456044, 0.011083147740303645, 0.011654977517046089, 0.009233668920441578, 0.011701680979033078, 0.011021872841887355, 0.009365342417548567, 0.009876094530263625, 0.010999053172868221, 0.011360524839315874, 0.010338594459311358, 0.010118962690480396, 0.010709966426932232, 0.010432333395749853, 0.010640605618852987, 0.01069396562294658, 0.009491776671885516, 0.011516848671022659, 0.011599359979932035, 0.011880364888533106, 0.010099498584096471, 0.011252717838237433, 0.011042610249216349, 0.0098201738256915, 0.010672468919494955, 0.010965218668062892, 0.011372541728646716, 0.009702934619674433, 0.011254568414004363, 0.01002710317501736, 0.010052913957038624, 0.011880537943116654, 0.00965891924595906, 0.01027756752188473, 0.009959472502655832, 0.011805221467952806, 0.010160915725262372, 0.010990913393944734, 0.011267983965502475, 0.012175921977241384, 0.01087808294531452, 0.009787797944048804, 0.009446464378237717, 0.010319310694740156, 0.010815664135643605, 0.010704877622095064, 0.009785816760394068, 0.011255594383704055, 0.010451100352244357, 0.011391866659036468, 0.010644220059230986, 0.011425146901062517, 0.01004402628892869, 0.0098328537628605, 0.010022785815770074, 0.010471864528191, 0.011337151643150913, 0.011335750094489708, 0.010288112044061336, 0.010444122704686008, 0.01067775710880227, 0.009398143573489724, 0.01022254343193179, 0.010428340098167213, 0.010378700749469545, 0.008833905553197546, 0.009674982790728023, 0.011173115347014111, 0.010361378582143012, 0.011099750925818918, 0.010036158422305983, 0.008940769802670974, 0.01070786285728652, 0.01061395203291692, 0.010850731329448304, 0.009785247018486425, 0.011533049466702009, 0.009926324488526473, 0.01001088492240822, 0.009887893398123671, 0.0096630818771235, 0.009760226117992305], "moving_avg_accuracy_train": [0.05170629873800294, 0.1052973162375415, 0.15791828381667586, 0.20876916766161402, 0.2570826412897401, 0.303138346799009, 0.3461203222370021, 0.3855781583918549, 0.4226947078050688, 0.4570457936471625, 0.4883102908847442, 0.5174875717699685, 0.5445771666428517, 0.5695761474165049, 0.592377319213937, 0.6133683062328811, 0.6327970515831994, 0.6505316412234675, 0.6671250321318055, 0.6822796846956645, 0.6962490791829086, 0.7092795885369045, 0.7212907511590816, 0.7323424687999563, 0.742344998492266, 0.7516957230974044, 0.7602323550777618, 0.7680758312255781, 0.7753163574145744, 0.7821417873857877, 0.788247363832471, 0.7939027458047057, 0.7990718609321531, 0.8038447920408572, 0.8081196478946803, 0.8123294529868567, 0.8160741357912533, 0.8193678006485898, 0.8225993829868317, 0.8254219568293907, 0.8280063790174372, 0.8303160829450124, 0.832320303571469, 0.8343612673138514, 0.8362678530974625, 0.8379280488289216, 0.8394059849943868, 0.8408685168301733, 0.8422383820514564, 0.843403831435135, 0.8445596927256839, 0.8455070340324344, 0.8464293596239769, 0.847245501763508, 0.8479800296890859, 0.8487363998744778, 0.8495123920448835, 0.8499714749149614, 0.850551952065861, 0.8510720563528611, 0.8515005866325805, 0.8520420128057473, 0.8524898409294731, 0.8529231131753501, 0.8532851203621064, 0.8536109628790057, 0.8538717051097006, 0.8541714412351739, 0.8544528655409661, 0.8547247125578367, 0.854999601807544, 0.8551191549965755, 0.855384790888114, 0.8555356156821929, 0.8557271255194738, 0.8559505655491987, 0.8561353855342844, 0.8562900977768138, 0.8564780948224527, 0.8565613698040317, 0.8566293778898431, 0.8566836457694634, 0.8567184999194458, 0.8566987514294392, 0.8567553104527005, 0.8568341514081687, 0.85690510826809, 0.8569015761753618, 0.856947153319269, 0.8571021050404521, 0.8570601999823741, 0.857134092572961, 0.8571842838140038, 0.8572828983047426, 0.8573809879904644, 0.8574228017802422, 0.857386101526775, 0.8574111279212551, 0.8573987744441444, 0.8573993541564298, 0.8573440362772393, 0.8573476925597683, 0.8573346711235589, 0.8573718160047892, 0.8573493707288303, 0.8573804314007332, 0.857459431132799, 0.8574933645595246, 0.8575471921804917, 0.8576561269572285, 0.8577378201169874, 0.8576440413929409, 0.8576921019258045, 0.8577167912637242, 0.8576924726428428, 0.8576915843209727, 0.8576651721455661, 0.8576320645436433, 0.8576232300900172, 0.8576710466043636, 0.8576559887958559, 0.8576633631074848, 0.8576141964165223, 0.8575676572946652, 0.8576070801956897, 0.8575589635959251, 0.857615567957309, 0.8576153225599262, 0.8575477084356242, 0.8576262925546864, 0.8576295528975474, 0.8576790262311315, 0.8577654409587473, 0.8577803991469257, 0.8577938615162863, 0.8577850873582439, 0.8578399335850441, 0.8578381419153547, 0.8578040854757571, 0.857757122589634, 0.8577241565873612, 0.857689800838878, 0.8577053836414336, 0.8576682188411052, 0.8576557329089142, 0.8577607169615997, 0.8577204521245205, 0.8577096822615977, 0.8577163014754527, 0.8577292342143508, 0.85768739525674, 0.8575893584234802, 0.8576661387413851, 0.8576956774489187, 0.8576757953583273, 0.8575998448541945, 0.8574849864242844, 0.8575256649170996, 0.8576017670415764, 0.8576749813488621, 0.8577059969932764, 0.8578106409839635, 0.8578583175993915, 0.857766403971143], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 669908644, "moving_var_accuracy_train": [0.02406187196265245, 0.047503659176109846, 0.06767398931917765, 0.08417890187756243, 0.09676873729594695, 0.10618201565596076, 0.1121908660033349, 0.11498406690921026, 0.1158844043813812, 0.1149159378300211, 0.11222156313468776, 0.10866123029991649, 0.10439972262331729, 0.09958429171847889, 0.09430490346465516, 0.08884000694245495, 0.08335329156119711, 0.07784860343245574, 0.07254180868574239, 0.06735459926614965, 0.06237543518059691, 0.0576660392287584, 0.05319784755371, 0.04897732696366161, 0.04498004966950527, 0.04126896915832502, 0.03779793901260507, 0.03457182617407683, 0.03158647053211101, 0.028847101927527343, 0.02629789430849126, 0.023955954984909024, 0.02180083724722538, 0.01982578136481877, 0.018007672761475583, 0.01636640761555506, 0.01485597069774945, 0.013468007681706584, 0.012215195033215453, 0.011065377837764193, 0.01001895319640238, 0.00906507046685965, 0.008194715523049314, 0.0074127337677238605, 0.006704176015103889, 0.006058564662394292, 0.005472366853937572, 0.004944381162880016, 0.004466831823112345, 0.004032373091194363, 0.0036411599199818313, 0.0032851210279469306, 0.002964265085623565, 0.0026738333689884735, 0.002411305813550711, 0.002175324094911788, 0.0019632111600573873, 0.0017687868577860395, 0.001594940755511884, 0.0014378812561848984, 0.0012957458743721364, 0.0011688095676438335, 0.0010537335611350476, 0.0009500497285729684, 0.00085622419854504, 0.0007715573388029099, 0.0006950134835204284, 0.0006263207108726091, 0.0005644014365443644, 0.0005086264000951606, 0.0004584438369820863, 0.00041272808996894604, 0.0003720903428139123, 0.0003350860415991017, 0.00030190752159916975, 0.0002721660984612036, 0.00024525691445706683, 0.00022094664591325666, 0.00019917006732445204, 0.00017931547309501972, 0.0001614255516831392, 0.0001453095015396517, 0.00013078948469162548, 0.0001177140462481808, 0.0001059714319313732, 9.543023180456819e-05, 8.593252250784053e-05, 7.733938253816784e-05, 6.962413976877167e-05, 6.287781611497294e-05, 5.660583880850839e-05, 5.099439596215031e-05, 4.591762881203199e-05, 4.1413389290881816e-05, 3.7358644639798556e-05, 3.363851571295898e-05, 3.028678631910409e-05, 2.7263744570979755e-05, 2.453874358945231e-05, 2.2084872255104083e-05, 1.9903925639416796e-05, 1.79136533910925e-05, 1.6123814072191847e-05, 1.452385034478718e-05, 1.3075999424024264e-05, 1.1777082369673352e-05, 1.0655542751704293e-05, 9.600351773577963e-06, 8.66639331123093e-06, 7.906555050351948e-06, 7.175963496479256e-06, 6.53751718858538e-06, 5.9045538030989745e-06, 5.319584493451311e-06, 4.7929486020003695e-06, 4.3136608438420365e-06, 3.88857318654522e-06, 3.5095808876364026e-06, 3.1593252270105995e-06, 2.8639704757076755e-06, 2.579614066510372e-06, 2.322142084107334e-06, 2.1116841471984973e-06, 1.9200087412477233e-06, 1.7419953532495912e-06, 1.5886326824807968e-06, 1.4586058977817881e-06, 1.3127458499824887e-06, 1.2226162932303276e-06, 1.1559338378262839e-06, 1.0404361225637968e-06, 9.584210069307566e-07, 9.297864525780618e-07, 8.388215338624866e-07, 7.565704989754446e-07, 6.816063217220845e-07, 6.405186668978456e-07, 5.764956909305425e-07, 5.292846915400012e-07, 4.96205836443142e-07, 4.563660685514429e-07, 4.213523187809065e-07, 3.8140250052217927e-07, 3.556932519209368e-07, 3.215270132529462e-07, 3.8856917379217566e-07, 3.6430357035803477e-07, 3.28917122848596e-07, 2.964197364922598e-07, 2.6828306446168385e-07, 2.572092433811288e-07, 3.179893051235362e-07, 3.392473295692987e-07, 3.1317541379722046e-07, 2.85415550154057e-07, 3.0879030684094553e-07, 3.9664340644943193e-07, 3.718717238039307e-07, 3.8680835157250164e-07, 3.963705295371713e-07, 3.653912083693429e-07, 4.274053706147558e-07, 4.051223704812526e-07, 4.4064316895333766e-07], "duration": 114450.657094, "accuracy_train": [0.5170629873800295, 0.5876164737333887, 0.6315069920288852, 0.6664271222660576, 0.6919039039428756, 0.717639696382429, 0.7329581011789406, 0.7406986837855297, 0.7567436525239941, 0.7662055662260059, 0.769690766022979, 0.7800830997369879, 0.7883835204988003, 0.7945669743793835, 0.7975878653908268, 0.8022871894033776, 0.807655759736065, 0.8101429479858803, 0.8164655503068475, 0.8186715577703949, 0.8219736295681063, 0.8265541727228681, 0.8293912147586747, 0.8318079275678294, 0.8323677657230528, 0.8358522445436508, 0.8370620429009783, 0.8386671165559246, 0.8404810931155408, 0.8435706571267073, 0.8431975518526209, 0.8448011835548173, 0.8455938970791805, 0.8468011720191952, 0.8465933505790882, 0.8502176988164452, 0.8497762810308231, 0.849010784364618, 0.8516836240310077, 0.8508251214124216, 0.851266178709856, 0.8511034182931894, 0.8503582892095791, 0.8527299409952934, 0.853427125149963, 0.8528698104120525, 0.8527074104835732, 0.8540313033522517, 0.8545671690430048, 0.8538928758882429, 0.8549624443406239, 0.8540331057931894, 0.8547302899478589, 0.8545907810192875, 0.8545907810192875, 0.8555437315430048, 0.8564963215785345, 0.8541032207456626, 0.8557762464239571, 0.8557529949358619, 0.8553573591500554, 0.8569148483642488, 0.8565202940430048, 0.8568225633882429, 0.8565431850429125, 0.8565435455311, 0.8562183851859542, 0.8568690663644334, 0.8569856842930971, 0.8571713357096714, 0.8574736050549095, 0.8561951336978589, 0.85777551391196, 0.8568930388289037, 0.8574507140550018, 0.857961525816722, 0.8577987654000554, 0.8576825079595791, 0.8581700682332041, 0.8573108446382429, 0.8572414506621447, 0.8571720566860466, 0.8570321872692875, 0.8565210150193798, 0.8572643416620525, 0.8575437200073828, 0.8575437200073828, 0.8568697873408084, 0.8573573476144334, 0.8584966705311, 0.8566830544596714, 0.8577991258882429, 0.8576360049833887, 0.8581704287213916, 0.85826379516196, 0.8577991258882429, 0.8570557992455703, 0.8576363654715762, 0.8572875931501477, 0.8574045715669989, 0.8568461753645257, 0.8573805991025286, 0.8572174781976744, 0.8577061199358619, 0.8571473632452011, 0.8576599774478589, 0.8581704287213916, 0.8577987654000554, 0.8580316407691952, 0.8586365399478589, 0.8584730585548173, 0.8568000328765227, 0.8581246467215762, 0.8579389953050018, 0.8574736050549095, 0.8576835894241418, 0.8574274625669066, 0.8573340961263382, 0.8575437200073828, 0.858101395233481, 0.8575204685192875, 0.8577297319121447, 0.8571716961978589, 0.8571488051979512, 0.8579618863049095, 0.8571259141980436, 0.8581250072097637, 0.857613113983481, 0.8569391813169066, 0.8583335496262459, 0.8576588959832964, 0.8581242862333887, 0.8585431735072905, 0.8579150228405316, 0.8579150228405316, 0.8577061199358619, 0.8583335496262459, 0.8578220168881506, 0.8574975775193798, 0.8573344566145257, 0.8574274625669066, 0.8573805991025286, 0.8578456288644334, 0.8573337356381506, 0.8575433595191952, 0.8587055734357696, 0.8573580685908084, 0.8576127534952934, 0.8577758744001477, 0.8578456288644334, 0.8573108446382429, 0.8567070269241418, 0.8583571616025286, 0.857961525816722, 0.8574968565430048, 0.8569162903169989, 0.8564512605550941, 0.8578917713524363, 0.8582866861618678, 0.8583339101144334, 0.8579851377930048, 0.8587524369001477, 0.8582874071382429, 0.8569391813169066], "end": "2016-01-26 23:54:59.119000", "learning_rate_per_epoch": [0.00015590840484946966, 0.00014415779151022434, 0.00013329280773177743, 0.0001232467038789764, 0.00011395775800338015, 0.00010536890476942062, 9.742738620843738e-05, 9.008440974866971e-05, 8.329486445290968e-05, 7.701703725615516e-05, 7.121235830709338e-05, 6.584517541341484e-05, 6.088250665925443e-05, 5.629386942018755e-05, 5.205107299843803e-05, 4.812805127585307e-05, 4.450070264283568e-05, 4.1146740841213614e-05, 3.804556399700232e-05, 3.5178116377210245e-05, 3.252678652643226e-05, 3.007528357557021e-05, 2.7808548111352138e-05, 2.5712653950904496e-05, 2.3774724468239583e-05, 2.1982854377711192e-05, 2.0326035155449063e-05, 1.8794087736750953e-05, 1.7377600670442916e-05, 1.6067873730207793e-05, 1.4856858797429595e-05, 1.3737116205447819e-05, 1.2701767445832957e-05, 1.1744451512640808e-05, 1.0859286703635007e-05, 1.0040836059488356e-05, 9.284070983994752e-06, 8.584342140238732e-06, 7.937351256259717e-06, 7.3391233854636084e-06, 6.785982805013191e-06, 6.274532097449992e-06, 5.801628503832035e-06, 5.364367098081857e-06, 4.960061687597772e-06, 4.5862279876018874e-06, 4.240569978719577e-06, 3.920963536074851e-06, 3.625445515353931e-06, 3.352200337758404e-06, 3.0995493034424726e-06, 2.8659401323238853e-06, 2.64993786913692e-06, 2.450215333738015e-06, 2.265545617774478e-06, 2.0947943539795233e-06, 1.9369124402146554e-06, 1.7909297866935958e-06, 1.6559496316403965e-06, 1.5311428569475538e-06, 1.4157425312077976e-06, 1.3090398169879336e-06, 1.210379195981659e-06, 1.1191544899702421e-06, 1.0348052228437155e-06, 9.568132099957438e-07, 8.846994319355872e-07, 8.180207373698067e-07, 7.563675694655103e-07, 6.993611236794095e-07, 6.466511877079029e-07, 5.979139245937404e-07, 5.528498832063633e-07, 5.111822929393384e-07, 4.726551310341165e-07, 4.370317014945613e-07, 4.0409318557976803e-07, 3.7363719229688286e-07, 3.454766215327254e-07, 3.1943849876370223e-07, 2.953628381874296e-07, 2.7310170480632223e-07, 2.525183617763105e-07, 2.334863751229932e-07, 2.1588880372291896e-07, 1.9961753139341454e-07, 1.845726131932679e-07, 1.7066160751255666e-07, 1.577990644818783e-07, 1.4590594332730689e-07, 1.3490920025560627e-07, 1.2474126265260566e-07, 1.1533967381183174e-07, 1.0664666660886724e-07, 9.860884375711976e-08, 9.117682253645398e-08, 8.430494347066997e-08, 7.795098611040885e-08, 7.207592034319532e-08, 6.664365059805277e-08, 6.162080268268255e-08, 5.6976521278784276e-08, 5.26822745428035e-08, 4.8711680022961446e-08, 4.5040341234425796e-08, 4.16457091034772e-08, 3.8506925648107426e-08, 3.560470673846794e-08, 3.292122485731852e-08, 3.0439995413189536e-08, 2.8145771935328412e-08, 2.6024460808571348e-08, 2.4063030679144504e-08, 2.2249430742249388e-08, 2.057251968778928e-08, 1.9021994646095663e-08, 1.758833079179567e-08, 1.6262720947679554e-08, 1.5037020517638666e-08, 1.3903699525030788e-08, 1.2855795539223891e-08, 1.1886870154853568e-08, 1.099097168832941e-08, 1.0162596097984533e-08, 9.396654121474057e-09, 8.688440189530411e-09, 8.033603116075483e-09, 7.428120785135661e-09, 6.868272617310822e-09, 6.350619585759887e-09, 5.871981567651119e-09, 5.429417804236891e-09, 5.020209581374502e-09, 4.641842910046989e-09, 4.291992983240789e-09, 3.968510853269436e-09, 3.669409220918851e-09, 3.3928504450386754e-09, 3.137135662356627e-09, 2.9006936852482568e-09, 2.6820721199527497e-09, 2.4799278186549145e-09, 2.2930188858794054e-09, 2.12019690692955e-09, 1.960400286549202e-09, 1.8126473655399877e-09, 1.6760304255569736e-09, 1.549710137993543e-09, 1.432910456955483e-09, 1.3249138453019782e-09, 1.2250567227312104e-09, 1.1327258020443765e-09, 1.0473536482535906e-09, 9.684159030243222e-10, 8.954276209394152e-10, 8.279403829192233e-10, 7.655395761752004e-10, 7.078418406969433e-10, 6.544926822726893e-10, 6.051644185767202e-10, 5.595539587233134e-10, 5.173810824210534e-10, 4.78386719127144e-10, 4.4233131046844676e-10], "accuracy_valid": [0.5011295180722892, 0.5724318171121988, 0.6100103539156627, 0.6453710349209337, 0.6678025578878012, 0.6881794757153614, 0.7021572618599398, 0.705554640436747, 0.7267860504518072, 0.7309055558170181, 0.7336116928652108, 0.7393695877259037, 0.7435302734375, 0.7523811064570783, 0.7531238234186747, 0.7537444700677711, 0.7593391142695783, 0.7603671522025602, 0.7634792098079819, 0.7648940488516567, 0.7669589490775602, 0.771129929875753, 0.7711093397025602, 0.7745684887989458, 0.771862351750753, 0.7741508024284638, 0.7783732586596386, 0.775280320500753, 0.775890672063253, 0.7784850338855422, 0.7769687147025602, 0.7766333890248494, 0.7766333890248494, 0.7769687147025602, 0.7737845914909638, 0.7789630200489458, 0.7774878812123494, 0.7768775296498494, 0.7791762754141567, 0.7783114881400602, 0.778576218938253, 0.7778232068900602, 0.7780776426016567, 0.779674851750753, 0.7784335584525602, 0.780651414250753, 0.7795733716114458, 0.7815264966114458, 0.7802954983998494, 0.780285203313253, 0.7804381588855422, 0.781139695500753, 0.7812926510730422, 0.7820147778614458, 0.779796922063253, 0.7825133541980422, 0.7817809323230422, 0.7814044262989458, 0.7836325771837349, 0.781017625188253, 0.7825030591114458, 0.7826457195971386, 0.7831237057605422, 0.7825236492846386, 0.7822692135730422, 0.7818927075489458, 0.7822692135730422, 0.7827471997364458, 0.7828898602221386, 0.7817706372364458, 0.7813941312123494, 0.7835105068712349, 0.7835002117846386, 0.7816485669239458, 0.7833781414721386, 0.7830016354480422, 0.7833781414721386, 0.7837443524096386, 0.7842326336596386, 0.7834899166980422, 0.7828795651355422, 0.7825030591114458, 0.7822692135730422, 0.7811602856739458, 0.7830119305346386, 0.7817706372364458, 0.7822795086596386, 0.7835002117846386, 0.7823809887989458, 0.7836119870105422, 0.7819132977221386, 0.7822795086596386, 0.7826251294239458, 0.7827574948230422, 0.7836119870105422, 0.7820250729480422, 0.7832560711596386, 0.7836222820971386, 0.7823809887989458, 0.7822795086596386, 0.7822795086596386, 0.7832663662462349, 0.7817809323230422, 0.7826457195971386, 0.7826354245105422, 0.7820250729480422, 0.7837546474962349, 0.7825133541980422, 0.7827574948230422, 0.7823809887989458, 0.7833781414721386, 0.7815162015248494, 0.7823809887989458, 0.7842532238328314, 0.7825133541980422, 0.7823912838855422, 0.7823912838855422, 0.7816691570971386, 0.7823912838855422, 0.7837443524096386, 0.7817912274096386, 0.7817809323230422, 0.7822795086596386, 0.7817809323230422, 0.7821265530873494, 0.7822692135730422, 0.7822692135730422, 0.7822692135730422, 0.7815367916980422, 0.7833884365587349, 0.7821471432605422, 0.7839884930346386, 0.7811602856739458, 0.7831442959337349, 0.7830016354480422, 0.7824927640248494, 0.7827471997364458, 0.7821368481739458, 0.7826457195971386, 0.7825236492846386, 0.7821368481739458, 0.7818927075489458, 0.7832354809864458, 0.7811499905873494, 0.7825133541980422, 0.7830016354480422, 0.7816588620105422, 0.7826251294239458, 0.7817706372364458, 0.7838767178087349, 0.7820147778614458, 0.7813029461596386, 0.7827574948230422, 0.7821265530873494, 0.7817603421498494, 0.7818927075489458, 0.7810485104480422, 0.7817706372364458, 0.7832560711596386, 0.7833781414721386, 0.7827471997364458, 0.7837237622364458, 0.7822692135730422, 0.7810382153614458], "accuracy_test": 0.782487643494898, "start": "2016-01-25 16:07:28.462000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0], "accuracy_train_last": 0.8569391813169066, "batch_size_eval": 1024, "accuracy_train_std": [0.015888511299287998, 0.015120838237872055, 0.014504909313267436, 0.015873306049968765, 0.013822762598182095, 0.014325376298319554, 0.015904126601548833, 0.015207909736683232, 0.016960771435998202, 0.015460575974378455, 0.015314157906622253, 0.014835612621450252, 0.014241607614508855, 0.013239749633301401, 0.013613175838787909, 0.01336398807590614, 0.013782934217564581, 0.013700387790858973, 0.012639780541548181, 0.012020475364292394, 0.013436325505563505, 0.012812436068778663, 0.01266086925548138, 0.012247815986128101, 0.012840394502872136, 0.012518615489922068, 0.012450910987078493, 0.012077835356457763, 0.012423499579246931, 0.011550713448156521, 0.01247801650365506, 0.011036692178582745, 0.01185276876883588, 0.011680322593597319, 0.01148898645069186, 0.011731683273799283, 0.011100698198771974, 0.011118918174749389, 0.011353774702832985, 0.011317254777999585, 0.010706822730004074, 0.011294660631795218, 0.011157875774531553, 0.011423182354288746, 0.010529260027210482, 0.011452732242424138, 0.011007327032684693, 0.010653000646753577, 0.01055798468885954, 0.010868937698735134, 0.010405814039271342, 0.010596023680589222, 0.010628237176832284, 0.010555422321566314, 0.010104813829852973, 0.010591857275994869, 0.010919961569138704, 0.010507979372727785, 0.010473376552656347, 0.010220575646248146, 0.010365205125119377, 0.010571736311504433, 0.010548410788512267, 0.010813068003798915, 0.010666110976249166, 0.010419350528549106, 0.010578199061362432, 0.01032798390033045, 0.010291405991559833, 0.01071397429869359, 0.010529752904292585, 0.010361882175424029, 0.010306109891878305, 0.010436710223528716, 0.010645334418978325, 0.010368363254896493, 0.010584634796015535, 0.010746715022236591, 0.01019070597982645, 0.010646175670126564, 0.010922850106413806, 0.010891901069012638, 0.01071692135712923, 0.010424275402022044, 0.01015434036673526, 0.010593357204998308, 0.010200238506486378, 0.01037111864039264, 0.010231096001109087, 0.01064048836366026, 0.010454090873502556, 0.01041685239982522, 0.01049332202876492, 0.010381709584551395, 0.010274434895914238, 0.010198770549131363, 0.010824823703748739, 0.010567521361290607, 0.01036382882166154, 0.01067367074142351, 0.0098261395176517, 0.010046452498075646, 0.010618278506054405, 0.010675977305544291, 0.010018133407021828, 0.010439145050408747, 0.01074498494609938, 0.010211212466975447, 0.010468920511544471, 0.010324890164412712, 0.010412247072828552, 0.010627816759036872, 0.01057103949533688, 0.01076544841569586, 0.010602817566891479, 0.010966416639177893, 0.01066348706544464, 0.010542444947425327, 0.010567604275352926, 0.010391680596642073, 0.010125643362917965, 0.01037950962809011, 0.010396359843894011, 0.01078133410943834, 0.010391126450494347, 0.010855721898353269, 0.010215676457661995, 0.010323418618982333, 0.010645095053812803, 0.010214160334043487, 0.010728280711659, 0.010436137301417578, 0.010255270924668835, 0.01016948357058649, 0.010797600857198417, 0.010376130093399036, 0.010304902081032786, 0.010326421387863834, 0.010462855035335448, 0.01029255614132768, 0.010090180076250871, 0.010214557626130527, 0.010758236604786316, 0.01007004844749938, 0.01065032636952477, 0.010555293136007948, 0.010525681636926191, 0.010535880550365067, 0.01016057059294404, 0.00978095502174235, 0.010618412620739348, 0.01063691968369789, 0.010638727629899659, 0.010507587382334375, 0.010304003979242509, 0.010728580619449993, 0.010810562934653682, 0.010269453227535733, 0.010787944931998295, 0.010288141517087694, 0.010732811357888887, 0.010857965043398227, 0.010478006889268716, 0.010240664970845964], "accuracy_test_std": 0.013677084384211408, "error_valid": [0.4988704819277108, 0.4275681828878012, 0.3899896460843373, 0.35462896507906627, 0.3321974421121988, 0.3118205242846386, 0.29784273814006024, 0.294445359563253, 0.2732139495481928, 0.2690944441829819, 0.2663883071347892, 0.26063041227409633, 0.2564697265625, 0.24761889354292166, 0.24687617658132532, 0.24625552993222888, 0.24066088573042166, 0.23963284779743976, 0.2365207901920181, 0.23510595114834332, 0.23304105092243976, 0.22887007012424698, 0.22889066029743976, 0.2254315112010542, 0.22813764824924698, 0.2258491975715362, 0.22162674134036142, 0.22471967949924698, 0.22410932793674698, 0.22151496611445776, 0.22303128529743976, 0.22336661097515065, 0.22336661097515065, 0.22303128529743976, 0.2262154085090362, 0.2210369799510542, 0.22251211878765065, 0.22312247035015065, 0.22082372458584332, 0.22168851185993976, 0.22142378106174698, 0.22217679310993976, 0.22192235739834332, 0.22032514824924698, 0.22156644154743976, 0.21934858574924698, 0.2204266283885542, 0.2184735033885542, 0.21970450160015065, 0.21971479668674698, 0.21956184111445776, 0.21886030449924698, 0.21870734892695776, 0.2179852221385542, 0.22020307793674698, 0.21748664580195776, 0.21821906767695776, 0.2185955737010542, 0.2163674228162651, 0.21898237481174698, 0.2174969408885542, 0.21735428040286142, 0.21687629423945776, 0.21747635071536142, 0.21773078642695776, 0.2181072924510542, 0.21773078642695776, 0.2172528002635542, 0.21711013977786142, 0.2182293627635542, 0.21860586878765065, 0.2164894931287651, 0.21649978821536142, 0.2183514330760542, 0.21662185852786142, 0.21699836455195776, 0.21662185852786142, 0.21625564759036142, 0.21576736634036142, 0.21651008330195776, 0.21712043486445776, 0.2174969408885542, 0.21773078642695776, 0.2188397143260542, 0.21698806946536142, 0.2182293627635542, 0.21772049134036142, 0.21649978821536142, 0.2176190112010542, 0.21638801298945776, 0.21808670227786142, 0.21772049134036142, 0.2173748705760542, 0.21724250517695776, 0.21638801298945776, 0.21797492705195776, 0.21674392884036142, 0.21637771790286142, 0.2176190112010542, 0.21772049134036142, 0.21772049134036142, 0.2167336337537651, 0.21821906767695776, 0.21735428040286142, 0.21736457548945776, 0.21797492705195776, 0.2162453525037651, 0.21748664580195776, 0.21724250517695776, 0.2176190112010542, 0.21662185852786142, 0.21848379847515065, 0.2176190112010542, 0.21574677616716864, 0.21748664580195776, 0.21760871611445776, 0.21760871611445776, 0.21833084290286142, 0.21760871611445776, 0.21625564759036142, 0.21820877259036142, 0.21821906767695776, 0.21772049134036142, 0.21821906767695776, 0.21787344691265065, 0.21773078642695776, 0.21773078642695776, 0.21773078642695776, 0.21846320830195776, 0.2166115634412651, 0.21785285673945776, 0.21601150696536142, 0.2188397143260542, 0.2168557040662651, 0.21699836455195776, 0.21750723597515065, 0.2172528002635542, 0.2178631518260542, 0.21735428040286142, 0.21747635071536142, 0.2178631518260542, 0.2181072924510542, 0.2167645190135542, 0.21885000941265065, 0.21748664580195776, 0.21699836455195776, 0.21834113798945776, 0.2173748705760542, 0.2182293627635542, 0.2161232821912651, 0.2179852221385542, 0.21869705384036142, 0.21724250517695776, 0.21787344691265065, 0.21823965785015065, 0.2181072924510542, 0.21895148955195776, 0.2182293627635542, 0.21674392884036142, 0.21662185852786142, 0.2172528002635542, 0.2162762377635542, 0.21773078642695776, 0.2189617846385542], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "momentum": 0.6938940426138083, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.00016861684256514768, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "l2_decay": 1.1485523546228293e-05, "optimization": "adam", "nb_data_augmentation": 2, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.07536873127948647}, "accuracy_valid_max": 0.7842532238328314, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7810382153614458, "loss_train": [1.7409443855285645, 1.3582346439361572, 1.2085177898406982, 1.1141254901885986, 1.0443594455718994, 0.992135763168335, 0.945030927658081, 0.9082896709442139, 0.8761247992515564, 0.8483655452728271, 0.824357271194458, 0.8013400435447693, 0.7844029068946838, 0.7676734924316406, 0.7515090703964233, 0.736667811870575, 0.7268341183662415, 0.716636061668396, 0.7054669260978699, 0.6972726583480835, 0.6863899230957031, 0.6809303164482117, 0.673100471496582, 0.6652392148971558, 0.6595398783683777, 0.6557175517082214, 0.6504098773002625, 0.6477982997894287, 0.6431697607040405, 0.6367040872573853, 0.6341928839683533, 0.6333521008491516, 0.6289229989051819, 0.6266845464706421, 0.6233306527137756, 0.6252386569976807, 0.6200374960899353, 0.6180166602134705, 0.6146478652954102, 0.6158825159072876, 0.6122618913650513, 0.6130269169807434, 0.6109187006950378, 0.6087548136711121, 0.6105805039405823, 0.6044663786888123, 0.6071078181266785, 0.6038001179695129, 0.6031013131141663, 0.6011570692062378, 0.6044639945030212, 0.6011850237846375, 0.6034615635871887, 0.5998058915138245, 0.6015247106552124, 0.5965894460678101, 0.5997524261474609, 0.5985100865364075, 0.5970725417137146, 0.5993724465370178, 0.5982041954994202, 0.5980098843574524, 0.5974892973899841, 0.5959453582763672, 0.5958056449890137, 0.5957514047622681, 0.5937540531158447, 0.5967825651168823, 0.5934489369392395, 0.5956998467445374, 0.5954662561416626, 0.593911349773407, 0.5957581996917725, 0.5965520143508911, 0.5936732888221741, 0.5945618748664856, 0.5931675434112549, 0.5958524942398071, 0.594800591468811, 0.5948930978775024, 0.5948482751846313, 0.5947878956794739, 0.5923213362693787, 0.5941070914268494, 0.5944337844848633, 0.5941349267959595, 0.5917086005210876, 0.5952134728431702, 0.593481719493866, 0.5966782569885254, 0.5915682315826416, 0.596829354763031, 0.5936645269393921, 0.5932216048240662, 0.5931986570358276, 0.5927074551582336, 0.5956182479858398, 0.5946614146232605, 0.593492865562439, 0.59306401014328, 0.5912984013557434, 0.5931137204170227, 0.5928225517272949, 0.5937321782112122, 0.5929852724075317, 0.5933996438980103, 0.5953726768493652, 0.5929749011993408, 0.5938725471496582, 0.5919919013977051, 0.5944472551345825, 0.5932724475860596, 0.5906397104263306, 0.5958085060119629, 0.5943477153778076, 0.5934156179428101, 0.5942749977111816, 0.5934752225875854, 0.5952330827713013, 0.5955924391746521, 0.5936723351478577, 0.5915325284004211, 0.5937997698783875, 0.5937702059745789, 0.5947805047035217, 0.5933256149291992, 0.5937667489051819, 0.5945631861686707, 0.594487726688385, 0.5920471549034119, 0.5937379598617554, 0.5931600332260132, 0.5955113768577576, 0.5927432179450989, 0.5951355695724487, 0.5933704972267151, 0.5907671451568604, 0.5940412282943726, 0.5920038223266602, 0.5940671563148499, 0.5944754481315613, 0.5921464562416077, 0.594139575958252, 0.5942417979240417, 0.5938576459884644, 0.5902946591377258, 0.5939643979072571, 0.5915199518203735, 0.5938649773597717, 0.5926678776741028, 0.592126727104187, 0.5934283137321472, 0.5935257077217102, 0.592745840549469, 0.5947563052177429, 0.5929798483848572, 0.5953916907310486, 0.5927171111106873, 0.5942713618278503, 0.591172993183136, 0.5928531885147095, 0.5936389565467834, 0.5922986268997192, 0.5923119187355042], "accuracy_train_first": 0.5170629873800295, "model": "residualv5", "loss_std": [0.2651570439338684, 0.12467299401760101, 0.12191576510667801, 0.1208561435341835, 0.11870208382606506, 0.11731564998626709, 0.11466033011674881, 0.11404281854629517, 0.11135692149400711, 0.1143566146492958, 0.10959328711032867, 0.11109916865825653, 0.10932408273220062, 0.1067030280828476, 0.10928925126791, 0.10492102801799774, 0.10663443803787231, 0.10580698400735855, 0.10269584506750107, 0.10439750552177429, 0.10154048353433609, 0.1029336079955101, 0.1017473116517067, 0.10205661505460739, 0.10183383524417877, 0.10283401608467102, 0.10065191984176636, 0.1012503057718277, 0.10105755180120468, 0.10066612809896469, 0.1008259654045105, 0.09949339181184769, 0.09859415143728256, 0.09835226833820343, 0.09837508946657181, 0.0992632508277893, 0.09819485992193222, 0.0986129641532898, 0.09858444333076477, 0.09902570396661758, 0.09885554760694504, 0.10041479021310806, 0.09833104908466339, 0.09981774538755417, 0.09857883304357529, 0.0982302650809288, 0.09574785083532333, 0.09605610370635986, 0.09858739376068115, 0.09732548147439957, 0.0988311618566513, 0.09766046702861786, 0.09833617508411407, 0.10004168748855591, 0.09763345122337341, 0.09648961573839188, 0.09710816293954849, 0.0972139835357666, 0.09534873068332672, 0.09747018665075302, 0.09713216125965118, 0.09676649421453476, 0.09658029675483704, 0.0976390689611435, 0.09837842732667923, 0.09906676411628723, 0.09412717074155807, 0.09731555730104446, 0.09630044549703598, 0.0970553457736969, 0.09781160205602646, 0.09814412891864777, 0.0957506075501442, 0.09781388193368912, 0.09610006958246231, 0.0966707319021225, 0.09546112269163132, 0.09793491661548615, 0.09698455780744553, 0.09623733907938004, 0.09736064821481705, 0.09759820997714996, 0.09749425947666168, 0.09792719781398773, 0.09598442167043686, 0.09718719124794006, 0.0975509062409401, 0.09713417291641235, 0.09740956872701645, 0.09763819724321365, 0.09756885468959808, 0.09577687829732895, 0.09700233489274979, 0.09643175452947617, 0.09629859030246735, 0.09728716313838959, 0.09780572354793549, 0.09651859849691391, 0.09676540642976761, 0.09444219619035721, 0.0958738923072815, 0.09657368808984756, 0.09644610434770584, 0.09733594954013824, 0.09790452569723129, 0.09641784429550171, 0.09566377103328705, 0.09901987016201019, 0.09787806868553162, 0.09811776131391525, 0.098388671875, 0.0946585014462471, 0.09729041904211044, 0.09685170650482178, 0.0950869619846344, 0.09659923613071442, 0.09814617037773132, 0.09558283537626266, 0.09663882851600647, 0.09435999393463135, 0.09580029547214508, 0.09474384784698486, 0.09675439447164536, 0.09699995070695877, 0.09768179804086685, 0.09658540785312653, 0.09603232145309448, 0.09567011892795563, 0.0972311869263649, 0.09714417159557343, 0.09591922909021378, 0.09778785705566406, 0.09642978012561798, 0.09616317600011826, 0.0967162698507309, 0.09735143929719925, 0.09573613107204437, 0.09798360615968704, 0.0967949628829956, 0.09612170606851578, 0.09728066623210907, 0.09541495144367218, 0.095796138048172, 0.09696632623672485, 0.09730156511068344, 0.09642792493104935, 0.09886080026626587, 0.09677128493785858, 0.09942056238651276, 0.09829405695199966, 0.0955880731344223, 0.09708120673894882, 0.09701178967952728, 0.09695449471473694, 0.09651129692792892, 0.09539604187011719, 0.09639947861433029, 0.09722477197647095, 0.09608342498540878, 0.09628516435623169, 0.09736697375774384, 0.09598777443170547, 0.09757761657238007, 0.09693222492933273]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:16 2016", "state": "available"}], "summary": "51bb5505032c53fd275cdc2830558467"}