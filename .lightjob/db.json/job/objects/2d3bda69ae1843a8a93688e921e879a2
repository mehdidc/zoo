{"content": {"hp_model": {"f0": 32, "f1": 64, "f2": 16, "f3": 32, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.01356395693196333, 0.008845005258915753, 0.018728633954728624, 0.016446883033692704, 0.015166591879919311, 0.015695361631451892, 0.014945299882079946, 0.014695507818150424, 0.016349020627959253, 0.017285810658916805, 0.016966349053458625, 0.014965346700324, 0.0135711831198713, 0.01375514118521584, 0.012819239523160464, 0.015278414717742817, 0.014784486427458424, 0.019635492143540156, 0.01997955519799761, 0.019564884510527673, 0.01700343712381575, 0.018339045866782196, 0.01665032395292937, 0.015437640874104685, 0.015353253343059193, 0.01464123854704588, 0.01443968501777325, 0.014859034258051775, 0.01331843254711997, 0.012255030616899039, 0.013453471026329492, 0.012933090893753734, 0.013907656614101755, 0.015458745622110009, 0.015700389994840573, 0.015891244469193044, 0.01509799333167944, 0.0153508220459595, 0.01582576455909078, 0.015895655548624935, 0.01592404693095997, 0.016711233162670446, 0.016200474305833632, 0.016073956902478505, 0.01736494804762391, 0.01696046310208909, 0.016927505417988715, 0.017066703438255598, 0.017522387680990206, 0.016825572419053733, 0.017328238966165463, 0.016997155837827148, 0.017218104880530227, 0.017335943091051416, 0.01854103973069744, 0.019273081566784495, 0.018951806295745187, 0.019690876556439727, 0.019192429732543162, 0.020270941797375184, 0.01886980036880029, 0.018528675548772803, 0.01840316492530644, 0.01848676987932263, 0.019094638458833788, 0.019257803287154533, 0.019156930010001325], "moving_avg_accuracy_train": [0.05913040876476559, 0.12183977309431522, 0.18305322752284048, 0.2416744437667266, 0.2963492086635404, 0.34728604729677104, 0.3946471997999289, 0.43852531201701056, 0.47902687250043313, 0.5164012168176194, 0.5507728016292591, 0.5824233737930682, 0.6115805683558987, 0.6384240407112003, 0.663003945667858, 0.6856837876966795, 0.7066070701142577, 0.7258541177805267, 0.7435508096385021, 0.7599148521404141, 0.7750330432944974, 0.7889694422688498, 0.8018492397766916, 0.8138178037385296, 0.8248475667732222, 0.8350439986687128, 0.8444788788925115, 0.8532167368677398, 0.8613086375799599, 0.8688447894411961, 0.8758783700900998, 0.8824457578526845, 0.8885795490270876, 0.8942882981376217, 0.8995679703656646, 0.9044870500363702, 0.9090397797757195, 0.9133395244875625, 0.9173975957329739, 0.9211963081800253, 0.9247522971133146, 0.9280991715282751, 0.9312485422815016, 0.9341852825070244, 0.9369654964409381, 0.9395978973147937, 0.9420740509953206, 0.9444025707066043, 0.9466539152705415, 0.9487637946864091, 0.9507556921130709, 0.9526251297077807, 0.9544098940418199, 0.9560882615555504, 0.9576917622214701, 0.9592209433267502, 0.9606646356369786, 0.9620430137757078, 0.9633649343088975, 0.9646104663601968, 0.9657965493730328, 0.966945332195281, 0.9680280648603045, 0.9690769290207303, 0.970072060038923, 0.9710072054850585, 0.9719046399580089], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 529375415, "moving_var_accuracy_train": [0.03146764716619441, 0.06371306182112069, 0.09106553866666689, 0.11288700774521233, 0.12850227621938792, 0.13900310236697916, 0.14529050102812766, 0.1480890495109282, 0.1480435321741664, 0.14581075347500613, 0.14186233070967919, 0.13669192610337963, 0.13067401144601445, 0.12409175837422158, 0.11712012808590437, 0.11003749238738458, 0.10297379687277779, 0.09601045678030867, 0.08922796722672299, 0.08271520748709016, 0.07650072407232378, 0.07059866061244237, 0.06503179720578522, 0.05981783619498418, 0.054930953628899014, 0.05037356327660352, 0.04613735963248002, 0.042210775127189376, 0.038579007328698296, 0.03523224885970899, 0.03215426528443978, 0.029327013994213127, 0.026732923142332474, 0.024352939175762447, 0.02216851970770631, 0.020169443840196425, 0.018339045588892783, 0.016671531271286698, 0.015152589624253537, 0.013767202608126637, 0.012504287862957068, 0.011354673191807017, 0.010308472697897815, 0.009355245416477868, 0.00848928718049503, 0.007702724271691609, 0.00698763387796873, 0.006337668526584389, 0.005749518645036078, 0.0052146311008779865, 0.004728876889015265, 0.0042874423723983715, 0.00388736658871106, 0.0035239821874402683, 0.003194724898166685, 0.002896297962024727, 0.0026254263932017647, 0.0023799830905215287, 0.0021577120465339915, 0.001955902992697916, 0.0017729738296481672, 0.0016075537644375838, 0.0014573491782090035, 0.0013215153046313348, 0.0011982763458585255, 0.0010863191843215228, 0.0009849357635885285], "duration": 23974.432953, "accuracy_train": [0.591304087647656, 0.686224052060262, 0.7339743173795681, 0.7692653899617018, 0.7884220927348652, 0.8057175949958472, 0.8208975723283499, 0.8334283219707457, 0.8435409168512367, 0.852770315672296, 0.8601170649340162, 0.8672785232673496, 0.8739953194213732, 0.8800152919089147, 0.8842230902777777, 0.8898023659560724, 0.8949166118724622, 0.8990775467769472, 0.9028210363602805, 0.9071912346576227, 0.9110967636812477, 0.9143970330380213, 0.9177674173472684, 0.9215348793950721, 0.9241154340854559, 0.9268118857281286, 0.9293928009067, 0.9318574586447952, 0.9341357439899409, 0.936670156192322, 0.9391805959302326, 0.9415522477159468, 0.9437836695967147, 0.945667040132429, 0.947085020418051, 0.9487587670727206, 0.9500143474298633, 0.9520372268941492, 0.9539202369416758, 0.9553847202034883, 0.9567561975129198, 0.9582210412629198, 0.9595928790605389, 0.9606159445367294, 0.9619874218461609, 0.9632895051794942, 0.9643594341200628, 0.965359248108158, 0.9669160163459765, 0.9677527094292175, 0.9686827689530271, 0.9694500680601699, 0.9704727730481728, 0.9711935691791252, 0.9721232682147471, 0.972983573274271, 0.973657866429033, 0.974448417024271, 0.9752622191076044, 0.97582025482189, 0.9764712964885567, 0.977284377595515, 0.977772658845515, 0.9785167064645626, 0.9790282392026578, 0.9794235145002769, 0.9799815502145626], "end": "2016-01-24 16:09:59.424000", "learning_rate_per_epoch": [0.0009253707830794156, 0.0004626853915397078, 0.0003084569179918617, 0.0002313426957698539, 0.00018507415370550007, 0.00015422845899593085, 0.00013219582615420222, 0.00011567134788492694, 0.0001028189726639539, 9.253707685275003e-05, 8.412461465923116e-05, 7.711422949796543e-05, 7.118236680980772e-05, 6.609791307710111e-05, 6.169138214318082e-05, 5.783567394246347e-05, 5.443357440526597e-05, 5.140948633197695e-05, 4.870372504228726e-05, 4.6268538426375017e-05, 4.406527295941487e-05, 4.206230732961558e-05, 4.02335099352058e-05, 3.855711474898271e-05, 3.701483001350425e-05, 3.559118340490386e-05, 3.4272990887984633e-05, 3.3048956538550556e-05, 3.1909337849356234e-05, 3.084569107159041e-05, 2.9850669307052158e-05, 2.8917836971231736e-05, 2.804153882607352e-05, 2.7216787202632986e-05, 2.6439163775648922e-05, 2.5704743165988475e-05, 2.5010020181071013e-05, 2.435186252114363e-05, 2.372745620959904e-05, 2.3134269213187508e-05, 2.2570018700207584e-05, 2.2032636479707435e-05, 2.1520250811590813e-05, 2.103115366480779e-05, 2.056379526038654e-05, 2.01167549676029e-05, 1.9688739484990947e-05, 1.9278557374491356e-05, 1.8885117242462002e-05, 1.8507415006752126e-05, 1.8144524801755324e-05, 1.779559170245193e-05, 1.7459826267440803e-05, 1.7136495443992317e-05, 1.682492256804835e-05, 1.6524478269275278e-05, 1.6234575014095753e-05, 1.5954668924678117e-05, 1.5684250683989376e-05, 1.5422845535795204e-05, 1.5170012375165243e-05, 1.4925334653526079e-05, 1.4688424926134758e-05, 1.4458918485615868e-05, 1.4236473361961544e-05, 1.402076941303676e-05, 1.3811503777105827e-05], "accuracy_valid": [0.5754423945783133, 0.6669789509600903, 0.7001203054405121, 0.7258580219314759, 0.7346882647778614, 0.7470482516001506, 0.7566109163215362, 0.7620128953313253, 0.7666515672063253, 0.7697033250188253, 0.7725212372929217, 0.7738846009036144, 0.7758583160768072, 0.7763465973268072, 0.7761127517884037, 0.7770687241152108, 0.7771907944277108, 0.7756744752447289, 0.7759186158697289, 0.7750641236822289, 0.7765598526920181, 0.7759392060429217, 0.7746067276920181, 0.7732742493411144, 0.7726638977786144, 0.7740272613893072, 0.7735389801393072, 0.7731624741152108, 0.7729286285768072, 0.7722065017884037, 0.7713417145143072, 0.7715961502259037, 0.7702430817018072, 0.7696121399661144, 0.7686252823795181, 0.7681370011295181, 0.7678928605045181, 0.7674045792545181, 0.7676487198795181, 0.7670383683170181, 0.7665500870670181, 0.7666618622929217, 0.7656852997929217, 0.7654411591679217, 0.7638336549322289, 0.7632233033697289, 0.7635895143072289, 0.7627350221197289, 0.7618702348456325, 0.7618805299322289, 0.7613819535956325, 0.7602833207831325, 0.7590523225715362, 0.7585640413215362, 0.7581875352974398, 0.7579330995858433, 0.7572006777108433, 0.756580031061747, 0.7569565370858433, 0.756335890436747, 0.7564682558358433, 0.7557358339608433, 0.7553696230233433, 0.7552475527108433, 0.7556137636483433, 0.7553696230233433, 0.7551254823983433], "accuracy_test": 0.4511937978316326, "start": "2016-01-24 09:30:24.991000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0], "accuracy_train_last": 0.9799815502145626, "batch_size_eval": 1024, "accuracy_train_std": [0.017524742908988318, 0.018532170697182923, 0.021019920161688396, 0.019658035643568408, 0.01877891762032626, 0.018633644337997236, 0.01875875750964259, 0.0187323090712451, 0.019389807923928654, 0.019058399070742253, 0.018056758348180848, 0.01776981020290748, 0.017850694528001455, 0.017931585207872133, 0.017597586152267714, 0.017613142602891083, 0.017157667739578396, 0.017313383009837667, 0.01602247269172668, 0.015421603990364855, 0.015146705599019402, 0.01499972430548097, 0.014349803442169082, 0.01386635054240222, 0.01385935305350003, 0.013780612972934148, 0.013310705782485457, 0.013172193810439051, 0.012363233638635668, 0.012272103344092445, 0.012597745065475901, 0.012068629939486602, 0.011702300024420497, 0.011162462226909978, 0.010988555257830157, 0.0107010460644639, 0.010544408939568723, 0.009933475095597773, 0.009654616632008386, 0.00939237510926703, 0.009232815717602953, 0.008935349326475519, 0.009044405547189393, 0.00903067647307829, 0.008725118882971762, 0.008523601431148383, 0.008241723185462594, 0.008372416507682128, 0.008434232539178927, 0.008520295464671626, 0.008506429955138424, 0.008338765051142397, 0.008254863352677843, 0.00809759900891869, 0.008001013129565877, 0.007827132144902733, 0.007451940116015447, 0.007320878546787996, 0.007245071584622522, 0.007166603911665969, 0.00696070604798802, 0.0069278717160968185, 0.006884230335801362, 0.006897921451569621, 0.006872242870813824, 0.006664704453203261, 0.006477521554685844], "accuracy_test_std": 0.012314002162387526, "error_valid": [0.42455760542168675, 0.3330210490399097, 0.29987969455948793, 0.27414197806852414, 0.2653117352221386, 0.25295174839984935, 0.2433890836784638, 0.23798710466867468, 0.23334843279367468, 0.23029667498117468, 0.22747876270707834, 0.22611539909638556, 0.22414168392319278, 0.22365340267319278, 0.22388724821159633, 0.22293127588478923, 0.22280920557228923, 0.22432552475527112, 0.22408138413027112, 0.22493587631777112, 0.2234401473079819, 0.22406079395707834, 0.2253932723079819, 0.22672575065888556, 0.22733610222138556, 0.22597273861069278, 0.22646101986069278, 0.22683752588478923, 0.22707137142319278, 0.22779349821159633, 0.22865828548569278, 0.22840384977409633, 0.22975691829819278, 0.23038786003388556, 0.2313747176204819, 0.2318629988704819, 0.2321071394954819, 0.2325954207454819, 0.2323512801204819, 0.2329616316829819, 0.2334499129329819, 0.23333813770707834, 0.23431470020707834, 0.23455884083207834, 0.23616634506777112, 0.23677669663027112, 0.23641048569277112, 0.23726497788027112, 0.23812976515436746, 0.23811947006777112, 0.23861804640436746, 0.23971667921686746, 0.2409476774284638, 0.2414359586784638, 0.24181246470256024, 0.24206690041415668, 0.24279932228915668, 0.24341996893825302, 0.24304346291415668, 0.24366410956325302, 0.24353174416415668, 0.24426416603915668, 0.24463037697665668, 0.24475244728915668, 0.24438623635165668, 0.24463037697665668, 0.24487451760165668], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.6132510851784246, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0009253707610916999, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "optimization": "adam", "nb_data_augmentation": 0, "learning_rate_decay_method": "lin", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 1.32218607983663e-10, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.0243298070796229}, "accuracy_valid_max": 0.7771907944277108, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7551254823983433, "loss_train": [1.4358726739883423, 1.0289535522460938, 0.8028383851051331, 0.6929222345352173, 0.6212738752365112, 0.5682443380355835, 0.5253909230232239, 0.48947766423225403, 0.45848214626312256, 0.43160051107406616, 0.40771767497062683, 0.38623863458633423, 0.3664970099925995, 0.34837058186531067, 0.33166876435279846, 0.3160017728805542, 0.30129265785217285, 0.28749793767929077, 0.2744109630584717, 0.2620531916618347, 0.25019317865371704, 0.23888637125492096, 0.22808463871479034, 0.21776430308818817, 0.20790784060955048, 0.19851642847061157, 0.18946179747581482, 0.18080788850784302, 0.1725020855665207, 0.164480522274971, 0.1567649245262146, 0.14935311675071716, 0.14228664338588715, 0.13543394207954407, 0.12889587879180908, 0.12265753746032715, 0.11664396524429321, 0.11087042838335037, 0.10535755753517151, 0.10005105286836624, 0.09497617930173874, 0.09007972478866577, 0.08538849651813507, 0.08091695606708527, 0.07659731805324554, 0.07252174615859985, 0.06858247518539429, 0.0648004561662674, 0.061220016330480576, 0.05777839571237564, 0.05451527237892151, 0.05140716955065727, 0.048455189913511276, 0.04563521221280098, 0.04295701906085014, 0.040423616766929626, 0.038025498390197754, 0.03575208783149719, 0.033584363758563995, 0.03153853118419647, 0.02961595542728901, 0.027795335277915, 0.026082640513777733, 0.024481749162077904, 0.02296934463083744, 0.021548889577388763, 0.02021063305437565], "accuracy_train_first": 0.591304087647656, "model": "residualv3", "loss_std": [0.26594245433807373, 0.14336837828159332, 0.12789390981197357, 0.12061711400747299, 0.11648781597614288, 0.11286289244890213, 0.10943149775266647, 0.10623379051685333, 0.10323996096849442, 0.10047230869531631, 0.0979233831167221, 0.09540603309869766, 0.09298186004161835, 0.09051529318094254, 0.08814450353384018, 0.08592437952756882, 0.08379527926445007, 0.0816398411989212, 0.07942327111959457, 0.07741762697696686, 0.07536232471466064, 0.07346857339143753, 0.07142608612775803, 0.06948903948068619, 0.06761381030082703, 0.0657644122838974, 0.06392835080623627, 0.062118999660015106, 0.06021936982870102, 0.058315932750701904, 0.056446004658937454, 0.054654572159051895, 0.05284469202160835, 0.05096713453531265, 0.04919508472084999, 0.04740515723824501, 0.04561994969844818, 0.043835610151290894, 0.042107757180929184, 0.0404014028608799, 0.0386970154941082, 0.03701074793934822, 0.03533947840332985, 0.03370017185807228, 0.03209082782268524, 0.030543237924575806, 0.029033420607447624, 0.02748381346464157, 0.026039820164442062, 0.024608878418803215, 0.023267855867743492, 0.021922491490840912, 0.020647559314966202, 0.01941697485744953, 0.01823483780026436, 0.017113180831074715, 0.016056004911661148, 0.015026862733066082, 0.014038238674402237, 0.013124565593898296, 0.012275290675461292, 0.011504962109029293, 0.01079633180052042, 0.010149544104933739, 0.009548252448439598, 0.009005799889564514, 0.00849071890115738]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:11 2016", "state": "available"}], "summary": "a4ca1302882c4d8520a5ad2b43ebd23d"}