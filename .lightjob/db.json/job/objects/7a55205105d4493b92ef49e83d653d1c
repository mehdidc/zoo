{"content": {"hp_model": {"f1": 4, "f2": 240, "f3": 121, "nonlin": "leaky_rectify", "ds2": 992, "ds1": 1162, "do2": 0.8496055964756264, "do3": 0.39256454518364015, "do1": 0.00243024020308924, "do4": 0.11103386256319114, "do5": 0.644947162151623}, "accuracy_valid_std": [0.02245384301084577, 0.02245384301084577, 0.02245384301084577, 0.02245384301084577, 0.02245384301084577, 0.02245384301084577, 0.021075007775439598, 0.021075007775439598, 0.021075007775439598, 0.021075007775439598, 0.021831096059634344, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883, 0.02228676495683883], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "duration": 32672.749546, "accuracy_train": [0.10000941265060241, 0.10000941265060241, 0.10000941265060241, 0.10000941265060241, 0.10000941265060241, 0.10000941265060241, 0.10033885542168675, 0.10033885542168675, 0.10033885542168675, 0.10033885542168675, 0.10085655120481928, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555, 0.10111539909638555], "end": "2016-01-17 06:23:24.257000", "learning_rate_per_epoch": [0.0045562139712274075, 0.0022781069856137037, 0.001518737873993814, 0.0011390534928068519, 0.0009112427360378206, 0.000759368936996907, 0.0006508876685984433, 0.0005695267464034259, 0.0005062459968030453, 0.0004556213680189103, 0.0004142012621741742, 0.0003796844684984535, 0.0003504779888316989, 0.00032544383429922163, 0.00030374759808182716, 0.00028476337320171297, 0.0002680125762708485, 0.00025312299840152264, 0.00023980072000995278, 0.00022781068400945514, 0.0002169625659007579, 0.0002071006310870871, 0.00019809625518973917, 0.00018984223424922675, 0.00018224855011794716, 0.00017523899441584945, 0.00016874865104909986, 0.00016272191714961082, 0.00015711081505287439, 0.00015187379904091358, 0.00014697463484480977, 0.00014238168660085648, 0.0001380670873913914, 0.00013400628813542426, 0.00013017753371968865, 0.00012656149920076132, 0.00012314091145526618, 0.00011990036000497639, 0.00011682599142659456, 0.00011390534200472757, 0.00011112716310890391, 0.00010848128295037895, 0.00010595846106298268, 0.00010355031554354355, 0.00010124919208465144, 9.904812759486958e-05, 9.69407192314975e-05, 9.492111712461337e-05, 9.298395161749795e-05, 9.112427505897358e-05, 8.933752542361617e-05, 8.761949720792472e-05], "accuracy_valid": [0.09886853448275862, 0.09886853448275862, 0.09886853448275862, 0.09886853448275862, 0.09886853448275862, 0.09886853448275862, 0.09832974137931035, 0.09832974137931035, 0.09832974137931035, 0.09832974137931035, 0.09482758620689655, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375, 0.09375], "accuracy_test": 0.09985977564102565, "start": "2016-01-16 21:18:51.508000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0], "accuracy_train_last": 0.10111539909638555, "error_valid": [0.9011314655172413, 0.9011314655172413, 0.9011314655172413, 0.9011314655172413, 0.9011314655172413, 0.9011314655172413, 0.9016702586206896, 0.9016702586206896, 0.9016702586206896, 0.9016702586206896, 0.9051724137931034, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625, 0.90625], "accuracy_train_std": [0.02619648214265615, 0.02619648214265615, 0.02619648214265615, 0.02619648214265615, 0.02619648214265615, 0.02619648214265615, 0.0262839735875855, 0.0262839735875855, 0.0262839735875855, 0.0262839735875855, 0.027351444285841187, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564, 0.026416732201075564], "accuracy_test_std": 0.0264090897727647, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1.0, 1.2], "translation_range": [-3, 3], "momentum": 0.8632293792718397, "shear_range": [1, 1.1], "patience_check_each": 1, "learning_rate": 0.004556213761593851, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "optimization": "rmsprop", "nb_data_augmentation": 3, "learning_rate_decay_method": "lin", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 1.1516310166872511e-10, "valid_ratio": 0.15, "rotation_range": [-90, 90], "learning_rate_decay": 0.8949464580147074}, "accuracy_valid_max": 0.09886853448275862, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    args = parser.parse_args()\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.98, interval=[0.8, 1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256, 512],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1.0, 1.2)),\n        rotation_range=make_constant_param((-90, 90)),\n        shear_range=make_constant_param((1, 1.1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    model_class = vgg\n\n    instantiate = instantiate_random\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.09375, "loss_train": [2.3041329383850098, 2.3030405044555664, 2.302873134613037, 2.302783966064453, 2.302736282348633, 2.302706241607666, 2.302687168121338, 2.3026740550994873, 2.3026626110076904, 2.3026506900787354, 2.3026468753814697, 2.3026421070098877, 2.3026371002197266, 2.3026318550109863, 2.3026304244995117, 2.302626132965088, 2.3026230335235596, 2.3026211261749268, 2.3026177883148193, 2.3026158809661865, 2.302614212036133, 2.3026130199432373, 2.3026115894317627, 2.3026111125946045, 2.302609920501709, 2.3026087284088135, 2.3026058673858643, 2.3026070594787598, 2.3026061058044434, 2.302604913711548, 2.302603244781494, 2.302603244781494, 2.3026039600372314, 2.3026034832000732, 2.3026022911071777, 2.302600145339966, 2.302600145339966, 2.3025994300842285, 2.3025999069213867, 2.3025991916656494, 2.302598476409912, 2.3025970458984375, 2.3025999069213867, 2.302598476409912, 2.3025972843170166, 2.3025975227355957, 2.302596092224121, 2.302595376968384, 2.302596092224121, 2.3025949001312256, 2.3025972843170166, 2.3025965690612793], "accuracy_train_first": 0.10000941265060241, "model": "vgg", "loss_std": [0.013023755513131618, 0.001974445069208741, 0.00123763142619282, 0.0008880058885551989, 0.0007333986577577889, 0.0006607146351598203, 0.0006171480054035783, 0.0005995798856019974, 0.0005764074740000069, 0.000573553319554776, 0.0005693061393685639, 0.0005584836471825838, 0.0005478517850860953, 0.0005472811753861606, 0.0005433133919723332, 0.0005417121574282646, 0.0005427867290563881, 0.0005419555236585438, 0.0005414730403572321, 0.0005452477489598095, 0.0005415539490059018, 0.0005422079120762646, 0.0005437542567960918, 0.000542637484613806, 0.0005438830703496933, 0.0005433002370409667, 0.0005435561761260033, 0.0005458106170408428, 0.0005446493159979582, 0.0005448217852972448, 0.0005472417687997222, 0.0005506320740096271, 0.0005472861812449992, 0.0005485057481564581, 0.0005446482682600617, 0.0005471229087561369, 0.0005459041567519307, 0.0005477413651533425, 0.0005477984668686986, 0.0005441724206320941, 0.000542465306352824, 0.0005460742977447808, 0.0005443792324513197, 0.0005444192211143672, 0.0005470237229019403, 0.0005461819237098098, 0.000545934890396893, 0.0005492194904945791, 0.0005516889505088329, 0.0005480878171510994, 0.0005469531752169132, 0.0005477225640788674]}, "state": "available", "life": [{"dt": "Sun May 15 22:04:57 2016", "state": "available"}], "summary": "031e800d4af2203ab883e8ade3a45d9b"}