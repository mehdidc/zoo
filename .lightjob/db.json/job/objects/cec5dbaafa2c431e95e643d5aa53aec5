{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 64, "f3": 64, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.06146137448505606, 0.067708201630041, 0.0706608820095369, 0.07823586807848484, 0.08122567956587587, 0.08000312976844322, 0.07717260912812296, 0.08160989836770886, 0.0828935436866547, 0.08054877607697311, 0.08244567593775402, 0.08312333143949664, 0.08451837674606098, 0.08492035752588713, 0.08459968464055478, 0.0853854289948339, 0.08554684053566046, 0.08708411911245656, 0.08880223371041128, 0.08888263266552968, 0.08859241207389607, 0.0879412881902807, 0.08867933664212858, 0.08927824781521695, 0.08943542557876585, 0.09003723073485566, 0.09016470565192983, 0.09078525248124754, 0.09067792709734138, 0.09180237402619035, 0.09200264621874599, 0.09146283533469463, 0.09130680367134747, 0.09072393923714371, 0.09098394113883432, 0.09104742993526829, 0.09073347302205319, 0.09056968686503071, 0.09114845042578171, 0.09106182632657271, 0.09083562804470052, 0.0905448717948718, 0.09055481833399284, 0.09059528259096938, 0.0902003030735275, 0.09050517323635457, 0.09011929854640673, 0.08962277954751874, 0.08946134582803261, 0.08936440548881172, 0.08920270411548883, 0.08877662325786041, 0.08922419461259484, 0.08919870531221726, 0.08919870531221726, 0.0889644625072553, 0.08878064107229547, 0.08870819204498608, 0.08883084841964353, 0.08878385519293189, 0.0889740845996184, 0.08904531585447245, 0.0885282706667576, 0.0885282706667576, 0.08841104473302908, 0.08829224919026445, 0.0882693195095731, 0.08796197171777326, 0.08793855030003464, 0.08791451404884267, 0.08798599500435231, 0.0884590424843486, 0.0883879440918615, 0.0883879440918615, 0.08836463557996159, 0.0882693195095731, 0.08829346116625883, 0.08822040989359008, 0.08817066404692125, 0.08802531011397091, 0.08802125782173914, 0.08802125782173914, 0.0881418350131189, 0.0881418350131189, 0.0881418350131189, 0.0884542035557394, 0.0884542035557394, 0.0884542035557394, 0.0884542035557394, 0.08849814744390207, 0.08849814744390207, 0.0883310241739369, 0.0883310241739369, 0.0883310241739369, 0.0883310241739369, 0.0883310241739369, 0.0883310241739369, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133, 0.08812008055335133], "moving_avg_accuracy_train": [0.018397025602409633, 0.03762989457831324, 0.05793505271084336, 0.07847814382530119, 0.09896005459337348, 0.11896333377259034, 0.13829111560617469, 0.15688858537085842, 0.17468523135184486, 0.19174231062629893, 0.20794788001547626, 0.22320589698380813, 0.23756170035771648, 0.2510772735448364, 0.26370486245541297, 0.27552385286649816, 0.2865233312846676, 0.2967499514694538, 0.30627629291889397, 0.31511826076555877, 0.32330899492996673, 0.33093244408154837, 0.3380406303962851, 0.34464272323015055, 0.3508010977444849, 0.35647541191581955, 0.3617446628929123, 0.36656699630241624, 0.37103887347940356, 0.37519063372182465, 0.3790142849580759, 0.3825685228779309, 0.38584734453592096, 0.3889041763473891, 0.39174709832108395, 0.3943810293022285, 0.39683157471537917, 0.39912648576793763, 0.40123661580560166, 0.40323456567082466, 0.40508449012783854, 0.40682942966927155, 0.4084587043228263, 0.4099532894628329, 0.4113243008779954, 0.4125958617540512, 0.41377085765695937, 0.41488482987319114, 0.41592505547020936, 0.41688243697138117, 0.4177864372501467, 0.4186235691275417, 0.4194122852569562, 0.4201386019119835, 0.42080640587741164, 0.4214168420968994, 0.421980353670342, 0.4225086925502957, 0.4230053760061095, 0.4234618037669443, 0.4238702355890451, 0.42424959004218876, 0.42460042170062046, 0.42492558284381143, 0.4252323468485869, 0.42552961291674024, 0.42580185870337944, 0.42605158623665595, 0.4262998726431108, 0.42653274305952266, 0.4267376201089921, 0.4269243626161652, 0.42709478403527157, 0.42724816331246734, 0.42738855782459406, 0.4275243255361106, 0.42765828228972846, 0.4277764902053339, 0.4278852304920294, 0.4279807435874048, 0.42805964588529083, 0.42812595162808703, 0.428183273633953, 0.42823015711393114, 0.42828176489651393, 0.42834233087674206, 0.42840625290954976, 0.42846848906437796, 0.4285292079290245, 0.4285885612325076, 0.4286490386935942, 0.4287011152459215, 0.4287479841430161, 0.4287901661504013, 0.42882577679439726, 0.42885782637399367, 0.4288913773209317, 0.42892392633582643, 0.42895557361188236, 0.4289887624856339, 0.4290186324720103, 0.42904786862239963, 0.42907418115775, 0.42910021560221595, 0.4291212934395847, 0.4291426166558672, 0.42916180755052147, 0.4291814325183609, 0.4291943886641152, 0.42920604919529404, 0.42921654367335504, 0.42922598870360995, 0.4292344892308393, 0.42924213970534575, 0.4292490251324015, 0.4292575751794023, 0.429265270221703, 0.42927219575977366, 0.42927842874403727, 0.4292840384298745, 0.429289087147128, 0.42929363099265616, 0.42930007361628214, 0.4293058719775455, 0.4293110905026825, 0.42931578717530583, 0.42932001418066684, 0.4293238184854917, 0.42932724235983416, 0.4293303238467423, 0.42933309718495966], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234423, "moving_var_accuracy_train": [0.003046054959141441, 0.006070578704625778, 0.009174215855246687, 0.012054961602554266, 0.01462504346070032, 0.01676371971592551, 0.018449416099792653, 0.01971726742464832, 0.020596026155736538, 0.02115491912053798, 0.021403011521531158, 0.02135797410563118, 0.021076978509660924, 0.020613317125882387, 0.019987089428544803, 0.01924557729472624, 0.018409916294499597, 0.017510178508684537, 0.016575921290517978, 0.01562195272007927, 0.014663550583439345, 0.013720248317796167, 0.012802960300181646, 0.011914952938246282, 0.011064787834350878, 0.010248089622750874, 0.009473165713212123, 0.008735143237502673, 0.008041608083126945, 0.007392581292809186, 0.00678490594251664, 0.006220108812983397, 0.005694853974869198, 0.005209466563894711, 0.004761259755641891, 0.004347572111798603, 0.003966861456015966, 0.0036175748610667645, 0.003295891213942757, 0.0030022283255239815, 0.0027328054774415074, 0.002486928255726665, 0.002262126253224443, 0.002056017690568553, 0.0018673329722162506, 0.0016951514785482696, 0.0015380618690401006, 0.0013954240890229174, 0.0012656203037548534, 0.0011473074874284424, 0.001039931687221671, 0.0009422456265208614, 0.0008536197220639627, 0.0007730055728078965, 0.000699718674753281, 0.0006331004986805154, 0.0005726483564530977, 0.000517895798556425, 0.00046832646879829475, 0.0004233687586262116, 0.0003825332317433313, 0.0003455750967790777, 0.00031212533277419157, 0.0002818643674181437, 0.0002545248680679624, 0.00022986768529864438, 0.00020754797668386528, 0.00018735445358336608, 0.000169173823481702, 0.0001527444988110901, 0.00013784782037857478, 0.00012437689321658491, 0.0001122005950357385, 0.00010119226235622242, 9.125043169191798e-05, 8.229128436614003e-05, 7.422365563608455e-05, 6.69270480742822e-05, 6.0340763316409614e-05, 5.438879174726232e-05, 4.900594272604135e-05, 4.4144916517187044e-05, 3.9759997176676853e-05, 3.580378000526296e-05, 3.224737227374467e-05, 2.9055649188019153e-05, 2.6186858505721682e-05, 2.360303270585966e-05, 2.127591045998938e-05, 1.918002474569965e-05, 1.7294939980825002e-05, 1.558985368846321e-05, 1.4050638561250661e-05, 1.2661588600848948e-05, 1.1406842802456353e-05, 1.0275403102181482e-05, 9.257993786327252e-06, 8.341729353030115e-06, 7.516570368462936e-06, 6.7748268436846914e-06, 6.1053741040913424e-06, 5.502529466088497e-06, 4.9585076651287424e-06, 4.468757029303732e-06, 4.025879803426656e-06, 3.6273839390576597e-06, 3.2679601590905655e-06, 2.944630397445794e-06, 2.651678113116468e-06, 2.387734013691176e-06, 2.149951818950005e-06, 1.9357595144236406e-06, 1.7428338936498715e-06, 1.5690772721264462e-06, 1.412596226865467e-06, 1.271994533912366e-06, 1.1453280036052204e-06, 1.0312268709428123e-06, 9.284538346840035e-07, 8.358916683923358e-07, 7.525319074662558e-07, 6.774645355092847e-07, 6.100916485510271e-07, 5.493850726359877e-07, 4.946916624138402e-07, 4.454210247760317e-07, 4.0103973046732456e-07, 3.610660120373978e-07, 3.250649170732705e-07, 2.926438854200295e-07, 2.6344871952183625e-07], "duration": 28160.064405, "accuracy_train": [0.1839702560240964, 0.21072571536144577, 0.24068147590361447, 0.2633659638554217, 0.2832972515060241, 0.2989928463855422, 0.31224115210843373, 0.32426581325301207, 0.3348550451807229, 0.34525602409638556, 0.3537980045180723, 0.3605280496987952, 0.36676393072289154, 0.3727174322289157, 0.3773531626506024, 0.3818947665662651, 0.3855186370481928, 0.3887895331325301, 0.39201336596385544, 0.3946959713855422, 0.3970256024096386, 0.39954348644578314, 0.4020143072289157, 0.40406155873493976, 0.40622646837349397, 0.4075442394578313, 0.409167921686747, 0.40996799698795183, 0.41128576807228917, 0.41255647590361444, 0.41342714608433734, 0.4145566641566265, 0.4153567394578313, 0.4164156626506024, 0.41733339608433734, 0.4180864081325301, 0.4188864834337349, 0.41978068524096385, 0.4202277861445783, 0.4212161144578313, 0.42173381024096385, 0.4225338855421687, 0.4231221762048193, 0.42340455572289154, 0.4236634036144578, 0.4240399096385542, 0.42434582078313254, 0.4249105798192771, 0.4252870858433735, 0.4254988704819277, 0.42592243975903615, 0.4261577560240964, 0.42651073042168675, 0.42667545180722893, 0.4268166415662651, 0.42691076807228917, 0.4270519578313253, 0.4272637424698795, 0.42747552710843373, 0.4275696536144578, 0.42754612198795183, 0.42766378012048195, 0.42775790662650603, 0.4278520331325301, 0.42799322289156627, 0.4282050075301205, 0.42825207078313254, 0.42829913403614456, 0.4285344503012048, 0.42862857680722893, 0.42858151355421686, 0.4286050451807229, 0.42862857680722893, 0.42862857680722893, 0.4286521084337349, 0.42874623493975905, 0.42886389307228917, 0.42884036144578314, 0.42886389307228917, 0.42884036144578314, 0.4287697665662651, 0.428722703313253, 0.428699171686747, 0.4286521084337349, 0.42874623493975905, 0.4288874246987952, 0.4289815512048193, 0.4290286144578313, 0.4290756777108434, 0.42912274096385544, 0.4291933358433735, 0.42916980421686746, 0.42916980421686746, 0.42916980421686746, 0.4291462725903614, 0.4291462725903614, 0.4291933358433735, 0.4292168674698795, 0.42924039909638556, 0.4292874623493976, 0.4292874623493976, 0.4293109939759036, 0.4293109939759036, 0.42933452560240964, 0.4293109939759036, 0.42933452560240964, 0.42933452560240964, 0.4293580572289157, 0.4293109939759036, 0.4293109939759036, 0.4293109939759036, 0.4293109939759036, 0.4293109939759036, 0.4293109939759036, 0.4293109939759036, 0.42933452560240964, 0.42933452560240964, 0.42933452560240964, 0.42933452560240964, 0.42933452560240964, 0.42933452560240964, 0.42933452560240964, 0.4293580572289157, 0.4293580572289157, 0.4293580572289157, 0.4293580572289157, 0.4293580572289157, 0.4293580572289157, 0.4293580572289157, 0.4293580572289157, 0.4293580572289157], "end": "2016-01-20 10:18:14.077000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0], "accuracy_valid": [0.18255876068376067, 0.21020299145299146, 0.23851495726495728, 0.26161858974358976, 0.27711004273504275, 0.2950053418803419, 0.3079594017094017, 0.3193108974358974, 0.327857905982906, 0.3345352564102564, 0.3406784188034188, 0.34802350427350426, 0.3540331196581197, 0.3579059829059829, 0.36191239316239315, 0.3641826923076923, 0.36672008547008544, 0.3696581196581197, 0.3736645299145299, 0.375133547008547, 0.3762019230769231, 0.3784722222222222, 0.38100961538461536, 0.3818108974358974, 0.38301282051282054, 0.38354700854700857, 0.3854166666666667, 0.38675213675213677, 0.3875534188034188, 0.38848824786324787, 0.38955662393162394, 0.390758547008547, 0.3924946581196581, 0.3936965811965812, 0.3951655982905983, 0.3956997863247863, 0.3970352564102564, 0.39903846153846156, 0.3997061965811966, 0.40010683760683763, 0.40050747863247865, 0.4014423076923077, 0.40211004273504275, 0.4025106837606838, 0.4030448717948718, 0.4031784188034188, 0.4042467948717949, 0.4050480769230769, 0.40518162393162394, 0.4049145299145299, 0.4050480769230769, 0.4047809829059829, 0.4049145299145299, 0.4047809829059829, 0.4047809829059829, 0.4047809829059829, 0.4050480769230769, 0.4049145299145299, 0.40531517094017094, 0.40531517094017094, 0.40558226495726496, 0.40571581196581197, 0.40571581196581197, 0.40571581196581197, 0.405849358974359, 0.40571581196581197, 0.405849358974359, 0.405982905982906, 0.406116452991453, 0.406517094017094, 0.406383547008547, 0.406383547008547, 0.406517094017094, 0.406517094017094, 0.406383547008547, 0.406650641025641, 0.406517094017094, 0.40691773504273504, 0.40718482905982906, 0.4074519230769231, 0.4077190170940171, 0.4077190170940171, 0.4075854700854701, 0.4075854700854701, 0.4075854700854701, 0.40718482905982906, 0.40718482905982906, 0.40718482905982906, 0.40718482905982906, 0.4074519230769231, 0.4074519230769231, 0.4075854700854701, 0.4075854700854701, 0.4075854700854701, 0.4075854700854701, 0.4075854700854701, 0.4075854700854701, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231, 0.4074519230769231], "accuracy_test": 0.4140625, "start": "2016-01-20 02:28:54.012000", "learning_rate_per_epoch": [0.00040535611333325505, 0.00037587835686281323, 0.00034854424302466214, 0.0003231978917028755, 0.0002996947441715747, 0.00027790074818767607, 0.0002576916303951293, 0.0002389521396253258, 0.00022157539206091315, 0.00020546228915918618, 0.000190520950127393, 0.00017666614439804107, 0.00016381886962335557, 0.00015190585691016167, 0.00014085916336625814, 0.00013061579375062138, 0.0001211173293995671, 0.0001123096008086577, 0.00010414237476652488, 9.656907786848024e-05, 8.954651275416836e-05, 8.30346325528808e-05, 7.699630077695474e-05, 7.139708031900227e-05, 6.620503700105473e-05, 6.139056495158002e-05, 5.6926204706542194e-05, 5.278649405227043e-05, 4.89478261442855e-05, 4.538831126410514e-05, 4.208764585200697e-05, 3.90270070056431e-05, 3.61889397026971e-05, 3.355725857545622e-05, 3.1116953323362395e-05, 2.8854108677478507e-05, 2.67558207269758e-05, 2.4810120521578938e-05, 2.3005912225926295e-05, 2.1332907635951415e-05, 1.97815661522327e-05, 1.8343038391321898e-05, 1.7009120711009018e-05, 1.5772206097608432e-05, 1.462524141970789e-05, 1.356168468191754e-05, 1.2575470464071259e-05, 1.1660974450933281e-05, 1.081298069038894e-05, 1.002665430860361e-05, 9.297509677708149e-06, 8.621388587926049e-06, 7.994435691216495e-06, 7.413075309159467e-06, 6.873991878819652e-06, 6.374110853357706e-06, 5.910581421630923e-06, 5.480760137288598e-06, 5.082195912109455e-06, 4.7126154640864115e-06, 4.369911039248109e-06, 4.052128588227788e-06, 3.75745526071114e-06, 3.4842107652366394e-06, 3.2308366826327983e-06, 2.9958882805658504e-06, 2.7780254185927333e-06, 2.576005726950825e-06, 2.3886768758529797e-06, 2.21497089114564e-06, 2.0538968783512246e-06, 1.9045362478209427e-06, 1.7660371440797462e-06, 1.6376097846659832e-06, 1.5185217989710509e-06, 1.4080939081395627e-06, 1.3056964007773786e-06, 1.2107453812859603e-06, 1.1226992455704021e-06, 1.0410558388684876e-06, 9.653496135797468e-07, 8.95148787094513e-07, 8.300530112137494e-07, 7.696910415688762e-07, 7.137186344152724e-07, 6.618165571126156e-07, 6.136888259788975e-07, 5.690610009878583e-07, 5.276785373098392e-07, 4.893054210697301e-07, 4.5372283352662635e-07, 4.2072781525348546e-07, 3.9013221453387814e-07, 3.6176155049361114e-07, 3.3545401834089716e-07, 3.110595798716531e-07, 2.884391392399266e-07, 2.6746366188490356e-07, 2.480135492533009e-07, 2.2997784299150226e-07, 2.132537133547885e-07, 1.9774577708631114e-07, 1.8336558582632279e-07, 1.70031128732262e-07, 1.5766636352054775e-07, 1.4620076171922847e-07, 1.3556895339661423e-07, 1.2571030083563528e-07, 1.1656857168418355e-07, 1.0809163342173633e-07, 1.002311407205525e-07, 9.294227254486032e-08, 8.618345503919045e-08, 7.991614126012792e-08, 7.410459090806398e-08, 6.871565716437544e-08, 6.371860905574067e-08, 5.908495381845569e-08, 5.4788259262750216e-08, 5.080402232238157e-08, 4.710952339337382e-08, 4.368368777818432e-08, 4.050698265700703e-08, 3.756128919008006e-08, 3.482981014713005e-08, 3.229696332596177e-08, 2.9948306945470904e-08, 2.7770447275088372e-08, 2.575096225143625e-08, 2.3878335753124702e-08, 2.2141888322835257e-08], "accuracy_train_last": 0.4293580572289157, "error_valid": [0.8174412393162394, 0.7897970085470085, 0.7614850427350427, 0.7383814102564102, 0.7228899572649572, 0.7049946581196581, 0.6920405982905983, 0.6806891025641026, 0.672142094017094, 0.6654647435897436, 0.6593215811965811, 0.6519764957264957, 0.6459668803418803, 0.642094017094017, 0.6380876068376069, 0.6358173076923077, 0.6332799145299146, 0.6303418803418803, 0.6263354700854701, 0.6248664529914529, 0.6237980769230769, 0.6215277777777778, 0.6189903846153846, 0.6181891025641026, 0.6169871794871795, 0.6164529914529915, 0.6145833333333333, 0.6132478632478633, 0.6124465811965811, 0.6115117521367521, 0.6104433760683761, 0.6092414529914529, 0.6075053418803419, 0.6063034188034189, 0.6048344017094017, 0.6043002136752137, 0.6029647435897436, 0.6009615384615384, 0.6002938034188035, 0.5998931623931624, 0.5994925213675213, 0.5985576923076923, 0.5978899572649572, 0.5974893162393162, 0.5969551282051282, 0.5968215811965811, 0.5957532051282051, 0.5949519230769231, 0.5948183760683761, 0.5950854700854701, 0.5949519230769231, 0.595219017094017, 0.5950854700854701, 0.595219017094017, 0.595219017094017, 0.595219017094017, 0.5949519230769231, 0.5950854700854701, 0.594684829059829, 0.594684829059829, 0.5944177350427351, 0.594284188034188, 0.594284188034188, 0.594284188034188, 0.594150641025641, 0.594284188034188, 0.594150641025641, 0.594017094017094, 0.5938835470085471, 0.593482905982906, 0.5936164529914529, 0.5936164529914529, 0.593482905982906, 0.593482905982906, 0.5936164529914529, 0.593349358974359, 0.593482905982906, 0.5930822649572649, 0.592815170940171, 0.5925480769230769, 0.592280982905983, 0.592280982905983, 0.5924145299145299, 0.5924145299145299, 0.5924145299145299, 0.592815170940171, 0.592815170940171, 0.592815170940171, 0.592815170940171, 0.5925480769230769, 0.5925480769230769, 0.5924145299145299, 0.5924145299145299, 0.5924145299145299, 0.5924145299145299, 0.5924145299145299, 0.5924145299145299, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769, 0.5925480769230769], "accuracy_train_std": [0.06744082049963039, 0.06942016075584798, 0.07382716959808143, 0.07616643352592357, 0.07811229401480936, 0.07957012733076549, 0.08263928985545685, 0.08373032853367227, 0.08390868562605384, 0.08531019189828559, 0.08584633747306368, 0.08456248699965492, 0.08527070528281643, 0.08634263633980814, 0.08671043882279121, 0.08747829219163339, 0.0879903588906513, 0.0876171539270823, 0.08851878214883584, 0.0883694728505706, 0.08866367133639315, 0.08873640943013486, 0.08895891054827354, 0.08892949736059626, 0.08873293978288195, 0.08874007862171998, 0.08917695400353888, 0.08890764206565535, 0.08861898069527942, 0.08891886463192242, 0.08929450473554693, 0.08945172921093794, 0.08931620646942381, 0.08937072586130515, 0.08942206013699484, 0.08969519858930575, 0.08981552672154912, 0.08993899397428096, 0.08985831895104246, 0.08987918220974042, 0.08996326392960409, 0.09000999400731978, 0.08947933390926342, 0.08958993960157952, 0.08960156184101448, 0.08920665493803026, 0.089223434946226, 0.08923897388884011, 0.0893818252344717, 0.08924998417327035, 0.08890152573117466, 0.08906405732146362, 0.08911242406327724, 0.08907894028025085, 0.08903818962113999, 0.0891567214075923, 0.08917337730405568, 0.08907005991672633, 0.08888342339994812, 0.08890226071010775, 0.08893684456501087, 0.08911099795729834, 0.08917907760098422, 0.08909856905226679, 0.08896508517968514, 0.08904941749909234, 0.08913685384681717, 0.08917471547838383, 0.08922341012146899, 0.08930695597516368, 0.08919515507019032, 0.0892263549100832, 0.0892657759293375, 0.08910086542303705, 0.08909082496781626, 0.08914962835494225, 0.08923942065547778, 0.08926597753456063, 0.08937939668675306, 0.08936477754171496, 0.08931263534657866, 0.08934918300977568, 0.08934275291994251, 0.08937925109569896, 0.08942141922097299, 0.08945157135689245, 0.08936188998549947, 0.08939104630007662, 0.08935435463541658, 0.08933408783557835, 0.08933656410246701, 0.08937140741431054, 0.08937140741431054, 0.08937140741431054, 0.08936509665432664, 0.08934863763216476, 0.08928716215500658, 0.0893346333020141, 0.08933269626123218, 0.08937818238814842, 0.08937818238814842, 0.08943380325848316, 0.08943380325848316, 0.08940717236052073, 0.0893926816467318, 0.08937426678232027, 0.08937426678232027, 0.08933938119873357, 0.08931038162177829, 0.08931038162177829, 0.08931038162177829, 0.08931038162177829, 0.08931038162177829, 0.08931038162177829, 0.08931038162177829, 0.08932488568667524, 0.08932488568667524, 0.08932488568667524, 0.08932488568667524, 0.08932488568667524, 0.08932488568667524, 0.08932488568667524, 0.089314684419768, 0.089314684419768, 0.089314684419768, 0.089314684419768, 0.089314684419768, 0.089314684419768, 0.089314684419768, 0.089314684419768, 0.089314684419768], "accuracy_test_std": 0.0858099286222769, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.5740157603649734, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.00043714561662068534, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "optimization": "adadelta", "nb_data_augmentation": 0, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 6.234547167743601e-08, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.07272062238512826}, "accuracy_valid_max": 0.4077190170940171, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234423\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -4], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.4074519230769231, "loss_train": [23.484827041625977, 4.335171699523926, 3.2593936920166016, 2.763127565383911, 2.4809019565582275, 2.301809549331665, 2.178565263748169, 2.08897066116333, 2.0204873085021973, 1.966579794883728, 1.923083782196045, 1.8871397972106934, 1.8568276166915894, 1.8310080766677856, 1.8086789846420288, 1.7892425060272217, 1.7721866369247437, 1.7571008205413818, 1.743694543838501, 1.7317428588867188, 1.7210161685943604, 1.7114118337631226, 1.7027597427368164, 1.6949524879455566, 1.6878728866577148, 1.6814415454864502, 1.6756043434143066, 1.6702936887741089, 1.6654601097106934, 1.661043405532837, 1.657009243965149, 1.6533210277557373, 1.6499450206756592, 1.6468422412872314, 1.64398992061615, 1.6413700580596924, 1.6389610767364502, 1.6367424726486206, 1.6347031593322754, 1.6328233480453491, 1.6310888528823853, 1.6294915676116943, 1.6280163526535034, 1.6266573667526245, 1.6254030466079712, 1.6242437362670898, 1.6231727600097656, 1.6221823692321777, 1.6212676763534546, 1.620422124862671, 1.6196407079696655, 1.6189179420471191, 1.6182485818862915, 1.617629885673523, 1.6170576810836792, 1.6165276765823364, 1.6160374879837036, 1.6155834197998047, 1.61516273021698, 1.6147725582122803, 1.6144109964370728, 1.6140758991241455, 1.6137651205062866, 1.6134763956069946, 1.6132088899612427, 1.6129601001739502, 1.6127294301986694, 1.6125152111053467, 1.6123164892196655, 1.612131953239441, 1.611960768699646, 1.6118017435073853, 1.6116536855697632, 1.6115162372589111, 1.6113888025283813, 1.6112711429595947, 1.6111621856689453, 1.6110613346099854, 1.6109685897827148, 1.6108826398849487, 1.610803484916687, 1.6107304096221924, 1.6106626987457275, 1.6106011867523193, 1.6105448007583618, 1.610493779182434, 1.6104470491409302, 1.6104048490524292, 1.610366940498352, 1.61033296585083, 1.6103026866912842, 1.6102758646011353, 1.610251784324646, 1.6102303266525269, 1.6102116107940674, 1.6101946830749512, 1.6101794242858887, 1.6101664304733276, 1.6101549863815308, 1.610145092010498, 1.61013662815094, 1.6101292371749878, 1.610122799873352, 1.610116958618164, 1.6101120710372925, 1.610107660293579, 1.6101036071777344, 1.610100269317627, 1.6100971698760986, 1.6100949048995972, 1.6100927591323853, 1.6100908517837524, 1.6100891828536987, 1.6100879907608032, 1.6100866794586182, 1.6100856065750122, 1.6100844144821167, 1.6100836992263794, 1.610082983970642, 1.6100822687149048, 1.6100819110870361, 1.6100813150405884, 1.6100809574127197, 1.610080599784851, 1.6100802421569824, 1.6100800037384033, 1.6100796461105347, 1.6100796461105347, 1.610079288482666, 1.610079288482666, 1.6100791692733765], "accuracy_train_first": 0.1839702560240964, "model": "residualv2", "loss_std": [39.771873474121094, 0.7914493680000305, 0.4986494481563568, 0.3938553035259247, 0.3392392098903656, 0.3082556128501892, 0.2883583605289459, 0.2747613191604614, 0.2648179829120636, 0.25737708806991577, 0.25177669525146484, 0.24729186296463013, 0.2435711920261383, 0.2405884563922882, 0.23805703222751617, 0.235898956656456, 0.23405610024929047, 0.2324567437171936, 0.23113588988780975, 0.22996312379837036, 0.2289508432149887, 0.22805331647396088, 0.22726018726825714, 0.22653883695602417, 0.22589635848999023, 0.2253163903951645, 0.2248261421918869, 0.2243758887052536, 0.22399045526981354, 0.22364172339439392, 0.22333063185214996, 0.22305554151535034, 0.22281308472156525, 0.22259750962257385, 0.22237472236156464, 0.22216351330280304, 0.22196952998638153, 0.22179056704044342, 0.22162844240665436, 0.22147996723651886, 0.2213405817747116, 0.2212059050798416, 0.22107627987861633, 0.2209520936012268, 0.22083620727062225, 0.2207217514514923, 0.22061395645141602, 0.22051182389259338, 0.2204175591468811, 0.22033140063285828, 0.22024784982204437, 0.22016938030719757, 0.22009749710559845, 0.22002731263637543, 0.2199602723121643, 0.21989893913269043, 0.2198411524295807, 0.21978648006916046, 0.2197345346212387, 0.21968582272529602, 0.21964040398597717, 0.21959838271141052, 0.21955879032611847, 0.21952170133590698, 0.21948684751987457, 0.21945449709892273, 0.21942439675331116, 0.21939580142498016, 0.2193690985441208, 0.21934397518634796, 0.21932005882263184, 0.21929723024368286, 0.2192755788564682, 0.21925443410873413, 0.2192341834306717, 0.21921467781066895, 0.21919630467891693, 0.21917913854122162, 0.21916303038597107, 0.21914775669574738, 0.219132661819458, 0.21911749243736267, 0.21910224854946136, 0.21908681094646454, 0.21907156705856323, 0.21905682981014252, 0.2190426141023636, 0.21902915835380554, 0.21901652216911316, 0.21900492906570435, 0.21899448335170746, 0.21898536384105682, 0.2189771682024002, 0.21896995604038239, 0.21896331012248993, 0.2189568132162094, 0.218950554728508, 0.2189444601535797, 0.21893878281116486, 0.21893376111984253, 0.2189294993877411, 0.21892601251602173, 0.21892330050468445, 0.21892113983631134, 0.21891921758651733, 0.2189173549413681, 0.21891546249389648, 0.2189137041568756, 0.21891210973262787, 0.21891076862812042, 0.21890974044799805, 0.2189088761806488, 0.21890822052955627, 0.2189076691865921, 0.2189071774482727, 0.21890667080879211, 0.21890617907047272, 0.2189057320356369, 0.21890541911125183, 0.21890507638454437, 0.21890485286712646, 0.21890471875667572, 0.2189045399427414, 0.21890436112880707, 0.2189042717218399, 0.21890415251255035, 0.2189040631055832, 0.21890398859977722, 0.21890388429164886, 0.2189038246870041, 0.21890376508235931]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:03 2016", "state": "available"}], "summary": "5ccf67fe26c6234cbc89bff76f7409b5"}