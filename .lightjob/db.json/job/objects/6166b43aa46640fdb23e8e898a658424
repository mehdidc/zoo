{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 32, "f3": 32, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.9687986373901367, 1.6821839809417725, 1.5605615377426147, 1.4724355936050415, 1.3992633819580078, 1.3373671770095825, 1.284926414489746, 1.2340837717056274, 1.1882282495498657, 1.1450783014297485, 1.1083247661590576, 1.075077772140503, 1.0408459901809692, 1.0125309228897095, 0.9858362674713135, 0.9617119431495667, 0.9397644400596619, 0.9188925623893738, 0.8982436656951904, 0.8814274072647095, 0.8627553582191467, 0.8484338521957397, 0.8355244994163513, 0.8198584318161011, 0.8061567544937134, 0.7942701578140259, 0.7822985053062439, 0.7691922187805176, 0.7582700848579407, 0.7483110427856445, 0.7359244227409363, 0.7288801074028015, 0.7183454036712646, 0.7093507647514343, 0.6995947957038879, 0.6913892030715942, 0.6817669868469238, 0.6749915480613708, 0.6647639274597168, 0.6599825024604797, 0.6491175889968872, 0.643862783908844, 0.63681560754776, 0.6271154880523682, 0.623723030090332, 0.6151844263076782, 0.6092810034751892, 0.603827953338623, 0.5946201086044312, 0.5902600884437561, 0.5846589803695679, 0.5785780549049377, 0.5741252899169922, 0.5705124735832214, 0.5626694560050964, 0.5563080310821533, 0.5511749982833862, 0.5459778308868408, 0.5410839319229126, 0.5362960696220398, 0.5302747488021851, 0.5260812640190125, 0.5229225158691406, 0.5169415473937988, 0.5119435787200928, 0.5105897188186646, 0.5058075189590454, 0.5022404193878174, 0.4973752200603485, 0.49287936091423035, 0.48862093687057495, 0.48440566658973694, 0.4802809953689575, 0.47791463136672974, 0.4732392132282257, 0.46786585450172424, 0.4637663960456848, 0.46291980147361755, 0.4572133421897888, 0.4536072313785553, 0.45237183570861816, 0.4469737708568573, 0.4422871768474579, 0.4384506940841675, 0.4367705285549164, 0.43397510051727295, 0.4307609498500824, 0.42623332142829895, 0.42561376094818115, 0.4228982925415039, 0.41920074820518494, 0.4161626994609833, 0.41002005338668823, 0.4098624885082245, 0.40745508670806885, 0.4004652500152588, 0.40062540769577026, 0.39839252829551697, 0.39654457569122314, 0.3911554217338562, 0.39081141352653503, 0.3859458863735199, 0.38462793827056885, 0.3837849199771881, 0.3811979591846466, 0.3778304159641266, 0.3769080936908722, 0.3722071647644043, 0.37033864855766296, 0.36855289340019226, 0.3661477565765381, 0.36789995431900024, 0.3633187413215637, 0.35869988799095154, 0.3577234447002411, 0.3565874695777893, 0.3563651740550995, 0.35316574573516846, 0.35066723823547363, 0.35022467374801636, 0.34923994541168213, 0.3452676236629486, 0.34340623021125793, 0.34089919924736023, 0.33730465173721313, 0.33717912435531616, 0.33421120047569275, 0.3334268033504486, 0.3334539532661438, 0.32913312315940857, 0.32871827483177185, 0.3291846215724945, 0.325030654668808, 0.3212920129299164, 0.32186293601989746, 0.3196446895599365, 0.31772342324256897, 0.31764012575149536, 0.31712913513183594, 0.31296706199645996, 0.31418517231941223, 0.3145592212677002, 0.3108783960342407, 0.3072188198566437, 0.30545324087142944, 0.3079197108745575, 0.3059147298336029, 0.3027278482913971, 0.30121880769729614, 0.3004773259162903, 0.29805994033813477, 0.2982623279094696, 0.2958696484565735, 0.2953101098537445, 0.2922030985355377, 0.29376065731048584, 0.29045841097831726, 0.29141318798065186, 0.28932860493659973, 0.28928443789482117, 0.2879203259944916, 0.2869006097316742, 0.28378573060035706, 0.28432783484458923, 0.2860230505466461, 0.2806346118450165, 0.28183093667030334, 0.28080451488494873, 0.27827346324920654, 0.2757679224014282, 0.2732572853565216, 0.2746022045612335, 0.27414771914482117, 0.27059367299079895, 0.268896222114563, 0.27025943994522095, 0.271803081035614], "moving_avg_accuracy_train": [0.04572235294117646, 0.0928701176470588, 0.13726075294117643, 0.17946644235294112, 0.21989156282352937, 0.26037534771764703, 0.2987378129458823, 0.33442638459247054, 0.3690378637802823, 0.4000799597551953, 0.43225549319144047, 0.4625264144605317, 0.4897090671321256, 0.5166840427718542, 0.5424697561417277, 0.5657851334687314, 0.5877430907100936, 0.608552311050849, 0.6286970799457641, 0.6462532543041288, 0.6633173406384218, 0.6789479595157561, 0.6937519870935923, 0.7070897295607036, 0.7203525213105155, 0.7310207985912287, 0.7415093069673999, 0.7507748468588953, 0.760043244525947, 0.7686106847792347, 0.776568439830723, 0.7830221840829448, 0.7906117303805327, 0.7974658514601265, 0.8036722074905844, 0.8099096926238789, 0.815563429243844, 0.8204706157312243, 0.825929436511043, 0.8307106105069976, 0.8360771965151214, 0.8389518298047857, 0.8420307644713658, 0.8455123939065822, 0.8500693898100415, 0.8540718625937433, 0.8577587939814278, 0.8608464439950497, 0.8642041525367212, 0.8680425608124609, 0.8712241870841559, 0.8741017683757404, 0.8772939444793428, 0.8799127853255262, 0.8826109185576795, 0.8847333561136762, 0.8871023734434851, 0.8898415478638425, 0.8918385695480465, 0.8947794184755947, 0.8975838295692118, 0.8999595642593494, 0.9017847843040027, 0.9038415999912495, 0.9060480282274186, 0.9085208724635002, 0.9105511381583267, 0.9119524949307293, 0.9133572454376564, 0.9150450503056555, 0.9161028982162664, 0.9175584907475809, 0.9191626416728228, 0.9209828480937758, 0.921618680931457, 0.9229932834265466, 0.9245104256721273, 0.9261323242813851, 0.9275802683238349, 0.9290175356090985, 0.9298663702834828, 0.9310962038433698, 0.9322101128707975, 0.9333891015837177, 0.9346384267194636, 0.9354098781651644, 0.9354359491721773, 0.9362711777843713, 0.9375664129471106, 0.9380544775347525, 0.9388207944871596, 0.9398281268031495, 0.9405253141228346, 0.941482194475257, 0.9417198573806724, 0.9427243422308406, 0.9434330844783447, 0.9442450701481573, 0.9448135043098121, 0.9452615656435368, 0.9452507031968301, 0.9456032799359706, 0.9464570695894323, 0.9467548920422537, 0.946747638132146, 0.9473693449071667, 0.9486912339458619, 0.9492432870218639, 0.9497542524373246, 0.9494000036641803, 0.9493658856507035, 0.9497728264973978, 0.9502096614947168, 0.9508239894628921, 0.9508639434577794, 0.9515069608767073, 0.95151391184786, 0.9515884030160152, 0.9524695627144137, 0.9532296652665018, 0.9535208163869104, 0.9537593229835135, 0.9537316259792799, 0.9528384633813519, 0.9530840288079226, 0.9532156259271304, 0.954232886863829, 0.9545319511186227, 0.9551422854185251, 0.9548727627590254, 0.9552678394242994, 0.9551128201877518, 0.9545262440513296, 0.9551324431756084, 0.9551627282698123, 0.9555288083840076, 0.9556465157809009, 0.9560300994969285, 0.9561423836648827, 0.9564340276513356, 0.9563176837097315, 0.9559306212211113, 0.9557399120401766, 0.956525920836159, 0.9561274463996019, 0.9562605841125829, 0.9565898198189716, 0.957008484895898, 0.957637048171014, 0.9581039315892067, 0.9584464796067566, 0.9591147728225515, 0.9592197661285317, 0.958700142456855, 0.9591148340935224, 0.959017468331229, 0.9584239567922237, 0.9590145022894719, 0.9593436402958189, 0.9591904527368252, 0.9593749368749074, 0.959449207893299, 0.9602054635745573, 0.9603707995700427, 0.9597690137306855, 0.9601191711811463, 0.959799018768914, 0.9602308815979049, 0.9603089699087027, 0.9602333670354795, 0.9599112068025197, 0.9599742037693266, 0.959856783392394, 0.9604546344649192, 0.9612021121948978, 0.9614795480342315, 0.9614186520543379], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.04507999999999999, 0.09194533333333332, 0.1359241333333333, 0.17755838666666662, 0.2175358813333333, 0.25738229319999995, 0.2953640638799999, 0.3307609908253333, 0.36513822507613325, 0.3955444025685199, 0.4268966289783346, 0.45623363274716777, 0.4821036028057843, 0.5081732425252059, 0.532702584939352, 0.55456565977875, 0.5754957604675417, 0.5951728510874542, 0.6141355659787088, 0.6308153427141713, 0.6470938084427541, 0.6619044275984787, 0.6754206515052974, 0.6876785863547676, 0.6998307277192909, 0.7098476549473618, 0.7195428894526256, 0.7276952671740297, 0.7355524071232933, 0.7429438330776306, 0.7497827831032008, 0.7550311714595473, 0.7609947209802593, 0.7666685822155668, 0.7716283906606768, 0.7764122182612757, 0.7811176631018149, 0.7845792301249667, 0.7887079737791367, 0.7923038430678897, 0.7963801254277674, 0.7983421128849907, 0.8004012349298248, 0.8025611114368423, 0.8058916669598246, 0.8088625002638421, 0.8114029169041246, 0.8135159585470454, 0.8155243626923409, 0.8181452597564401, 0.8202240671141294, 0.8218149937360498, 0.8235001610291115, 0.8251101449262004, 0.8268924637669137, 0.8279765507235557, 0.8300588956512001, 0.83217300608608, 0.8332623721441387, 0.8352961349297248, 0.8371931881034189, 0.8382872026264103, 0.8395118156971026, 0.8406139674607257, 0.8417392373813197, 0.8433119803098544, 0.8442874489455356, 0.8446987040509821, 0.8454155003125505, 0.8465139502812954, 0.8470492219198325, 0.8474776330611825, 0.8485698697550643, 0.8497262161128912, 0.849953594501602, 0.8503582350514418, 0.8511624115462977, 0.8520461703916679, 0.8525082200191677, 0.8533773980172509, 0.8533196582155258, 0.8537343590606399, 0.8543875898212425, 0.8552288308391183, 0.8557592810885398, 0.8559433529796858, 0.8554023510150506, 0.855635449246879, 0.8562985709888578, 0.855788713889972, 0.8557698425009748, 0.856419524917544, 0.8565242390924562, 0.8566718151832106, 0.8567646336648894, 0.8575548369650672, 0.8574926866018938, 0.8576367512750377, 0.8576064094808673, 0.857259101866114, 0.8570931916795026, 0.8569438725115524, 0.8572094852603971, 0.8572885367343573, 0.857093016394255, 0.8572237147548295, 0.8578080099460133, 0.8582538756180786, 0.8581751547229375, 0.8575576392506437, 0.8570018753255793, 0.8572216877930213, 0.8573795190137191, 0.8577215671123471, 0.8577894104011125, 0.8584638026943345, 0.8587240890915677, 0.858371680182411, 0.8590011788308366, 0.8593277276144197, 0.8594616215196443, 0.8593821260343466, 0.8595905800975787, 0.8587248554211542, 0.8585857032123722, 0.8583537995578016, 0.8591717529353547, 0.8591745776418193, 0.8595904532109706, 0.8590047412232069, 0.8589442671008862, 0.8585965070574643, 0.8579101896850512, 0.8582525040498794, 0.8581205869782248, 0.8580685282804023, 0.858181675452362, 0.8584301745737924, 0.8587471571164133, 0.8586591080714386, 0.8579531972642948, 0.8572778775378652, 0.8573367564507454, 0.8578564141390042, 0.857804106058437, 0.8578236954525933, 0.858161325907334, 0.8582251933166005, 0.8588426739849404, 0.8592384065864465, 0.8594878992611351, 0.8599791093350215, 0.859887865068186, 0.8593390785613674, 0.8595518373718973, 0.8589833203013743, 0.8588716549379035, 0.8592911561107798, 0.8592820404997018, 0.8591805031163983, 0.8590891194714251, 0.8591268741909492, 0.8593741867718544, 0.859236768094669, 0.8582330912852021, 0.8589431154900152, 0.8585821372743471, 0.8588572568802456, 0.8590648645255544, 0.8586117114063323, 0.8584438735990324, 0.8583328195724625, 0.8583262042818829, 0.8586802505203612, 0.8594388921349918, 0.8594950029214926, 0.85969216929601], "moving_var_accuracy_train": [0.018814802026297574, 0.036939527274519025, 0.05098033106340539, 0.06191417992556597, 0.07043047521856352, 0.07813785925088587, 0.08356918197128535, 0.08667533108971978, 0.08878938840486275, 0.08858295506701784, 0.08904204412747843, 0.08838479778504628, 0.08619638746292224, 0.08412559251350558, 0.08169716038809445, 0.07841990572839003, 0.07491728213147242, 0.07132276677903614, 0.06784279552559838, 0.06383248929595028, 0.0600698877481731, 0.0562617451917521, 0.052608003765304896, 0.048948261755845275, 0.045636550385250683, 0.042097204607969244, 0.038877563418785455, 0.03576245914223492, 0.032959341985842903, 0.030324017079701497, 0.027861548160866736, 0.025450250678637838, 0.023423636527803122, 0.021504083656986396, 0.019700344987878975, 0.018080466476183707, 0.016560102468476744, 0.015120816534626422, 0.01387692339991941, 0.012694967682943795, 0.011684673123092725, 0.010590577459733871, 0.009616838261890111, 0.008764250127418586, 0.008074721019654042, 0.007411427013147095, 0.006792625479349823, 0.006199165174874417, 0.005680716517244298, 0.005245245268341268, 0.004811825453101805, 0.004405167174598714, 0.004056360351626536, 0.0037124492628626284, 0.003406723643022414, 0.003106593949332122, 0.002846444742379322, 0.0026293279566876513, 0.002402288021483514, 0.0022398965510671202, 0.002086689390198427, 0.001928817489039895, 0.0017659185940385434, 0.0016274011515764295, 0.001508475966471068, 0.0014126629973672624, 0.0013084945067548383, 0.001195319263311383, 0.0010935472528606515, 0.0010098306950265584, 0.0009189190053417576, 0.0008460958513625497, 0.0007846459679448851, 0.000735999733884304, 0.0006660383110731377, 0.0006164402681413828, 0.0005755117266671734, 0.0005416355498888695, 0.0005063408724505734, 0.00047429842044911607, 0.0004333532611441378, 0.00040363035029494326, 0.0003744344551579139, 0.00034950113910886267, 0.0003285983448512345, 0.0003010947463637743, 0.00027099138900405693, 0.0002501707116152993, 0.000240252347594937, 0.00021837097621083367, 0.00020181905363366896, 0.00019076961382384055, 0.00017606728387002305, 0.00016670113556268936, 0.00015053937491591517, 0.00014456634575227777, 0.0001346305513376255, 0.00012710138275569193, 0.00011729930104534913, 0.00010737620156982639, 9.663964334757983e-05, 8.809447222566854e-05, 8.584563595432699e-05, 7.80593562795357e-05, 7.02538942244888e-05, 6.670717862899958e-05, 7.576297644169963e-05, 7.092954218603957e-05, 6.618635886960769e-05, 6.069715272211462e-05, 5.4637913799495625e-05, 5.066453009392097e-05, 4.7315500418473495e-05, 4.598054004896864e-05, 4.139685293943884e-05, 4.0978410254897836e-05, 3.688100407340776e-05, 3.324284407326507e-05, 3.690654139267385e-05, 3.8415690260623207e-05, 3.533704200879779e-05, 3.231530637752664e-05, 2.9090679856165672e-05, 3.33612667075864e-05, 3.056786144536937e-05, 2.7666935516886416e-05, 3.421362028519642e-05, 3.1597213113133846e-05, 3.1790063420557054e-05, 2.92648392543548e-05, 2.774312547191504e-05, 2.518509159802169e-05, 2.5763226512599856e-05, 2.6494200265827366e-05, 2.385303492162306e-05, 2.267386327954358e-05, 2.053117223313993e-05, 1.9802283214639496e-05, 1.7935524502534057e-05, 1.6907477985787943e-05, 1.5338553401941058e-05, 1.515305439261875e-05, 1.396507887859178e-05, 1.8128859436987075e-05, 1.7745010382593663e-05, 1.613004019989458e-05, 1.5492601533156968e-05, 1.5520865399581172e-05, 1.7524604977045053e-05, 1.773396561499034e-05, 1.701662135243772e-05, 1.933450161769174e-05, 1.7500263804628318e-05, 1.8180316265666412e-05, 1.7910007020797077e-05, 1.6204327143720167e-05, 1.7754197951739567e-05, 1.9117474015446906e-05, 1.818071305890043e-05, 1.6573839607084292e-05, 1.5222765221211216e-05, 1.3750134356646442e-05, 1.7522424819901407e-05, 1.6016206260539753e-05, 1.7673901402543473e-05, 1.70100034233084e-05, 1.6231481184500883e-05, 1.6286882593627404e-05, 1.471307439281386e-05, 1.3293209103488916e-05, 1.2897973134445923e-05, 1.1643893381443098e-05, 1.0603591947569873e-05, 1.2760065897089834e-05, 1.6512565918707526e-05, 1.555404513135819e-05, 1.4032015501527344e-05], "duration": 152845.298831, "accuracy_train": [0.4572235294117647, 0.5172, 0.5367764705882353, 0.5593176470588235, 0.5837176470588236, 0.6247294117647059, 0.644, 0.6556235294117647, 0.6805411764705882, 0.6794588235294118, 0.721835294117647, 0.734964705882353, 0.7343529411764705, 0.7594588235294117, 0.7745411764705883, 0.7756235294117647, 0.785364705882353, 0.7958352941176471, 0.81, 0.8042588235294118, 0.8168941176470588, 0.8196235294117648, 0.8269882352941177, 0.8271294117647059, 0.8397176470588236, 0.8270352941176471, 0.8359058823529412, 0.8341647058823529, 0.8434588235294118, 0.8457176470588236, 0.8481882352941177, 0.8411058823529411, 0.8589176470588236, 0.8591529411764706, 0.8595294117647059, 0.8660470588235294, 0.8664470588235295, 0.8646352941176471, 0.8750588235294118, 0.8737411764705882, 0.8843764705882353, 0.8648235294117647, 0.8697411764705882, 0.8768470588235294, 0.8910823529411764, 0.8900941176470588, 0.8909411764705882, 0.8886352941176471, 0.8944235294117647, 0.9025882352941177, 0.8998588235294117, 0.9, 0.9060235294117647, 0.9034823529411765, 0.9068941176470589, 0.9038352941176471, 0.9084235294117647, 0.9144941176470588, 0.9098117647058823, 0.9212470588235294, 0.9228235294117647, 0.9213411764705882, 0.9182117647058824, 0.9223529411764706, 0.9259058823529411, 0.9307764705882353, 0.9288235294117647, 0.924564705882353, 0.926, 0.930235294117647, 0.9256235294117647, 0.9306588235294118, 0.9336, 0.937364705882353, 0.9273411764705882, 0.935364705882353, 0.9381647058823529, 0.9407294117647059, 0.9406117647058824, 0.9419529411764705, 0.9375058823529412, 0.9421647058823529, 0.9422352941176471, 0.944, 0.9458823529411765, 0.9423529411764706, 0.9356705882352941, 0.9437882352941176, 0.9492235294117647, 0.9424470588235294, 0.9457176470588236, 0.9488941176470588, 0.9468, 0.9500941176470589, 0.9438588235294118, 0.951764705882353, 0.9498117647058824, 0.9515529411764706, 0.9499294117647059, 0.9492941176470588, 0.9451529411764706, 0.9487764705882353, 0.9541411764705883, 0.949435294117647, 0.9466823529411764, 0.9529647058823529, 0.9605882352941176, 0.9542117647058823, 0.9543529411764706, 0.9462117647058823, 0.9490588235294117, 0.953435294117647, 0.9541411764705883, 0.9563529411764706, 0.9512235294117647, 0.9572941176470589, 0.9515764705882352, 0.9522588235294117, 0.9604, 0.9600705882352941, 0.9561411764705883, 0.9559058823529412, 0.9534823529411764, 0.9448, 0.9552941176470588, 0.9544, 0.9633882352941177, 0.9572235294117647, 0.960635294117647, 0.9524470588235294, 0.9588235294117647, 0.9537176470588236, 0.9492470588235294, 0.9605882352941176, 0.955435294117647, 0.9588235294117647, 0.9567058823529412, 0.9594823529411765, 0.9571529411764705, 0.9590588235294117, 0.9552705882352941, 0.9524470588235294, 0.9540235294117647, 0.9636, 0.9525411764705882, 0.9574588235294118, 0.9595529411764706, 0.9607764705882353, 0.9632941176470589, 0.9623058823529411, 0.9615294117647059, 0.9651294117647059, 0.9601647058823529, 0.9540235294117647, 0.9628470588235294, 0.9581411764705883, 0.9530823529411765, 0.9643294117647059, 0.9623058823529411, 0.9578117647058824, 0.9610352941176471, 0.9601176470588235, 0.9670117647058823, 0.9618588235294118, 0.9543529411764706, 0.9632705882352941, 0.9569176470588235, 0.9641176470588235, 0.9610117647058823, 0.9595529411764706, 0.9570117647058823, 0.9605411764705882, 0.9588, 0.965835294117647, 0.9679294117647059, 0.9639764705882353, 0.9608705882352941], "end": "2016-02-07 04:15:37.306000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0], "moving_var_accuracy_valid": [0.018289857599999994, 0.03622810705599999, 0.050012509995359986, 0.06061195845144159, 0.0689345633247077, 0.07633073584006923, 0.08168119639195529, 0.08478955868731913, 0.08694675093119661, 0.08657289650536365, 0.08676226576249782, 0.08583197729744085, 0.08327207772520022, 0.08106150498858418, 0.07837055224315959, 0.07483544339174175, 0.0712945210861542, 0.06764976003491702, 0.0641210450358484, 0.06021287509976743, 0.05657648360808051, 0.05289302520525571, 0.04924791746302348, 0.04567543841768586, 0.04243696543360748, 0.03909631837007895, 0.03603266468207958, 0.033027549576483635, 0.030280406452476115, 0.02774406440597457, 0.025390599102447342, 0.02309944941525392, 0.02110957977970238, 0.01928835611358986, 0.017580917800540535, 0.016028791079096757, 0.014625182871513286, 0.013270506600663909, 0.01209687465805416, 0.011003559675724917, 0.010052748409049475, 0.00908211812118524, 0.008212066161426418, 0.0074328451440138716, 0.006789394030437504, 0.0061898872820760915, 0.005628982004224499, 0.005106268308664509, 0.004631944662695618, 0.004230572109211493, 0.0038464078585637934, 0.003484546500354429, 0.00316164994956943, 0.0028688133879524553, 0.002610521993206864, 0.0023600469946522293, 0.002163067738766185, 0.0019869861312673824, 0.0017989679838166966, 0.0016562969050473427, 0.0015230565112370172, 0.0013815226701019612, 0.001256867497647959, 0.00114211339447368, 0.0010392981465740568, 0.0009576300147899542, 0.0008704308648437388, 0.0007849099552151667, 0.0007110431316190367, 0.0006507981494616552, 0.0005882969760586898, 0.0005311191034071169, 0.0004887440220255609, 0.0004519038519163406, 0.0004071787751095814, 0.00036793450336979516, 0.00033696135154672304, 0.0003102944836629819, 0.00028118644402113876, 0.00025986703315019266, 0.00023391033479750267, 0.00021206709243619748, 0.0001947007770319557, 0.00018159987738016975, 0.00016597228684615484, 0.00014968000031153, 0.00013734614841202976, 0.00012410054664196, 0.00011564806597992858, 0.00010642284773349376, 9.578376812404854e-05, 9.000417649323623e-05, 8.110244436976064e-05, 7.318820825584568e-05, 6.594692486513178e-05, 6.497202367912453e-05, 5.850958531999533e-05, 5.284541845842847e-05, 4.756916223284696e-05, 4.389784922295356e-05, 3.975580001085106e-05, 3.5980885935022166e-05, 3.3017748532659825e-05, 2.9772215899211495e-05, 2.7139048139834196e-05, 2.4578881878962556e-05, 2.5193601525030006e-05, 2.4463407150263458e-05, 2.207283924922359e-05, 2.3297483551000745e-05, 2.374759705952722e-05, 2.1807695041161242e-05, 1.985112178508794e-05, 1.8918981722554985e-05, 1.70685079567739e-05, 1.945490184751269e-05, 1.8119152740023236e-05, 1.742496581929853e-05, 1.924888617269526e-05, 1.8283704527961562e-05, 1.6616682275872306e-05, 1.5011889837929623e-05, 1.3901778722438058e-05, 1.9256913788527617e-05, 1.7505492444555273e-05, 1.6238956945128342e-05, 2.0636490801271427e-05, 1.8572913531843783e-05, 1.8272194579812455e-05, 1.9532501915322447e-05, 1.7612165799024317e-05, 1.6939382649329423e-05, 1.948472820548058e-05, 1.859086750424219e-05, 1.6888399777963316e-05, 1.5223950772337728e-05, 1.3816776237806403e-05, 1.29908649341912e-05, 1.2596079831708954e-05, 1.1406245557426608e-05, 1.4750411610466413e-05, 1.7379881045562818e-05, 1.5673093478444068e-05, 1.6536181147298e-05, 1.4907188250201716e-05, 1.341992312445224e-05, 1.3103879727722523e-05, 1.1830203168648126e-05, 1.4078724233745227e-05, 1.4080290437422746e-05, 1.3232480746190327e-05, 1.4080818701759406e-05, 1.2747666477656579e-05, 1.4183399500486328e-05, 1.3172456353560701e-05, 1.4764115653489792e-05, 1.3399926468732325e-05, 1.3643764928260537e-05, 1.2280136284722408e-05, 1.1144911218123295e-05, 1.0105578831428195e-05, 9.107849717902509e-06, 8.74753636017762e-06, 8.042737759714431e-06, 1.6304768224497944e-05, 1.9211500744832663e-05, 1.8463098120032352e-05, 1.7298005485977455e-05, 1.5956113346895578e-05, 1.6208631757352525e-05, 1.484129434765041e-05, 1.3468161884241893e-05, 1.2121739554442774e-05, 1.2037704249824706e-05, 1.60137677198853e-05, 1.4440726731152436e-05, 1.3346525271200255e-05], "accuracy_test": 0.4144, "start": "2016-02-05 09:48:12.007000", "learning_rate_per_epoch": [0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134, 0.0015351257752627134], "accuracy_train_first": 0.4572235294117647, "accuracy_train_last": 0.9608705882352941, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.5492, 0.4862666666666666, 0.4682666666666667, 0.4477333333333333, 0.42266666666666663, 0.384, 0.3628, 0.3506666666666667, 0.3254666666666667, 0.3308, 0.2909333333333334, 0.2797333333333333, 0.2850666666666667, 0.2572, 0.24653333333333338, 0.2486666666666667, 0.2361333333333333, 0.22773333333333334, 0.21519999999999995, 0.21906666666666663, 0.20640000000000003, 0.20479999999999998, 0.2029333333333333, 0.20199999999999996, 0.19079999999999997, 0.19999999999999996, 0.19320000000000004, 0.1989333333333333, 0.1937333333333333, 0.19053333333333333, 0.18866666666666665, 0.19773333333333332, 0.18533333333333335, 0.1822666666666667, 0.1837333333333333, 0.18053333333333332, 0.17653333333333332, 0.1842666666666667, 0.17413333333333336, 0.17533333333333334, 0.16693333333333338, 0.18400000000000005, 0.1810666666666667, 0.17800000000000005, 0.16413333333333335, 0.1644, 0.1657333333333333, 0.16746666666666665, 0.1664, 0.15826666666666667, 0.1610666666666667, 0.16386666666666672, 0.16133333333333333, 0.1604, 0.1570666666666667, 0.16226666666666667, 0.1512, 0.14880000000000004, 0.15693333333333337, 0.14639999999999997, 0.14573333333333338, 0.1518666666666667, 0.14946666666666664, 0.14946666666666664, 0.14813333333333334, 0.1425333333333333, 0.14693333333333336, 0.15159999999999996, 0.14813333333333334, 0.14359999999999995, 0.14813333333333334, 0.1486666666666666, 0.14159999999999995, 0.1398666666666667, 0.14800000000000002, 0.14600000000000002, 0.14159999999999995, 0.14, 0.1433333333333333, 0.13880000000000003, 0.1472, 0.1425333333333333, 0.13973333333333338, 0.1372, 0.13946666666666663, 0.14239999999999997, 0.14946666666666664, 0.14226666666666665, 0.13773333333333337, 0.14880000000000004, 0.14439999999999997, 0.13773333333333337, 0.1425333333333333, 0.14200000000000002, 0.14239999999999997, 0.1353333333333333, 0.14306666666666668, 0.14106666666666667, 0.14266666666666672, 0.1458666666666667, 0.14439999999999997, 0.14439999999999997, 0.14039999999999997, 0.14200000000000002, 0.14466666666666672, 0.14159999999999995, 0.13693333333333335, 0.13773333333333337, 0.1425333333333333, 0.14800000000000002, 0.14800000000000002, 0.14080000000000004, 0.1412, 0.1392, 0.14159999999999995, 0.13546666666666662, 0.13893333333333335, 0.14480000000000004, 0.1353333333333333, 0.13773333333333337, 0.1393333333333333, 0.1413333333333333, 0.1385333333333333, 0.14906666666666668, 0.14266666666666672, 0.14373333333333338, 0.13346666666666662, 0.14080000000000004, 0.13666666666666671, 0.14626666666666666, 0.14159999999999995, 0.1445333333333333, 0.14826666666666666, 0.13866666666666672, 0.14306666666666668, 0.14239999999999997, 0.14080000000000004, 0.1393333333333333, 0.13839999999999997, 0.14213333333333333, 0.14839999999999998, 0.14880000000000004, 0.14213333333333333, 0.13746666666666663, 0.14266666666666672, 0.14200000000000002, 0.13880000000000003, 0.1412, 0.13560000000000005, 0.1372, 0.13826666666666665, 0.13560000000000005, 0.14093333333333335, 0.14559999999999995, 0.1385333333333333, 0.14613333333333334, 0.14213333333333333, 0.13693333333333335, 0.14080000000000004, 0.14173333333333338, 0.14173333333333338, 0.1405333333333333, 0.13839999999999997, 0.14200000000000002, 0.15080000000000005, 0.1346666666666667, 0.14466666666666672, 0.13866666666666672, 0.13906666666666667, 0.14546666666666663, 0.14306666666666668, 0.14266666666666672, 0.14173333333333338, 0.13813333333333333, 0.13373333333333337, 0.14, 0.1385333333333333], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.06449971327693088, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "valid_ratio": 0.15, "learning_rate": 0.0015351257704114274, "optimization": "nesterov_momentum", "nb_data_augmentation": 4, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 8.500283411202459e-05, "rotation_range": [0, 0], "momentum": 0.9053981676031093}, "accuracy_valid_max": 0.8665333333333334, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8614666666666667, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.4508, 0.5137333333333334, 0.5317333333333333, 0.5522666666666667, 0.5773333333333334, 0.616, 0.6372, 0.6493333333333333, 0.6745333333333333, 0.6692, 0.7090666666666666, 0.7202666666666667, 0.7149333333333333, 0.7428, 0.7534666666666666, 0.7513333333333333, 0.7638666666666667, 0.7722666666666667, 0.7848, 0.7809333333333334, 0.7936, 0.7952, 0.7970666666666667, 0.798, 0.8092, 0.8, 0.8068, 0.8010666666666667, 0.8062666666666667, 0.8094666666666667, 0.8113333333333334, 0.8022666666666667, 0.8146666666666667, 0.8177333333333333, 0.8162666666666667, 0.8194666666666667, 0.8234666666666667, 0.8157333333333333, 0.8258666666666666, 0.8246666666666667, 0.8330666666666666, 0.816, 0.8189333333333333, 0.822, 0.8358666666666666, 0.8356, 0.8342666666666667, 0.8325333333333333, 0.8336, 0.8417333333333333, 0.8389333333333333, 0.8361333333333333, 0.8386666666666667, 0.8396, 0.8429333333333333, 0.8377333333333333, 0.8488, 0.8512, 0.8430666666666666, 0.8536, 0.8542666666666666, 0.8481333333333333, 0.8505333333333334, 0.8505333333333334, 0.8518666666666667, 0.8574666666666667, 0.8530666666666666, 0.8484, 0.8518666666666667, 0.8564, 0.8518666666666667, 0.8513333333333334, 0.8584, 0.8601333333333333, 0.852, 0.854, 0.8584, 0.86, 0.8566666666666667, 0.8612, 0.8528, 0.8574666666666667, 0.8602666666666666, 0.8628, 0.8605333333333334, 0.8576, 0.8505333333333334, 0.8577333333333333, 0.8622666666666666, 0.8512, 0.8556, 0.8622666666666666, 0.8574666666666667, 0.858, 0.8576, 0.8646666666666667, 0.8569333333333333, 0.8589333333333333, 0.8573333333333333, 0.8541333333333333, 0.8556, 0.8556, 0.8596, 0.858, 0.8553333333333333, 0.8584, 0.8630666666666666, 0.8622666666666666, 0.8574666666666667, 0.852, 0.852, 0.8592, 0.8588, 0.8608, 0.8584, 0.8645333333333334, 0.8610666666666666, 0.8552, 0.8646666666666667, 0.8622666666666666, 0.8606666666666667, 0.8586666666666667, 0.8614666666666667, 0.8509333333333333, 0.8573333333333333, 0.8562666666666666, 0.8665333333333334, 0.8592, 0.8633333333333333, 0.8537333333333333, 0.8584, 0.8554666666666667, 0.8517333333333333, 0.8613333333333333, 0.8569333333333333, 0.8576, 0.8592, 0.8606666666666667, 0.8616, 0.8578666666666667, 0.8516, 0.8512, 0.8578666666666667, 0.8625333333333334, 0.8573333333333333, 0.858, 0.8612, 0.8588, 0.8644, 0.8628, 0.8617333333333334, 0.8644, 0.8590666666666666, 0.8544, 0.8614666666666667, 0.8538666666666667, 0.8578666666666667, 0.8630666666666666, 0.8592, 0.8582666666666666, 0.8582666666666666, 0.8594666666666667, 0.8616, 0.858, 0.8492, 0.8653333333333333, 0.8553333333333333, 0.8613333333333333, 0.8609333333333333, 0.8545333333333334, 0.8569333333333333, 0.8573333333333333, 0.8582666666666666, 0.8618666666666667, 0.8662666666666666, 0.86, 0.8614666666666667], "seed": 721897116, "model": "residualv3", "loss_std": [0.2792414724826813, 0.12590186297893524, 0.12372910231351852, 0.12590381503105164, 0.12441565841436386, 0.1231771931052208, 0.12169280648231506, 0.1199880838394165, 0.12056946754455566, 0.11939318478107452, 0.11833543330430984, 0.11949077248573303, 0.11564814299345016, 0.11475841701030731, 0.1133948415517807, 0.11222545057535172, 0.1111697256565094, 0.11102841794490814, 0.10955014824867249, 0.10727802664041519, 0.10589772462844849, 0.10466653108596802, 0.10544589161872864, 0.1047063022851944, 0.10093214362859726, 0.10192524641752243, 0.10117045044898987, 0.09993311762809753, 0.09842823445796967, 0.09855461865663528, 0.09683593362569809, 0.09782568365335464, 0.0942666232585907, 0.09575609862804413, 0.09416207671165466, 0.09376052021980286, 0.09243616461753845, 0.09054310619831085, 0.09066601097583771, 0.08852275460958481, 0.08686800301074982, 0.08854331076145172, 0.08834432065486908, 0.08676930516958237, 0.08584138005971909, 0.08549036085605621, 0.08440077304840088, 0.0822853296995163, 0.08197837322950363, 0.08361903578042984, 0.07988005876541138, 0.07976322621107101, 0.08149202913045883, 0.07924649119377136, 0.07897088676691055, 0.07938074320554733, 0.07420072704553604, 0.07586568593978882, 0.0753115862607956, 0.07478567212820053, 0.07069240510463715, 0.07226517796516418, 0.07262087613344193, 0.07085330784320831, 0.07195673137903214, 0.06925810873508453, 0.06894364207983017, 0.06853711605072021, 0.06669686734676361, 0.06795449554920197, 0.06508702784776688, 0.065201535820961, 0.0654330626130104, 0.06524606794118881, 0.06295228004455566, 0.062002260237932205, 0.06202084198594093, 0.060955021530389786, 0.06206412613391876, 0.0590641163289547, 0.05712588503956795, 0.05903277546167374, 0.057828906923532486, 0.05836822837591171, 0.056422099471092224, 0.0571630634367466, 0.05547485128045082, 0.05449562892317772, 0.05500046908855438, 0.055261846631765366, 0.05421709269285202, 0.05253421142697334, 0.052055004984140396, 0.05233766511082649, 0.05199042707681656, 0.04902114346623421, 0.05315155163407326, 0.04951568692922592, 0.0516013540327549, 0.04885039106011391, 0.04712675139307976, 0.047482408583164215, 0.04710814356803894, 0.04818172752857208, 0.04562794789671898, 0.04593535140156746, 0.045451175421476364, 0.042407773435115814, 0.04482553154230118, 0.042594775557518005, 0.043767284601926804, 0.04551662504673004, 0.04215899854898453, 0.04222152382135391, 0.042875006794929504, 0.04204019904136658, 0.04241708293557167, 0.0426095649600029, 0.04132825508713722, 0.04098765552043915, 0.041325826197862625, 0.03986077010631561, 0.04114413633942604, 0.03785083442926407, 0.03775878995656967, 0.0383051335811615, 0.03767099976539612, 0.03785720840096474, 0.03777629882097244, 0.03669891878962517, 0.0371953509747982, 0.03621860593557358, 0.0369751937687397, 0.036115363240242004, 0.036471929401159286, 0.03625102341175079, 0.036083970218896866, 0.034797266125679016, 0.03459468483924866, 0.03226183354854584, 0.03523070737719536, 0.03678146377205849, 0.033828623592853546, 0.03235795348882675, 0.032775528728961945, 0.03306262567639351, 0.03498132899403572, 0.03353961184620857, 0.03212197124958038, 0.032854121178388596, 0.03163697570562363, 0.03225954249501228, 0.03155094385147095, 0.03169626370072365, 0.03130681812763214, 0.031080791726708412, 0.03246759623289108, 0.030165214091539383, 0.03045855276286602, 0.03098508156836033, 0.03015390783548355, 0.033218324184417725, 0.029134005308151245, 0.02932744286954403, 0.029943058267235756, 0.027788318693637848, 0.030058158561587334, 0.029204167425632477, 0.028057724237442017, 0.02678549662232399, 0.026716891676187515, 0.02887142263352871, 0.027799202129244804, 0.02688176929950714, 0.025260787457227707, 0.02734634466469288, 0.028379110619425774]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:43 2016", "state": "available"}], "summary": "0cd7c84be2f0fe363d2cbd01cd855b0e"}