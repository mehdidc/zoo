{"content": {"hp_model": {"f0": 16, "f1": 16, "f2": 16, "f3": 16, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.5213578939437866, 1.1374616622924805, 0.9643989205360413, 0.8653513193130493, 0.7966825366020203, 0.7427078485488892, 0.6982747912406921, 0.6604710221290588, 0.6280598044395447, 0.5996253490447998, 0.5738745331764221, 0.5504180788993835, 0.5279914736747742, 0.5071854591369629, 0.4880129098892212, 0.46965306997299194, 0.4527638256549835, 0.43580949306488037, 0.4198005795478821, 0.40486735105514526, 0.389981210231781, 0.3762718141078949, 0.36252641677856445, 0.3493947982788086, 0.3363083600997925, 0.3238542377948761, 0.31182539463043213, 0.2998465597629547, 0.2880629301071167, 0.27655622363090515, 0.26534849405288696, 0.2541893422603607, 0.24369631707668304, 0.2331687957048416, 0.22298261523246765, 0.21303826570510864, 0.20370396971702576, 0.1945212483406067, 0.18545697629451752, 0.1765776127576828, 0.16814640164375305, 0.15971584618091583, 0.15285882353782654, 0.1454257369041443, 0.13831272721290588, 0.13153740763664246, 0.12511560320854187, 0.11903651803731918, 0.113937146961689, 0.1085713729262352, 0.10414807498455048, 0.09960708022117615, 0.095216765999794, 0.09042342007160187, 0.08599195629358292, 0.08261337131261826, 0.0787513330578804, 0.0761701688170433, 0.07171519845724106, 0.06979748606681824, 0.0657588392496109, 0.06432415544986725, 0.06008322909474373, 0.057769592851400375, 0.0544833205640316, 0.052388668060302734, 0.050995320081710815, 0.04771646857261658, 0.04809972271323204], "moving_avg_accuracy_train": [0.032968807678109995, 0.07148394241417497, 0.12217113744116831, 0.1748821639817506, 0.22575296209538803, 0.2746891135487322, 0.3204334064435821, 0.3631165814357595, 0.4025100021381599, 0.4391055846405214, 0.47241348850689563, 0.5028138151187845, 0.5308923637587148, 0.5567349359953387, 0.5806882902582541, 0.6023813119211052, 0.622434985102149, 0.6409040347531559, 0.6577492855783202, 0.6733911368804458, 0.6874989939380638, 0.7003402605649293, 0.7120601609457748, 0.7225592071147171, 0.7323339776465547, 0.7413963020406755, 0.7501893405739187, 0.75845173942881, 0.7661506402136883, 0.7738700573200418, 0.7811616186907507, 0.7881470928612658, 0.7949640453968447, 0.8016014266752666, 0.8075702753329521, 0.8131468522201073, 0.8185657691114225, 0.823775182446912, 0.8282753534440996, 0.8327346253855886, 0.8371059709519578, 0.8412192184200233, 0.8456535269674637, 0.8502278367672566, 0.8542121821049273, 0.8584376169779063, 0.862314949174311, 0.865815993651029, 0.8700293824907526, 0.8739097160036282, 0.8777113691033392, 0.8810421400406889, 0.883998161449826, 0.8864121149442399, 0.8895191305689096, 0.8921365884168728, 0.8941435281586111, 0.8969029046939866, 0.8982869807747448, 0.9001972092211259, 0.9009423577157722, 0.9022546603347451, 0.9040010322430849, 0.905916492447394, 0.908184311208607, 0.908707710848636, 0.9092132512197986, 0.9101984075312352, 0.9102619815817753], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.03215773249246987, 0.07026643684111444, 0.11928845067771082, 0.17007668486445782, 0.21902007647778612, 0.26524301000094125, 0.3076554912862387, 0.34687961765648534, 0.3826096069921169, 0.4154044515451642, 0.44494010767076825, 0.47142968947711006, 0.49531399368451956, 0.5172391725822574, 0.5374387893037003, 0.5553854812505893, 0.5718915079090394, 0.5866736897141445, 0.6001129601911487, 0.6120841742906332, 0.6227626697474885, 0.632325517042318, 0.6408985470398934, 0.6480974606905727, 0.6547972390473438, 0.6608504241222781, 0.666408153970969, 0.67122906438336, 0.6755180261208524, 0.679626350344234, 0.6831630917217082, 0.6867785525984832, 0.6898574509154421, 0.6929133391540937, 0.6955283317164705, 0.6975267916076999, 0.6997089710218546, 0.7017014645917324, 0.7031610009262339, 0.7048906521984448, 0.7060302402636154, 0.7074109029371786, 0.7083839151472258, 0.7094884712040392, 0.710337116788831, 0.7107295393343456, 0.7115374683075376, 0.7118526538468893, 0.7124750291813269, 0.7127879378313418, 0.7133544353697437, 0.7135661668610073, 0.7135125845781445, 0.7130106413499987, 0.7130858538057369, 0.7131953136529493, 0.7130873374928501, 0.7129697158482338, 0.7130307838436061, 0.7130826565134624, 0.7123613284562427, 0.711718163184037, 0.7116215657097599, 0.7114491787641604, 0.7114150713169612, 0.7110018386110935, 0.7110684998648185, 0.7106919833214842, 0.7101913385002544], "moving_var_accuracy_train": [0.009782480517445843, 0.022154972899336406, 0.04306220126674291, 0.06376205201072638, 0.08067638971611985, 0.09416147301608961, 0.10357818870652902, 0.10961705068259167, 0.1126219199660593, 0.11341285789763773, 0.1120563202476186, 0.1091683069458424, 0.10534712029478256, 0.10082295512355043, 0.09590452823519792, 0.09054936011146252, 0.08511377237278529, 0.079672347290609, 0.07425897483981239, 0.06903508496525142, 0.06392286114554992, 0.05901465818823517, 0.05434939695384415, 0.049906526992577964, 0.0457757895438709, 0.041937342100302304, 0.03843946563009598, 0.03520992418062216, 0.03222238942221854, 0.02953645508415347, 0.027061311380743466, 0.024794351887151532, 0.022733154275287392, 0.020856332319874955, 0.019091343476572657, 0.01746209301692057, 0.015980165657703348, 0.014626390977632782, 0.01334601573090487, 0.012190380114047735, 0.011143320061188499, 0.010181257297671581, 0.00934009939854954, 0.008594408249994922, 0.007877842494923801, 0.007250746944223507, 0.006660975594452641, 0.006105193846858998, 0.005654448271805466, 0.005224516338165233, 0.004832137800963591, 0.004448770336201074, 0.004082535865722458, 0.003726726822408948, 0.0034409360549955323, 0.003158502219768758, 0.002878902261934601, 0.00265953946551697, 0.0024108265183412163, 0.00220258462096337, 0.001987323375378697, 0.001804090281314693, 0.00165112958676337, 0.0015190375182356592, 0.0014134207838154796, 0.0012745442300825733, 0.0011493899466761932, 0.001043185748630243, 0.0009389035487063375], "duration": 8167.116224, "accuracy_train": [0.3296880767811, 0.4181201550387597, 0.5783558926841086, 0.6492814028469915, 0.6835901451181248, 0.7151144766288299, 0.7321320424972315, 0.7472651563653562, 0.7570507884597637, 0.7684658271617755, 0.7721846233042636, 0.7764167546257843, 0.7835993015180879, 0.7893180861249538, 0.7962684786244923, 0.7976185068867663, 0.802918043731543, 0.8071254816122186, 0.8093565430047989, 0.8141677985995754, 0.8144697074566261, 0.8159116602067183, 0.817539264373385, 0.8170506226351975, 0.8203069124330934, 0.822957221587763, 0.8293266873731081, 0.8328133291228312, 0.8354407472775931, 0.8433448112772242, 0.8467856710271319, 0.8510163603959026, 0.8563166182170543, 0.8613378581810631, 0.8612899132521227, 0.8633360442045036, 0.8673360211332595, 0.8706599024663161, 0.8687768924187893, 0.8728680728589886, 0.8764480810492802, 0.8782384456326136, 0.885562303894426, 0.8913966249653931, 0.8900712901439645, 0.8964665308347176, 0.8972109389419527, 0.8973253939414912, 0.9079498820482651, 0.9088327176195091, 0.9119262470007383, 0.9110190784768365, 0.9106023541320598, 0.9081376963939645, 0.9174822711909376, 0.9156937090485419, 0.9122059858342562, 0.9217372935123662, 0.9107436655015688, 0.9173892652385567, 0.9076486941675894, 0.9140653839055003, 0.9197183794181433, 0.9231556342861758, 0.9285946800595238, 0.9134183076088963, 0.9137631145602622, 0.9190648143341639, 0.9108341480366371], "end": "2016-01-29 13:47:25.195000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0], "moving_var_accuracy_valid": [0.009307077831515275, 0.021446830172555366, 0.04093056772065885, 0.06005251353486367, 0.07560636242491785, 0.08727476243380021, 0.09473665330940154, 0.09910977678404306, 0.10068848834695787, 0.10029915597558893, 0.09812043522295943, 0.09462367319913739, 0.09029544576647236, 0.08559232241710539, 0.08070531081663362, 0.07553353350149904, 0.07043222039579432, 0.0653556144464875, 0.06044557892042545, 0.05569081073152418, 0.05114800204537049, 0.046856234276291486, 0.04283208243871629, 0.0390152934145941, 0.03551774734340341, 0.032295742055025736, 0.029344163099162428, 0.02661891738408489, 0.024122582380747458, 0.021862229093992533, 0.019788583040733523, 0.017927368752823584, 0.01621994841115678, 0.014681999646385264, 0.013275343356658309, 0.011983753598424154, 0.010828235401541784, 0.009781142137021645, 0.008822200140125051, 0.007966905367823695, 0.007181902779665838, 0.00648086856646279, 0.00584130248466462, 0.00526815263294195, 0.004747819163605035, 0.004274423206332584, 0.0038528556287308327, 0.003468464143175697, 0.0031251038883703744, 0.002813474705942624, 0.0025350155104975013, 0.002281917431467285, 0.0020537515278698875, 0.0018506438981214315, 0.0016656304205307719, 0.0014991752116010606, 0.0013493626201013023, 0.0012145508717527123, 0.0010931293482779702, 0.0009838406304150753, 0.0008901393948687593, 0.0008048484094882251, 0.0007244475481877331, 0.0006522702487000778, 0.00058705369369166, 0.0005298851757452836, 0.0004769366516754889, 0.00043051886887457945, 0.00038972278912033896], "accuracy_test": 0.35402184311224494, "start": "2016-01-29 11:31:18.078000", "learning_rate_per_epoch": [0.0023866365663707256, 0.0016876069130375981, 0.0013779252767562866, 0.0011933182831853628, 0.001067336299456656, 0.0009743403061293066, 0.0009020638535730541, 0.0008438034565187991, 0.0007955455221235752, 0.0007547207642346621, 0.0007195980288088322, 0.0006889626383781433, 0.0006619339110329747, 0.0006378554389812052, 0.0006162269273772836, 0.0005966591415926814, 0.0005788443959318101, 0.000562535657081753, 0.0005475319921970367, 0.000533668149728328, 0.0005208068178035319, 0.0005088326288387179, 0.000497648143209517, 0.0004871701530646533, 0.0004773273249156773, 0.00046805792953819036, 0.00045930841588415205, 0.00045103192678652704, 0.00044318728032521904, 0.0004357382422313094, 0.00042865259456448257, 0.00042190172825939953, 0.0004154600901529193, 0.00040930480463430285, 0.00040341520798392594, 0.0003977727610617876, 0.00039236064185388386, 0.0003871635708492249, 0.0003821676946245134, 0.00037736038211733103, 0.0003727300208993256, 0.0003682660171762109, 0.0003639586502686143, 0.0003597990144044161, 0.00035577878588810563, 0.0003518903686199337, 0.00034812671947292984, 0.00034448131918907166, 0.0003409480850677937, 0.00033752137096598744, 0.00033419596729800105, 0.00033096695551648736, 0.0003278297372162342, 0.00032478009234182537, 0.0003218140045646578, 0.0003189277194906026, 0.000316117744660005, 0.00031338073313236237, 0.00031071362900547683, 0.0003081134636886418, 0.0003055775014217943, 0.0003031031519640237, 0.0003006879414897412, 0.0002983295707963407, 0.0002960258279927075, 0.00029377464670687914, 0.00029157407698221505, 0.00028942219796590507, 0.00028731729253195226], "accuracy_train_first": 0.3296880767811, "accuracy_train_last": 0.9108341480366371, "batch_size_eval": 1024, "accuracy_train_std": [0.01605787123729797, 0.01744825772257143, 0.018956445692882656, 0.02160011265078027, 0.023360224481852154, 0.02101550717661311, 0.02147589641080264, 0.022106727061888504, 0.02342503806802402, 0.022240661908333507, 0.02212562561033781, 0.022870696574640484, 0.02367222471077009, 0.024206119330367766, 0.02434340916208331, 0.023354905926098304, 0.023625177481821073, 0.024016693342714873, 0.023975490699576038, 0.023840858739647298, 0.02399674937156635, 0.024048013923547273, 0.024136718904911418, 0.02511283870624088, 0.023906670584409467, 0.023661431556025608, 0.02497674269879864, 0.02597541108105665, 0.02511858738405439, 0.026082222872596143, 0.026490348277929128, 0.025933522938875242, 0.026387166377118437, 0.02656701548102829, 0.026215412755375846, 0.02593786001432658, 0.025916320871598533, 0.026298574343150343, 0.02717342564344692, 0.02718405336961385, 0.026450192601072734, 0.026747047559011722, 0.02596907739147885, 0.025746541865966123, 0.026987372361191028, 0.025121985643260354, 0.02557086667789495, 0.027222878229834484, 0.026441810349271875, 0.02692305496665002, 0.025841323440307776, 0.027432938124072444, 0.025523335955519547, 0.023603976798977525, 0.026189210814282143, 0.02451426853373792, 0.022801725331440766, 0.02392270786303706, 0.022218238796129604, 0.022495126583475793, 0.024080417406206603, 0.022983514043849518, 0.022165850413671927, 0.022972523579972627, 0.02309907496495976, 0.020328360807618275, 0.021146113051308264, 0.022323296646006175, 0.021438410025326163], "accuracy_test_std": 0.011592930718290954, "error_valid": [0.6784226750753012, 0.5867552240210843, 0.43951342479292166, 0.3728292074548193, 0.34048939900225905, 0.3187505882906627, 0.31063217714608427, 0.30010324501129515, 0.2958204889871988, 0.2894419474774097, 0.28923898719879515, 0.29016407426581325, 0.28972726844879515, 0.28543421733810237, 0.28076466020331325, 0.2830942912274097, 0.2795542521649097, 0.2802866740399097, 0.27893360551581325, 0.28017489881400603, 0.28113087114081325, 0.2816088573042168, 0.2819441829819277, 0.28711231645331325, 0.2849047557417168, 0.28467091020331325, 0.28357227739081325, 0.2853827419051205, 0.2858813182417168, 0.28339873164533136, 0.28500623588102414, 0.28068229951054224, 0.2824324642319277, 0.27958366669804224, 0.2809367352221386, 0.2844870693712349, 0.280651414250753, 0.28036609327936746, 0.283703172063253, 0.2795424863516567, 0.28371346714984935, 0.280163133000753, 0.28285897496234935, 0.2805705242846386, 0.28202507294804224, 0.28573865775602414, 0.2811911709337349, 0.2853106762989458, 0.2819235928087349, 0.28439588431852414, 0.2815470867846386, 0.2845282497176205, 0.2869696559676205, 0.29150684770331325, 0.2862372340926205, 0.2858195477221386, 0.28788444794804224, 0.28808887895331325, 0.28641960419804224, 0.28645048945783136, 0.2941306240587349, 0.29407032426581325, 0.2892478115587349, 0.2901023037462349, 0.28889189570783136, 0.2927172557417168, 0.2883315488516567, 0.29269666556852414, 0.29431446489081325], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.0770407901629508, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "valid_ratio": 0.15, "learning_rate": 0.0023866365660195456, "optimization": "rmsprop", "nb_data_augmentation": 0, "learning_rate_decay_method": "sqrt", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 3.083557161334959e-07, "rotation_range": [0, 0], "momentum": 0.7446763707978801}, "accuracy_valid_max": 0.7210663944841867, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7056855351091867, "accuracy_valid_std": [0.01238556541933196, 0.017553880667757673, 0.024381559023479292, 0.017786425075804205, 0.0168077282476819, 0.021010314680773457, 0.018633993909888905, 0.020604457765431204, 0.021253622658430296, 0.02142833839596434, 0.023882454850375958, 0.020092224174119308, 0.022564665799656165, 0.021742163542653792, 0.021092531241995383, 0.02243501629744827, 0.02243345179035768, 0.02188019334386372, 0.02095635223646221, 0.022322110653804458, 0.01915191201924353, 0.018763043510798365, 0.01657015555283992, 0.01731759323438986, 0.01946784198106979, 0.020853256670560497, 0.01983343245627602, 0.018664666758499683, 0.018610424192586142, 0.015152294765400162, 0.01627371346979517, 0.013742745323209859, 0.017603787871403098, 0.014941363279912407, 0.01484131766636226, 0.015129624032162056, 0.014090724931277354, 0.01316745173228228, 0.012396327059011903, 0.012608925101688222, 0.013676673558555624, 0.01500478892589797, 0.014115011432280933, 0.01607500414220978, 0.014619772737110695, 0.01725965401196752, 0.015289795420503136, 0.011861171775145243, 0.01674916285221462, 0.01934088555468927, 0.0163293293791439, 0.01701455078057678, 0.01765993348800778, 0.01675707899625258, 0.017927190001445017, 0.013467080845465537, 0.013985526903518385, 0.018372899224233224, 0.012399929320875778, 0.01698775848967103, 0.014605004689125164, 0.01648000604783836, 0.012930340705516033, 0.016130808682747678, 0.014921788268344635, 0.014403138372133605, 0.009514883467537786, 0.013895942796118462, 0.013755564110595338], "accuracy_valid": [0.3215773249246988, 0.4132447759789157, 0.5604865752070783, 0.6271707925451807, 0.659510600997741, 0.6812494117093373, 0.6893678228539157, 0.6998967549887049, 0.7041795110128012, 0.7105580525225903, 0.7107610128012049, 0.7098359257341867, 0.7102727315512049, 0.7145657826618976, 0.7192353397966867, 0.7169057087725903, 0.7204457478350903, 0.7197133259600903, 0.7210663944841867, 0.719825101185994, 0.7188691288591867, 0.7183911426957832, 0.7180558170180723, 0.7128876835466867, 0.7150952442582832, 0.7153290897966867, 0.7164277226091867, 0.7146172580948795, 0.7141186817582832, 0.7166012683546686, 0.7149937641189759, 0.7193177004894578, 0.7175675357680723, 0.7204163333019578, 0.7190632647778614, 0.7155129306287651, 0.719348585749247, 0.7196339067206325, 0.716296827936747, 0.7204575136483433, 0.7162865328501506, 0.719836866999247, 0.7171410250376506, 0.7194294757153614, 0.7179749270519578, 0.7142613422439759, 0.7188088290662651, 0.7146893237010542, 0.7180764071912651, 0.7156041156814759, 0.7184529132153614, 0.7154717502823795, 0.7130303440323795, 0.7084931522966867, 0.7137627659073795, 0.7141804522778614, 0.7121155520519578, 0.7119111210466867, 0.7135803958019578, 0.7135495105421686, 0.7058693759412651, 0.7059296757341867, 0.7107521884412651, 0.7098976962537651, 0.7111081042921686, 0.7072827442582832, 0.7116684511483433, 0.7073033344314759, 0.7056855351091867], "seed": 76715627, "model": "residualv3", "loss_std": [0.28667309880256653, 0.11675210297107697, 0.09790769219398499, 0.09506174176931381, 0.09223363548517227, 0.08885027468204498, 0.08619694411754608, 0.08484017848968506, 0.08376339077949524, 0.08294945955276489, 0.08290338516235352, 0.08266452699899673, 0.08218136429786682, 0.08178868889808655, 0.08140891045331955, 0.08083071559667587, 0.0799504965543747, 0.0788269117474556, 0.07780314236879349, 0.07697588950395584, 0.07622760534286499, 0.07476308196783066, 0.07374982535839081, 0.07265614718198776, 0.07116223871707916, 0.06991636008024216, 0.06868615001440048, 0.06697816401720047, 0.0656222403049469, 0.06445782631635666, 0.06335745006799698, 0.06152718514204025, 0.06010174751281738, 0.05857289582490921, 0.05687854439020157, 0.05518478527665138, 0.05386701226234436, 0.05217608064413071, 0.05090995132923126, 0.04965445026755333, 0.04833533987402916, 0.0470261350274086, 0.044260136783123016, 0.04384348914027214, 0.04165254160761833, 0.03984219208359718, 0.039721693843603134, 0.03768621012568474, 0.0366489477455616, 0.034767650067806244, 0.03439171239733696, 0.03400614485144615, 0.03302951902151108, 0.031555261462926865, 0.02862037532031536, 0.030450530350208282, 0.02853846549987793, 0.027996396645903587, 0.027580156922340393, 0.0258768480271101, 0.024988040328025818, 0.02529040537774563, 0.024098210036754608, 0.023555617779493332, 0.021324096247553825, 0.020931735634803772, 0.020430095493793488, 0.019399510696530342, 0.020563025027513504]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:21 2016", "state": "available"}], "summary": "23f255d6e41e10966bcad32d9e74b54a"}