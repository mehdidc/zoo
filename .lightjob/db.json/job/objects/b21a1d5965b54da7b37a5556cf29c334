{"content": {"hp_model": {"f0": 64, "f1": 64, "f2": 32, "f3": 32, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.7901686429977417, 1.4943734407424927, 1.374908685684204, 1.287706732749939, 1.2158888578414917, 1.1535704135894775, 1.0989192724227905, 1.049340009689331, 1.0035384893417358, 0.9607020616531372, 0.9199578762054443, 0.8808251023292542, 0.8437588214874268, 0.8070442080497742, 0.7710330486297607, 0.7350931763648987, 0.6986551880836487, 0.6618901491165161, 0.6254221200942993, 0.5881257653236389, 0.5501796007156372, 0.5113845467567444, 0.47330427169799805, 0.43436333537101746, 0.39603230357170105, 0.35874316096305847, 0.32258421182632446, 0.2887175679206848, 0.25667804479599, 0.22811688482761383, 0.20217783749103546, 0.17904935777187347, 0.1606060117483139, 0.1449134647846222, 0.1320812702178955, 0.12043745815753937, 0.1106908768415451, 0.10176766663789749, 0.09349719434976578, 0.0871349647641182, 0.08181340247392654, 0.077631875872612, 0.07421477884054184, 0.07144885510206223, 0.06907464563846588, 0.06709611415863037, 0.06540732085704803, 0.06396876275539398, 0.06272290647029877, 0.061647817492485046, 0.060714542865753174, 0.05988150089979172, 0.05913247540593147, 0.05845749378204346, 0.05785146355628967, 0.05731656029820442, 0.05683261901140213, 0.056386612355709076, 0.055979229509830475, 0.05560757592320442, 0.055269092321395874, 0.054952189326286316, 0.05466197431087494, 0.05439157038927078, 0.0541394017636776, 0.05390424281358719, 0.05368625372648239, 0.053484957665205], "moving_avg_accuracy_train": [0.04633882352941176, 0.09457552941176468, 0.1418779764705882, 0.1875019435294117, 0.23096351388235287, 0.27212598602352933, 0.3109298580094117, 0.3471804016202352, 0.3810364791052705, 0.4127210664888611, 0.4421760186635044, 0.4698313579736246, 0.49546233982332094, 0.519226694076283, 0.5410687305510076, 0.5614230339664951, 0.5806195540992574, 0.5985293633952139, 0.6154434858792219, 0.6313014902324763, 0.646458400032758, 0.6605302070883057, 0.6733924804971222, 0.6855308795062335, 0.696996615085022, 0.7082146006353434, 0.7191390229247502, 0.7296745323969811, 0.7397282556278713, 0.7493860183003783, 0.7585274164703404, 0.7672817336468357, 0.7753770896939169, 0.7833311454304076, 0.7911862661814846, 0.7991335219162774, 0.8070389932540614, 0.8147868586345376, 0.822369349241672, 0.8294524143175048, 0.8360907022975191, 0.8425569261854142, 0.8489953512139317, 0.8551593455043032, 0.8610857638950493, 0.8667724816231915, 0.8721611158138135, 0.8772297101147851, 0.8820149743974243, 0.8865452416635642, 0.8907542469089724, 0.8946435281004281, 0.8982144694080323, 0.9015341989378173, 0.9046396025734473, 0.9075003481984556, 0.9102114898491982, 0.912738576158396, 0.9151094244249094, 0.917311423158889, 0.9193638102547649, 0.9212862527587001, 0.9231246863063596, 0.9248381000286648, 0.926467231202269, 0.9280158021996892, 0.9294471631561908, 0.9308012703699835], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.04667999999999999, 0.09453199999999998, 0.14087879999999997, 0.18535091999999997, 0.22737582799999995, 0.26667824519999994, 0.3037170873466666, 0.33799871194533326, 0.36937217408413325, 0.39876829000905323, 0.4257581276748145, 0.45050231490733306, 0.47281208341659975, 0.49303754174160647, 0.5111337875674458, 0.5275804088107012, 0.5425290345962978, 0.556116131136668, 0.5682245180230012, 0.5788420662207011, 0.5885311929319643, 0.596878073638768, 0.6037769329415579, 0.6094259063140688, 0.6142433156826619, 0.6183389841143957, 0.6220917523696228, 0.6251359104659938, 0.6275956527527278, 0.6295427541441218, 0.6312684787297096, 0.6326349641900719, 0.6336114677710647, 0.6344103209939582, 0.6352359555612291, 0.6360190266717729, 0.6371237906712623, 0.6379980782708028, 0.6392516037770558, 0.6405797767326835, 0.6419217990594152, 0.643182952486807, 0.6445846572381263, 0.6458861915143137, 0.6471909056962157, 0.6482984817932609, 0.6493219669472682, 0.6503631035858747, 0.6513534598939539, 0.6522047805712251, 0.6530643025141026, 0.6538112055960257, 0.6544834183697564, 0.6550750765327807, 0.6555675688795026, 0.6561041453248857, 0.6565470641257305, 0.6569056910464909, 0.6572417886085085, 0.657530943080991, 0.6576845154395586, 0.6579293972289362, 0.6581764575060426, 0.658425478422105, 0.6587162639132278, 0.6589913041885718, 0.6592788404363812, 0.659510956392743], "moving_var_accuracy_train": [0.019325579094809687, 0.03833403933475432, 0.05463832888105412, 0.06790841332461024, 0.07811774487004212, 0.08555511239799608, 0.09055126548806719, 0.09332305614798243, 0.09430685637723862, 0.09391138843853027, 0.09232859746317196, 0.08997909784807565, 0.08689371313848326, 0.08328704262217741, 0.07925200937622849, 0.07505548744637316, 0.07086649616860377, 0.0666666979729012, 0.06257481603024731, 0.05858062114583306, 0.054790146263494655, 0.05109327342142226, 0.04747288877446836, 0.04405166647156108, 0.04082966765566922, 0.03787928968836726, 0.03516544774074614, 0.03264787560522672, 0.030292784201934108, 0.02810295720028692, 0.02604474792477432, 0.024130015755337027, 0.02230682728556444, 0.0206455475809408, 0.019136319120972706, 0.017791117072303197, 0.0165744736587256, 0.015457291054438878, 0.014429009423260534, 0.013437636778750822, 0.01249047490662615, 0.011617735878279007, 0.010829042142081661, 0.010088091358379092, 0.00939538413702075, 0.00874689454999477, 0.00813354150095836, 0.007551403184553099, 0.007002351654390106, 0.006486826382475027, 0.0059975852706303946, 0.005533965317243254, 0.005095333381920118, 0.004684985481086446, 0.004303278718639459, 0.003946605636554546, 0.003618097674352617, 0.003313763393844571, 0.0030329753479855777, 0.002773316999007052, 0.0025338959342282048, 0.0023137684074338166, 0.0021128101078728705, 0.0019279511763396378, 0.001759042674132952, 0.0016047210559261146, 0.0014626880980236794, 0.0013329217453393201], "duration": 39538.035933, "accuracy_train": [0.46338823529411766, 0.5287058823529411, 0.5676, 0.5981176470588235, 0.6221176470588236, 0.6425882352941177, 0.660164705882353, 0.673435294117647, 0.6857411764705882, 0.6978823529411765, 0.7072705882352941, 0.7187294117647058, 0.7261411764705883, 0.7331058823529412, 0.7376470588235294, 0.7446117647058823, 0.7533882352941177, 0.7597176470588235, 0.7676705882352941, 0.7740235294117647, 0.7828705882352941, 0.7871764705882353, 0.7891529411764706, 0.7947764705882353, 0.8001882352941176, 0.8091764705882353, 0.8174588235294118, 0.8244941176470588, 0.8302117647058823, 0.8363058823529411, 0.8408, 0.8460705882352941, 0.8482352941176471, 0.8549176470588236, 0.8618823529411764, 0.8706588235294118, 0.8781882352941176, 0.8845176470588235, 0.8906117647058823, 0.8932, 0.8958352941176471, 0.9007529411764705, 0.9069411764705883, 0.9106352941176471, 0.9144235294117647, 0.9179529411764706, 0.9206588235294118, 0.9228470588235295, 0.9250823529411765, 0.9273176470588236, 0.9286352941176471, 0.9296470588235294, 0.9303529411764706, 0.9314117647058824, 0.9325882352941176, 0.9332470588235294, 0.9346117647058824, 0.9354823529411764, 0.9364470588235294, 0.9371294117647059, 0.9378352941176471, 0.9385882352941176, 0.9396705882352941, 0.9402588235294118, 0.9411294117647059, 0.9419529411764705, 0.9423294117647059, 0.9429882352941177], "end": "2016-02-04 11:47:48.349000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0], "moving_var_accuracy_valid": [0.019611201599999996, 0.03825840657599999, 0.05376479875056, 0.0661882439911536, 0.07546425562371442, 0.08181995004120869, 0.08598483748517904, 0.0879634218027763, 0.08802572676167114, 0.08700033876874605, 0.0848563669268888, 0.08188120345038133, 0.0781726150437768, 0.07403697601950836, 0.06958054543446039, 0.06505691304388625, 0.06056237445539784, 0.05616761974143412, 0.05187037506419284, 0.047697928525347884, 0.043773048260655326, 0.04002277719239228, 0.03644884781027026, 0.03309116113071327, 0.02999091191486342, 0.027142791222501385, 0.02455526152644821, 0.022183137460444702, 0.020019276703454558, 0.018051469867564413, 0.016273126008915693, 0.01466261895064456, 0.01320493908877333, 0.011890188678141542, 0.010707304862275441, 0.009642093179325411, 0.00868886839284398, 0.007826860962819973, 0.0070583168022914184, 0.006368361512662825, 0.005747734576725559, 0.005187275690759802, 0.004686231107572662, 0.0042328539200642105, 0.0038248890399258943, 0.0034534406592300155, 0.003117524290051273, 0.0028155275505483855, 0.0025428020460461173, 0.002295044563501452, 0.002072189108883898, 0.0018699909759195836, 0.0016870587084461266, 0.001521503372038374, 0.0013715359732387538, 0.001236973604450538, 0.00111504183758276, 0.00100469517323913, 0.0009052423100559645, 0.0008154705718309777, 0.0007341357748717241, 0.0006612619012014701, 0.0005956850601060381, 0.0005366746568451633, 0.00048376819697727497, 0.0004360722016570986, 0.00039320907533562803, 0.00035437306815684535], "accuracy_test": 0.3871, "start": "2016-02-04 00:48:50.313000", "learning_rate_per_epoch": [0.00011533066572155803, 0.00011265358625678346, 0.000110038643470034, 0.00010748440399765968, 0.00010498944902792573, 0.00010255241068080068, 0.0001001719429041259, 9.784672874957323e-05, 9.557548764860258e-05, 9.335696813650429e-05, 9.11899478523992e-05, 8.907322626328096e-05, 8.70056392159313e-05, 8.498604438500479e-05, 8.301332854898646e-05, 8.108640759019181e-05, 7.920421194285154e-05, 7.736570842098445e-05, 7.556987839052454e-05, 7.381573232123628e-05, 7.2102302510757e-05, 7.042865036055446e-05, 6.879384454805404e-05, 6.719698285451159e-05, 6.56371921650134e-05, 6.41136066406034e-05, 6.262538954615593e-05, 6.1171711422503e-05, 5.975177919026464e-05, 5.836480704601854e-05, 5.70100310142152e-05, 5.568670167122036e-05, 5.43940877832938e-05, 5.313147994456813e-05, 5.189817966311239e-05, 5.069350663688965e-05, 4.951679875375703e-05, 4.836740481550805e-05, 4.724468817585148e-05, 4.614803401636891e-05, 4.507683479459956e-05, 4.403050115797669e-05, 4.3008454667869955e-05, 4.201013143756427e-05, 4.1034982132259756e-05, 4.008246833109297e-05, 3.9152066165115684e-05, 3.8243259041337296e-05, 3.735554855666123e-05, 3.648844358394854e-05, 3.5641463909996673e-05, 3.481414751149714e-05, 3.4006032365141436e-05, 3.3216678275493905e-05, 3.244564504711889e-05, 3.169251067447476e-05, 3.095685678999871e-05, 3.0238279578043148e-05, 2.95363824989181e-05, 2.8850778107880615e-05, 2.818108805513475e-05, 2.752694308583159e-05, 2.6887981221079826e-05, 2.6263851395924576e-05, 2.5654208002379164e-05, 2.505871634639334e-05, 2.447704719088506e-05, 2.39088803937193e-05], "accuracy_train_first": 0.46338823529411766, "accuracy_train_last": 0.9429882352941177, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.5332, 0.4748, 0.44199999999999995, 0.4144, 0.3944, 0.37960000000000005, 0.36293333333333333, 0.3534666666666667, 0.3482666666666666, 0.33666666666666667, 0.33133333333333337, 0.3268, 0.3264, 0.3249333333333333, 0.32599999999999996, 0.3244, 0.3229333333333333, 0.3216, 0.3228, 0.3256, 0.3242666666666667, 0.32799999999999996, 0.3341333333333333, 0.33973333333333333, 0.34240000000000004, 0.3448, 0.3441333333333333, 0.3474666666666667, 0.3502666666666666, 0.3529333333333333, 0.35319999999999996, 0.35506666666666664, 0.35760000000000003, 0.35840000000000005, 0.3573333333333333, 0.3569333333333333, 0.3529333333333333, 0.3541333333333333, 0.3494666666666667, 0.3474666666666667, 0.346, 0.3454666666666667, 0.3428, 0.34240000000000004, 0.34106666666666663, 0.34173333333333333, 0.3414666666666667, 0.3402666666666667, 0.33973333333333333, 0.3401333333333333, 0.33919999999999995, 0.3394666666666667, 0.3394666666666667, 0.3396, 0.33999999999999997, 0.3390666666666666, 0.3394666666666667, 0.33986666666666665, 0.33973333333333333, 0.33986666666666665, 0.3409333333333333, 0.33986666666666665, 0.3396, 0.3393333333333334, 0.33866666666666667, 0.33853333333333335, 0.3381333333333333, 0.33840000000000003], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.023212227974392, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.00011807136521603202, "optimization": "nesterov_momentum", "nb_data_augmentation": 0, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 1.0836200464437946e-05, "rotation_range": [0, 0], "momentum": 0.9350294121126688}, "accuracy_valid_max": 0.6784, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.6616, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.4668, 0.5252, 0.558, 0.5856, 0.6056, 0.6204, 0.6370666666666667, 0.6465333333333333, 0.6517333333333334, 0.6633333333333333, 0.6686666666666666, 0.6732, 0.6736, 0.6750666666666667, 0.674, 0.6756, 0.6770666666666667, 0.6784, 0.6772, 0.6744, 0.6757333333333333, 0.672, 0.6658666666666667, 0.6602666666666667, 0.6576, 0.6552, 0.6558666666666667, 0.6525333333333333, 0.6497333333333334, 0.6470666666666667, 0.6468, 0.6449333333333334, 0.6424, 0.6416, 0.6426666666666667, 0.6430666666666667, 0.6470666666666667, 0.6458666666666667, 0.6505333333333333, 0.6525333333333333, 0.654, 0.6545333333333333, 0.6572, 0.6576, 0.6589333333333334, 0.6582666666666667, 0.6585333333333333, 0.6597333333333333, 0.6602666666666667, 0.6598666666666667, 0.6608, 0.6605333333333333, 0.6605333333333333, 0.6604, 0.66, 0.6609333333333334, 0.6605333333333333, 0.6601333333333333, 0.6602666666666667, 0.6601333333333333, 0.6590666666666667, 0.6601333333333333, 0.6604, 0.6606666666666666, 0.6613333333333333, 0.6614666666666666, 0.6618666666666667, 0.6616], "seed": 330685508, "model": "residualv3", "loss_std": [0.3428157866001129, 0.24125078320503235, 0.2475469410419464, 0.25030356645584106, 0.2517964243888855, 0.25184911489486694, 0.25175291299819946, 0.25122344493865967, 0.25004079937934875, 0.248338982462883, 0.24678249657154083, 0.24483780562877655, 0.24262043833732605, 0.23993590474128723, 0.2366194874048233, 0.23297308385372162, 0.22792544960975647, 0.222364604473114, 0.21671420335769653, 0.2099217027425766, 0.20232078433036804, 0.19313247501850128, 0.1838391125202179, 0.1738441288471222, 0.16250549256801605, 0.15094514191150665, 0.13905419409275055, 0.12629438936710358, 0.11306309700012207, 0.10126800090074539, 0.08864617347717285, 0.07762649655342102, 0.06772706657648087, 0.058360710740089417, 0.051446959376335144, 0.04428887739777565, 0.03805007413029671, 0.03242572024464607, 0.026979200541973114, 0.022936103865504265, 0.01925106719136238, 0.016588490456342697, 0.014333195984363556, 0.012500889599323273, 0.010955478064715862, 0.00977969728410244, 0.008820310235023499, 0.008037462830543518, 0.007382488809525967, 0.006845849100500345, 0.006404095329344273, 0.006013231817632914, 0.005649551749229431, 0.005331552121788263, 0.00504716020077467, 0.004799304064363241, 0.004573198035359383, 0.00436850730329752, 0.00417571235448122, 0.004004030488431454, 0.0038478036876767874, 0.0037049134261906147, 0.003575749695301056, 0.003456072648987174, 0.0033451521303504705, 0.0032416298054158688, 0.003144969930872321, 0.0030569781083613634]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:37 2016", "state": "available"}], "summary": "1a80a649ed9dfe3af52e53f0cae3c48d"}