{"content": {"hp_model": {"f0": 16, "f1": 32, "f2": 32, "f3": 32, "nonlin": "leaky_rectify", "nbg1": 6, "nbg3": 2, "nbg2": 8, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.014095442742543807, 0.014971833243176965, 0.017019090701813653, 0.013928138244083219, 0.018039987545978336, 0.017383418138847716, 0.01756115712467681, 0.013329678214280051, 0.007894875487697508, 0.010246050927687628, 0.011867444127629809, 0.016001223771858978, 0.007995230338759861, 0.006914324463780585, 0.013255856963708908, 0.010032853134829416, 0.010422868606332273, 0.008286950395152063, 0.005866306461657675, 0.0074212125314133, 0.008635014333106391, 0.008107567418094094, 0.007761413350853365, 0.008203668335556514, 0.008696784654100467, 0.00908825098087242, 0.010976508949950689, 0.007460517088134963, 0.009559534560666421, 0.008565828713223084, 0.006257242123098345, 0.010262377359681841, 0.010051606205682783, 0.00813408961784941, 0.008222207569112417, 0.0061446811866574655, 0.010815725732736418, 0.011816865306815885, 0.005472699972725394, 0.011430884865182215, 0.00888611329840895, 0.007039475935439557, 0.010208359279836135, 0.011785412011236649, 0.006899943381397477, 0.010473437651404627, 0.00888862416195484, 0.01186486732935602, 0.007686939400295705, 0.007592662937053191, 0.0069276987975421984, 0.0086954235689804, 0.009507639847053419, 0.0096547961551003, 0.012229787430924711, 0.009453630403433095, 0.012704976906873718, 0.006572978050096603, 0.00790444733621562, 0.008671924693752612, 0.009821932811579205, 0.011538091240480362, 0.010688918779318114, 0.008021316758499163, 0.009008867076415206, 0.008454856424532784, 0.009939902273408546, 0.008066368047442464, 0.006284122262797172, 0.008585969582885065, 0.008718138139728533, 0.009040352787465034, 0.007356168967001262, 0.009149245726628874, 0.006777599775231038, 0.00855424994904577, 0.00795423963080155, 0.00937082846451432, 0.006699660691908512, 0.006815705795100911, 0.008861572120243447, 0.008420301480363686, 0.008132226351878288, 0.007996914684321905, 0.00841249013867049, 0.007996791883675558, 0.009198633272832251, 0.007487195249555297, 0.009712140331027134, 0.008711851678215216, 0.009017004381817533, 0.007501317284766794, 0.008320314320002204, 0.008014854694156701, 0.007803861349659768, 0.009272537229620998, 0.0073799017831520895, 0.0077754067758918615, 0.008220895127079119, 0.007928010122461745, 0.008397463231308794, 0.007373482335936666, 0.009401690870186283, 0.009619261135502795, 0.008610551809751482, 0.009019493436581955, 0.008292465029071522, 0.007833526463730641, 0.007856136544029458, 0.008807115856904133, 0.007805667075819854, 0.009843490670087513, 0.008474577132734995], "moving_avg_accuracy_train": [0.029753559460363593, 0.06352948757325118, 0.10877624119687843, 0.15164353058886462, 0.19625905983779468, 0.24486751155058217, 0.29424990895126407, 0.3399816943688915, 0.3887469264408616, 0.4278541380107381, 0.46973137575889834, 0.5095546193141915, 0.546690682449679, 0.5821146958596114, 0.6116230519704018, 0.6410141357949102, 0.66776623567749, 0.6914038526909058, 0.7160090334171086, 0.7380653404159293, 0.7567374907078082, 0.7751789341953975, 0.7930038758568378, 0.8091323178092678, 0.8234620839057865, 0.8373468453437884, 0.8500477437332283, 0.8612020398194847, 0.8718708774292214, 0.8813914150208323, 0.8902761551401961, 0.8987211749678616, 0.9066123364139511, 0.9134074620725744, 0.9200206209617547, 0.9263305368786837, 0.9322768172681963, 0.937342512364005, 0.9420853247061852, 0.9463375437236619, 0.950564466434629, 0.9544501131316515, 0.957951809407772, 0.9610173055503282, 0.9640668956798192, 0.9668069125475608, 0.9694379772451857, 0.9716873889325811, 0.973883884414323, 0.9755166804217188, 0.9772978028176699, 0.9788821396859122, 0.9804870432768449, 0.9820338351539408, 0.9833863482159277, 0.9845687687883918, 0.985635272452419, 0.9866532184214628, 0.9876042470257451, 0.988402044049361, 0.9891200613706154, 0.9898035153895154, 0.9904697412315162, 0.9911042577702787, 0.9916683111599174, 0.992231762782021, 0.9927342549931137, 0.9932166888688023, 0.993616038173598, 0.994040520665762, 0.9943969782718048, 0.9947131398196244, 0.9950255869983763, 0.9953393415425863, 0.9955542913168991, 0.9957873096923613, 0.9960341925624109, 0.9962425083502359, 0.9964182947175932, 0.9965881642410813, 0.9967317462169825, 0.996863295144103, 0.9970142052130261, 0.9971453739774377, 0.9972495110213699, 0.9973548601049564, 0.9974519994289939, 0.997532449374199, 0.9976071794736932, 0.9976953629025236, 0.9977375256075186, 0.9978103492741569, 0.9978665899788933, 0.9979358078036322, 0.9979911283994688, 0.9980455672333406, 0.9980852615885872, 0.9981047104666425, 0.9981524413914161, 0.9981767980332361, 0.9982149950525407, 0.9982702987092006, 0.9982968205120992, 0.9983230152835176, 0.9983489157266037, 0.9983606003813335, 0.9983757668682094, 0.9984033675992549, 0.9984049928179193, 0.9984110697635175, 0.9984351402050321, 0.9984521533047762, 0.998472115392165], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 33579344, "moving_var_accuracy_train": [0.007967468705052529, 0.01743804171352983, 0.034119655963471884, 0.04724613086547133, 0.06043642683038341, 0.07565781834857463, 0.09003962707106705, 0.0998582301413156, 0.11127483785848204, 0.11391172004357361, 0.11830387541195968, 0.12074650441614157, 0.1210836386413536, 0.1202690213118219, 0.11607880690389073, 0.11224544848891516, 0.1074619772731714, 0.1017444119885105, 0.09701870505678141, 0.09169516065693932, 0.08566348735994798, 0.08015792016510678, 0.07500168505569986, 0.06984265630844598, 0.06470647044502983, 0.05997090280223891, 0.05542562790110491, 0.051002830001613285, 0.04692696386493834, 0.04305003320274399, 0.039455477345367286, 0.03615179484983753, 0.03309704922556801, 0.030202907897459542, 0.027576221942155494, 0.025176935097848373, 0.022977465842299854, 0.020910670659303167, 0.01902205201359108, 0.01728257911138529, 0.01571512308068717, 0.01427949502490519, 0.012961902413706441, 0.011750287571736037, 0.010658958814183434, 0.009660632164684668, 0.008756871461203993, 0.007926722991538114, 0.007177472023996116, 0.00648371902681241, 0.005863898697035395, 0.0053000999371405, 0.004793271383252144, 0.004335477330926378, 0.003918393222079346, 0.0035391369655630883, 0.00319546013959523, 0.0028852400515987403, 0.0026048561450943346, 0.0023500988514029157, 0.002119728906125216, 0.0019119600000762505, 0.0017247587119215732, 0.0015559063418710828, 0.001403179113721242, 0.0012657185019231774, 0.0011414191375307406, 0.0010293719057773742, 0.0009278700340048038, 0.0008367046990797073, 0.0007541777873958888, 0.0006796596317751765, 0.0006125722777532488, 0.0005522010272040357, 0.0004973967551329262, 0.0004481457576893609, 0.0004038797422841401, 0.00036388232726284036, 0.00032777220215909463, 0.0002952546828382755, 0.00026591475660868094, 0.00023947902702985187, 0.00021573608896698787, 0.00019431732727310467, 0.00017498319526106448, 0.00015758476159967073, 0.00014191120987417364, 0.00012777833862990777, 0.00011505076605685057, 0.00010361567630524807, 9.327010791795569e-05, 8.399082670396397e-05, 7.562021118539079e-05, 6.810131003220603e-05, 6.131872234389876e-05, 5.521352238920886e-05, 4.970635092683396e-05, 4.473912016386905e-05, 4.028571231809978e-05, 3.626248030029653e-05, 3.264936338082073e-05, 2.941195349269829e-05, 2.6477088797689437e-05, 2.383555541236743e-05, 2.1458037367699162e-05, 1.9313462411334642e-05, 1.7384186371118586e-05, 1.5652623937194908e-05, 1.4087385315496782e-05, 1.2678979147357342e-05, 1.1416295708013987e-05, 1.0277271147278717e-05, 9.25313039694709e-06], "duration": 52428.149723, "accuracy_train": [0.297535594603636, 0.36751284058923955, 0.5159970238095238, 0.5374491351167405, 0.5977988230781653, 0.6823435769656699, 0.7386914855574013, 0.7515677631275379, 0.8276340150885935, 0.7798190421396272, 0.8466265154923404, 0.8679638113118309, 0.8809152506690661, 0.9009308165490033, 0.8771982569675157, 0.9055338902154854, 0.9085351346207088, 0.9041424058116464, 0.9374556599529347, 0.9365721034053157, 0.9247868433347176, 0.9411519255837025, 0.9534283508098007, 0.954288295381137, 0.9524299787744556, 0.9623096982858066, 0.9643558292381875, 0.9615907045957919, 0.9678904159168512, 0.9670762533453304, 0.9702388162144703, 0.9747263534168512, 0.977632789428756, 0.9745635930001846, 0.979539050964378, 0.9831197801310447, 0.9857933407738095, 0.9829337682262828, 0.9847706357858066, 0.9846075148809523, 0.9886067708333334, 0.9894209334048542, 0.9894670758928571, 0.9886067708333334, 0.9915132068452381, 0.9914670643572352, 0.9931175595238095, 0.99193209411914, 0.99365234375, 0.9902118444882798, 0.9933279043812293, 0.9931411715000923, 0.9949311755952381, 0.9959549620478036, 0.9955589657738095, 0.9952105539405685, 0.9952338054286637, 0.9958147321428571, 0.9961635044642857, 0.9955822172619048, 0.9955822172619048, 0.9959546015596161, 0.9964657738095238, 0.99681490661914, 0.9967447916666666, 0.9973028273809523, 0.9972566848929494, 0.99755859375, 0.9972101819167589, 0.9978608630952381, 0.9976050967261905, 0.99755859375, 0.9978376116071429, 0.9981631324404762, 0.9974888392857143, 0.9978844750715209, 0.9982561383928571, 0.9981173504406607, 0.9980003720238095, 0.9981169899524732, 0.9980239840000923, 0.9980472354881875, 0.9983723958333334, 0.9983258928571429, 0.9981867444167589, 0.9983030018572352, 0.9983262533453304, 0.9982564988810447, 0.99827975036914, 0.9984890137619971, 0.9981169899524732, 0.9984657622739018, 0.9983727563215209, 0.9985587682262828, 0.9984890137619971, 0.9985355167381875, 0.9984425107858066, 0.99827975036914, 0.998582019714378, 0.9983960078096161, 0.9985587682262828, 0.99876803161914, 0.9985355167381875, 0.9985587682262828, 0.998582019714378, 0.9984657622739018, 0.9985122652500923, 0.9986517741786637, 0.9984196197858989, 0.9984657622739018, 0.9986517741786637, 0.9986052712024732, 0.9986517741786637], "end": "2016-01-26 08:03:39.438000", "learning_rate_per_epoch": [0.0047388868406414986, 0.004505398217588663, 0.004283413756638765, 0.004072366748005152, 0.0038717181887477636, 0.003680955618619919, 0.003499592188745737, 0.003327164566144347, 0.0031632327008992434, 0.0030073777306824923, 0.002859201980754733, 0.0027183268684893847, 0.0025843929033726454, 0.002457057824358344, 0.00233599659986794, 0.0022209002636373043, 0.0021114747505635023, 0.0020074406638741493, 0.001908532460220158, 0.001814497634768486, 0.0017250959062948823, 0.0016400991007685661, 0.0015592901036143303, 0.0014824626268818974, 0.0014094205107539892, 0.0013399772578850389, 0.001273955567739904, 0.0012111867545172572, 0.0011515106307342649, 0.0010947748087346554, 0.0010408343514427543, 0.000989551655948162, 0.0009407956968061626, 0.0008944419678300619, 0.000850372132845223, 0.0008084736182354391, 0.0007686394965276122, 0.0007307680207304657, 0.0006947625079192221, 0.0006605310481972992, 0.0006279861554503441, 0.0005970447673462331, 0.0005676278960891068, 0.0005396604537963867, 0.0005130709614604712, 0.000487791548948735, 0.0004637576930690557, 0.0004409079847391695, 0.0004191840998828411, 0.00039853056659922004, 0.00037889464874751866, 0.0003602262295316905, 0.0003424776077736169, 0.0003256034688092768, 0.00030956073896959424, 0.0002943084400612861, 0.00027980763115920126, 0.0002660212921909988, 0.00025291420752182603, 0.00024045292229857296, 0.00022860562603455037, 0.00021734205074608326, 0.00020663344184868038, 0.00019645245629362762, 0.0001867730898084119, 0.00017757063324097544, 0.00016882158524822444, 0.00016050360864028335, 0.00015259547217283398, 0.00014507697778753936, 0.00013792891695629805, 0.0001311330561293289, 0.00012467203487176448, 0.0001185293440357782, 0.0001126893112086691, 0.00010713702067732811, 0.0001018582988763228, 9.68396634561941e-05, 9.206830145558342e-05, 8.753202564548701e-05, 8.321925270138308e-05, 7.911897409940138e-05, 7.52207197365351e-05, 7.151453610276803e-05, 6.799095717724413e-05, 6.464098987635225e-05, 6.145607767393813e-05, 5.84280896873679e-05, 5.55492915736977e-05, 5.28123346157372e-05, 5.0210230256197974e-05, 4.773633190779947e-05, 4.5384327677311376e-05, 4.3148207623744383e-05, 4.1022263758350164e-05, 3.900106457876973e-05, 3.707945143105462e-05, 3.525251668179408e-05, 3.35155964421574e-05, 3.1864256015978754e-05, 3.029427898582071e-05, 2.880165629903786e-05, 2.738257717282977e-05, 2.6033416361315176e-05, 2.4750730517553166e-05, 2.3531243641627952e-05, 2.2371841623680666e-05, 2.1269563148962334e-05, 2.0221596059855074e-05, 1.9225262803956866e-05, 1.827801861509215e-05, 1.7377446056343615e-05, 1.6521245925105177e-05], "accuracy_valid": [0.2948012754141566, 0.3519331231174699, 0.5051872529179217, 0.5271099044615963, 0.5932749552899097, 0.6627667898155121, 0.7089417239269578, 0.7126758989081325, 0.7869887754141567, 0.7360928087349398, 0.7985972209149097, 0.8145178369728916, 0.8150664180158133, 0.8326754282756024, 0.8073656932417168, 0.8186976421310241, 0.8291559793862951, 0.8239672557417168, 0.8476194818335843, 0.8465517342808735, 0.8362875329442772, 0.8433676110692772, 0.8552496117281627, 0.8523199242281627, 0.8493799416415663, 0.8611089867281627, 0.8594411826995482, 0.8574468773531627, 0.8596956184111446, 0.857213031814759, 0.8617399284638554, 0.8621370246611446, 0.8633783179593373, 0.864954936935241, 0.867640483810241, 0.8645166603915663, 0.8700010000941265, 0.8692685782191265, 0.8686979362763554, 0.8692479880459337, 0.8687185264495482, 0.8702951454254518, 0.8737748846950302, 0.8742940512048193, 0.8711393425263554, 0.8725644766566265, 0.8758294898343373, 0.8720864904932228, 0.8728792121611446, 0.8689214867281627, 0.8721364951995482, 0.869593608810241, 0.873011577560241, 0.8738763648343373, 0.8755956442959337, 0.8718011695218373, 0.8767354574548193, 0.8738557746611446, 0.8733983786709337, 0.8736322242093373, 0.8746087867093373, 0.8758706701807228, 0.8770913733057228, 0.875452983810241, 0.8748838125941265, 0.8751176581325302, 0.8754838690700302, 0.874110210372741, 0.8759206748870482, 0.8767045721950302, 0.8741410956325302, 0.8741410956325302, 0.873255718185241, 0.8752294333584337, 0.8757074195218373, 0.8737645896084337, 0.8763383612575302, 0.8768369375941265, 0.873621929122741, 0.875575054122741, 0.8745073065700302, 0.8765825018825302, 0.8765825018825302, 0.8750970679593373, 0.8755853492093373, 0.8762059958584337, 0.8770707831325302, 0.874842632247741, 0.8767148672816265, 0.8755956442959337, 0.8741205054593373, 0.875941265060241, 0.8742425757718373, 0.8760736304593373, 0.873988140060241, 0.8746087867093373, 0.873988140060241, 0.8743646460843373, 0.8747308570218373, 0.8746087867093373, 0.8761957007718373, 0.8751985480986446, 0.8748632224209337, 0.8752294333584337, 0.8738763648343373, 0.8746190817959337, 0.8736322242093373, 0.8754735739834337, 0.8754632788968373, 0.8755956442959337, 0.874598491622741, 0.8754838690700302, 0.8750970679593373], "accuracy_test": 0.8605847417091838, "start": "2016-01-25 17:29:51.288000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0], "accuracy_train_last": 0.9986517741786637, "batch_size_eval": 1024, "accuracy_train_std": [0.016397290441717626, 0.016656999299068862, 0.01751206012414998, 0.018954685110227527, 0.015753820905139767, 0.018125629789570802, 0.019521569837315744, 0.018458485506201265, 0.018320539657349397, 0.015882907166255084, 0.018990190622308757, 0.020144346132686047, 0.018606294672867188, 0.018363833811406133, 0.018561064217771463, 0.01776103660717167, 0.017588194793079943, 0.016334874321411775, 0.015365329496228342, 0.015802565977519265, 0.016408201711657994, 0.015061606264526416, 0.01305930695768977, 0.012815589650338393, 0.013476257371310198, 0.011101086139368967, 0.01028604259651702, 0.01110637542691578, 0.010655380078535996, 0.009853071845634382, 0.009405708353346476, 0.008288822271474426, 0.00715213958629404, 0.008660593039082544, 0.007199131287159079, 0.0069201958716857935, 0.005391989508328494, 0.006465425901359147, 0.00585266861068467, 0.006060570732679006, 0.004543985677197213, 0.003969984007295595, 0.004810361455610066, 0.00486728682476554, 0.003600678931140314, 0.003824978276976131, 0.0035142837853253494, 0.003941875796824083, 0.003282415135575682, 0.0035955499557089017, 0.003301084484100657, 0.003017999489910111, 0.0027886280413997305, 0.002799503452560185, 0.002559037273206986, 0.002538120427134188, 0.0023561872020697364, 0.002375751446139286, 0.002026084027822215, 0.0018607002440236753, 0.0025504667412206265, 0.001877303975386769, 0.0018693965069049277, 0.001745357317708311, 0.0020843503377060055, 0.0017287602581325433, 0.0014335186609064103, 0.001612419870497192, 0.0016030254694864477, 0.0014333179880415216, 0.0016941705014831539, 0.001798799798859881, 0.001827424964948713, 0.0014641054214500713, 0.0014158609884336244, 0.0016218186977385806, 0.0013228850322334843, 0.0015118195645755649, 0.001460223071810601, 0.0011748139271117956, 0.001304787841306575, 0.0014295429860244156, 0.0011607127952333225, 0.0013857574800735992, 0.0015003650017675386, 0.0013819814462637215, 0.0014653304302265217, 0.0013733602770664652, 0.00151896470666483, 0.001351073670322995, 0.0015571410357170968, 0.0013500791339475014, 0.0014400117468913898, 0.0012098211293108906, 0.0013341615344305338, 0.00119113873990955, 0.0012064996926296502, 0.0012928537823316316, 0.0012996514223004598, 0.0013104734938204033, 0.001282700048986951, 0.0012616045353212144, 0.0014174559296963928, 0.0011716829944806125, 0.0013170067889626158, 0.001316011984196349, 0.0013683633496437955, 0.0013126703033059417, 0.0013625129726706892, 0.0012986433228036093, 0.0012415518814923787, 0.0012809999354156034, 0.0012415518814923787], "accuracy_test_std": 0.008923058100488707, "error_valid": [0.7051987245858433, 0.6480668768825302, 0.49481274708207834, 0.47289009553840367, 0.4067250447100903, 0.33723321018448793, 0.29105827607304224, 0.28732410109186746, 0.21301122458584332, 0.26390719126506024, 0.2014027790850903, 0.1854821630271084, 0.18493358198418675, 0.16732457172439763, 0.1926343067582832, 0.18130235786897586, 0.17084402061370485, 0.1760327442582832, 0.15238051816641573, 0.1534482657191265, 0.16371246705572284, 0.15663238893072284, 0.14475038827183728, 0.14768007577183728, 0.15062005835843373, 0.13889101327183728, 0.14055881730045183, 0.14255312264683728, 0.1403043815888554, 0.14278696818524095, 0.1382600715361446, 0.1378629753388554, 0.13662168204066272, 0.13504506306475905, 0.13235951618975905, 0.13548333960843373, 0.1299989999058735, 0.1307314217808735, 0.1313020637236446, 0.13075201195406627, 0.13128147355045183, 0.12970485457454817, 0.12622511530496983, 0.1257059487951807, 0.1288606574736446, 0.1274355233433735, 0.12417051016566272, 0.12791350950677716, 0.1271207878388554, 0.13107851327183728, 0.12786350480045183, 0.13040639118975905, 0.12698842243975905, 0.12612363516566272, 0.12440435570406627, 0.12819883047816272, 0.12326454254518071, 0.1261442253388554, 0.12660162132906627, 0.12636777579066272, 0.12539121329066272, 0.12412932981927716, 0.12290862669427716, 0.12454701618975905, 0.1251161874058735, 0.12488234186746983, 0.12451613092996983, 0.12588978962725905, 0.12407932511295183, 0.12329542780496983, 0.12585890436746983, 0.12585890436746983, 0.12674428181475905, 0.12477056664156627, 0.12429258047816272, 0.12623541039156627, 0.12366163874246983, 0.12316306240587349, 0.12637807087725905, 0.12442494587725905, 0.12549269342996983, 0.12341749811746983, 0.12341749811746983, 0.12490293204066272, 0.12441465079066272, 0.12379400414156627, 0.12292921686746983, 0.12515736775225905, 0.12328513271837349, 0.12440435570406627, 0.12587949454066272, 0.12405873493975905, 0.12575742422816272, 0.12392636954066272, 0.12601185993975905, 0.12539121329066272, 0.12601185993975905, 0.12563535391566272, 0.12526914297816272, 0.12539121329066272, 0.12380429922816272, 0.12480145190135539, 0.12513677757906627, 0.12477056664156627, 0.12612363516566272, 0.12538091820406627, 0.12636777579066272, 0.12452642601656627, 0.12453672110316272, 0.12440435570406627, 0.12540150837725905, 0.12451613092996983, 0.12490293204066272], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "momentum": 0.803223209067593, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.004984475768627385, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "l2_decay": 5.485079924846116e-07, "optimization": "rmsprop", "nb_data_augmentation": 1, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.049270772513392715}, "accuracy_valid_max": 0.8770913733057228, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        #nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        nb_data_augmentation=make_constant_param(1),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8750970679593373, "loss_train": [1.6544996500015259, 1.180895447731018, 0.9432202577590942, 0.7959858775138855, 0.6914432048797607, 0.6160735487937927, 0.5583922266960144, 0.5107335448265076, 0.47547605633735657, 0.43937450647354126, 0.41336143016815186, 0.3846973478794098, 0.36202272772789, 0.3389890193939209, 0.32235246896743774, 0.30360206961631775, 0.28864604234695435, 0.27264872193336487, 0.2575920820236206, 0.24366183578968048, 0.23441629111766815, 0.2231103479862213, 0.21284356713294983, 0.20373786985874176, 0.19411158561706543, 0.18668051064014435, 0.17916813492774963, 0.16913004219532013, 0.1681714653968811, 0.1584433764219284, 0.1534559428691864, 0.14829115569591522, 0.1443001627922058, 0.13811872899532318, 0.13366657495498657, 0.1304088681936264, 0.12621290981769562, 0.11995220184326172, 0.11770375818014145, 0.11531516909599304, 0.11506761610507965, 0.10989132523536682, 0.1061607226729393, 0.1048794537782669, 0.10344661772251129, 0.09840881079435349, 0.09586264938116074, 0.09617199748754501, 0.09346678107976913, 0.0929039940237999, 0.08961937576532364, 0.08817820250988007, 0.08815434575080872, 0.08480715751647949, 0.08299132436513901, 0.0826098695397377, 0.08068453520536423, 0.08113309741020203, 0.07882733643054962, 0.07739952206611633, 0.07358861714601517, 0.07396354526281357, 0.0738651230931282, 0.07341016829013824, 0.07267733663320541, 0.07160951942205429, 0.0709773451089859, 0.06892720609903336, 0.07049085944890976, 0.06909557431936264, 0.06886126846075058, 0.06784238666296005, 0.0666608139872551, 0.06589070707559586, 0.06523969769477844, 0.06511779874563217, 0.06349896639585495, 0.06441684812307358, 0.06364499032497406, 0.06299277395009995, 0.0625171959400177, 0.06376978754997253, 0.0641455128788948, 0.06290765106678009, 0.0625518187880516, 0.061839185655117035, 0.061190079897642136, 0.06035688519477844, 0.06069019436836243, 0.06095533445477486, 0.06043750420212746, 0.060133714228868484, 0.05836537107825279, 0.05846092849969864, 0.0609365813434124, 0.05988055095076561, 0.06014519929885864, 0.05927516147494316, 0.05709245428442955, 0.05894378572702408, 0.056005287915468216, 0.058113086968660355, 0.058218661695718765, 0.05790752172470093, 0.058971427381038666, 0.057136088609695435, 0.05782707780599594, 0.05824993923306465, 0.056798212230205536, 0.05831044167280197, 0.05567546188831329, 0.05729490891098976, 0.055869098752737045], "accuracy_train_first": 0.297535594603636, "model": "residualv5", "loss_std": [0.2458668053150177, 0.1468476504087448, 0.11982691287994385, 0.10028452426195145, 0.09752026945352554, 0.09050244092941284, 0.08298557251691818, 0.07812336832284927, 0.07812291383743286, 0.07070834934711456, 0.07035542279481888, 0.06623320281505585, 0.06551074236631393, 0.06387133151292801, 0.05905234441161156, 0.058000385761260986, 0.05188501626253128, 0.0572427436709404, 0.052643951028585434, 0.0501633919775486, 0.05022936686873436, 0.049302782863378525, 0.04817662015557289, 0.043935246765613556, 0.04250672087073326, 0.04170934110879898, 0.04246952012181282, 0.03964430093765259, 0.041628118604421616, 0.03947214409708977, 0.03816518187522888, 0.037906426936388016, 0.035774942487478256, 0.03671123459935188, 0.03586743772029877, 0.035706207156181335, 0.03403579443693161, 0.030960101634263992, 0.03267238289117813, 0.03005874529480934, 0.03191870450973511, 0.029288874939084053, 0.029362913221120834, 0.028330445289611816, 0.02910423092544079, 0.02807968482375145, 0.027858862653374672, 0.02823011204600334, 0.027034904807806015, 0.028395134955644608, 0.026377802714705467, 0.02870270423591137, 0.026448087766766548, 0.024580445140600204, 0.026314759626984596, 0.024802889674901962, 0.025380903854966164, 0.02391286939382553, 0.023231573402881622, 0.02592146024107933, 0.022690435871481895, 0.022508427500724792, 0.0221687201410532, 0.023456746712327003, 0.023093193769454956, 0.023167431354522705, 0.023218253627419472, 0.02271120809018612, 0.02344203181564808, 0.022320443764328957, 0.021907811984419823, 0.021865975111722946, 0.021832017228007317, 0.022079061716794968, 0.021724769845604897, 0.01957751251757145, 0.02066134661436081, 0.019991952925920486, 0.02115325629711151, 0.02188018523156643, 0.021066702902317047, 0.020349768921732903, 0.02017275243997574, 0.02102755941450596, 0.020220857113599777, 0.020262232050299644, 0.01974327675998211, 0.020161159336566925, 0.020091166719794273, 0.019372565671801567, 0.019687555730342865, 0.01978219859302044, 0.018651019781827927, 0.01999002695083618, 0.02006794512271881, 0.018517587333917618, 0.020653201267123222, 0.02009446732699871, 0.0199214369058609, 0.019065624102950096, 0.019552718847990036, 0.01921265572309494, 0.019421620294451714, 0.019534273073077202, 0.021365728229284286, 0.01936272531747818, 0.018931837752461433, 0.019124450162053108, 0.02037496119737625, 0.01988084986805916, 0.019999252632260323, 0.01954444870352745, 0.01817197911441326]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:15 2016", "state": "available"}], "summary": "20eb1fe96e514fc704605992935687e8"}