{"content": {"hp_model": {"f0": 32, "f1": 16, "f2": 32, "f3": 32, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.011445802147794469, 0.013005873154389887, 0.012643509198670605, 0.020763293487820755, 0.012573367944408345, 0.018516847182411776, 0.018558912152341223, 0.01858426847264671, 0.022464163776010047, 0.012496983701617158, 0.01092523859716581, 0.018091751203547227, 0.013863783044319022, 0.01824548464387738, 0.019425790553691896, 0.013180918147295535, 0.014105074906536622, 0.014480805133206551, 0.009935000454101832, 0.014223351189028241, 0.014312452231824783, 0.013215868229197441, 0.01115709604545708, 0.012562568566454064, 0.011429832712281521, 0.008711984883011071, 0.011527796744046201, 0.008117306425807207, 0.01215818895998758, 0.012680426124886332, 0.01015322152469833, 0.008504671810269622, 0.005833576798565227, 0.006919943185057199, 0.009179383226834112, 0.011310707282669315, 0.006998589675182827, 0.005244276972071476, 0.005359205038447907, 0.005553854698183083, 0.007147667244451648, 0.005935865722403096, 0.010498280523846893, 0.006702326481689531, 0.006540503833392377, 0.006827586468250389, 0.006248150734789734, 0.006049533361615632, 0.004960343715258518, 0.005288652690158882, 0.004941051270622813, 0.0051128576373475655, 0.005349755628895816, 0.004694773272923851, 0.006084964783098082, 0.005081063890566726, 0.0064746056362438645, 0.005019306957277656, 0.00575401500500953, 0.0064857511447788665, 0.007338733110103737, 0.0062315434734250014, 0.006228664738151961, 0.006729964026719438, 0.006072557344920873, 0.006586734180770104, 0.005774151334593354, 0.006241259344349093, 0.006673062535231694, 0.005752014586406908, 0.006328286265704431, 0.006305663487459633, 0.006325661517116348, 0.006114849896686713, 0.006667019851704058, 0.006442215061283123, 0.0059197827670244355, 0.0063789223206571054, 0.005771025705211192, 0.006310658267648941, 0.006614113847048512, 0.006798192914758347, 0.007084052767834317, 0.007048556892229442, 0.0062825764125394815, 0.0063325573809611905, 0.006339893044835494, 0.007065449231442877, 0.005834281814763798, 0.006382639204053823, 0.005743904269724931, 0.006277237110897825, 0.006076461630217031, 0.006522052898298488, 0.006515553305335443, 0.0061024131892287855, 0.0054082024887070375, 0.006639076954021553, 0.006564963846049948, 0.005832411657358236, 0.006309594253038772, 0.006677368540882292, 0.006144675554370746, 0.005585108829226962, 0.006027461851159753, 0.006049292901544112, 0.005638845022781027], "moving_avg_accuracy_train": [0.028495617905592463, 0.06747463605112586, 0.12292870625115354, 0.17207751440510793, 0.2169200539506621, 0.26587322507945155, 0.3108793432726415, 0.3502340091322544, 0.3876664267867661, 0.4209557131294073, 0.45854555098497896, 0.49509178232751094, 0.5221294949562401, 0.5533238329456197, 0.5825446389621504, 0.6095105378900862, 0.6346355377359522, 0.6556234074581118, 0.6787197117958185, 0.7003830028497637, 0.7207705328411809, 0.7384589315227328, 0.7567988260515688, 0.7735115972739313, 0.7886716739633431, 0.8024971406397756, 0.8151701422342514, 0.8279685717573656, 0.8393988387222251, 0.8501975756798752, 0.8600652845143886, 0.8688578668106887, 0.8771710804237781, 0.885194840494634, 0.8925230372083673, 0.8990719473233556, 0.9053750484220462, 0.9111757946930291, 0.9164337047666848, 0.92137977357227, 0.9259544323353825, 0.9300880094103069, 0.9339453044110444, 0.9375262240033932, 0.9408838021210033, 0.9439451139077956, 0.946721256904013, 0.9492406758910756, 0.9516779248913461, 0.9538529198987508, 0.9558870732184918, 0.9576969930134291, 0.9593956031955211, 0.9609267496058509, 0.9623907758322814, 0.9637525412146309, 0.9649873585563461, 0.9660825262686793, 0.9671192944347701, 0.968003521610433, 0.9688922959720918, 0.9697619473618705, 0.9704935163876804, 0.9711774690989954, 0.9718581667546643, 0.9724405316614237, 0.972985586416793, 0.9734994232335393, 0.9739572621198107, 0.9743622695733889, 0.9747546780673235, 0.9751380726463885, 0.9754436002377851, 0.9757348511117087, 0.9760039523446685, 0.9762484686031419, 0.976482484128625, 0.976702398696798, 0.9768747451712488, 0.9770554336351593, 0.9772203784014883, 0.9773502275007083, 0.9774810425828634, 0.9776197024960886, 0.9777189197810866, 0.9778082153375848, 0.9779164831241475, 0.9779929977927682, 0.9780525603992887, 0.9781177924892047, 0.9781858019653673, 0.9782284093034375, 0.9782853931469955, 0.9783320283085787, 0.978387914798042, 0.9784126360016541, 0.9784488720265809, 0.9784977604906818, 0.9785277731666967, 0.9785385445822622, 0.9785575034026904, 0.9785699520922755, 0.9786066965009881, 0.9786258155759724, 0.9786523233386963, 0.9786552539858622, 0.9786555664195019], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 783849234, "moving_var_accuracy_train": [0.0073080021583936975, 0.020251476642862726, 0.04590271409432284, 0.06305289077147849, 0.07484528187038195, 0.08892847035542466, 0.09826557939325664, 0.10237812897822703, 0.10475098910356054, 0.10424947946002572, 0.10654149470409664, 0.10790798846176379, 0.10369653075333107, 0.10208465818135888, 0.09956089190152442, 0.0961492400562969, 0.09221570660596004, 0.08695855202463315, 0.08306365028870957, 0.07898096887343013, 0.07482373439844552, 0.07015727598985871, 0.06616871397283229, 0.062065693072928314, 0.05792757509269515, 0.05385510934281592, 0.049915043133256586, 0.04639773700425401, 0.04293382232982026, 0.0396899545757629, 0.036597304216971216, 0.03363335932620899, 0.0308920090787798, 0.02838223470197377, 0.026027333435452944, 0.023810594105155417, 0.021787096445782715, 0.01991122471690734, 0.01816891281030046, 0.016572193898936657, 0.015103322034233297, 0.013746767965719024, 0.01250599969165155, 0.011370806588628208, 0.010335185907108075, 0.009386011985100846, 0.008516773516009789, 0.007722223412700159, 0.007003462715634016, 0.006345691873610733, 0.0057483627038035804, 0.00520300872040018, 0.004708675337316519, 0.004258907487553659, 0.003852307093923378, 0.003483766029140131, 0.003149112391032723, 0.0028449956827926864, 0.00257017010858539, 0.0023201898170104778, 0.002095280114102908, 0.0018925587445503122, 0.0017081196092510022, 0.0015415177701277383, 0.0013915361368008632, 0.0012554348630824017, 0.0011325651389513173, 0.0010216848795243816, 0.0009214029395839835, 0.0008307389249626701, 0.0007490508923014115, 0.000675468725700578, 0.0006087619771124616, 0.0005486492230452667, 0.0004944360400029644, 0.00044553052980858814, 0.0004014703462232337, 0.0003617585733565625, 0.00032585004578620705, 0.00029355887609649957, 0.0002644478494703036, 0.0002381548116203873, 0.0002144933437298217, 0.00019321704850066033, 0.00017398394027737569, 0.00015665730951733105, 0.00014109707578806256, 0.0001270400586598835, 0.00011436798213075481, 0.00010296948094767273, 9.271416045253663e-05, 8.345908287459978e-05, 7.514239901297965e-05, 6.764773265634472e-05, 6.0911069088051e-05, 5.4825462420418225e-05, 4.9354733623898916e-05, 4.444077099880828e-05, 4.0004800745421615e-05, 3.600536488141901e-05, 3.240806332512539e-05, 2.9168651721464335e-05, 2.6263937913462677e-05, 2.3640833973370686e-05, 2.128307452939526e-05, 1.9154844374691027e-05, 1.7239360815754935e-05], "duration": 67706.67799, "accuracy_train": [0.2849561790559247, 0.4182857993609265, 0.6220153380514027, 0.6144167877906976, 0.6205029098606497, 0.7064517652385567, 0.715934407011351, 0.7044260018687707, 0.7245581856773717, 0.7205592902131783, 0.7968540916851238, 0.8240078644102989, 0.7654689086148025, 0.834072874850037, 0.8455318931109265, 0.8522036282415099, 0.8607605363487449, 0.844514234957549, 0.8865864508351791, 0.8953526223352714, 0.904258302763935, 0.8976545196567, 0.9218578768110927, 0.9239265382751938, 0.925112364168051, 0.926926340727667, 0.929227156584533, 0.9431544374653931, 0.9422712414059615, 0.9473862082987264, 0.9488746640250092, 0.9479911074773901, 0.9519900029415835, 0.9574086811323367, 0.9584768076319674, 0.9580121383582503, 0.9621029583102622, 0.9633825111318751, 0.9637548954295865, 0.965894392822536, 0.967126361203396, 0.9672902030846253, 0.9686609594176817, 0.969754500334533, 0.9711020051794942, 0.9714969199889257, 0.9717065438699704, 0.97191544677464, 0.9736131658937799, 0.9734278749653931, 0.9741944530961609, 0.9739862711678663, 0.9746830948343485, 0.9747070672988187, 0.975567011870155, 0.9760084296557769, 0.9761007146317828, 0.9759390356796788, 0.9764502079295865, 0.975961566191399, 0.976891265227021, 0.9775888098698781, 0.9770776376199704, 0.9773330435008305, 0.9779844456556847, 0.9776818158222591, 0.9778910792151162, 0.9781239545842562, 0.9780778120962532, 0.9780073366555924, 0.9782863545127353, 0.9785886238579733, 0.9781933485603543, 0.978356108977021, 0.9784258634413067, 0.9784491149294019, 0.9785886238579733, 0.9786816298103543, 0.9784258634413067, 0.9786816298103543, 0.9787048812984496, 0.9785188693936876, 0.9786583783222591, 0.9788676417151162, 0.9786118753460686, 0.9786118753460686, 0.9788908932032114, 0.9786816298103543, 0.9785886238579733, 0.9787048812984496, 0.9787978872508305, 0.9786118753460686, 0.978798247739018, 0.9787517447628276, 0.9788908932032114, 0.9786351268341639, 0.9787749962509228, 0.9789377566675894, 0.9787978872508305, 0.9786354873223514, 0.9787281327865448, 0.9786819902985419, 0.9789373961794019, 0.9787978872508305, 0.9788908932032114, 0.9786816298103543, 0.9786583783222591], "end": "2016-01-22 04:12:04.196000", "learning_rate_per_epoch": [0.0016384116606786847, 0.001499793492257595, 0.0013729031197726727, 0.0012567483354359865, 0.001150420866906643, 0.0010530892759561539, 0.0009639924392104149, 0.0008824336691759527, 0.0008077751845121384, 0.0007394331623800099, 0.0006768732564523816, 0.0006196062313392758, 0.0005671842955052853, 0.0005191975506022573, 0.0004752707318402827, 0.00043506035581231117, 0.0003982519847340882, 0.0003645577817223966, 0.0003337142989039421, 0.00030548032373189926, 0.00027963510365225375, 0.00025597651256248355, 0.00023431956651620567, 0.00021449491032399237, 0.00019634752243291587, 0.00017973549256566912, 0.00016452893032692373, 0.00015060891746543348, 0.00013786662020720541, 0.00012620238703675568, 0.00011552500654943287, 0.00010575098713161424, 9.680390212452039e-05, 8.861378591973335e-05, 8.111659553833306e-05, 7.425370858982205e-05, 6.797145761083812e-05, 6.222071533557028e-05, 5.695651634596288e-05, 5.213769691181369e-05, 4.772657484863885e-05, 4.3688658479368314e-05, 3.9992370147956535e-05, 3.660880611278117e-05, 3.351151099195704e-05, 3.0676263122586533e-05, 2.808089084282983e-05, 2.5705101506900974e-05, 2.3530315957032144e-05, 2.1539528461289592e-05, 1.9717172108357772e-05, 1.8048996935249306e-05, 1.6521957149961963e-05, 1.5124112906050868e-05, 1.3844533896190114e-05, 1.2673213859670796e-05, 1.1600994184846058e-05, 1.0619489330565557e-05, 9.72102498053573e-06, 8.898575288185384e-06, 8.14570921647828e-06, 7.456539606209844e-06, 6.8256772465247195e-06, 6.248189492907841e-06, 5.719559794670204e-06, 5.235654953139601e-06, 4.792691015609307e-06, 4.387204171507619e-06, 4.016023922304157e-06, 3.676247388284537e-06, 3.3652177080512047e-06, 3.080502665397944e-06, 2.81987604466849e-06, 2.5812998956098454e-06, 2.3629083898413228e-06, 2.1629939510603435e-06, 1.9799933852482354e-06, 1.8124756024917588e-06, 1.659130703046685e-06, 1.5187596318355645e-06, 1.390264628753357e-06, 1.2726409295282792e-06, 1.164968807643163e-06, 1.06640641206468e-06, 9.761828323462396e-07, 8.935926416597795e-07, 8.179900419236219e-07, 7.487838047381956e-07, 6.854327807559457e-07, 6.274415795815003e-07, 5.743567612626066e-07, 5.257631983113242e-07, 4.812808924725687e-07, 4.405620188663306e-07, 4.0328816908186127e-07, 3.6916787848895183e-07, 3.379343525011791e-07, 3.0934333494769817e-07, 2.831712606621295e-07, 2.592134933365742e-07, 2.3728267706246697e-07, 2.1720732945595955e-07, 1.9883044899415836e-07, 1.82008349725038e-07, 1.6660949597735453e-07, 1.5251346496825136e-07, 1.3961002309770265e-07], "accuracy_valid": [0.28318400555346385, 0.40558376082454817, 0.608922016189759, 0.5998064523719879, 0.6020846079631024, 0.6833966726280121, 0.6866425663591867, 0.6798669286521084, 0.6916768637048193, 0.6921460255082832, 0.7658794357115963, 0.7836708160768072, 0.7278729174510542, 0.7878315017884037, 0.7990825607115963, 0.8050551816641567, 0.8088393613516567, 0.7963367140436747, 0.8354418651167168, 0.8358786709337349, 0.8416571559676205, 0.8375376506024097, 0.8554010965737951, 0.8525728892131024, 0.8569880106362951, 0.8520037179969879, 0.848778414439006, 0.8679140389683735, 0.8601824289344879, 0.8621046686746988, 0.8647196206701807, 0.865880024002259, 0.8638960137424698, 0.870396625564759, 0.8670492516942772, 0.8659197336219879, 0.8717702842620482, 0.871006977127259, 0.8692774025790663, 0.8700098244540663, 0.8713628929781627, 0.8707422463290663, 0.8698465737951807, 0.871861469314759, 0.8729703972138554, 0.8713525978915663, 0.8737131141754518, 0.8738351844879518, 0.8727365516754518, 0.8721159050263554, 0.8744455360504518, 0.8737028190888554, 0.8748117469879518, 0.872593891189759, 0.873082172439759, 0.8746896766754518, 0.8756662391754518, 0.8742925804781627, 0.874547016189759, 0.8739263695406627, 0.8739160744540663, 0.8733160179781627, 0.875035297439759, 0.8740484398531627, 0.8742925804781627, 0.8740484398531627, 0.874424945877259, 0.8741705101656627, 0.8738042992281627, 0.8738042992281627, 0.8740484398531627, 0.8738042992281627, 0.8744146507906627, 0.8744146507906627, 0.8739263695406627, 0.8735601586031627, 0.8736822289156627, 0.8742925804781627, 0.874302875564759, 0.8734380882906627, 0.873936664627259, 0.874424945877259, 0.873936664627259, 0.8741705101656627, 0.875401508377259, 0.874913227127259, 0.8731939476656627, 0.8741705101656627, 0.874669086502259, 0.874547016189759, 0.8745573112763554, 0.8746793815888554, 0.874547016189759, 0.874180805252259, 0.873692524002259, 0.8750455925263554, 0.8749235222138554, 0.8733160179781627, 0.874669086502259, 0.8749235222138554, 0.873326313064759, 0.874058734939759, 0.8744352409638554, 0.873814594314759, 0.8745573112763554, 0.873936664627259, 0.8744352409638554], "accuracy_test": 0.8645174050632911, "start": "2016-01-21 09:23:37.518000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0], "accuracy_train_last": 0.9786583783222591, "batch_size_eval": 1024, "accuracy_train_std": [0.017250725551018465, 0.015642080337182514, 0.020204161832681006, 0.019372198638961, 0.019588688275094208, 0.02043765486967898, 0.019464690328038884, 0.020548979583074337, 0.020156565864977393, 0.019089730572272492, 0.021705445100755023, 0.02062954072493003, 0.02253211202615369, 0.01912104318148899, 0.020075728315571084, 0.020452773742061718, 0.019433889757689424, 0.01764283925418156, 0.0191463996873179, 0.01873757748375803, 0.015823475552124697, 0.01845743654398642, 0.014933444381593034, 0.015200677571797, 0.014650565233785818, 0.014210293947909456, 0.014285282064856748, 0.012983434346317158, 0.012500467501507094, 0.012487529751395807, 0.011992920521672236, 0.010532082706184963, 0.010667131024564111, 0.009252580906456281, 0.009431487103154149, 0.009082685714081468, 0.008685303052951548, 0.0081926410433764, 0.008097354735873592, 0.007215503215915202, 0.007082829370058932, 0.006682981307716718, 0.007598997988858962, 0.006618262073589181, 0.006341604007082735, 0.0070928839195874395, 0.006818947733582671, 0.00661760952762913, 0.0067240416524416945, 0.006176877250542602, 0.00599025784340519, 0.006053677942559082, 0.00608773832180642, 0.005681554908817589, 0.005996108390155379, 0.005668693231511265, 0.0062572301295470666, 0.00590553311438163, 0.005325786165426958, 0.006427391848773772, 0.006006594181222162, 0.006048732618436125, 0.005996461717560859, 0.00607726980600296, 0.005708662428678683, 0.005817600778496769, 0.005724033605204612, 0.005751597778648462, 0.00566347608050331, 0.005301432164660124, 0.005497119583385047, 0.005633958144537102, 0.0052644772942592, 0.0055835840724253625, 0.005384353793886375, 0.005254502917854678, 0.005437063303426526, 0.005278176321637006, 0.005488769656752677, 0.005480782087550839, 0.005179680590771234, 0.005282934684870044, 0.005319562807585924, 0.005160180282168327, 0.005251880981398277, 0.005111656858281916, 0.005107670688970592, 0.005165114292293371, 0.005127564417155041, 0.005205916768305877, 0.005305433900375303, 0.005212824213283892, 0.005209335495379061, 0.005167897904058129, 0.005230665887071898, 0.005139961496453979, 0.005243126590152682, 0.005049238817873441, 0.005100315178987368, 0.00538905501720759, 0.005128108734093277, 0.005251227050537661, 0.00513508778915598, 0.005249500838778231, 0.005182694466455795, 0.005200164435279075, 0.005079372994388263], "accuracy_test_std": 0.027903434468419693, "error_valid": [0.7168159944465362, 0.5944162391754518, 0.39107798381024095, 0.40019354762801207, 0.39791539203689763, 0.31660332737198793, 0.31335743364081325, 0.3201330713478916, 0.3083231362951807, 0.3078539744917168, 0.23412056428840367, 0.21632918392319278, 0.2721270825489458, 0.21216849821159633, 0.20091743928840367, 0.19494481833584332, 0.19116063864834332, 0.20366328595632532, 0.1645581348832832, 0.1641213290662651, 0.15834284403237953, 0.1624623493975903, 0.14459890342620485, 0.14742711078689763, 0.14301198936370485, 0.14799628200301207, 0.15122158556099397, 0.1320859610316265, 0.13981757106551207, 0.13789533132530118, 0.1352803793298193, 0.13411997599774095, 0.13610398625753017, 0.12960337443524095, 0.13295074830572284, 0.13408026637801207, 0.12822971573795183, 0.12899302287274095, 0.13072259742093373, 0.12999017554593373, 0.12863710702183728, 0.12925775367093373, 0.1301534262048193, 0.12813853068524095, 0.1270296027861446, 0.12864740210843373, 0.12628688582454817, 0.12616481551204817, 0.12726344832454817, 0.1278840949736446, 0.12555446394954817, 0.1262971809111446, 0.12518825301204817, 0.12740610881024095, 0.12691782756024095, 0.12531032332454817, 0.12433376082454817, 0.12570741952183728, 0.12545298381024095, 0.12607363045933728, 0.12608392554593373, 0.12668398202183728, 0.12496470256024095, 0.12595156014683728, 0.12570741952183728, 0.12595156014683728, 0.12557505412274095, 0.12582948983433728, 0.12619570077183728, 0.12619570077183728, 0.12595156014683728, 0.12619570077183728, 0.12558534920933728, 0.12558534920933728, 0.12607363045933728, 0.12643984139683728, 0.12631777108433728, 0.12570741952183728, 0.12569712443524095, 0.12656191170933728, 0.12606333537274095, 0.12557505412274095, 0.12606333537274095, 0.12582948983433728, 0.12459849162274095, 0.12508677287274095, 0.12680605233433728, 0.12582948983433728, 0.12533091349774095, 0.12545298381024095, 0.1254426887236446, 0.1253206184111446, 0.12545298381024095, 0.12581919474774095, 0.12630747599774095, 0.12495440747364461, 0.1250764777861446, 0.12668398202183728, 0.12533091349774095, 0.1250764777861446, 0.12667368693524095, 0.12594126506024095, 0.1255647590361446, 0.12618540568524095, 0.1254426887236446, 0.12606333537274095, 0.1255647590361446], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.547683843868058, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.001789841526280866, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "optimization": "rmsprop", "nb_data_augmentation": 4, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 7.26264570661866e-05, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.08460522531988512}, "accuracy_valid_max": 0.8756662391754518, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import os\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-6, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8744352409638554, "loss_train": [2.5574731826782227, 1.9501335620880127, 1.6547964811325073, 1.4723076820373535, 1.350455641746521, 1.2622169256210327, 1.1921963691711426, 1.1346588134765625, 1.0844937562942505, 1.0389529466629028, 1.0034230947494507, 0.9674897193908691, 0.9394648671150208, 0.9088980555534363, 0.8844009041786194, 0.8614749312400818, 0.8385580778121948, 0.8201529383659363, 0.8004315495491028, 0.7816531658172607, 0.7652724385261536, 0.7515263557434082, 0.7362117171287537, 0.723220944404602, 0.7119752764701843, 0.700009822845459, 0.688883364200592, 0.6792631149291992, 0.669175922870636, 0.6605270504951477, 0.6529463529586792, 0.6457787752151489, 0.6386924386024475, 0.6320990324020386, 0.625340461730957, 0.6215320825576782, 0.6155582666397095, 0.6106540560722351, 0.6052343249320984, 0.6022583842277527, 0.5986289381980896, 0.5949729084968567, 0.5925624370574951, 0.5885860919952393, 0.5860292315483093, 0.5840955376625061, 0.5819967985153198, 0.5797490477561951, 0.5785375833511353, 0.5757297873497009, 0.5748305916786194, 0.5720804929733276, 0.5718544721603394, 0.5704317092895508, 0.5685175061225891, 0.5669972896575928, 0.5672727227210999, 0.5661883354187012, 0.5660006999969482, 0.5650988221168518, 0.5639888644218445, 0.5629932880401611, 0.5633872151374817, 0.561939537525177, 0.5612924695014954, 0.5610007047653198, 0.5603632926940918, 0.5603227019309998, 0.5589606761932373, 0.5585857629776001, 0.5589640736579895, 0.5595995187759399, 0.5582403540611267, 0.5572115778923035, 0.5569138526916504, 0.5567314624786377, 0.5563329458236694, 0.5565182566642761, 0.5568203330039978, 0.555115818977356, 0.5572353005409241, 0.5556586384773254, 0.5558519959449768, 0.5555336475372314, 0.5558566451072693, 0.555378794670105, 0.5554617643356323, 0.555249810218811, 0.5561171174049377, 0.5556090474128723, 0.5550026893615723, 0.5551627278327942, 0.5558964014053345, 0.5549479126930237, 0.5540832877159119, 0.5557138919830322, 0.5548692941665649, 0.5546342134475708, 0.554581880569458, 0.5546308755874634, 0.5551654100418091, 0.5553423166275024, 0.5552753806114197, 0.5559808611869812, 0.554844319820404, 0.5554559826850891, 0.555239200592041], "accuracy_train_first": 0.2849561790559247, "model": "residualv4", "loss_std": [0.3082877993583679, 0.15483593940734863, 0.11948093771934509, 0.10412495583295822, 0.09572992473840714, 0.09233172237873077, 0.08630881458520889, 0.08564192056655884, 0.08168990910053253, 0.07756343483924866, 0.07873636484146118, 0.07689711451530457, 0.07677479088306427, 0.07410023361444473, 0.07118178904056549, 0.07000108808279037, 0.06870419532060623, 0.06840197741985321, 0.06700011342763901, 0.06574512273073196, 0.0630331039428711, 0.06335079669952393, 0.059855684638023376, 0.05942802503705025, 0.05637552961707115, 0.05560734495520592, 0.05505775660276413, 0.053559448570013046, 0.052082810550928116, 0.0519137904047966, 0.050027746707201004, 0.0500219389796257, 0.04876720532774925, 0.04911147430539131, 0.046248894184827805, 0.04661281034350395, 0.04548828676342964, 0.045829784125089645, 0.04270075261592865, 0.04471768066287041, 0.04371732845902443, 0.043757714331150055, 0.04230622202157974, 0.041956618428230286, 0.04206790030002594, 0.0425758995115757, 0.040669284760951996, 0.041593704372644424, 0.04036702215671539, 0.040311187505722046, 0.04003963991999626, 0.03894488513469696, 0.03952606022357941, 0.03841772675514221, 0.038315895944833755, 0.039583250880241394, 0.039274245500564575, 0.03787560015916824, 0.03993307799100876, 0.03826872631907463, 0.03842126950621605, 0.03863820806145668, 0.03866349533200264, 0.03681744262576103, 0.03797295689582825, 0.037934765219688416, 0.03809075430035591, 0.03631112352013588, 0.03816567361354828, 0.03743225336074829, 0.036309171468019485, 0.038548123091459274, 0.03704031556844711, 0.03744553402066231, 0.037553105503320694, 0.036244962364435196, 0.03642992302775383, 0.036830365657806396, 0.0375368557870388, 0.036706194281578064, 0.0374823622405529, 0.036122824996709824, 0.037547267973423004, 0.037737853825092316, 0.0365203432738781, 0.03638020157814026, 0.03708817809820175, 0.03624115511775017, 0.037162527441978455, 0.0387270413339138, 0.037993043661117554, 0.03638477250933647, 0.036987386643886566, 0.03701343759894371, 0.03626551851630211, 0.037471890449523926, 0.0369160994887352, 0.03726711496710777, 0.03668779507279396, 0.03628438711166382, 0.037774693220853806, 0.03605992719531059, 0.03673093765974045, 0.03667835891246796, 0.0374932587146759, 0.03631969541311264, 0.03634124621748924]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:07 2016", "state": "available"}], "summary": "7e68e5b3f2ce9584d37372f683b5034d"}