{"content": {"hp_model": {"f0": 64, "f1": 64, "f2": 16, "f3": 16, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.007465214814488327, 0.008144297293551442, 0.011831901163893238, 0.011261775608925032, 0.014022049555379808, 0.01034316709380368, 0.012100911205468775, 0.012437072555379836, 0.012591226158502083, 0.01291511024551421, 0.012290378870558208, 0.013594017422768737, 0.012596706330395483, 0.011448533728354313, 0.010567621242805348, 0.010686815924356129, 0.011448712082279412, 0.011682001645698001, 0.010972869524998853, 0.011472965104678922, 0.011121072889675173, 0.011081854114554618, 0.010774504138513616, 0.012019074827235307, 0.012090791516127726, 0.012114977084135246, 0.012030345195810475, 0.011940958519461907, 0.011023717727043672, 0.011008651826909967, 0.010673469780396266, 0.00979407832414197, 0.009547544115498829, 0.00961611025826443, 0.009905118452879008, 0.009746660348046155, 0.00942203834906622, 0.00933423747950399, 0.009128634256703462, 0.00919879023254233, 0.008951184008381336, 0.008462232984514921, 0.008497557624225327, 0.008497557624225327, 0.008592262049143807, 0.00821874888486956, 0.008499871787446527, 0.008702630022858907, 0.00898393796533275, 0.009405332731059314, 0.009623063191625265, 0.009814687814306028, 0.009954937974026676, 0.010188803236333751, 0.010188803236333751, 0.01014926535668691, 0.01011988534662715, 0.01011988534662715, 0.01011988534662715, 0.010264650405223183, 0.0102370046996128, 0.010162301893195764, 0.01032248454957238, 0.01032248454957238, 0.01032248454957238, 0.010433193094401964, 0.010624544025864983, 0.010624544025864983, 0.010624544025864983, 0.010773852066143952, 0.010773852066143952, 0.010773852066143952, 0.010773852066143952, 0.010773852066143952, 0.010773852066143952, 0.010773852066143952, 0.010773852066143952, 0.010773852066143952, 0.010794437045715073, 0.010794437045715073, 0.010794437045715073, 0.010794437045715073, 0.010794437045715073, 0.010794437045715073, 0.010794437045715073, 0.010794437045715073, 0.010794437045715073, 0.010794437045715073, 0.010905820065101617, 0.010905820065101617, 0.010905820065101617, 0.010905820065101617, 0.010950309322004673, 0.010950309322004673, 0.010950309322004673, 0.010950309322004673, 0.010950309322004673, 0.010950309322004673, 0.010950309322004673, 0.010950309322004673, 0.010950309322004673, 0.010950309322004673, 0.010950309322004673, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198, 0.010843622757416198], "moving_avg_accuracy_train": [0.019797470526485783, 0.04474269434639165, 0.07149630896144794, 0.09842926807199381, 0.12478935883931455, 0.14969156999995673, 0.1731219031254686, 0.195083350744354, 0.21543920535015118, 0.23429397033100907, 0.251735191924477, 0.26788093693237996, 0.2827236413311501, 0.2964376428138066, 0.30904756416365514, 0.3206358395106248, 0.3313140421966978, 0.3411243874117825, 0.35012568701962604, 0.3584058931250185, 0.3660510659710623, 0.37308282015630195, 0.3795392100099039, 0.38547559101149753, 0.3909067256165124, 0.3958737657717309, 0.40038130429237984, 0.4045589606502404, 0.40841418247350536, 0.41199316410849146, 0.41528629114425547, 0.4183221850895383, 0.42111029321172144, 0.4236637683490672, 0.4260014235024403, 0.4281401543238002, 0.4301161292880149, 0.4319363594343796, 0.43360711864944107, 0.4351177413406062, 0.4364935417555028, 0.4377433878729573, 0.43887987512271404, 0.4399189896891617, 0.44088903398228874, 0.4417643989949126, 0.4425754429455505, 0.4433216585427913, 0.44400952862197474, 0.44465186318133504, 0.44523000033357807, 0.44576892496107295, 0.4462609325722469, 0.44672466576158926, 0.44714202563199734, 0.4475385758546503, 0.4479070967990856, 0.44823876564907733, 0.4485558688045461, 0.4488505622397061, 0.4491250869265882, 0.4493884351864487, 0.44962777376913277, 0.44985247908878645, 0.4500663396205224, 0.45026346439670384, 0.4504362263976481, 0.4505963624961169, 0.45074513528235793, 0.4508836810875939, 0.45101069746111583, 0.45112501219728557, 0.4512255703110288, 0.45132537320863575, 0.45141752096529153, 0.45150045394628174, 0.4515750936291729, 0.45163994419496545, 0.45169830970417874, 0.4517531638112802, 0.451800207358862, 0.4518448717004952, 0.4518897199055841, 0.45193473358778313, 0.45197989619938134, 0.4520228676986292, 0.4520615420479523, 0.4520986741111526, 0.4521320929680329, 0.4521621699392252, 0.45218923921329823, 0.452213601559964, 0.4522355276719632, 0.45225526117276243, 0.45227302132348174, 0.45228900545912915, 0.4523033911812118, 0.4523163383310862, 0.45232799076597313, 0.45233847795737137, 0.4523502415784393, 0.4523608288374005, 0.4523703573704655, 0.45237893305022403, 0.4523866511620067, 0.4523935974626111, 0.4523998491331551, 0.45240780078545423, 0.4524149572725234, 0.45242139811088566, 0.4524271948654117, 0.45243241194448514, 0.45243710731565123, 0.4524413331497007, 0.4524451364003452, 0.4524485593259253, 0.4524516399589474, 0.45245441252866725, 0.4524569078414151, 0.45245915362288824, 0.452461174826214, 0.4524629939092072, 0.45246463108390106, 0.45246610454112557, 0.4524674306526276, 0.45246862415297945, 0.4524696983032961, 0.4524706650385811, 0.45247153510033755, 0.45247231815591843, 0.4524730229059412, 0.4524736571809617, 0.45247422802848014, 0.45247474179124675, 0.4524752041777367, 0.45247562032557764, 0.4524759948586345, 0.45247633193838566, 0.4524766353101617, 0.4524769083447601, 0.4524771540758987, 0.45247737523392345, 0.4524775742761457], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 783832485, "moving_var_accuracy_train": [0.0035274585532236607, 0.008775090420728087, 0.01433938443339386, 0.019433904568107493, 0.023744203578649235, 0.02695086430698722, 0.029196602469640634, 0.030617688856329997, 0.03128516732128818, 0.03135617005150983, 0.030958318942410915, 0.03020865278491184, 0.029170540371244086, 0.02794615086411642, 0.02658262682574908, 0.025132957272828833, 0.02364587765898966, 0.022147475752242917, 0.020661938728690103, 0.019212801174151105, 0.017817559067348956, 0.01648081326290878, 0.015207896666093155, 0.01400427257404857, 0.012869320324523825, 0.011804431683203415, 0.010806849646519283, 0.00988323999566671, 0.009028680613859249, 0.008241094538365435, 0.00751458725559201, 0.006846078398455854, 0.00623143248071912, 0.005666971350140595, 0.0051494558996713615, 0.004675677835440338, 0.004243250345429133, 0.003848744450957831, 0.0034889929330544638, 0.003160631467984585, 0.002861603762220792, 0.002589502423854558, 0.002342176610888838, 0.002117676781539788, 0.0019143779767614637, 0.0017298365542332509, 0.0015627730294187235, 0.0014115072659349403, 0.0012746150265539682, 0.0011508668670739087, 0.001038788363467751, 0.0009375234849080606, 0.0008459497798223328, 0.0007632902380781779, 0.0006885289176232034, 0.0006210912945726583, 0.0005602044342937799, 0.0005051740288988957, 0.0004555616157098805, 0.00041078705212543013, 0.0003703866211462566, 0.00033397212978537524, 0.0003010904634212885, 0.00027143584940528585, 0.0002447038914080668, 0.0002205832258637213, 0.00019879352365808148, 0.00017914496342256878, 0.00016142966715764514, 0.00014545945490321697, 0.00013105870784517915, 0.00011807044779081117, 0.00010635441041988638, 9.580861494323448e-05, 8.63041743304213e-05, 7.77356578114025e-05, 7.001223177062115e-05, 6.304885895651157e-05, 5.677463185485198e-05, 5.112424942695991e-05, 4.603174234258568e-05, 4.1446522239048836e-05, 3.731997226864122e-05, 3.3606211126043165e-05, 3.0263946966816185e-05, 2.725417121786309e-05, 2.4542215443736886e-05, 2.2100403010420827e-05, 1.990041408933542e-05, 1.7918514298166788e-05, 1.6133257578739685e-05, 1.4525273536281274e-05, 1.3077072972139748e-05, 1.177287037440992e-05, 1.0598422143551087e-05, 9.540879362527526e-06, 8.588653967273327e-06, 7.731297228754824e-06, 6.959389519028493e-06, 6.264440397776457e-06, 5.639241803024486e-06, 5.076326433192834e-06, 4.569510926354897e-06, 4.113221714269297e-06, 3.7024356660877783e-06, 3.3326263593077835e-06, 2.9997154738383195e-06, 2.70031298542306e-06, 2.4307426246452984e-06, 2.1880417217700496e-06, 1.969539970860362e-06, 1.7728309350008533e-06, 1.5957462600942552e-06, 1.4363323531455544e-06, 1.2928293002701863e-06, 1.1636518180189095e-06, 1.0473720489153696e-06, 9.42704028309497e-07, 8.484896647499354e-07, 7.636860900847663e-07, 6.873542484422475e-07, 6.186486051644486e-07, 5.568078677168088e-07, 5.011466206308602e-07, 4.510477857132172e-07, 4.059558271297044e-07, 3.653706286068592e-07, 3.288419769401748e-07, 2.959645923132986e-07, 2.663736516663532e-07, 2.3974075655306925e-07, 2.1577030164097695e-07, 1.9419620427888308e-07, 1.747789594206179e-07, 1.5730298768995081e-07, 1.4157424753218547e-07, 1.27418085254063e-07, 1.1467729933348454e-07, 1.0321039771004662e-07, 9.28900288700695e-08, 8.360156943719487e-08, 7.524185269132258e-08, 6.771802398244654e-08], "duration": 58040.189333, "accuracy_train": [0.1979747052648579, 0.2692497087255445, 0.3122788404969546, 0.3408259000669066, 0.3620301757452012, 0.3738114704457364, 0.3839949012550757, 0.39273637931432265, 0.3986418968023256, 0.4039868551587302, 0.40870618626568844, 0.4131926420035068, 0.4163079809200812, 0.41986365615771504, 0.4225368563122923, 0.4249303176333518, 0.42741786637135476, 0.4294174943475452, 0.4311373834902178, 0.4329277480735511, 0.4348576215854559, 0.4363686078234588, 0.4376467186923219, 0.43890302002583975, 0.43978693706164634, 0.4405771271686969, 0.44094915097822074, 0.44215786787098554, 0.4431111788828903, 0.44420399882336653, 0.44492443446613145, 0.44564523059708383, 0.44620326631136953, 0.44664504458517906, 0.44704031988279813, 0.44738873171603916, 0.44789990396594687, 0.44831843075166117, 0.4486439515849945, 0.44871334556109266, 0.4488757454895718, 0.448992002930048, 0.4491082603705242, 0.44927102078719083, 0.44961943262043186, 0.44964268410852715, 0.44987483850129195, 0.45003759891795864, 0.4502003593346253, 0.4504328742155777, 0.45043323470376523, 0.45061924660852715, 0.45068900107281284, 0.45089826446567, 0.45089826446567, 0.45110752785852715, 0.4512237852990033, 0.4512237852990033, 0.45140979720376523, 0.45150280315614616, 0.45159580910852715, 0.4517585695251938, 0.451781821013289, 0.45187482696567, 0.45199108440614616, 0.4520375873823366, 0.45199108440614616, 0.4520375873823366, 0.45208409035852715, 0.4521305933347176, 0.45215384482281284, 0.45215384482281284, 0.4521305933347176, 0.45222359928709854, 0.4522468507751938, 0.4522468507751938, 0.4522468507751938, 0.45222359928709854, 0.45222359928709854, 0.4522468507751938, 0.45222359928709854, 0.4522468507751938, 0.45229335375138424, 0.45233985672757476, 0.45238635970376523, 0.45240961119186046, 0.45240961119186046, 0.4524328626799557, 0.4524328626799557, 0.4524328626799557, 0.4524328626799557, 0.4524328626799557, 0.4524328626799557, 0.4524328626799557, 0.4524328626799557, 0.4524328626799557, 0.4524328626799557, 0.4524328626799557, 0.4524328626799557, 0.4524328626799557, 0.4524561141680509, 0.4524561141680509, 0.4524561141680509, 0.4524561141680509, 0.4524561141680509, 0.4524561141680509, 0.4524561141680509, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616, 0.45247936565614616], "end": "2016-01-24 21:26:39.726000", "learning_rate_per_epoch": [0.0008659170125611126, 0.0007957162451930344, 0.0007312067318707705, 0.0006719270604662597, 0.0006174532463774085, 0.000567395705729723, 0.0005213964032009244, 0.00047912629088386893, 0.00044028303818777204, 0.0004045888490509242, 0.0003717884246725589, 0.00034164715907536447, 0.00031394948018714786, 0.0002884972782339901, 0.00026510850875638425, 0.00024361589748878032, 0.0002238657179987058, 0.00020571670029312372, 0.00018903904128819704, 0.00017371345893479884, 0.00015963033365551382, 0.00014668895164504647, 0.00013479673361871392, 0.00012386862363200635, 0.00011382647062418982, 0.00010459844634169713, 9.611855057301e-05, 8.832612365949899e-05, 8.116543904179707e-05, 7.458527397830039e-05, 6.853857485111803e-05, 6.298208609223366e-05, 5.787606642115861e-05, 5.31839978066273e-05, 4.887231989414431e-05, 4.491019353736192e-05, 4.1269278881372884e-05, 3.792353891185485e-05, 3.4849039366235957e-05, 3.2023792300606146e-05, 2.942759238067083e-05, 2.7041867724619806e-05, 2.4849556211847812e-05, 2.2834978153696284e-05, 2.098372351611033e-05, 1.9282551875221543e-05, 1.7719296010909602e-05, 1.628277459531091e-05, 1.4962713976274244e-05, 1.3749671779805794e-05, 1.263497233594535e-05, 1.1610643014137167e-05, 1.0669356925063767e-05, 9.804381988942623e-06, 9.009530913317576e-06, 8.279119356302544e-06, 7.607923180330545e-06, 6.9911411628709175e-06, 6.424362254620064e-06, 5.9035328376921825e-06, 5.424927621788811e-06, 4.985123268852476e-06, 4.580974291457096e-06, 4.209590315440437e-06, 3.8683147067786194e-06, 3.554706609065761e-06, 3.2665229809936136e-06, 3.0017026801942848e-06, 2.7583516839513322e-06, 2.534729446779238e-06, 2.329236394871259e-06, 2.1404030121630058e-06, 1.96687847164867e-06, 1.8074216541208443e-06, 1.6608921669103438e-06, 1.5262420447470504e-06, 1.4025081327417865e-06, 1.2888053788628895e-06, 1.1843206948469742e-06, 1.0883065897360211e-06, 1.0000765087170294e-06, 9.189993193103874e-07, 8.44495161800296e-07, 7.760311291349353e-07, 7.131175152608193e-07, 6.553043476742459e-07, 6.021782041898405e-07, 5.533590297090996e-07, 5.084976919533801e-07, 4.672732814015035e-07, 4.2939097966154804e-07, 3.9457984257751377e-07, 3.625908675530809e-07, 3.3319525982733467e-07, 3.061827840156184e-07, 2.8136022933722415e-07, 2.585500737950497e-07, 2.3758916256610974e-07, 2.1832757113315893e-07, 2.006275394705881e-07, 1.843624630737395e-07, 1.6941601188591449e-07, 1.5568129185794533e-07, 1.430600491403311e-07, 1.3146203059477557e-07, 1.2080427325145138e-07, 1.1101055008566618e-07, 1.0201081579452875e-07, 9.374069520617923e-08, 8.614104274329293e-08, 7.915750188658421e-08, 7.274012148172915e-08, 6.684300757342498e-08, 6.1423982344877e-08, 5.6444278584422136e-08, 5.1868283890144085e-08, 4.766327066363374e-08, 4.3799161630886374e-08, 4.02483202321946e-08, 3.6985348117468675e-08, 3.3986911063266234e-08, 3.123155778439468e-08, 2.869958493079139e-08, 2.637288076812183e-08, 2.4234806161871347e-08, 2.22700666796527e-08, 2.0464609562509395e-08, 1.880552424893267e-08, 1.7280941122521654e-08, 1.5879958681352946e-08, 1.459255472013865e-08, 1.3409521493201737e-08, 1.2322398212916141e-08, 1.1323408877217389e-08, 1.0405408978897412e-08, 9.561832214899368e-09, 8.786645189218234e-09, 8.074303003979821e-09, 7.4197110677687306e-09, 6.818187792134722e-09, 6.265430396723559e-09, 5.757485599389156e-09, 5.290720750394939e-09], "accuracy_valid": [0.19356086455195784, 0.26420133659638556, 0.3073142178087349, 0.3373861657567771, 0.36129282756024095, 0.37154673381024095, 0.3846391425075301, 0.38731439429593373, 0.3922075018825301, 0.39921698512801207, 0.4053513860128012, 0.4087796498493976, 0.4101224232868976, 0.41318447618599397, 0.4151273060993976, 0.41819965408509036, 0.42052928510918675, 0.42432375988328314, 0.42540180252259036, 0.42613422439759036, 0.42748729292168675, 0.42920657238328314, 0.43103762707078314, 0.43128176769578314, 0.4326348362198795, 0.4346085513930723, 0.43498505741716864, 0.43510712772966864, 0.43535126835466864, 0.4363381259412651, 0.4373146884412651, 0.4376808993787651, 0.4376808993787651, 0.43791474491716864, 0.43828095585466864, 0.43889130741716864, 0.43913544804216864, 0.4396134342055723, 0.4393692935805723, 0.43974579960466864, 0.43998994022966864, 0.44035615116716864, 0.44047822147966864, 0.44047822147966864, 0.44084443241716864, 0.44121064335466864, 0.4414650790662651, 0.4417092196912651, 0.4413430087537651, 0.4414650790662651, 0.4415871493787651, 0.4414650790662651, 0.4417092196912651, 0.4421975009412651, 0.4421975009412651, 0.4423195712537651, 0.4424416415662651, 0.4424416415662651, 0.4424416415662651, 0.4425637118787651, 0.4424416415662651, 0.44206513554216864, 0.44218720585466864, 0.44218720585466864, 0.44218720585466864, 0.44230927616716864, 0.44255341679216864, 0.44255341679216864, 0.44255341679216864, 0.44279755741716864, 0.44279755741716864, 0.44279755741716864, 0.44279755741716864, 0.44279755741716864, 0.44279755741716864, 0.44279755741716864, 0.44279755741716864, 0.44279755741716864, 0.44267548710466864, 0.44267548710466864, 0.44267548710466864, 0.44267548710466864, 0.44267548710466864, 0.44267548710466864, 0.44267548710466864, 0.44267548710466864, 0.44267548710466864, 0.44267548710466864, 0.44279755741716864, 0.44279755741716864, 0.44279755741716864, 0.44279755741716864, 0.4431740634412651, 0.4431740634412651, 0.4431740634412651, 0.4431740634412651, 0.4431740634412651, 0.4431740634412651, 0.4431740634412651, 0.4431740634412651, 0.4431740634412651, 0.4431740634412651, 0.4431740634412651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651, 0.4430519931287651], "accuracy_test": 0.446109693877551, "start": "2016-01-24 05:19:19.537000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0], "accuracy_train_last": 0.45247936565614616, "batch_size_eval": 1024, "accuracy_train_std": [0.011252364942380431, 0.012556677106487897, 0.011717840423162387, 0.011811369456259583, 0.012920524564256776, 0.013628053661562603, 0.014000269523899432, 0.014529544023594196, 0.0165590728477175, 0.017173154477208324, 0.01724658049497356, 0.01745053019559129, 0.016702694082022098, 0.01697550059501718, 0.017458573316301212, 0.017172103819954085, 0.017170596732045577, 0.017147869861996227, 0.017253540891549388, 0.01707175293667896, 0.01687791677078481, 0.016824636355877384, 0.01669841094067209, 0.016675983843477238, 0.016716485670704422, 0.016964661549423467, 0.01723229937104134, 0.01722776466357736, 0.01735897753984395, 0.017603364971853365, 0.017487719633540576, 0.017563356008864228, 0.017873440531503082, 0.017725296374372135, 0.01795043184271707, 0.017816672088780357, 0.017200367121851797, 0.017005805707772995, 0.016794291136285305, 0.016977741712501104, 0.016998789235661563, 0.016988044303078816, 0.01683412150302606, 0.016843167974259818, 0.0169079903417909, 0.01693895424178125, 0.01695579370392577, 0.01700822624469412, 0.017070920171713706, 0.01703597895172752, 0.016948976019056386, 0.01705220572114063, 0.017076277884829738, 0.01707758877149438, 0.01711345058545451, 0.017185025426274165, 0.01709431923134615, 0.01709166240767114, 0.016904395755203475, 0.016877287731979367, 0.016842883393282593, 0.016821134544929475, 0.016804775912950928, 0.016783563874894554, 0.016828964424714668, 0.01684012530705634, 0.01685996868473041, 0.016848213517565457, 0.016870004591890954, 0.016895671790782312, 0.016913813608503345, 0.01684385975729792, 0.016853958594899028, 0.016813333921563128, 0.0167936199870827, 0.0167936199870827, 0.016763847556317473, 0.01674838411755166, 0.01674838411755166, 0.016800379090484048, 0.01685110570001843, 0.016866474962350258, 0.016867485739466132, 0.016908703070123078, 0.01693092720216151, 0.016907097994795322, 0.016907097994795322, 0.01692081894525623, 0.01692081894525623, 0.01692081894525623, 0.01692081894525623, 0.01692081894525623, 0.01692081894525623, 0.01692081894525623, 0.01692081894525623, 0.01692081894525623, 0.01692081894525623, 0.01692081894525623, 0.01692081894525623, 0.01692081894525623, 0.016890191017825608, 0.016890191017825608, 0.016890191017825608, 0.016890191017825608, 0.016890191017825608, 0.016890191017825608, 0.016890191017825608, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814, 0.01690520494779814], "accuracy_test_std": 0.012612932370257495, "error_valid": [0.8064391354480421, 0.7357986634036144, 0.6926857821912651, 0.6626138342432228, 0.638707172439759, 0.628453266189759, 0.6153608574924698, 0.6126856057040663, 0.6077924981174698, 0.6007830148719879, 0.5946486139871988, 0.5912203501506024, 0.5898775767131024, 0.586815523814006, 0.5848726939006024, 0.5818003459149097, 0.5794707148908133, 0.5756762401167168, 0.5745981974774097, 0.5738657756024097, 0.5725127070783133, 0.5707934276167168, 0.5689623729292168, 0.5687182323042168, 0.5673651637801205, 0.5653914486069277, 0.5650149425828314, 0.5648928722703314, 0.5646487316453314, 0.5636618740587349, 0.5626853115587349, 0.5623191006212349, 0.5623191006212349, 0.5620852550828314, 0.5617190441453314, 0.5611086925828314, 0.5608645519578314, 0.5603865657944277, 0.5606307064194277, 0.5602542003953314, 0.5600100597703314, 0.5596438488328314, 0.5595217785203314, 0.5595217785203314, 0.5591555675828314, 0.5587893566453314, 0.5585349209337349, 0.5582907803087349, 0.5586569912462349, 0.5585349209337349, 0.5584128506212349, 0.5585349209337349, 0.5582907803087349, 0.5578024990587349, 0.5578024990587349, 0.5576804287462349, 0.5575583584337349, 0.5575583584337349, 0.5575583584337349, 0.5574362881212349, 0.5575583584337349, 0.5579348644578314, 0.5578127941453314, 0.5578127941453314, 0.5578127941453314, 0.5576907238328314, 0.5574465832078314, 0.5574465832078314, 0.5574465832078314, 0.5572024425828314, 0.5572024425828314, 0.5572024425828314, 0.5572024425828314, 0.5572024425828314, 0.5572024425828314, 0.5572024425828314, 0.5572024425828314, 0.5572024425828314, 0.5573245128953314, 0.5573245128953314, 0.5573245128953314, 0.5573245128953314, 0.5573245128953314, 0.5573245128953314, 0.5573245128953314, 0.5573245128953314, 0.5573245128953314, 0.5573245128953314, 0.5572024425828314, 0.5572024425828314, 0.5572024425828314, 0.5572024425828314, 0.5568259365587349, 0.5568259365587349, 0.5568259365587349, 0.5568259365587349, 0.5568259365587349, 0.5568259365587349, 0.5568259365587349, 0.5568259365587349, 0.5568259365587349, 0.5568259365587349, 0.5568259365587349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349, 0.5569480068712349], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.7370903328484524, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0009423110512787999, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "optimization": "adadelta", "nb_data_augmentation": 0, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 6.188906805139475e-07, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.08107098775749953}, "accuracy_valid_max": 0.4431740634412651, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.4430519931287651, "loss_train": [2.457153797149658, 2.1647849082946777, 2.004619836807251, 1.9005897045135498, 1.832288384437561, 1.7856999635696411, 1.7522423267364502, 1.7268208265304565, 1.7066855430603027, 1.6901557445526123, 1.6762338876724243, 1.6642811298370361, 1.6538842916488647, 1.6447327136993408, 1.6366320848464966, 1.6294033527374268, 1.6229197978973389, 1.61708664894104, 1.6118313074111938, 1.6070775985717773, 1.6027761697769165, 1.5988701581954956, 1.5953210592269897, 1.5920896530151367, 1.5891443490982056, 1.5864620208740234, 1.5840150117874146, 1.5817830562591553, 1.5797446966171265, 1.5778822898864746, 1.5761809349060059, 1.5746244192123413, 1.5731995105743408, 1.5718967914581299, 1.5707037448883057, 1.569610595703125, 1.5686086416244507, 1.5676912069320679, 1.5668500661849976, 1.5660792589187622, 1.5653716325759888, 1.5647224187850952, 1.5641268491744995, 1.5635801553726196, 1.5630786418914795, 1.5626182556152344, 1.5621954202651978, 1.561807632446289, 1.5614511966705322, 1.5611240863800049, 1.5608240365982056, 1.5605486631393433, 1.560295581817627, 1.5600639581680298, 1.559850811958313, 1.5596555471420288, 1.5594762563705444, 1.5593116283416748, 1.5591607093811035, 1.5590221881866455, 1.5588949918746948, 1.558778166770935, 1.5586708784103394, 1.5585722923278809, 1.5584819316864014, 1.5583990812301636, 1.5583230257034302, 1.558253526687622, 1.5581899881362915, 1.5581316947937012, 1.558078408241272, 1.5580297708511353, 1.5579856634140015, 1.5579452514648438, 1.557908535003662, 1.557875156402588, 1.5578449964523315, 1.557817816734314, 1.5577930212020874, 1.5577707290649414, 1.5577507019042969, 1.5577327013015747, 1.5577166080474854, 1.5577020645141602, 1.5576890707015991, 1.5576776266098022, 1.5576674938201904, 1.5576586723327637, 1.5576510429382324, 1.557644248008728, 1.5576382875442505, 1.5576331615447998, 1.5576286315917969, 1.5576249361038208, 1.5576212406158447, 1.557618498802185, 1.557615876197815, 1.557613730430603, 1.5576118230819702, 1.5576103925704956, 1.5576090812683105, 1.5576080083847046, 1.5576069355010986, 1.5576062202453613, 1.5576053857803345, 1.5576050281524658, 1.5576045513153076, 1.5576039552688599, 1.5576038360595703, 1.5576035976409912, 1.5576032400131226, 1.557602882385254, 1.557602882385254, 1.5576025247573853, 1.5576025247573853, 1.5576025247573853, 1.5576022863388062, 1.5576021671295166, 1.5576021671295166, 1.5576021671295166, 1.5576021671295166, 1.5576021671295166, 1.5576021671295166, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648, 1.557601809501648], "accuracy_train_first": 0.1979747052648579, "model": "residualv3", "loss_std": [0.23495151102542877, 0.17491169273853302, 0.15451891720294952, 0.14446771144866943, 0.14034980535507202, 0.1388782262802124, 0.13855105638504028, 0.13862985372543335, 0.1388874351978302, 0.1392027735710144, 0.13953261077404022, 0.1398576945066452, 0.14016321301460266, 0.14043250679969788, 0.14068879187107086, 0.14092327654361725, 0.1411454975605011, 0.14135250449180603, 0.14155089855194092, 0.14173656702041626, 0.1419057846069336, 0.14206083118915558, 0.14220327138900757, 0.14233194291591644, 0.14245745539665222, 0.1425708830356598, 0.1426766812801361, 0.1427823156118393, 0.14287713170051575, 0.1429673135280609, 0.14305105805397034, 0.14313042163848877, 0.14319995045661926, 0.14326585829257965, 0.1433248668909073, 0.14337870478630066, 0.1434279978275299, 0.14347483217716217, 0.14351773262023926, 0.14355847239494324, 0.1435951292514801, 0.14362826943397522, 0.14365901052951813, 0.14368657767772675, 0.1437121331691742, 0.1437349021434784, 0.14375588297843933, 0.14377471804618835, 0.14379197359085083, 0.14380787312984467, 0.14382204413414001, 0.1438349485397339, 0.14384710788726807, 0.1438584178686142, 0.1438686102628708, 0.14387798309326172, 0.14388668537139893, 0.1438947170972824, 0.14390219748020172, 0.14390899240970612, 0.1439153552055359, 0.14392106235027313, 0.14392626285552979, 0.1439308524131775, 0.14393486082553864, 0.14393840730190277, 0.1439415067434311, 0.14394427835941315, 0.1439467966556549, 0.14394913613796234, 0.14395110309123993, 0.14395278692245483, 0.1439541131258011, 0.1439550817012787, 0.14395570755004883, 0.1439560055732727, 0.1439560353755951, 0.143955796957016, 0.1439552754163742, 0.1439545750617981, 0.14395365118980408, 0.14395244419574738, 0.14395098388195038, 0.14394928514957428, 0.14394739270210266, 0.14394541084766388, 0.1439433991909027, 0.14394138753414154, 0.14393949508666992, 0.14393773674964905, 0.1439361423254013, 0.1439346969127655, 0.14393337070941925, 0.14393213391304016, 0.14393092691898346, 0.14392979443073273, 0.14392873644828796, 0.14392782747745514, 0.14392708241939545, 0.1439264565706253, 0.1439259648323059, 0.14392554759979248, 0.14392516016960144, 0.14392481744289398, 0.14392448961734772, 0.14392420649528503, 0.14392398297786713, 0.1439238041639328, 0.14392365515232086, 0.1439235359430313, 0.14392343163490295, 0.1439233422279358, 0.14392325282096863, 0.14392317831516266, 0.14392311871051788, 0.1439230740070343, 0.14392302930355072, 0.14392298460006714, 0.14392296969890594, 0.14392293989658356, 0.14392291009426117, 0.14392291009426117, 0.14392288029193878, 0.1439228653907776, 0.1439228653907776, 0.1439228504896164, 0.1439228504896164, 0.1439228355884552, 0.1439228355884552, 0.143922820687294, 0.143922820687294, 0.143922820687294, 0.143922820687294, 0.1439228057861328, 0.143922820687294, 0.143922820687294, 0.1439228057861328, 0.1439228057861328, 0.1439228057861328, 0.1439228057861328, 0.1439228057861328, 0.1439228057861328, 0.1439228057861328]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:12 2016", "state": "available"}], "summary": "2b31bf8297336dbfedcc86bad724a57a"}