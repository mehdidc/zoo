{"content": {"hp_model": {"f0": 64, "f1": 16, "f2": 64, "f3": 64, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.4463317394256592, 1.0704491138458252, 0.9054738283157349, 0.7874724864959717, 0.6873269081115723, 0.5950003862380981, 0.5067256093025208, 0.4206804633140564, 0.33924758434295654, 0.26437821984291077, 0.19807051122188568, 0.14142648875713348, 0.09646512567996979, 0.06560785323381424, 0.04650144651532173, 0.03439623489975929, 0.025124073028564453, 0.017633669078350067, 0.012176977470517159, 0.008436826057732105, 0.00556220905855298, 0.0033728540875017643, 0.002272292273119092, 0.0017553118523210287, 0.0014830572763457894, 0.0013213841011747718, 0.0012083036126568913, 0.0011232858523726463, 0.0010569244623184204, 0.001003967714495957, 0.0009611700661480427, 0.0009257057681679726, 0.0008959696860983968, 0.0008707301458343863, 0.0008491575717926025, 0.0008304593502543867, 0.000814215571153909, 0.0007998354849405587, 0.0007871905108913779, 0.0007759843720123172, 0.0007659707916900516, 0.0007568999426439404, 0.0007487089023925364, 0.0007412204286083579, 0.0007344484329223633, 0.0007281992002390325, 0.0007224918808788061, 0.0007172849145717919, 0.0007124950643628836, 0.0007081247167661786, 0.0007040934287942946, 0.0007003661594353616, 0.000696936680469662, 0.0006937624420970678, 0.0006908386130817235, 0.0006881474982947111, 0.0006856714026071131, 0.0006833947263658047, 0.0006812791107222438, 0.0006793513894081116, 0.0006775679066777229, 0.0006759372190572321, 0.0006744334823451936, 0.0006730547756887972, 0.0006717873620800674, 0.0006706209387630224, 0.0006695552146993577, 0.0006685772677883506, 0.0006676708580926061, 0.0006668390124104917, 0.0006660729413852096, 0.0006653711316175759, 0.0006647247937507927, 0.00066413200693205, 0.0006635864265263081, 0.0006630867137573659, 0.0006626248941756785, 0.0006622018408961594, 0.0006618115585297346, 0.0006614535814151168, 0.0006611263961531222, 0.0006608246476389468, 0.0006605486269108951, 0.0006602948415093124, 0.000660061661619693], "moving_avg_accuracy_train": [0.05108669164128828, 0.10776088530131042, 0.16400027180809335, 0.218551151182978, 0.2727240582534491, 0.32565699370948104, 0.37579323261141956, 0.42311268066233926, 0.467220614936683, 0.508745178552603, 0.5478167893425993, 0.5843508238000429, 0.6181754291795901, 0.6489107951129138, 0.6779999774314028, 0.7036688529752226, 0.7273826434921153, 0.7504010546631604, 0.771926812551634, 0.7920276941310036, 0.8100720566738833, 0.827262860679114, 0.8430903320516787, 0.8575350190846062, 0.8706421942594789, 0.8825409584644833, 0.8933149504156541, 0.9030766473383744, 0.9119110026938226, 0.919906100341107, 0.9271388906046153, 0.9336832790739157, 0.9396034556308098, 0.9449571911689193, 0.9497871788972655, 0.9541481187456341, 0.9580892406508327, 0.9616478761095589, 0.9648622737664602, 0.9677598819552903, 0.970374704771666, 0.9727443213480708, 0.9748955774573114, 0.9768340331044374, 0.978592594079708, 0.9801799492550705, 0.9816108940617063, 0.9829057198341071, 0.9840757133268868, 0.9851287074703886, 0.9860810524971593, 0.9869404881700624, 0.9877139802756751, 0.9884101231707266, 0.9890413020738921, 0.989609363086741, 0.990120617998305, 0.9905853977163316, 0.9910036994625555, 0.9913801710341571, 0.9917166702997889, 0.9920195196388576, 0.9922920840440195, 0.9925397171574746, 0.9927672372572033, 0.9929720053469592, 0.9931562966277394, 0.9933221587804416, 0.9934714347178736, 0.9936057830615624, 0.9937266965708824, 0.9938355187292703, 0.993935783820629, 0.9940260224028518, 0.9941072371268522, 0.9941803303784527, 0.9942461143048931, 0.9943053198386894, 0.9943586048191061, 0.9944065613014812, 0.9944497221356188, 0.9944862417375331, 0.9945191093792559, 0.9945486902568065, 0.994575313046602], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05014648437499999, 0.10396590267319275, 0.15673099232868973, 0.206429045674887, 0.254425983680817, 0.29938309940347324, 0.3398200894913639, 0.3758298150584172, 0.40755894528073816, 0.43637562817171555, 0.46237682547314335, 0.4854005145843381, 0.5067067427757537, 0.5254683385941873, 0.5419782983153408, 0.5567213688038368, 0.5707337316410737, 0.5833611832604754, 0.5950666570842772, 0.6063859220516779, 0.6161948425535884, 0.6255010042413771, 0.6341227494027063, 0.6416615639767429, 0.6487404953520355, 0.6549497536575699, 0.6605635297037105, 0.665628135176487, 0.6701873096106455, 0.6742793890787978, 0.6779500535688848, 0.681279095181123, 0.6844105394845468, 0.6871911887552186, 0.6897426012238232, 0.6920144583830674, 0.6940469227951372, 0.6958517267035, 0.6974516361585266, 0.6988671406055504, 0.7001166805453719, 0.7013023016474612, 0.7023693606393416, 0.703366334825784, 0.7041893398974225, 0.7049422514931472, 0.7056198719292993, 0.7061931092280862, 0.7067588804306542, 0.7072924885754653, 0.7077350853033857, 0.708170043452264, 0.7085615057862544, 0.7089260289180959, 0.7092785137992532, 0.7096079572235447, 0.7099044563054071, 0.7101336548766737, 0.7103399335908136, 0.7105377914647895, 0.7106914494888678, 0.7108297417105383, 0.7109542047100417, 0.7110662214095947, 0.7111670364391925, 0.7112455629345805, 0.7112918227179297, 0.7113589000941035, 0.71139485567016, 0.7114272156886109, 0.7114563397052167, 0.7114825513201619, 0.7114684911712029, 0.7114680440683898, 0.7114676416758581, 0.7114550724913294, 0.7114559672565037, 0.7114567725451606, 0.7114574973049518, 0.7114581495887639, 0.7114587366441947, 0.7114592649940824, 0.7114597405089814, 0.7114601684723905, 0.7114483466082087], "moving_var_accuracy_train": [0.023488650565668675, 0.050047463552225044, 0.07350853454893641, 0.09293986705920171, 0.11005821509747463, 0.12426945449165919, 0.13446529110358357, 0.1411709334678184, 0.14456342891458504, 0.14562569047455992, 0.1448024383546285, 0.14233481558280478, 0.13839826938626315, 0.1330604069191347, 0.12736999097884588, 0.12056301242611832, 0.1135678059296181, 0.1069796506122099, 0.10045190982504755, 0.09404312780495337, 0.08756920620066797, 0.08147199926171748, 0.07557937898598996, 0.06989928193870396, 0.06445553611441676, 0.059284207809431756, 0.0544004971515636, 0.04981806397770666, 0.04553867009085304, 0.041560097359274246, 0.037874906918309935, 0.034472877410412946, 0.031341026083554845, 0.02846488583310751, 0.025828356282900526, 0.023416680821860283, 0.021214804716518976, 0.019207299221820014, 0.017379560470308242, 0.0157171696222212, 0.014206988345248433, 0.012836825255196143, 0.011594793855304432, 0.010469132962436862, 0.009450052496526877, 0.008527724514948942, 0.007693380490810789, 0.00693913160575757, 0.006257538408140136, 0.005641763737322364, 0.005085750013040261, 0.004583822678818961, 0.004130825021274073, 0.0037221040535196422, 0.003353479129437888, 0.003021035456322969, 0.002721284344952057, 0.0024511000921334514, 0.0022075648700781527, 0.001988083960668355, 0.0017902946504034568, 0.0016120906448626804, 0.0014515502025710637, 0.0013069470817438729, 0.001176718262131511, 0.0010594238056536003, 0.0009537870945737851, 0.0008586559773996978, 0.0007729909294091939, 0.0006958542817653419, 0.0006264004342794323, 0.000563866971210895, 0.000507570751886712, 0.00045688696371353507, 0.0004112576298247319, 0.0003701799504531245, 0.00033320090313261337, 0.0002999123604764411, 0.00026994667803103916, 0.0002429727086457514, 0.00021869220349960734, 0.00019683498628156242, 0.000177161210190258, 0.00015945296442608216, 0.00014351404693990243], "duration": 28146.982695, "accuracy_train": [0.510866916412883, 0.6178286282415097, 0.67015475036914, 0.7095090655569398, 0.7602802218876892, 0.8020534128137689, 0.8270193827288667, 0.8489877131206165, 0.8641920234057769, 0.8824662510958842, 0.8994612864525655, 0.9131571339170359, 0.922596877595515, 0.9255290885128276, 0.9398026182978036, 0.9346887328696014, 0.9408067581441492, 0.9575667552025655, 0.9656586335478959, 0.9729356283453304, 0.9724713195598007, 0.9819800967261905, 0.9855375744047619, 0.9875372023809523, 0.9886067708333334, 0.9896298363095238, 0.9902808779761905, 0.9909319196428571, 0.9914202008928571, 0.9918619791666666, 0.9922340029761905, 0.9925827752976191, 0.9928850446428571, 0.9931408110119048, 0.9932570684523809, 0.9933965773809523, 0.9935593377976191, 0.9936755952380952, 0.9937918526785714, 0.9938383556547619, 0.9939081101190477, 0.9940708705357143, 0.9942568824404762, 0.9942801339285714, 0.9944196428571429, 0.9944661458333334, 0.9944893973214286, 0.9945591517857143, 0.9946056547619048, 0.9946056547619048, 0.9946521577380952, 0.9946754092261905, 0.9946754092261905, 0.9946754092261905, 0.9947219122023809, 0.9947219122023809, 0.9947219122023809, 0.9947684151785714, 0.9947684151785714, 0.9947684151785714, 0.9947451636904762, 0.9947451636904762, 0.9947451636904762, 0.9947684151785714, 0.9948149181547619, 0.9948149181547619, 0.9948149181547619, 0.9948149181547619, 0.9948149181547619, 0.9948149181547619, 0.9948149181547619, 0.9948149181547619, 0.9948381696428571, 0.9948381696428571, 0.9948381696428571, 0.9948381696428571, 0.9948381696428571, 0.9948381696428571, 0.9948381696428571, 0.9948381696428571, 0.9948381696428571, 0.9948149181547619, 0.9948149181547619, 0.9948149181547619, 0.9948149181547619], "end": "2016-01-31 06:23:14.167000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0], "moving_var_accuracy_valid": [0.02263202905654907, 0.04643759422449678, 0.06685122697922083, 0.082395172838912, 0.09488901007652656, 0.10359038935577666, 0.10794770192651248, 0.10882323475259172, 0.10700155061931754, 0.10377500647293812, 0.09948206617561431, 0.09430467190065338, 0.08895980294829009, 0.08323179995234949, 0.07736182888706156, 0.07158186914521426, 0.0661907990412342, 0.06100679194671375, 0.056139275808999765, 0.05167848006271979, 0.04737656634916301, 0.043418351522480116, 0.03974552677687423, 0.036282477625822165, 0.033105231287984864, 0.03014170215753001, 0.02741116227524301, 0.02490089810507261, 0.022597882938255116, 0.02048880067379267, 0.01856118460660248, 0.016804808808446346, 0.015212581418430722, 0.013760911369886041, 0.012443407583161998, 0.01124551883941388, 0.010158145159749462, 0.009171646498103292, 0.008277519240671511, 0.007467800192160259, 0.006735072323495114, 0.006074216367725078, 0.005477042264981946, 0.004938283656239642, 0.004450551326747162, 0.004010598076911235, 0.003613670794319531, 0.0032552611238940627, 0.0029326158849875524, 0.0026419169353586757, 0.0023794882685949, 0.0021432421390568906, 0.001930297109981601, 0.0017384632930062683, 0.0015657351740286417, 0.001410138453354058, 0.0012699158133685595, 0.001143397019897339, 0.0010294402760787698, 0.0009268485781155412, 0.0008343762173992599, 0.0007511107183065049, 0.0006761390658200629, 0.0006086380889068655, 0.0005478657530479141, 0.000493134675437424, 0.0004438404676016812, 0.0003994969152110625, 0.00035955885892100225, 0.0003236123975660493, 0.00029125879168453365, 0.00026213909595490265, 0.00023592696554951113, 0.00021233427079366836, 0.00019110084517157927, 0.00017199218251401878, 0.00015479297146805938, 0.00013931368015766184, 0.00012538231686938647, 0.00011284408901171536, 0.00010155968321225054, 9.140371740340791e-05, 8.22633476980969e-05, 7.403701457666133e-05, 6.66345709272498e-05], "accuracy_test": 0.7098333864795918, "start": "2016-01-30 22:34:07.184000", "learning_rate_per_epoch": [0.00015171639097388834, 0.00013977810158394277, 0.00012877921108156443, 0.00011864580301335081, 0.00010930977441603318, 0.00010070838470710441, 9.278381912736222e-05, 8.548282494302839e-05, 7.875633309595287e-05, 7.255913806147873e-05, 6.68495922582224e-05, 6.158931500976905e-05, 5.6742959714028984e-05, 5.2277955546742305e-05, 4.816429645870812e-05, 4.437433381099254e-05, 4.0882598113967106e-05, 3.7665620766347274e-05, 3.47017812600825e-05, 3.197116166120395e-05, 2.9455408366629854e-05, 2.713761386985425e-05, 2.5002203983603977e-05, 2.3034825062495656e-05, 2.1222254872554913e-05, 1.9552313460735604e-05, 1.8013775843428448e-05, 1.6596304703853093e-05, 1.5290370356524363e-05, 1.4087197996559553e-05, 1.2978701306565199e-05, 1.195743061543908e-05, 1.1016521966666915e-05, 1.0149651643587276e-05, 9.350993423140608e-06, 8.615180377091747e-06, 7.937267582747154e-06, 7.312698016903596e-06, 6.737274816259742e-06, 6.207130809343653e-06, 5.718702595913783e-06, 5.268708264338784e-06, 4.85412283524056e-06, 4.4721605263475794e-06, 4.120254288864089e-06, 3.796038754444453e-06, 3.4973352285305737e-06, 3.222136228941963e-06, 2.9685920708288904e-06, 2.734998815867584e-06, 2.5197866762027843e-06, 2.321509100511321e-06, 2.1388336790550966e-06, 1.970532593986718e-06, 1.8154748886445304e-06, 1.6726183957871399e-06, 1.5410030300699873e-06, 1.4197441942087607e-06, 1.3080270946375094e-06, 1.2051007161062444e-06, 1.110273501581105e-06, 1.022908008962986e-06, 9.424172162653122e-07, 8.682600878273661e-07, 7.999382205525762e-07, 7.369924901468039e-07, 6.789998678868869e-07, 6.255705784496968e-07, 5.763455419582897e-07, 5.309939297148958e-07, 4.892109473075834e-07, 4.507158166688896e-07, 4.1524978655615996e-07, 3.825745125141111e-07, 3.524704084156838e-07, 3.247351401114429e-07, 2.9918231803094386e-07, 2.7564018978409877e-07, 2.5395056013621797e-07, 2.3396763992877823e-07, 2.1555713658472087e-07, 1.9859533040289534e-07, 1.829682219067763e-07, 1.685707786691637e-07, 1.5530623898030171e-07], "accuracy_train_first": 0.510866916412883, "accuracy_train_last": 0.9948149181547619, "batch_size_eval": 1024, "accuracy_train_std": [0.018679978762373057, 0.02007608198276795, 0.022580964741088075, 0.02398619628451922, 0.02519535541628121, 0.02786647353617951, 0.03096843353118363, 0.03177503500720345, 0.03194090449168459, 0.030564088303039753, 0.027590119913228676, 0.02539367752267341, 0.023516294832398782, 0.019339406160702538, 0.018232001392184494, 0.018403933865763278, 0.015122919797147704, 0.01335161507745736, 0.01097694459499489, 0.01013011322601968, 0.009945952421191232, 0.007404239150709093, 0.005910453268533304, 0.005046590736296573, 0.004749226723097763, 0.004372269074978854, 0.004076643032727514, 0.0036681387263606804, 0.0035115905818230236, 0.0034140913026372123, 0.0033352717777234203, 0.003211147518912502, 0.0031122270985402024, 0.0029411983629103675, 0.0028575691026296907, 0.002735782380967769, 0.0027212189137063476, 0.002663691125673305, 0.0027024791612458867, 0.002741408623834894, 0.0027274699216174067, 0.002690449370111081, 0.002567895018950085, 0.0025534326475618197, 0.0025059883901241593, 0.002472979129521639, 0.0024835593509755253, 0.0023839296164390434, 0.0024319767233989737, 0.0024690409137757227, 0.0024226220754522145, 0.002326659665381327, 0.002307058532664554, 0.002267347971176078, 0.002184278997867366, 0.002184278997867366, 0.0021633882257127224, 0.002129130525149068, 0.002129130525149068, 0.002129130525149068, 0.0021305266348503175, 0.0021305266348503175, 0.0021305266348503175, 0.0021397686453931315, 0.002114863126274022, 0.002114863126274022, 0.002114863126274022, 0.002114863126274022, 0.002114863126274022, 0.002114863126274022, 0.002114863126274022, 0.002114863126274022, 0.0021552511581578253, 0.0021552511581578253, 0.0021552511581578253, 0.0021552511581578253, 0.0021552511581578253, 0.0021552511581578253, 0.0021552511581578253, 0.0021552511581578253, 0.0021552511581578253, 0.002157382278043828, 0.002157382278043828, 0.002157382278043828, 0.002157382278043828], "accuracy_test_std": 0.01763666736121546, "error_valid": [0.49853515625, 0.4116593326430723, 0.3683832007718373, 0.3462884742093373, 0.31360157426581325, 0.2960028590926205, 0.2962469997176205, 0.30008265483810237, 0.3068788827183735, 0.30427422580948793, 0.30361239881400603, 0.3073862834149097, 0.30153720350150603, 0.3056772990399097, 0.30943206419427716, 0.3105909967996988, 0.30315500282379515, 0.3029917521649097, 0.29958407850150603, 0.2917406932417168, 0.2955248729292168, 0.29074354056852414, 0.28828154414533136, 0.2904891048569277, 0.28754912227033136, 0.2891669215926205, 0.28891248588102414, 0.28879041556852414, 0.2887801204819277, 0.28889189570783136, 0.28901396602033136, 0.2887595303087349, 0.2874064617846386, 0.2877829678087349, 0.2872946865587349, 0.2875388271837349, 0.2876608974962349, 0.2879050381212349, 0.2881491787462349, 0.2883933193712349, 0.2886374599962349, 0.2880271084337349, 0.2880271084337349, 0.2876608974962349, 0.28840361445783136, 0.28828154414533136, 0.28828154414533136, 0.28864775508283136, 0.2881491787462349, 0.2879050381212349, 0.28828154414533136, 0.28791533320783136, 0.28791533320783136, 0.28779326289533136, 0.28754912227033136, 0.28742705195783136, 0.28742705195783136, 0.2878035579819277, 0.2878035579819277, 0.2876814876694277, 0.2879256282944277, 0.2879256282944277, 0.2879256282944277, 0.2879256282944277, 0.2879256282944277, 0.2880476986069277, 0.2882918392319277, 0.28803740352033136, 0.28828154414533136, 0.28828154414533136, 0.28828154414533136, 0.28828154414533136, 0.2886580501694277, 0.2885359798569277, 0.2885359798569277, 0.2886580501694277, 0.2885359798569277, 0.2885359798569277, 0.2885359798569277, 0.2885359798569277, 0.2885359798569277, 0.2885359798569277, 0.2885359798569277, 0.2885359798569277, 0.2886580501694277], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.07868821983212762, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "valid_ratio": 0.15, "learning_rate": 0.0001646743193926446, "optimization": "rmsprop", "nb_data_augmentation": 0, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 5.68169782657216e-08, "rotation_range": [0, 0], "momentum": 0.8801347010635725}, "accuracy_valid_max": 0.7127053134412651, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7113419498305723, "accuracy_valid_std": [0.019384212149686726, 0.019585925921104946, 0.01668845604265962, 0.022368857809871058, 0.014415891862684833, 0.017204058717787733, 0.016391745684855012, 0.01910285672596069, 0.024036898311315127, 0.022510963874213818, 0.014980745126863126, 0.012999052560952355, 0.014109716788092416, 0.012189184402748703, 0.0224747181569505, 0.01456463541190848, 0.016769171163606024, 0.015075338721227223, 0.014829647488664457, 0.014550861377445991, 0.016583390748292213, 0.015444287594685245, 0.012918400746255741, 0.013712109846653563, 0.01343366840433562, 0.015528698936444341, 0.015079188492324076, 0.014615790487918863, 0.013325901603981448, 0.013128345095055883, 0.012718905945173989, 0.011860514247722439, 0.011013921084230605, 0.011150983558479126, 0.010975986825603532, 0.010705146056596839, 0.011034136616424958, 0.011286440209775135, 0.011631004722258208, 0.011315353698254746, 0.011483930150965068, 0.01143984552920194, 0.011819118121025757, 0.011684781674221684, 0.011982345750670833, 0.012079082865843888, 0.012352326222002363, 0.012042874216543526, 0.011298268731002231, 0.011307544816052338, 0.011940116530943136, 0.012172854041537657, 0.01223147117035351, 0.011908137157871364, 0.011949615529363205, 0.011747263061677093, 0.011747263061677093, 0.012491889212678076, 0.012491889212678076, 0.012493304763678442, 0.012725666601032996, 0.012837585964263898, 0.012837585964263898, 0.012837585964263898, 0.012837585964263898, 0.01275001465555426, 0.012785758277199959, 0.01200136661633275, 0.011759032628098002, 0.011759032628098002, 0.011759032628098002, 0.011759032628098002, 0.012390913803512035, 0.012506051868164617, 0.012506051868164617, 0.012362018004709442, 0.012486973058792934, 0.012486973058792934, 0.012486973058792934, 0.012486973058792934, 0.012486973058792934, 0.012486973058792934, 0.012486973058792934, 0.012486973058792934, 0.01235237105051734], "accuracy_valid": [0.50146484375, 0.5883406673569277, 0.6316167992281627, 0.6537115257906627, 0.6863984257341867, 0.7039971409073795, 0.7037530002823795, 0.6999173451618976, 0.6931211172816265, 0.6957257741905121, 0.696387601185994, 0.6926137165850903, 0.698462796498494, 0.6943227009600903, 0.6905679358057228, 0.6894090032003012, 0.6968449971762049, 0.6970082478350903, 0.700415921498494, 0.7082593067582832, 0.7044751270707832, 0.7092564594314759, 0.7117184558546686, 0.7095108951430723, 0.7124508777296686, 0.7108330784073795, 0.7110875141189759, 0.7112095844314759, 0.7112198795180723, 0.7111081042921686, 0.7109860339796686, 0.7112404696912651, 0.7125935382153614, 0.7122170321912651, 0.7127053134412651, 0.7124611728162651, 0.7123391025037651, 0.7120949618787651, 0.7118508212537651, 0.7116066806287651, 0.7113625400037651, 0.7119728915662651, 0.7119728915662651, 0.7123391025037651, 0.7115963855421686, 0.7117184558546686, 0.7117184558546686, 0.7113522449171686, 0.7118508212537651, 0.7120949618787651, 0.7117184558546686, 0.7120846667921686, 0.7120846667921686, 0.7122067371046686, 0.7124508777296686, 0.7125729480421686, 0.7125729480421686, 0.7121964420180723, 0.7121964420180723, 0.7123185123305723, 0.7120743717055723, 0.7120743717055723, 0.7120743717055723, 0.7120743717055723, 0.7120743717055723, 0.7119523013930723, 0.7117081607680723, 0.7119625964796686, 0.7117184558546686, 0.7117184558546686, 0.7117184558546686, 0.7117184558546686, 0.7113419498305723, 0.7114640201430723, 0.7114640201430723, 0.7113419498305723, 0.7114640201430723, 0.7114640201430723, 0.7114640201430723, 0.7114640201430723, 0.7114640201430723, 0.7114640201430723, 0.7114640201430723, 0.7114640201430723, 0.7113419498305723], "seed": 469670439, "model": "residualv3", "loss_std": [0.3155215084552765, 0.19596661627292633, 0.18740667402744293, 0.18121619522571564, 0.17486491799354553, 0.16680912673473358, 0.15708482265472412, 0.14606444537639618, 0.13300298154354095, 0.11790342628955841, 0.10101032257080078, 0.08212700486183167, 0.06321515142917633, 0.04500412195920944, 0.03284766897559166, 0.024018272757530212, 0.018102213740348816, 0.013353567570447922, 0.00867178663611412, 0.005949470680207014, 0.00369532173499465, 0.0016399763990193605, 0.0008704703068360686, 0.0005652469117194414, 0.00041971117025241256, 0.00035116038634441793, 0.00030684840749017894, 0.00027519697323441505, 0.00025146256666630507, 0.00023303159105125815, 0.0002184907061746344, 0.00020667687931563705, 0.00019696693925652653, 0.00018889438069891185, 0.00018208890105597675, 0.0001763289183145389, 0.00017135489906650037, 0.0001669852208578959, 0.00016323447925969958, 0.00015993829583749175, 0.0001570040622027591, 0.00015433169028256088, 0.00015195576997939497, 0.00014969332551117986, 0.0001476698089390993, 0.00014575345267076045, 0.000143955388921313, 0.00014228414511308074, 0.00014072652265895158, 0.0001392612757626921, 0.00013787161151412874, 0.00013655913062393665, 0.00013533892342820764, 0.0001341841125395149, 0.00013310465146787465, 0.00013209630560595542, 0.00013115409819874913, 0.00013027821842115372, 0.00012945230992045254, 0.00012869997590314597, 0.00012799484829884022, 0.00012735030031763017, 0.00012675218749791384, 0.00012620263441931456, 0.00012569539831019938, 0.00012522666656877846, 0.0001248015178134665, 0.0001244104641955346, 0.00012404422159306705, 0.00012370760669000447, 0.00012339804379735142, 0.00012311353930272162, 0.00012285048433113843, 0.00012261005758773535, 0.00012238710769452155, 0.00012218540359754115, 0.00012199590855743736, 0.00012182301725260913, 0.00012166337546659634, 0.00012151715054642409, 0.00012138384045101702, 0.00012126066576456651, 0.00012114804849261418, 0.00012104332563467324, 0.00012094734847778454]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:25 2016", "state": "available"}], "summary": "e72d031530d2b53a893bd4393f55d608"}