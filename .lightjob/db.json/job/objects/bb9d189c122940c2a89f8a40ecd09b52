{"content": {"hp_model": {"f0": 16, "f1": 32, "f2": 64, "f3": 16, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.020504182561629135, 0.02473687789625475, 0.01853851872433973, 0.017999023460462116, 0.017743632202360436, 0.012014688590903877, 0.01216755584563679, 0.011877886772627091, 0.010239811908695995, 0.009016898832150988, 0.006293560894352338, 0.009834945115833747, 0.008579449884003958, 0.009019461780550093, 0.009915341566134078, 0.009577527370588729, 0.00751837984245541, 0.01009972217792205, 0.008808915069212907, 0.014167776071161983, 0.006902121296403702, 0.009300705953019645, 0.010382328136776363, 0.012481609860898175, 0.009745493280543253, 0.011228306654584746, 0.009031007902889316, 0.009118079699278839, 0.009655583726993044, 0.00736998605331392, 0.00948753397961394, 0.006356008952657117, 0.00637200738385348, 0.009013127379454217, 0.01066118209065221, 0.005444435214021225, 0.006002193692135582, 0.008739669131235184, 0.007575678602737691, 0.00483784574099929, 0.006772745277809523, 0.00892923477891783, 0.008434091898369647, 0.007675696354168697, 0.005193350535371957, 0.004532747106089331, 0.008086156808299267, 0.011638362501177753, 0.008622404674382585, 0.00746882146046254, 0.010253126558032689, 0.01185635578034002, 0.009957446296703892, 0.01119660562123681, 0.00556679267926414, 0.007402839768989313, 0.006609787904680752, 0.008054979644163728, 0.007379589919938058, 0.013078785079152028, 0.0042206275441934536, 0.0084954365922647, 0.005213164021260214, 0.00818002023167126, 0.006456495885393269, 0.005932136908610042, 0.01097526789097245, 0.008964316167409484, 0.007188112100347606, 0.005206142818019628, 0.0061407751882045685, 0.007249664919150003, 0.005508345514912816, 0.0035193846635078224, 0.008282316565669374, 0.005346057207896533, 0.006132465997575086, 0.007638191245103371, 0.007174123074275043, 0.0062886495314787155, 0.00576344957464786, 0.005094923201466431, 0.005395910705843457, 0.005338931223403985, 0.005294221917008717, 0.0050479109808551316, 0.004778698487127255, 0.0055914660036837675, 0.005406032498195429, 0.005515316538835603, 0.005543418306773666, 0.005396176874272864, 0.005568703098730045, 0.005568703098730045, 0.005478262340703255, 0.0059975690278015175, 0.0059975690278015175, 0.005845598798747212, 0.005933164165554221, 0.006036759476046105, 0.005608369419788594, 0.006213557476503853, 0.006340108495566632, 0.0061065420908230405, 0.00639266259030749, 0.006527353160054285, 0.0064219853316937305, 0.006467323438964211, 0.0064029891918988245, 0.006233177631004839, 0.006601959270511136, 0.006815195460051508, 0.0067448658135133, 0.006792436702006304, 0.006637974342198911, 0.007231498063348254, 0.00728220201345105, 0.00782154449569454, 0.00782154449569454, 0.007687459815654728, 0.007782287253797473, 0.007828106452899277, 0.007978937048814142, 0.007656383040254915, 0.00831573354735843, 0.008209580783890714, 0.00801724586571961, 0.00801724586571961, 0.0077822444503661044, 0.0077822444503661044, 0.0077822444503661044, 0.007720461458449781, 0.0077822444503661044, 0.0077822444503661044, 0.0077822444503661044, 0.0077822444503661044, 0.0077822444503661044, 0.007689518058578535, 0.0076118804716795736, 0.00743215792705827, 0.00743215792705827, 0.00743215792705827, 0.007506249837203599, 0.007734494156892285, 0.00782287900521759, 0.007887115166777809, 0.007887115166777809, 0.007963940710130431, 0.008082547310708798, 0.008212149942733215, 0.008352236741779661, 0.008352236741779661, 0.008352236741779661, 0.008417744073184904, 0.008417744073184904, 0.008403570473467693, 0.008403570473467693, 0.008309308205466291, 0.008466920991190114, 0.008542020937476531, 0.008447050790063514, 0.008447050790063514, 0.008401305607182243, 0.007596684450318783, 0.0075014972156757145, 0.0075014972156757145, 0.0075014972156757145, 0.0075014972156757145, 0.007528600050924243, 0.007528600050924243, 0.007528600050924243, 0.007528600050924243, 0.007528600050924243, 0.007528600050924243, 0.00764210119920873, 0.00764210119920873, 0.007533653849315679, 0.007420502047134387, 0.007517813627791486, 0.007484485616789699, 0.007405983505821252, 0.007500396224669297, 0.007500396224669297, 0.007500396224669297, 0.007422062399872289, 0.007422062399872289, 0.007453670554799548, 0.007578133567283918, 0.007667618437762401, 0.0077799453656125115, 0.0077799453656125115, 0.0077799453656125115, 0.00782154449569454], "moving_avg_accuracy_train": [0.04024486520625692, 0.08815632642349575, 0.14263908499446287, 0.19615326429263563, 0.24952131286913987, 0.2999186208068014, 0.34984221343150146, 0.3962682290877053, 0.4405786473484161, 0.48205496842937373, 0.5203808578509712, 0.5558526133933934, 0.5882072377648792, 0.617914626299207, 0.6453511457717688, 0.6698742413851604, 0.6917380891931653, 0.7125685736881622, 0.7317461983122401, 0.7490785005751929, 0.7658841806487182, 0.7798257919708435, 0.7947749766857193, 0.8093174125719647, 0.8190578592185149, 0.8295495937147144, 0.8393777689754872, 0.850729276638662, 0.8601483958844027, 0.870480819613838, 0.8788731929346155, 0.8854525602067687, 0.8928687009480427, 0.900361643947323, 0.9065588466276184, 0.9125572530720456, 0.9185858260529548, 0.9240604780072292, 0.9289248496994004, 0.9332817857854311, 0.9375076227569064, 0.941943280458606, 0.9444428431473337, 0.9472317398957233, 0.9507647763966456, 0.9539260522522744, 0.9558410328520747, 0.9582109067609424, 0.961045952170581, 0.9635650130535598, 0.9651461768517937, 0.9666785423130706, 0.9684529465258388, 0.9702940148935115, 0.9715789165660744, 0.9733865139333227, 0.974094809637628, 0.9755367772595979, 0.9769322404181895, 0.976881387581151, 0.9777076229290251, 0.9789044945646941, 0.9801026228237101, 0.9790396924961656, 0.9801405956048916, 0.9809803818765822, 0.9816477257198857, 0.9821786167633918, 0.9834283681073092, 0.9844020817418533, 0.985257389527201, 0.9858341791828235, 0.9867369394264551, 0.987342485401676, 0.9882107085127174, 0.9892129984495595, 0.990210354445089, 0.9911195645362944, 0.9919448290648077, 0.9926875671404698, 0.9933583565573751, 0.9939643921813995, 0.9945121493918311, 0.9950051308812194, 0.995448814221669, 0.9958481292280735, 0.9962051875850281, 0.9965265401062872, 0.9968157573754203, 0.9970760529176401, 0.9973126440544475, 0.9975255760775742, 0.9977172148983883, 0.9978943401347399, 0.9980537528474563, 0.9981995494377107, 0.9983307663689397, 0.9984488616070457, 0.9985574724701507, 0.9986552222469451, 0.9987431970460602, 0.9988246995140732, 0.9988980517352849, 0.9989640687343754, 0.9990234840335569, 0.9990792829516297, 0.9991295019778954, 0.9991746991015344, 0.9992153765128096, 0.9992519861829572, 0.9992849348860899, 0.9993145887189094, 0.9993412771684471, 0.9993652967730309, 0.9993869144171563, 0.9994063702968692, 0.9994262057374204, 0.9994440576339164, 0.9994624494895724, 0.9994790021596628, 0.9994938995627441, 0.9995073072255173, 0.9995193741220132, 0.9995302343288595, 0.9995423336638306, 0.9995532230653046, 0.9995630235266312, 0.9995718439418252, 0.9995797823154997, 0.9995869268518068, 0.9995910317856738, 0.999594726226154, 0.9995980512225862, 0.9996010437193752, 0.9996037369664853, 0.9996038357400748, 0.9996039246363054, 0.999604004642913, 0.9996040766488598, 0.9996064666030213, 0.9996086175617668, 0.9996105534246377, 0.9996122957012215, 0.9996138637501469, 0.9996152749941798, 0.9996165451138094, 0.999617688221476, 0.999618717018376, 0.999619642935586, 0.999620476261075, 0.9996212262540151, 0.9996219012476611, 0.9996225087419426, 0.999623055486796, 0.999623547557164, 0.9996239904204952, 0.9996243889974933, 0.9996247477167916, 0.99962507056416, 0.9996253611267916, 0.99962562263316, 0.9996258579888916, 0.9996283949578595, 0.9996306782299307, 0.9996327331747947, 0.9996345826251724, 0.9996362471305122, 0.9996377451853181, 0.9996390934346434, 0.9996403068590362, 0.9996413989409896, 0.9996423818147477, 0.9996432664011301, 0.9996440625288742, 0.9996447790438439, 0.9996454239073166, 0.9996460042844421, 0.9996465266238549, 0.9996469967293264, 0.9996474198242509, 0.9996478006096828, 0.9996481433165716, 0.9996484517527715, 0.9996487293453514, 0.9996466540298639, 0.9996447862459251, 0.9996431052403802, 0.9996415923353899, 0.9996402307208985, 0.9996390052678562, 0.9996402275089277, 0.999641327525892, 0.9996423175411598], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 611606888, "moving_var_accuracy_train": [0.0145768425792281, 0.03377873136504411, 0.05711619706206034, 0.07717848382946714, 0.09509397292629745, 0.10844357345993902, 0.1200305020189582, 0.12742582618445314, 0.13235396206396005, 0.1346011327512602, 0.13436088367574286, 0.13224900427952085, 0.1284454993155482, 0.12354370978575901, 0.11796420221409745, 0.11158022195885962, 0.10472445033171802, 0.09815718705721298, 0.09165149992749, 0.08519002825035024, 0.0792129033699184, 0.07304092976924145, 0.0677481399050726, 0.06287666788811536, 0.05744288780717246, 0.052689287461103886, 0.04828969597560172, 0.04462043691408559, 0.040956871488966366, 0.03782201516119111, 0.03467370101466968, 0.03159592357651963, 0.028931323510317127, 0.02654348891239958, 0.024234787910705564, 0.022135137038487917, 0.020248716564314453, 0.01849359123406698, 0.016857191118296647, 0.0153423180349868, 0.013968805514473513, 0.01274900049624598, 0.011530330769335304, 0.010447299198060374, 0.009514910400505982, 0.008653362345773824, 0.007821030467474944, 0.007089474141822843, 0.0064528640699129695, 0.005864688672511059, 0.0053007205158715626, 0.004791781759446636, 0.004340940176294579, 0.003937351953275125, 0.0035584755087210056, 0.0032320346320276498, 0.00291334631406752, 0.0026407251182660554, 0.0023941784632823307, 0.0021547838910534116, 0.0019454494855987616, 0.0017637970524493046, 0.0016003369491298489, 0.0014504716421477888, 0.0013163323668262332, 0.00119104629898269, 0.0010759497993311753, 0.0009708914270987326, 0.0008878591901834688, 0.0008076063353439955, 0.0007334296644786836, 0.000663080874792313, 0.0006041075718304186, 0.0005469969880003324, 0.0004990815915352157, 0.00045821469843914606, 0.00042134569943159863, 0.00038665109639798623, 0.00035411554063639005, 0.00032366892521409505, 0.0002953516586691762, 0.0002691220054005383, 0.0002449101465147015, 0.00022260640860314712, 0.00020211746190216412, 0.00018334078798100636, 0.00016615412521534548, 0.00015046811968008714, 0.0001361741273709622, 0.00012316649855756187, 0.00011135362699594812, 0.0001006263247146087, 9.089422118193468e-05, 8.208715920791488e-05, 7.410715500390407e-05, 6.688774931508185e-05, 6.03539353309439e-05, 5.4444060165219394e-05, 4.910582102495707e-05, 4.4281234092231654e-05, 3.992276677052242e-05, 3.5990273964100123e-05, 3.243967150290036e-05, 2.9234928550130633e-05, 2.6343207295109025e-05, 2.373690823892106e-05, 2.1385914970420534e-05, 1.9265708493245655e-05, 1.7354029510013502e-05, 1.5630688970547007e-05, 1.407739062683554e-05, 1.267756571236001e-05, 1.1416219601172511e-05, 1.0279790113694546e-05, 9.256017005162917e-06, 8.333822085945267e-06, 7.503980879667473e-06, 6.756451003577279e-06, 6.083850246409782e-06, 5.477931139752891e-06, 4.932135419344712e-06, 4.440539766199601e-06, 3.997796279499023e-06, 3.5990781483838206e-06, 3.2404878787061455e-06, 2.917506302415705e-06, 2.6266201135540773e-06, 2.364658299716424e-06, 2.1287596297341635e-06, 1.916343066352148e-06, 1.7248604140554004e-06, 1.5524972126640188e-06, 1.3973469918090855e-06, 1.2576928879614664e-06, 1.131988881385284e-06, 1.0187900810527536e-06, 9.169111440703367e-07, 8.252200872728183e-07, 7.426981252092438e-07, 6.684797196163723e-07, 6.016733872664581e-07, 5.41539776625308e-07, 4.87413118712029e-07, 4.386939358377201e-07, 3.9484246674143235e-07, 3.553727389021515e-07, 3.19847225268175e-07, 2.8787202854891085e-07, 2.59092541598138e-07, 2.3318953732066002e-07, 2.098756459932861e-07, 1.8889218194175811e-07, 1.7000628519130085e-07, 1.530083470415828e-07, 1.3770969153664828e-07, 1.239404875343547e-07, 1.1154786855352995e-07, 1.0039423981399165e-07, 9.035575390640241e-08, 8.132093835554822e-08, 7.318945999022011e-08, 6.587101252208175e-08, 5.934183717377426e-08, 5.3454573438556554e-08, 4.8147121280250317e-08, 4.3363193352520436e-08, 3.905180921950755e-08, 3.516682581137059e-08, 3.1666503216422806e-08, 2.851310448359394e-08, 2.5672527822173575e-08, 2.311396940737694e-08, 2.080961490425005e-08, 1.873435778828985e-08, 1.6865542552777427e-08, 1.518273093758613e-08, 1.3667489382297557e-08, 1.230319599022859e-08, 1.107486538359606e-08, 9.968989929072689e-09, 8.973395914072825e-09, 8.077113354770601e-09, 7.270258215298688e-09, 6.543925912533023e-09, 5.928295730634531e-09, 5.36686370914846e-09, 4.855609355011382e-09, 4.3906483531002835e-09, 3.968269463998186e-09, 3.5849581340267377e-09, 3.2399071797563036e-09, 2.9268067976779278e-09, 2.6429472899870467e-09], "duration": 46842.553596, "accuracy_train": [0.40244865206256925, 0.5193594773786453, 0.6329839121331672, 0.6777808779761905, 0.729833750057678, 0.7534943922457549, 0.7991545470538022, 0.81410236999354, 0.8393724116948136, 0.8553418581579919, 0.8653138626453488, 0.8750984132751938, 0.8793988571082503, 0.885281123108158, 0.8922798210248246, 0.8905821019056847, 0.8885127194652085, 0.9000429341431341, 0.9043448199289406, 0.9050692209417681, 0.9171353013104466, 0.9053002938699704, 0.9293176391196014, 0.9401993355481728, 0.9067218790374677, 0.9239752041805095, 0.9278313463224437, 0.9528928456072352, 0.9449204690960686, 0.963472633178756, 0.9544045528216132, 0.9446668656561462, 0.9596139676195091, 0.9677981309408453, 0.9623336707502769, 0.96654291107189, 0.972842982881137, 0.9733323455956996, 0.9727041949289406, 0.9724942105597084, 0.9755401555001846, 0.9818641997739018, 0.9669389073458842, 0.9723318106312293, 0.9825621049049464, 0.9823775349529347, 0.9730758582502769, 0.979539771940753, 0.9865613608573275, 0.9862365610003692, 0.9793766510358989, 0.9804698314645626, 0.984422584440753, 0.9868636302025655, 0.98314303161914, 0.9896548902385567, 0.980469470976375, 0.9885144858573275, 0.989491408845515, 0.9764237120478036, 0.985143741059893, 0.9896763392857143, 0.9908857771548542, 0.9694733195482651, 0.9900487235834257, 0.9885384583217978, 0.9876538203096161, 0.9869566361549464, 0.9946761302025655, 0.9931655044527501, 0.9929551595953304, 0.9910252860834257, 0.99486178161914, 0.9927923991786637, 0.9960247165120893, 0.998233607881137, 0.9991865584048542, 0.9993024553571429, 0.9993722098214286, 0.9993722098214286, 0.9993954613095238, 0.9994187127976191, 0.9994419642857143, 0.9994419642857143, 0.9994419642857143, 0.9994419642857143, 0.9994187127976191, 0.9994187127976191, 0.9994187127976191, 0.9994187127976191, 0.9994419642857143, 0.9994419642857143, 0.9994419642857143, 0.9994884672619048, 0.9994884672619048, 0.99951171875, 0.99951171875, 0.99951171875, 0.9995349702380952, 0.9995349702380952, 0.9995349702380952, 0.9995582217261905, 0.9995582217261905, 0.9995582217261905, 0.9995582217261905, 0.9995814732142857, 0.9995814732142857, 0.9995814732142857, 0.9995814732142857, 0.9995814732142857, 0.9995814732142857, 0.9995814732142857, 0.9995814732142857, 0.9995814732142857, 0.9995814732142857, 0.9995814732142857, 0.9996047247023809, 0.9996047247023809, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996047247023809, 0.9996047247023809, 0.9996047247023809, 0.9996047247023809, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996279761904762, 0.9996512276785714, 0.9996512276785714, 0.9996512276785714], "end": "2016-01-29 23:47:46.509000", "learning_rate_per_epoch": [0.0020401598885655403, 0.0014426108682528138, 0.0011778868502005935, 0.0010200799442827702, 0.0009123872150667012, 0.0008328917319886386, 0.0007711079088039696, 0.0007213054341264069, 0.0006800532573834062, 0.0006451552035287023, 0.0006151313427835703, 0.0005889434251002967, 0.0005658385343849659, 0.0005452556652016938, 0.0005267669912427664, 0.0005100399721413851, 0.0004948114510625601, 0.0004808702797163278, 0.0004680447746068239, 0.0004561936075333506, 0.0004451993736438453, 0.0004349635273683816, 0.0004254027153365314, 0.0004164458659943193, 0.0004080319486092776, 0.0004001082561444491, 0.0003926289500668645, 0.0003855539544019848, 0.00037884816993027925, 0.00037248051376082003, 0.000366423511877656, 0.00036065271706320345, 0.000355146243236959, 0.00034988453262485564, 0.00034484994830563664, 0.0003400266286917031, 0.0003354001964908093, 0.00033095761318691075, 0.00032668703352101147, 0.00032257760176435113, 0.00031861942261457443, 0.00031480350298807025, 0.00031112146098166704, 0.00030756567139178514, 0.00030412906198762357, 0.00030080514261499047, 0.0002975878887809813, 0.00029447171255014837, 0.0002914514043368399, 0.0002885221620090306, 0.00028567950357683003, 0.00028291926719248295, 0.0002802374947350472, 0.0002776305773295462, 0.00027509508072398603, 0.0002726278326008469, 0.00027022577705793083, 0.000267886120127514, 0.0002656061842571944, 0.0002633834956213832, 0.0002612156968098134, 0.0002591005468275398, 0.0002570359793026, 0.00025501998607069254, 0.00025305067538283765, 0.00025112630100920796, 0.00024924520403146744, 0.00024740572553128004, 0.0002456063812132925, 0.00024384574498981237, 0.0002421224198769778, 0.0002404351398581639, 0.00023878263891674578, 0.00023716376745142043, 0.00023557736130896956, 0.00023402238730341196, 0.00023249778314493597, 0.00023100261751096696, 0.00022953591542318463, 0.0002280968037666753, 0.00022668442397844046, 0.00022529796115122736, 0.00022393662948161364, 0.00022259968682192266, 0.000221286405576393, 0.00021999608725309372, 0.00021872809156775475, 0.0002174817636841908, 0.00021625650697387755, 0.0002150517248082906, 0.0002138668642146513, 0.0002127013576682657, 0.0002115547249559313, 0.00021042641310486943, 0.0002093159855576232, 0.00020822293299715966, 0.0002071468479698524, 0.00020608726481441408, 0.00020504377607721835, 0.0002040159743046388, 0.00020300349569879472, 0.0002020059182541445, 0.00020102292182855308, 0.00020005412807222456, 0.0001990992168430239, 0.00019815783889498562, 0.00019722968863788992, 0.00019631447503343225, 0.00019541186338756233, 0.0001945216063177213, 0.00019364339823368937, 0.0001927769772009924, 0.00019192209583707154, 0.00019107847765553743, 0.00019024588982574642, 0.00018942408496513963, 0.00018861284479498863, 0.00018781193648464978, 0.00018702114175539464, 0.00018624025688041002, 0.00018546907813288271, 0.0001847073872340843, 0.00018395500956103206, 0.000183211755938828, 0.00018247743719257414, 0.00018175187869928777, 0.00018103490583598614, 0.00018032635853160173, 0.0001796260621631518, 0.00017893385665956885, 0.00017824959650170058, 0.0001775731216184795, 0.0001769042864907533, 0.00017624296015128493, 0.00017558899708092213, 0.00017494226631242782, 0.00017430262232664973, 0.0001736699341563508, 0.00017304409993812442, 0.00017242497415281832, 0.0001718124549370259, 0.0001712064113235101, 0.00017060674144886434, 0.00017001331434585154, 0.00016942605725489557, 0.00016884482465684414, 0.0001682695437921211, 0.00016770009824540466, 0.00016713640070520341, 0.00016657834930811077, 0.00016602585674263537, 0.00016547880659345537, 0.00016493714065290987, 0.00016440075705759227, 0.00016386958304792643, 0.00016334351676050574, 0.00016282248543575406, 0.00016230640176218003, 0.0001617951929802075, 0.00016128880088217556, 0.00016078712360467762, 0.00016029008838813752, 0.00015979765157680959, 0.00015930971130728722, 0.00015882622392382473, 0.00015834711666684598, 0.0001578723022248596, 0.00015740175149403512, 0.0001569353771628812, 0.0001564731210237369, 0.0001560149248689413, 0.00015556073049083352, 0.00015511047968175262, 0.0001546641142340377, 0.00015422159049194306, 0.00015378283569589257, 0.00015334780619014055, 0.00015291644376702607, 0.00015248870477080345, 0.00015206453099381179, 0.00015164387878030539, 0.00015122670447453856, 0.0001508129498688504, 0.00015040257130749524, 0.0001499955396866426, 0.00014959178224671632, 0.00014919125533197075, 0.00014879394439049065, 0.0001483997912146151, 0.00014800875214859843, 0.00014762078353669494, 0.00014723585627507418, 0.00014685391215607524], "accuracy_valid": [0.40862522355045183, 0.5125511812876506, 0.6253191476844879, 0.6524702324924698, 0.7002629659262049, 0.7229798098644578, 0.7612098785768072, 0.766845703125, 0.7797042662838856, 0.7832648955195783, 0.7883212537650602, 0.7902846738516567, 0.789318406438253, 0.7892875211784638, 0.7845061888177711, 0.7850562405873494, 0.7784335584525602, 0.7790542051016567, 0.7838355374623494, 0.7686252823795181, 0.7798675169427711, 0.7682090667356928, 0.785412156438253, 0.7850753600338856, 0.7626850174134037, 0.7799278167356928, 0.7687179381588856, 0.7898478680346386, 0.7832045957266567, 0.7955748776355422, 0.7947306805346386, 0.7790439100150602, 0.7886771696159638, 0.8003768001694277, 0.7925731245293675, 0.7933879070971386, 0.7976706631212349, 0.7959925640060241, 0.792003953313253, 0.7983927899096386, 0.8004370999623494, 0.8043536450489458, 0.789928758000753, 0.7938453030873494, 0.8010577466114458, 0.8017901684864458, 0.7931128812123494, 0.802269625376506, 0.8094408885542168, 0.8048728115587349, 0.8002341396837349, 0.799828219126506, 0.8023505153426205, 0.8038462443524097, 0.7989016613328314, 0.8030314617846386, 0.7968161709337349, 0.8026755459337349, 0.8012107021837349, 0.7937041133283133, 0.7981383541980422, 0.8043227597891567, 0.8049845867846386, 0.7926554852221386, 0.800182664250753, 0.7980368740587349, 0.7997958631400602, 0.7985148602221386, 0.8070494870105422, 0.8033770825489458, 0.8077216090926205, 0.8064597256212349, 0.8071818524096386, 0.8098879894578314, 0.8132044780685241, 0.8130824077560241, 0.8160326854292168, 0.8166636271649097, 0.8173960490399097, 0.8173960490399097, 0.8172739787274097, 0.8171416133283133, 0.8173857539533133, 0.8175078242658133, 0.8172636836408133, 0.8171416133283133, 0.8167651073042168, 0.8168974727033133, 0.8165312617658133, 0.8162871211408133, 0.8166533320783133, 0.8168974727033133, 0.8170195430158133, 0.8170195430158133, 0.8171416133283133, 0.8173960490399097, 0.8173960490399097, 0.8172739787274097, 0.8171519084149097, 0.8170298381024097, 0.8169077677899097, 0.817162203501506, 0.817284273814006, 0.8165415568524097, 0.8165415568524097, 0.8166636271649097, 0.8164194865399097, 0.8162974162274097, 0.8160532756024097, 0.8160532756024097, 0.8156870646649097, 0.8156870646649097, 0.8156870646649097, 0.8155649943524097, 0.8156870646649097, 0.816063570689006, 0.815941500376506, 0.8165621470256024, 0.8165621470256024, 0.8166842173381024, 0.8168062876506024, 0.8168062876506024, 0.8168062876506024, 0.8166842173381024, 0.8171827936746988, 0.8173048639871988, 0.8175490046121988, 0.8175490046121988, 0.8179152155496988, 0.8179152155496988, 0.8179152155496988, 0.8177931452371988, 0.8179152155496988, 0.8179152155496988, 0.8179152155496988, 0.8179152155496988, 0.8179152155496988, 0.8177931452371988, 0.8179152155496988, 0.8181593561746988, 0.8181593561746988, 0.8181593561746988, 0.8182814264871988, 0.8180372858621988, 0.8181593561746988, 0.8180372858621988, 0.8180372858621988, 0.8179152155496988, 0.8177931452371988, 0.8176710749246988, 0.8175490046121988, 0.8175490046121988, 0.8175490046121988, 0.8174269342996988, 0.8174269342996988, 0.8174269342996988, 0.8174269342996988, 0.8175490046121988, 0.8173048639871988, 0.8171827936746988, 0.8170607233621988, 0.8170607233621988, 0.8171827936746988, 0.8169283579631024, 0.8168062876506024, 0.8168062876506024, 0.8168062876506024, 0.8168062876506024, 0.8171724985881024, 0.8171724985881024, 0.8171724985881024, 0.8171724985881024, 0.8171724985881024, 0.8171724985881024, 0.8170504282756024, 0.8170504282756024, 0.8169283579631024, 0.8170504282756024, 0.8169283579631024, 0.8170504282756024, 0.8169283579631024, 0.8170504282756024, 0.8170504282756024, 0.8170504282756024, 0.8169283579631024, 0.8169283579631024, 0.8168062876506024, 0.8166842173381024, 0.8165621470256024, 0.8166842173381024, 0.8166842173381024, 0.8166842173381024, 0.8165621470256024], "accuracy_test": 0.5571508290816326, "start": "2016-01-29 10:47:03.955000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0], "accuracy_train_last": 0.9996512276785714, "batch_size_eval": 1024, "accuracy_train_std": [0.01593335851934494, 0.01656500028866798, 0.0189945714925347, 0.020736782007993722, 0.01872530855007274, 0.020552339945595646, 0.02226342613424335, 0.020415228357280983, 0.020067826179854812, 0.021045640178006055, 0.02105372299018361, 0.022980220707972888, 0.024743662888930634, 0.02338758699321988, 0.022118206778642437, 0.023183491362909217, 0.02366170343702455, 0.024106417513423017, 0.02361944651319641, 0.020800881641073302, 0.02042197718966822, 0.020517148748953745, 0.01914325062159198, 0.017213155298120765, 0.017509820799784845, 0.016633396893409768, 0.01662572058227586, 0.014893666728769604, 0.012690711146375459, 0.011521576835999038, 0.013551453851182282, 0.014371284675823054, 0.01156516565636415, 0.010106223023339697, 0.011694813070089191, 0.010957625627934281, 0.009407922597768913, 0.008970192660776742, 0.009306525257591732, 0.008860250542283385, 0.008780288407289309, 0.007598563230555658, 0.009397672373576705, 0.009175101562419992, 0.006947960653215858, 0.005443610396070978, 0.009667821337527303, 0.007478833367667753, 0.005454417801983716, 0.005714944734340754, 0.00745171664515677, 0.006563627249864333, 0.005409706051837083, 0.004852472458299462, 0.006369247918239749, 0.004357475419721038, 0.006887219269632766, 0.004887695996902457, 0.0046004286018645766, 0.006293577165497294, 0.005487092022785903, 0.003970493713939092, 0.0043972713797273575, 0.007677458539362077, 0.004205028666367378, 0.004056210639129609, 0.004424072702500757, 0.004722594831391648, 0.002663774579493997, 0.0030507288940521235, 0.003193827024518604, 0.004384701373845722, 0.002584709913770095, 0.0031539010990037407, 0.0018256824249742792, 0.0013337386762289486, 0.0007944698602390575, 0.000776752840796599, 0.0007630598531167197, 0.0007630598531167197, 0.000766946730955666, 0.0007701123122060637, 0.0007725654634410412, 0.0008014177799299707, 0.0008292668573347753, 0.0008292668573347753, 0.0008269819216786988, 0.0008269819216786988, 0.0008269819216786988, 0.0008269819216786988, 0.0007725654634410413, 0.0007725654634410413, 0.0007725654634410413, 0.000775359561036694, 0.000775359561036694, 0.0007147705612416015, 0.0007147705612416015, 0.0007147705612416015, 0.0006818674804043518, 0.0006818674804043518, 0.0006818674804043518, 0.0006806771376629673, 0.0006806771376629673, 0.0006806771376629673, 0.0006806771376629673, 0.0006786885937186768, 0.0006786885937186768, 0.0006786885937186768, 0.0006786885937186768, 0.0006786885937186768, 0.0006786885937186768, 0.0006786885937186768, 0.0006786885937186768, 0.0006786885937186768, 0.0006786885937186768, 0.0006786885937186768, 0.0006758948034667333, 0.0006758948034667333, 0.0006722857279948363, 0.0006722857279948363, 0.0006722857279948363, 0.0006722857279948363, 0.0006722857279948363, 0.0006722857279948363, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006722857279948363, 0.0006722857279948363, 0.0006722857279948363, 0.0006722857279948363, 0.0006722857279948363, 0.0007400404791127022, 0.0007400404791127022, 0.0007400404791127022, 0.0007400404791127022, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0006678481499416422, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007052525524601516, 0.0007010236900893479, 0.0007010236900893479, 0.0007010236900893479], "accuracy_test_std": 0.01083614644247387, "error_valid": [0.5913747764495482, 0.48744881871234935, 0.37468085231551207, 0.3475297675075302, 0.29973703407379515, 0.27702019013554224, 0.23879012142319278, 0.233154296875, 0.22029573371611444, 0.21673510448042166, 0.21167874623493976, 0.20971532614834332, 0.21068159356174698, 0.2107124788215362, 0.21549381118222888, 0.21494375941265065, 0.22156644154743976, 0.22094579489834332, 0.21616446253765065, 0.2313747176204819, 0.22013248305722888, 0.23179093326430722, 0.21458784356174698, 0.21492463996611444, 0.23731498258659633, 0.22007218326430722, 0.23128206184111444, 0.21015213196536142, 0.21679540427334332, 0.20442512236445776, 0.20526931946536142, 0.22095608998493976, 0.2113228303840362, 0.1996231998305723, 0.20742687547063254, 0.20661209290286142, 0.2023293368787651, 0.20400743599397586, 0.20799604668674698, 0.20160721009036142, 0.19956290003765065, 0.1956463549510542, 0.21007124199924698, 0.20615469691265065, 0.1989422533885542, 0.1982098315135542, 0.20688711878765065, 0.19773037462349397, 0.1905591114457832, 0.1951271884412651, 0.1997658603162651, 0.20017178087349397, 0.19764948465737953, 0.1961537556475903, 0.20109833866716864, 0.19696853821536142, 0.2031838290662651, 0.1973244540662651, 0.1987892978162651, 0.20629588667168675, 0.20186164580195776, 0.19567724021084332, 0.19501541321536142, 0.20734451477786142, 0.19981733574924698, 0.2019631259412651, 0.20020413685993976, 0.20148513977786142, 0.19295051298945776, 0.1966229174510542, 0.19227839090737953, 0.1935402743787651, 0.19281814759036142, 0.19011201054216864, 0.18679552193147586, 0.18691759224397586, 0.1839673145707832, 0.1833363728350903, 0.1826039509600903, 0.1826039509600903, 0.1827260212725903, 0.18285838667168675, 0.18261424604668675, 0.18249217573418675, 0.18273631635918675, 0.18285838667168675, 0.1832348926957832, 0.18310252729668675, 0.18346873823418675, 0.18371287885918675, 0.18334666792168675, 0.18310252729668675, 0.18298045698418675, 0.18298045698418675, 0.18285838667168675, 0.1826039509600903, 0.1826039509600903, 0.1827260212725903, 0.1828480915850903, 0.1829701618975903, 0.1830922322100903, 0.18283779649849397, 0.18271572618599397, 0.1834584431475903, 0.1834584431475903, 0.1833363728350903, 0.1835805134600903, 0.1837025837725903, 0.1839467243975903, 0.1839467243975903, 0.1843129353350903, 0.1843129353350903, 0.1843129353350903, 0.1844350056475903, 0.1843129353350903, 0.18393642931099397, 0.18405849962349397, 0.18343785297439763, 0.18343785297439763, 0.18331578266189763, 0.18319371234939763, 0.18319371234939763, 0.18319371234939763, 0.18331578266189763, 0.18281720632530118, 0.18269513601280118, 0.18245099538780118, 0.18245099538780118, 0.18208478445030118, 0.18208478445030118, 0.18208478445030118, 0.18220685476280118, 0.18208478445030118, 0.18208478445030118, 0.18208478445030118, 0.18208478445030118, 0.18208478445030118, 0.18220685476280118, 0.18208478445030118, 0.18184064382530118, 0.18184064382530118, 0.18184064382530118, 0.18171857351280118, 0.18196271413780118, 0.18184064382530118, 0.18196271413780118, 0.18196271413780118, 0.18208478445030118, 0.18220685476280118, 0.18232892507530118, 0.18245099538780118, 0.18245099538780118, 0.18245099538780118, 0.18257306570030118, 0.18257306570030118, 0.18257306570030118, 0.18257306570030118, 0.18245099538780118, 0.18269513601280118, 0.18281720632530118, 0.18293927663780118, 0.18293927663780118, 0.18281720632530118, 0.18307164203689763, 0.18319371234939763, 0.18319371234939763, 0.18319371234939763, 0.18319371234939763, 0.18282750141189763, 0.18282750141189763, 0.18282750141189763, 0.18282750141189763, 0.18282750141189763, 0.18282750141189763, 0.18294957172439763, 0.18294957172439763, 0.18307164203689763, 0.18294957172439763, 0.18307164203689763, 0.18294957172439763, 0.18307164203689763, 0.18294957172439763, 0.18294957172439763, 0.18294957172439763, 0.18307164203689763, 0.18307164203689763, 0.18319371234939763, 0.18331578266189763, 0.18343785297439763, 0.18331578266189763, 0.18331578266189763, 0.18331578266189763, 0.18343785297439763], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "momentum": 0.92105654334098, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0020401598150111212, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "l2_decay": 4.647974704242856e-06, "optimization": "rmsprop", "nb_data_augmentation": 0, "learning_rate_decay_method": "sqrt", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.09114379880418166}, "accuracy_valid_max": 0.8182814264871988, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop', 'santa_sss'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8165621470256024, "loss_train": [1.5221168994903564, 1.1142133474349976, 0.9061314463615417, 0.787390947341919, 0.7038625478744507, 0.6397489905357361, 0.5859439969062805, 0.5383848547935486, 0.4954894483089447, 0.4542979896068573, 0.41503721475601196, 0.3759377896785736, 0.3385089039802551, 0.3017462491989136, 0.2674946188926697, 0.23745191097259521, 0.2104317992925644, 0.18796083331108093, 0.16767355799674988, 0.14990101754665375, 0.14003236591815948, 0.12759476900100708, 0.1171119436621666, 0.10756324231624603, 0.09811536967754364, 0.09489471465349197, 0.09024970978498459, 0.0859234556555748, 0.07926807552576065, 0.07530245929956436, 0.07436510920524597, 0.06829459965229034, 0.06711328029632568, 0.06300947070121765, 0.0616052970290184, 0.059832844883203506, 0.05949556827545166, 0.05685747042298317, 0.05495467782020569, 0.05309666320681572, 0.05345901846885681, 0.05097304657101631, 0.05022265389561653, 0.049946606159210205, 0.049562692642211914, 0.047474510967731476, 0.04555831849575043, 0.045696575194597244, 0.04505189508199692, 0.04445374384522438, 0.04298222064971924, 0.0447884202003479, 0.04397075995802879, 0.04133317247033119, 0.04158686101436615, 0.04177826642990112, 0.03959493339061737, 0.04074343293905258, 0.03886941820383072, 0.038697466254234314, 0.038855601102113724, 0.037627704441547394, 0.036832645535469055, 0.03836525231599808, 0.03829919919371605, 0.0370839461684227, 0.03734351322054863, 0.036509182304143906, 0.03439163416624069, 0.034228213131427765, 0.03425757586956024, 0.03430836647748947, 0.03391817584633827, 0.034279100596904755, 0.03316567838191986, 0.03125281259417534, 0.030767085030674934, 0.030630361288785934, 0.030533622950315475, 0.03044292703270912, 0.03035464696586132, 0.030268006026744843, 0.030182648450136185, 0.030098391696810722, 0.030015122145414352, 0.02993275411427021, 0.029851244762539864, 0.02977052889764309, 0.029690586030483246, 0.02961137890815735, 0.029532892629504204, 0.029455095529556274, 0.029377972707152367, 0.029301514849066734, 0.02922569215297699, 0.029150499030947685, 0.02907591499388218, 0.029001932591199875, 0.028928542509675026, 0.02885572612285614, 0.02878347970545292, 0.028711792081594467, 0.028640644624829292, 0.028570041060447693, 0.028499960899353027, 0.028430407866835594, 0.0283613670617342, 0.028292827308177948, 0.028224781155586243, 0.028157221153378487, 0.02809014357626438, 0.02802353724837303, 0.02795739471912384, 0.027891721576452255, 0.027826489880681038, 0.027761703357100487, 0.02769736386835575, 0.02763344906270504, 0.0275699645280838, 0.02750689908862114, 0.027444249019026756, 0.027382006868720055, 0.027320170775055885, 0.02725873328745365, 0.027197690680623055, 0.02713703364133835, 0.027076762169599533, 0.027016865089535713, 0.02695734053850174, 0.02689819037914276, 0.026839403435587883, 0.026780972257256508, 0.026722894981503487, 0.02666517347097397, 0.02660779096186161, 0.02655075117945671, 0.02649405412375927, 0.02643768861889839, 0.026381654664874077, 0.02632594294846058, 0.026270555332303047, 0.026215488091111183, 0.02616073191165924, 0.02610629051923752, 0.02605215646326542, 0.025998326018452644, 0.025944797322154045, 0.025891566649079323, 0.02583862468600273, 0.025785978883504868, 0.025733619928359985, 0.025681545957922935, 0.025629756972193718, 0.025578239932656288, 0.025527002289891243, 0.025476036593317986, 0.025425340980291367, 0.02537490800023079, 0.0253247432410717, 0.025274841114878654, 0.025225194171071053, 0.025175802409648895, 0.025126667693257332, 0.025077786296606064, 0.025029147043824196, 0.024980757385492325, 0.024932608008384705, 0.024884704500436783, 0.024837035685777664, 0.024789607152342796, 0.024742409586906433, 0.024695442989468575, 0.02464870922267437, 0.02460220456123352, 0.02455591782927513, 0.024509860202670097, 0.024464020505547523, 0.024418402463197708, 0.024373002350330353, 0.02432781271636486, 0.02428283728659153, 0.02423807606101036, 0.024193517863750458, 0.024149173870682716, 0.024105031043291092, 0.02406109683215618, 0.02401736006140709, 0.023973822593688965, 0.023930484429001808, 0.02388734370470047, 0.0238443985581398, 0.023801645264029503, 0.023759083822369576], "accuracy_train_first": 0.40244865206256925, "model": "residualv3", "loss_std": [0.290724515914917, 0.14695802330970764, 0.13903145492076874, 0.13257770240306854, 0.12894953787326813, 0.1262781322002411, 0.1227140724658966, 0.11829634755849838, 0.11462914943695068, 0.11047028750181198, 0.10592518746852875, 0.1011158674955368, 0.09644746035337448, 0.08993852138519287, 0.08352631330490112, 0.07787885516881943, 0.0708322525024414, 0.06497333943843842, 0.06003430113196373, 0.054606106132268906, 0.05437520146369934, 0.05027156323194504, 0.045067667961120605, 0.04343423992395401, 0.03775506466627121, 0.039664704352617264, 0.04223429039120674, 0.037068288773298264, 0.031207935884594917, 0.03183968365192413, 0.033232055604457855, 0.0280563123524189, 0.028668412938714027, 0.026061508804559708, 0.026873372495174408, 0.025971757248044014, 0.02525774948298931, 0.022223850712180138, 0.023417500779032707, 0.024188857525587082, 0.023487679660320282, 0.022125007584691048, 0.020751390606164932, 0.020395154133439064, 0.02072995714843273, 0.019470851868391037, 0.017263615503907204, 0.01694488152861595, 0.017040085047483444, 0.01651090383529663, 0.016142327338457108, 0.019075898453593254, 0.018622325733304024, 0.015349160879850388, 0.015540037304162979, 0.015541181899607182, 0.013023539446294308, 0.014753683470189571, 0.01473990362137556, 0.011928785592317581, 0.012400006875395775, 0.011070413514971733, 0.009790904819965363, 0.012451516464352608, 0.013232996687293053, 0.010907002724707127, 0.013074884191155434, 0.00993973109871149, 0.007946654222905636, 0.006606091279536486, 0.007478698622435331, 0.006699456367641687, 0.007691151928156614, 0.007217646110802889, 0.006535222288221121, 0.0010959438513964415, 0.00012367132876534015, 4.807717050425708e-05, 3.817131437244825e-05, 3.4954631701111794e-05, 3.2967287552310154e-05, 3.156230377499014e-05, 3.04919794871239e-05, 2.962382677651476e-05, 2.8913214919157326e-05, 2.8287098757573403e-05, 2.775222310447134e-05, 2.7272819352219813e-05, 2.6838924895855598e-05, 2.6444704417372122e-05, 2.6090005121659487e-05, 2.575960934336763e-05, 2.544474773458205e-05, 2.5155226467177272e-05, 2.48788928729482e-05, 2.4615817892481573e-05, 2.437112016195897e-05, 2.4130673409672454e-05, 2.390225199633278e-05, 2.3684608095209114e-05, 2.3478602088289335e-05, 2.327869697182905e-05, 2.3082269763108343e-05, 2.2896600057720207e-05, 2.2715590603183955e-05, 2.254085848107934e-05, 2.2375703338184394e-05, 2.2210548195289448e-05, 2.205389318987727e-05, 2.1899653802393004e-05, 2.175183908548206e-05, 2.1605146685033105e-05, 2.1460949938045815e-05, 2.13244366022991e-05, 2.118969860021025e-05, 2.105837847921066e-05, 2.0927775040036067e-05, 2.0798714103875682e-05, 2.0676938220276497e-05, 2.0557861716952175e-05, 2.0439647414605133e-05, 2.032483826042153e-05, 2.021178079303354e-05, 2.0101673726458102e-05, 1.9994187823613174e-05, 1.9890785551979207e-05, 1.9786730263149366e-05, 1.9685954612214118e-05, 1.9587103452067822e-05, 1.9490456907078624e-05, 1.939597677846905e-05, 1.930172038555611e-05, 1.920865361171309e-05, 1.9118277123197913e-05, 1.9031485862797126e-05, 1.894470005936455e-05, 1.8859334886656143e-05, 1.877617796708364e-05, 1.86943871085532e-05, 1.861508280853741e-05, 1.8537315554567613e-05, 1.8460137653164566e-05, 1.8385868315817788e-05, 1.8313843611394987e-05, 1.8241526049678214e-05, 1.8169339455198497e-05, 1.80987026396906e-05, 1.8031005311058834e-05, 1.7962807760341093e-05, 1.7897093130159192e-05, 1.783255356713198e-05, 1.7768543330021203e-05, 1.7707072402117774e-05, 1.7645652405917645e-05, 1.7586817193659954e-05, 1.752880052663386e-05, 1.747045826050453e-05, 1.741326013871003e-05, 1.7357424439978786e-05, 1.730196709104348e-05, 1.724538014968857e-05, 1.7189564459840767e-05, 1.7136546375695616e-05, 1.7085876606870443e-05, 1.703576708678156e-05, 1.6985823094728403e-05, 1.693798549240455e-05, 1.6890740880626254e-05, 1.6841862816363573e-05, 1.679368142504245e-05, 1.6748073903727345e-05, 1.6702557331882417e-05, 1.6658079402986914e-05, 1.6613112165941857e-05, 1.6569618310313672e-05, 1.6526164472452365e-05, 1.648212673899252e-05, 1.6440695617347956e-05, 1.6400177628383972e-05, 1.636076376598794e-05, 1.6321495422744192e-05, 1.628173777135089e-05, 1.6243562640738674e-05, 1.6206295185838826e-05, 1.616918780200649e-05, 1.6132715245475993e-05, 1.6097719708341174e-05, 1.606270598131232e-05, 1.6028647223720327e-05, 1.5994010027498007e-05, 1.596135552972555e-05, 1.5928177163004875e-05, 1.5894442185526714e-05]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:22 2016", "state": "available"}], "summary": "0e50991d7fd2f1fb4607845ec188158d"}