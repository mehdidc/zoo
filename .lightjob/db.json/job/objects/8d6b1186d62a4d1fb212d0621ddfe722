{"content": {"hp_model": {"f0": 16, "f1": 64, "f2": 32, "f3": 16, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.01347014353630469, 0.013503586423092092, 0.01128925250261832, 0.012366800180405434, 0.006787260429707346, 0.008611697240668001, 0.008328126018328295, 0.009684138907802061, 0.008184125391726851, 0.011268935678257583, 0.009139268100370043, 0.011348853835848997, 0.011304452357818004, 0.013254101074318635, 0.010996521615524814, 0.014237802061219353, 0.013611697727353734, 0.011673634333634953, 0.011527716904384902, 0.009268180523963125, 0.011530456092673787, 0.009020764382449498, 0.010340988596148506, 0.014219298610450046, 0.013950285719867431, 0.01283961782296723, 0.011784660135671785, 0.008664035629953118, 0.008957667496207581, 0.010085875830009479, 0.00877005428833149, 0.012632799147453765, 0.009648781001390303, 0.011334174612183084, 0.008171525525449724, 0.00935180485075111, 0.010706324280182162, 0.007003690521429722, 0.009122682008459422, 0.00914366600336375, 0.009008441247443353, 0.010458907970989804, 0.008705275557578369, 0.010142054139095032, 0.008477077461407388, 0.008799238364256301, 0.008067428798864103, 0.010544106622131967, 0.009305616587102916, 0.00710255854568931, 0.00642702635286454, 0.007294922822891697, 0.009160012439785198, 0.007211022891361546, 0.008320951743435598, 0.008210789528042241, 0.00732302317018874, 0.00758001489721921, 0.008399665914030872, 0.00868491524773945, 0.008291684548122501, 0.009146064774452588, 0.008242073956063176, 0.00911010165177317, 0.008439891109453554, 0.007778362673459166, 0.008084716868028969, 0.008550209159589697, 0.00891246520240741, 0.008869910278033431, 0.008947005541025206, 0.009399617260372126, 0.007745518370138026, 0.008588556986378485, 0.008708605593869984, 0.007443786692852858, 0.008702262161389168, 0.00843205943654199, 0.009629370147073378, 0.008505156050590972, 0.008466871940975994, 0.00860995843672348, 0.008169005815012818, 0.008885673796956527, 0.008284926350820853, 0.009561179855291292, 0.008210579828432691, 0.008256098805145357, 0.00814148793828696, 0.008621354876874697, 0.00909586212556456, 0.008714394755988404, 0.008910490878725929, 0.008895780484058658, 0.008564022883761544, 0.008399247184798064, 0.008489350212692162, 0.008895528209105656, 0.008406180439411848, 0.008943924854778509, 0.007929865727477562, 0.007681989120467905, 0.008169005815012818, 0.008259762090121657, 0.009657137959665564, 0.008362015296674744, 0.008736698545495547, 0.00884809447336747, 0.00885727115573796, 0.008643639113423958, 0.008779285688190655, 0.008049286722992828, 0.008928817143710008, 0.008968780927367689], "moving_avg_accuracy_train": [0.04162840084556109, 0.09186802275113048, 0.14566411242761396, 0.19981787078733504, 0.2522617474394524, 0.30081643769412286, 0.34701959184945214, 0.38946684521411007, 0.42996633187556177, 0.4666136156661341, 0.5010257771073188, 0.5331034211400808, 0.5628425098873222, 0.5903354252884017, 0.615618447624364, 0.6389310231969221, 0.6604797856682044, 0.6805363032542541, 0.6991195560614422, 0.7162582879783692, 0.7317039648964331, 0.7461143538096137, 0.7594300428576389, 0.771656158721146, 0.7831758460340167, 0.7935643828084297, 0.8031256183982494, 0.8120212658838212, 0.8200670203458728, 0.8276638029343013, 0.8345823956186766, 0.8410369936179478, 0.8469460411184638, 0.8523432749772708, 0.8572564448263507, 0.8619643270429127, 0.8661130653830567, 0.8700354111380326, 0.8735748950103865, 0.8768114395740396, 0.8798383340706316, 0.882676471409231, 0.8852655280508384, 0.8876493376949978, 0.8898481006020853, 0.8919245713708266, 0.8937283990424832, 0.8954587647433937, 0.8969905172373083, 0.8984318734996886, 0.8997964513536695, 0.9011152522258238, 0.9023067872595629, 0.9033002218768607, 0.9041525685003133, 0.9050289624554685, 0.9058873993817562, 0.906625007236816, 0.9073006242456926, 0.9079876985643864, 0.908559490377383, 0.9090392618257558, 0.9095129448566814, 0.9099158999499631, 0.9102321286553636, 0.9105028196461856, 0.9107859330188687, 0.9110267841614262, 0.9112482004873471, 0.9114637872711613, 0.9116647187253851, 0.9118317142877858, 0.9119656621546421, 0.9121442718574134, 0.9122981172411165, 0.9124738165162205, 0.9126319098149952, 0.9127788440815116, 0.9128344271082995, 0.9129146427181137, 0.9129286719978896, 0.912987873423516, 0.9130551055994368, 0.9131178676089377, 0.9132162421448784, 0.9132792386391391, 0.9133336463839831, 0.9133941670007527, 0.913411433174893, 0.9134502242197144, 0.9134874613088634, 0.9135000483498117, 0.9135694333092658, 0.9135993997870785, 0.913651910205196, 0.9136457272077015, 0.9136657391468612, 0.9136814607921142, 0.9137211869097467, 0.9137080401929784, 0.9137078699407531, 0.9136821761256645, 0.913703193470647, 0.9136756421537595, 0.9136833620030753, 0.9137158144067268, 0.9137381542700408, 0.9137000593291478, 0.9136704602287818, 0.9136950464098996, 0.913672960096706, 0.91371582538387, 0.9137404532494605, 0.9137230907987299], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 990832632, "moving_var_accuracy_train": [0.015596313812628404, 0.03675285891429668, 0.05912374640318928, 0.07960503766321789, 0.09639777568161859, 0.10797601962499967, 0.11639100074760983, 0.12096782453668006, 0.12363291786158197, 0.12335683675846446, 0.12167892477810542, 0.11877180952052822, 0.11485434916412213, 0.11017165782296814, 0.10490757300663828, 0.09930810132441052, 0.09355643366836318, 0.08782116538064251, 0.08214708440664104, 0.07657600115145957, 0.0710655214554285, 0.06582790308754771, 0.06084088095220626, 0.056102094038956725, 0.051686213397137866, 0.04748888732424407, 0.04356275362585597, 0.03991867116095842, 0.03650941152863519, 0.03337787032703434, 0.030470885616921538, 0.027798753573219138, 0.025333129797167418, 0.02306198801739055, 0.020973042357344658, 0.019075215516295384, 0.017322602233000667, 0.015728805175694804, 0.01426867617286921, 0.0129360855419949, 0.0117249358004369, 0.010624937432367981, 0.009622772617772243, 0.008711638291771306, 0.00788398548748843, 0.007134392516420519, 0.006450237413199778, 0.005832161161009785, 0.005270061436232328, 0.004761752863485021, 0.0043023362316126955, 0.00388775573011498, 0.003511757958733132, 0.003169464373909427, 0.002859056389417086, 0.0025800633477570684, 0.0023286892385890917, 0.002100716902860797, 0.0018947533376588667, 0.0017095266439676588, 0.0015415164924675818, 0.0013894364690048874, 0.0012525122026284814, 0.0011287223376304477, 0.0010167501092144765, 0.000915734560805639, 0.0008248824833612027, 0.0007429163184809241, 0.0006690659133372903, 0.0006025776209557594, 0.000542683219903852, 0.0004886658855742202, 0.00043996077529611646, 0.0003962518105998213, 0.00035683964515861996, 0.00032143351276020635, 0.00028951510290424313, 0.0002607578997219091, 0.00023470991500552035, 0.00021129683440148907, 0.00019016892234755944, 0.00017118357339196918, 0.0001541058975420837, 0.00013873075941640448, 0.00012494478141865826, 0.00011248602030139475, 0.00010126406009554631, 9.117061879147928e-05, 8.205623999925634e-05, 7.386415870575581e-05, 6.649022224245477e-05, 5.984262592060779e-05, 5.3901691781932964e-05, 4.851960451187222e-05, 4.369246015678292e-05, 3.9323558206226775e-05, 3.5394806684984484e-05, 3.185755054765118e-05, 2.8685998972685373e-05, 2.5818954600872913e-05, 2.3237059401658005e-05, 2.0919295010696475e-05, 1.883134106873783e-05, 1.695503863742418e-05, 1.5260071138342893e-05, 1.3743542451033435e-05, 1.2373679831366096e-05, 1.1149372868924238e-05, 1.0042320542714035e-05, 9.043528811160222e-06, 8.143566177118628e-06, 7.345746454999658e-06, 6.616630595371574e-06, 5.957680628092727e-06], "duration": 125599.302752, "accuracy_train": [0.416284008455611, 0.5440246199012551, 0.6298289195159653, 0.6872016960248247, 0.7242566373085086, 0.7378086499861573, 0.7628479792474161, 0.7714921254960319, 0.7944617118286268, 0.7964391697812846, 0.8107352300779809, 0.8218022174349391, 0.8304943086124953, 0.8377716638981173, 0.8431656486480252, 0.8487442033499446, 0.8544186479097453, 0.8610449615287007, 0.8663688313261352, 0.8705068752307125, 0.870715057159007, 0.8758078540282392, 0.879271244289867, 0.8816912014927095, 0.8868530318498523, 0.887061213778147, 0.8891767387066261, 0.8920820932539681, 0.8924788105043374, 0.8960348462301587, 0.8968497297780547, 0.8991283756113879, 0.9001274686231081, 0.9009183797065338, 0.9014749734680694, 0.9043352669919711, 0.9034517104443521, 0.9053365229328165, 0.9054302498615725, 0.9059403406469176, 0.9070803845399593, 0.9082197074566261, 0.9085670378253045, 0.9091036244924326, 0.9096369667658729, 0.9106128082894979, 0.9099628480873938, 0.9110320560515872, 0.9107762896825397, 0.911404079861111, 0.9120776520394979, 0.9129844600752122, 0.9130306025632153, 0.9122411334325397, 0.9118236881113879, 0.9129165080518641, 0.9136133317183462, 0.9132634779323551, 0.9133811773255813, 0.9141713674326319, 0.9137056166943521, 0.913357204861111, 0.9137760921350129, 0.9135424957894979, 0.9130781870039681, 0.9129390385635843, 0.9133339533730158, 0.9131944444444444, 0.9132409474206349, 0.913404068325489, 0.9134731018133997, 0.9133346743493909, 0.9131711929563492, 0.9137517591823551, 0.9136827256944444, 0.9140551099921558, 0.9140547495039681, 0.9141012524801587, 0.9133346743493909, 0.9136365832064415, 0.9130549355158729, 0.9135206862541528, 0.9136601951827242, 0.9136827256944444, 0.9141016129683462, 0.9138462070874861, 0.9138233160875784, 0.9139388525516795, 0.9135668287421558, 0.9137993436231081, 0.9138225951112033, 0.9136133317183462, 0.9141938979443521, 0.9138690980873938, 0.914124503968254, 0.913590080230251, 0.9138458465992986, 0.9138229555993909, 0.9140787219684385, 0.9135897197420635, 0.9137063376707272, 0.913450931789867, 0.913892349575489, 0.9134276803017718, 0.9137528406469176, 0.9140078860395902, 0.913939213039867, 0.913357204861111, 0.913404068325489, 0.9139163220399593, 0.9134741832779623, 0.9141016129683462, 0.9139621040397747, 0.9135668287421558], "end": "2016-01-24 21:35:25.255000", "learning_rate_per_epoch": [0.004419987089931965, 0.0040149204432964325, 0.0036469758488237858, 0.0033127511851489544, 0.003009156323969364, 0.002733384259045124, 0.002482885029166937, 0.0022553426679223776, 0.00204865331761539, 0.0018609059043228626, 0.0016903644427657127, 0.0015354520874097943, 0.0013947365805506706, 0.0012669168645516038, 0.0011508110910654068, 0.0010453457944095135, 0.0009495457634329796, 0.0008625253103673458, 0.0007834797725081444, 0.0007116782944649458, 0.000646457017865032, 0.0005872129113413393, 0.0005333981825970113, 0.00048451527254655957, 0.000440112198702991, 0.00039977842243388295, 0.0003631410072557628, 0.0003298611845821142, 0.0002996312687173486, 0.00027217177557758987, 0.0002472287742421031, 0.00022457166051026434, 0.000203990945010446, 0.00018529633234720677, 0.00016831497487146407, 0.00015288985741790384, 0.00013887837121728808, 0.00012615096056833863, 0.0001145899441326037, 0.00010408842354081571, 9.454930841457099e-05, 8.58843995956704e-05, 7.801358151482418e-05, 7.086408004397526e-05, 6.436979310819879e-05, 5.84706685913261e-05, 5.311216227710247e-05, 4.824473580811173e-05, 4.3823380110552534e-05, 3.98072152165696e-05, 3.6159108276478946e-05, 3.284533158876002e-05, 2.983524427691009e-05, 2.7101013984065503e-05, 2.461736039549578e-05, 2.2361318769981153e-05, 2.0312030756031163e-05, 1.8450547941029072e-05, 1.6759660866227932e-05, 1.5223733498714864e-05, 1.3828564988216385e-05, 1.256125597137725e-05, 1.1410088518459816e-05, 1.0364418812969234e-05, 9.414578926225659e-06, 8.551785867894068e-06, 7.768063369439915e-06, 7.056164577079471e-06, 6.409507022908656e-06, 5.822112143505365e-06, 5.2885484365106095e-06, 4.803882802661974e-06, 4.363634161563823e-06, 3.963732069678372e-06, 3.6004785215482116e-06, 3.270515207987046e-06, 2.970791001644102e-06, 2.698534899536753e-06, 2.451229420330492e-06, 2.226588094345061e-06, 2.022533863055287e-06, 1.837180093389179e-06, 1.6688129562680842e-06, 1.5158757378230803e-06, 1.376954287479748e-06, 1.2507642850323464e-06, 1.1361388487785007e-06, 1.03201819001697e-06, 9.374396086059278e-07, 8.515285685462004e-07, 7.734907967460458e-07, 7.026047796898638e-07, 6.382150559147703e-07, 5.797262474516174e-07, 5.26597602856782e-07, 4.783379381478881e-07, 4.3450097564345924e-07, 3.9468142176701804e-07, 3.58511101694603e-07, 3.2565560559305595e-07, 2.958111053885659e-07, 2.6870171154769196e-07, 2.4407671617154847e-07, 2.2170847557845264e-07, 2.013901507780247e-07, 1.8293388848178438e-07, 1.6616903053545684e-07, 1.5094057914666337e-07, 1.3710773316688574e-07, 1.2454259490368713e-07, 1.1312897640891606e-07, 1.0276134787545743e-07, 9.334385708825721e-08, 8.478941992962064e-08], "accuracy_valid": [0.41661274002259036, 0.5497767436935241, 0.624598491622741, 0.6714234869164157, 0.7063679522778614, 0.7159615022590362, 0.7396843232304217, 0.7424213455384037, 0.7652190794427711, 0.7647102080195783, 0.7750155897025602, 0.7860945736069277, 0.7887904155685241, 0.7976206584149097, 0.7973456325301205, 0.7999399943524097, 0.8039683146649097, 0.808861422251506, 0.8071318477033133, 0.8084437358810241, 0.8088202419051205, 0.8086981715926205, 0.815453219126506, 0.8136427546121988, 0.8194006494728916, 0.8181490610881024, 0.8188814829631024, 0.818871187876506, 0.817528414439006, 0.8223303369728916, 0.8202345514871988, 0.8217405755835843, 0.8215670298381024, 0.8234392648719879, 0.8230318735881024, 0.8253717996987951, 0.8223200418862951, 0.8248629282756024, 0.8243849421121988, 0.8242628717996988, 0.8243746470256024, 0.8257483057228916, 0.8259821512612951, 0.8260939264871988, 0.8269587137612951, 0.8265822077371988, 0.8273146296121988, 0.8275690653237951, 0.8278132059487951, 0.8271925592996988, 0.8265719126506024, 0.8278132059487951, 0.8273249246987951, 0.8281794168862951, 0.8269587137612951, 0.8267145731362951, 0.8273249246987951, 0.8262262918862951, 0.8273249246987951, 0.8279455713478916, 0.8279455713478916, 0.8283117822853916, 0.8273249246987951, 0.8284338525978916, 0.8267145731362951, 0.8267145731362951, 0.8268469385353916, 0.8264704325112951, 0.8264807275978916, 0.8280676416603916, 0.8277014307228916, 0.8251379541603916, 0.8264704325112951, 0.8273352197853916, 0.8258600809487951, 0.8269587137612951, 0.8274572900978916, 0.8257380106362951, 0.8263586572853916, 0.8269587137612951, 0.8258703760353916, 0.8251276590737951, 0.8269690088478916, 0.8264807275978916, 0.8269690088478916, 0.8259924463478916, 0.8275793604103916, 0.8269690088478916, 0.8272131494728916, 0.8275793604103916, 0.8272131494728916, 0.8270910791603916, 0.8272131494728916, 0.8263586572853916, 0.8278235010353916, 0.8269690088478916, 0.8267248682228916, 0.8269690088478916, 0.8273352197853916, 0.8270910791603916, 0.8277014307228916, 0.8270910791603916, 0.8269690088478916, 0.8268469385353916, 0.8264807275978916, 0.8267248682228916, 0.8268469385353916, 0.8279455713478916, 0.8261145166603916, 0.8279455713478916, 0.8267248682228916, 0.8275793604103916, 0.8273352197853916, 0.8273352197853916], "accuracy_test": 0.8301, "start": "2016-01-23 10:42:05.952000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0], "accuracy_train_last": 0.9135668287421558, "batch_size_eval": 1024, "accuracy_train_std": [0.014388415309127042, 0.017129022748796897, 0.01690320423596447, 0.017929480146551068, 0.016564028646419753, 0.01704368154376709, 0.015561531620493832, 0.0160777366468828, 0.015173607324241997, 0.014678437322678935, 0.015535464938871656, 0.014547977113305492, 0.01598026250751062, 0.014534890319150026, 0.014397547938877556, 0.014420262751909331, 0.014167060987909747, 0.013872448198937407, 0.01384424131818939, 0.012552376535689453, 0.01355532602911668, 0.012865375799587523, 0.013664450394071421, 0.011667520097876758, 0.01155053206556884, 0.012287613394631098, 0.011296152359578851, 0.011352241255142902, 0.010931202039313888, 0.010663916474770085, 0.01052609930072347, 0.010312536239542494, 0.010095476010232458, 0.010327234615874401, 0.0101151721518423, 0.010080930625076659, 0.0094994875311945, 0.009305405184250796, 0.009973785043930745, 0.00987793160589847, 0.009590655673695228, 0.009806634996642563, 0.009791881223579891, 0.009925700248362973, 0.009799940619215549, 0.009745768109513228, 0.009380515070015027, 0.009527490928642654, 0.009258985335146753, 0.009604878625333328, 0.009511827469434679, 0.009424677158570403, 0.009094314397718966, 0.009220279480534088, 0.009755227772713527, 0.008971837390881976, 0.009070773744719658, 0.009656800544130989, 0.00920701995590111, 0.009066220710921133, 0.009257159210319615, 0.00890482076486156, 0.008967897790517647, 0.009120132905664779, 0.009037998946797441, 0.009192984820979636, 0.008967749271587229, 0.008973052890572663, 0.009593661541911873, 0.009487736753543237, 0.009059193806031356, 0.008802443405684457, 0.009414160351864787, 0.009398052942194837, 0.009337430801348285, 0.009371054835317617, 0.009554199018055997, 0.009391122879051455, 0.009415658411977184, 0.009142951145262422, 0.009461409896142206, 0.009394413685586137, 0.009164150499886536, 0.00952522088245079, 0.009467402812909847, 0.009337280609964499, 0.008660607078074034, 0.00926913116455906, 0.009163006867800265, 0.009182526113616717, 0.009255818067546521, 0.009155489089023038, 0.00932053130955509, 0.00919043880687245, 0.008774766449312537, 0.008992908852110435, 0.00946860215365392, 0.009587485350395473, 0.009083411811737782, 0.009247641003349068, 0.009109863870879212, 0.009166202033541583, 0.00915996480954651, 0.009026065276022264, 0.00921809872648859, 0.009362617619724052, 0.009334107670972727, 0.00928921118868311, 0.009415665500853074, 0.009044805263186238, 0.00922820561462114, 0.009150301518131069, 0.009209200934534947, 0.00888623981017244], "accuracy_test_std": 0.09234576330292582, "error_valid": [0.5833872599774097, 0.45022325630647586, 0.37540150837725905, 0.32857651308358427, 0.2936320477221386, 0.2840384977409638, 0.26031567676957834, 0.25757865446159633, 0.23478092055722888, 0.23528979198042166, 0.22498441029743976, 0.2139054263930723, 0.21120958443147586, 0.2023793415850903, 0.20265436746987953, 0.2000600056475903, 0.1960316853350903, 0.19113857774849397, 0.19286815229668675, 0.19155626411897586, 0.19117975809487953, 0.19130182840737953, 0.18454678087349397, 0.18635724538780118, 0.1805993505271084, 0.18185093891189763, 0.18111851703689763, 0.18112881212349397, 0.18247158556099397, 0.1776696630271084, 0.17976544851280118, 0.17825942441641573, 0.17843297016189763, 0.17656073512801207, 0.17696812641189763, 0.17462820030120485, 0.17767995811370485, 0.17513707172439763, 0.17561505788780118, 0.17573712820030118, 0.17562535297439763, 0.1742516942771084, 0.17401784873870485, 0.17390607351280118, 0.17304128623870485, 0.17341779226280118, 0.17268537038780118, 0.17243093467620485, 0.17218679405120485, 0.17280744070030118, 0.17342808734939763, 0.17218679405120485, 0.17267507530120485, 0.17182058311370485, 0.17304128623870485, 0.17328542686370485, 0.17267507530120485, 0.17377370811370485, 0.17267507530120485, 0.1720544286521084, 0.1720544286521084, 0.1716882177146084, 0.17267507530120485, 0.1715661474021084, 0.17328542686370485, 0.17328542686370485, 0.1731530614646084, 0.17352956748870485, 0.1735192724021084, 0.1719323583396084, 0.1722985692771084, 0.1748620458396084, 0.17352956748870485, 0.1726647802146084, 0.17413991905120485, 0.17304128623870485, 0.1725427099021084, 0.17426198936370485, 0.1736413427146084, 0.17304128623870485, 0.1741296239646084, 0.17487234092620485, 0.1730309911521084, 0.1735192724021084, 0.1730309911521084, 0.1740075536521084, 0.1724206395896084, 0.1730309911521084, 0.1727868505271084, 0.1724206395896084, 0.1727868505271084, 0.1729089208396084, 0.1727868505271084, 0.1736413427146084, 0.1721764989646084, 0.1730309911521084, 0.1732751317771084, 0.1730309911521084, 0.1726647802146084, 0.1729089208396084, 0.1722985692771084, 0.1729089208396084, 0.1730309911521084, 0.1731530614646084, 0.1735192724021084, 0.1732751317771084, 0.1731530614646084, 0.1720544286521084, 0.1738854833396084, 0.1720544286521084, 0.1732751317771084, 0.1724206395896084, 0.1726647802146084, 0.1726647802146084], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.5933181604685581, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.004865921010998925, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "optimization": "nesterov_momentum", "nb_data_augmentation": 2, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 1.6483612269399187e-09, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.0916443210671871}, "accuracy_valid_max": 0.8284338525978916, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import os\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8273352197853916, "loss_train": [1.6154807806015015, 1.298729658126831, 1.1385897397994995, 1.0305254459381104, 0.9493885636329651, 0.8852756023406982, 0.8275942802429199, 0.7830519676208496, 0.7430729866027832, 0.7094435095787048, 0.6793492436408997, 0.6533761024475098, 0.6294620633125305, 0.6076459288597107, 0.5898495316505432, 0.5708484649658203, 0.5538955330848694, 0.5388211011886597, 0.5267816185951233, 0.5123753547668457, 0.5017431378364563, 0.490772545337677, 0.4814344644546509, 0.4742546081542969, 0.46719855070114136, 0.4585644602775574, 0.45081013441085815, 0.4446072280406952, 0.4377886950969696, 0.4317099452018738, 0.42846670746803284, 0.4231377840042114, 0.41886359453201294, 0.4145561158657074, 0.41138237714767456, 0.4072737991809845, 0.4035743772983551, 0.40142276883125305, 0.39826053380966187, 0.3984515070915222, 0.396705687046051, 0.3931664228439331, 0.39255672693252563, 0.3888583183288574, 0.3896765410900116, 0.38541290163993835, 0.38663220405578613, 0.38390883803367615, 0.3828071355819702, 0.38119029998779297, 0.3802603781223297, 0.38012397289276123, 0.3784126937389374, 0.37900179624557495, 0.3795163333415985, 0.37681689858436584, 0.378827840089798, 0.3769282102584839, 0.3780907988548279, 0.3759330213069916, 0.37822213768959045, 0.3749537467956543, 0.3745138347148895, 0.37499314546585083, 0.3736591637134552, 0.3718252182006836, 0.3731479346752167, 0.3744511902332306, 0.3734003007411957, 0.3726457357406616, 0.3757458031177521, 0.37459874153137207, 0.37259748578071594, 0.3737935423851013, 0.3728026747703552, 0.37223896384239197, 0.3724345564842224, 0.37414786219596863, 0.37270599603652954, 0.3717033267021179, 0.3730831444263458, 0.37231311202049255, 0.37194758653640747, 0.371830016374588, 0.37297818064689636, 0.37081119418144226, 0.37229374051094055, 0.3725035488605499, 0.37093499302864075, 0.3718624711036682, 0.3727242052555084, 0.37136632204055786, 0.372696191072464, 0.37265610694885254, 0.37053048610687256, 0.37320634722709656, 0.37092602252960205, 0.3713669776916504, 0.3715571165084839, 0.37133777141571045, 0.37175753712654114, 0.3720394968986511, 0.373379647731781, 0.3692370355129242, 0.3719843626022339, 0.3723485469818115, 0.37185075879096985, 0.3727453649044037, 0.371067613363266, 0.3729590177536011, 0.3714156150817871, 0.3723504841327667, 0.3710100054740906, 0.3705647587776184], "accuracy_train_first": 0.416284008455611, "model": "residualv3", "loss_std": [0.2976662218570709, 0.25271525979042053, 0.25338080525398254, 0.25240325927734375, 0.25211602449417114, 0.25028663873672485, 0.24573849141597748, 0.24284452199935913, 0.23989273607730865, 0.23839378356933594, 0.2332744598388672, 0.23425446450710297, 0.2277420312166214, 0.2268536388874054, 0.22426779568195343, 0.21962378919124603, 0.21639873087406158, 0.21446356177330017, 0.2127922624349594, 0.2094828486442566, 0.20712319016456604, 0.20485664904117584, 0.20263533294200897, 0.20187781751155853, 0.1994677037000656, 0.19723783433437347, 0.19670723378658295, 0.19435590505599976, 0.19341613352298737, 0.19032517075538635, 0.19135543704032898, 0.18810243904590607, 0.18725335597991943, 0.18763531744480133, 0.185428187251091, 0.1838652491569519, 0.18196894228458405, 0.1825370490550995, 0.18138788640499115, 0.18216118216514587, 0.18133798241615295, 0.17978812754154205, 0.17966431379318237, 0.1800425946712494, 0.180695578455925, 0.18007923662662506, 0.17893990874290466, 0.1775520145893097, 0.1775677651166916, 0.1764758676290512, 0.17733626067638397, 0.17567557096481323, 0.1758364886045456, 0.17845354974269867, 0.17734992504119873, 0.17530405521392822, 0.17665772140026093, 0.17620691657066345, 0.17388924956321716, 0.17681847512722015, 0.17793071269989014, 0.17341384291648865, 0.17638607323169708, 0.17532336711883545, 0.17481474578380585, 0.17337939143180847, 0.1737416833639145, 0.17682181298732758, 0.17428651452064514, 0.1729486584663391, 0.17572559416294098, 0.17431475222110748, 0.17565500736236572, 0.1751171052455902, 0.17327933013439178, 0.17366501688957214, 0.17474481463432312, 0.17501015961170197, 0.17354530096054077, 0.17359301447868347, 0.1740967035293579, 0.1738014668226242, 0.17435318231582642, 0.17555776238441467, 0.1742003709077835, 0.17119093239307404, 0.17443011701107025, 0.17485375702381134, 0.17279967665672302, 0.17440545558929443, 0.17395402491092682, 0.1714116781949997, 0.17442436516284943, 0.1743994802236557, 0.173701211810112, 0.17291557788848877, 0.17268452048301697, 0.17295442521572113, 0.17340999841690063, 0.1733371913433075, 0.17295324802398682, 0.1732362061738968, 0.17493832111358643, 0.17238850891590118, 0.17200642824172974, 0.17338000237941742, 0.1729210615158081, 0.17387743294239044, 0.17067936062812805, 0.17444497346878052, 0.1726205199956894, 0.173890620470047, 0.17373746633529663, 0.1717081516981125]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:12 2016", "state": "available"}], "summary": "cad3e0820f0ada8e4ed2127e8da6c1c8"}