{"content": {"hp_model": {"f0": 64, "f1": 16, "f2": 64, "f3": 32, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852, 0.03663815387840852], "moving_avg_accuracy_train": [0.010024472891566263, 0.0190464984939759, 0.027166321536144573, 0.03447416227409638, 0.041051218938253003, 0.04697056993599397, 0.052297985833960836, 0.05709266014213102, 0.06140786701948418, 0.06529155320910203, 0.06878687077975809, 0.07193265659334855, 0.07476386382557995, 0.07731195033458822, 0.07960522819269567, 0.08166917826499236, 0.08352673333005937, 0.0851985328886197, 0.08670315249132399, 0.08805731013375785, 0.08927605201194833, 0.09037291970231975, 0.09136010062365404, 0.0922485634528549, 0.09304817999913567, 0.09376783489078837, 0.0944155242932758, 0.09499844475551447, 0.09552307317152929, 0.09599523874594262, 0.09642018776291462, 0.09680264187818942, 0.09714685058193674, 0.09745663841530933, 0.09773544746534465, 0.09798637561037644, 0.09821221094090506, 0.09841546273838081, 0.09859838935610898, 0.09876302331206435, 0.09891119387242418, 0.09904454737674802, 0.09916456553063947, 0.09927258186914178, 0.09936979657379387, 0.09945728980798074, 0.09953603371874893, 0.09960690323844029, 0.09967068580616252, 0.09972809011711253, 0.09977975399696754, 0.09982625148883705], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234423, "moving_var_accuracy_train": [0.0009044105107837221, 0.0015465419734401646, 0.001985271512221348, 0.002267385187260625, 0.0024299657378063066, 0.0025023176101357882, 0.0025075180904714006, 0.0024636663969171053, 0.0023848888507745987, 0.0022821471314719943, 0.002163887622602428, 0.002036562575807068, 0.0019050479277529161, 0.0017729778386941341, 0.0016430121648350934, 0.001517049957459986, 0.001396399559091793, 0.0012819138270586364, 0.001174097365692351, 0.0010731913154081744, 0.0009792401697582543, 0.0008921442213540557, 0.0008117005347616679, 0.0007376347770753456, 0.000669625778957585, 0.0006073243295295434, 0.0005503674106354399, 0.000498388835959565, 0.00045102706713762044, 0.0004079308233908081, 0.0003687629760549565, 0.0003332031188020766, 0.0003009491236074877, 0.00027171792776209007, 0.0002452457453633155, 0.00022128785523270586, 0.00019961808407807, 0.00018002807730885717, 0.00016232642890523272, 0.00014633772506979106, 0.0001319015431974281, 0.00011887143729172434, 0.00010711393277792353, 9.65075472645822e-05, 8.694184882732933e-05, 7.831655953885272e-05, 7.054070901631507e-05, 6.353184051407514e-05, 5.72152704061748e-05, 5.152340065979814e-05, 4.639508300215339e-05, 4.1775032852689453e-05], "duration": 19357.336212, "accuracy_train": [0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265, 0.10024472891566265], "end": "2016-01-19 16:05:41.099000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0], "accuracy_valid": [0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931, 0.09869123931623931], "accuracy_test": 0.0999599358974359, "start": "2016-01-19 10:43:03.763000", "learning_rate_per_epoch": [0.0024992506951093674, 0.0017672372050583363, 0.0014429431175813079, 0.0012496253475546837, 0.00111769896466285, 0.001020314870402217, 0.0009446279727853835, 0.0008836186025291681, 0.0008330835844390094, 0.000790332502219826, 0.0007535524782724679, 0.0007214715587906539, 0.0006931674433872104, 0.0006679528742097318, 0.0006453037494793534, 0.0006248126737773418, 0.0006061573512852192, 0.0005890790489502251, 0.0005733674624934793, 0.000558849482331425, 0.0005453812191262841, 0.0005328420666046441, 0.0005211298121139407, 0.0005101574352011085, 0.0004998501390218735, 0.0004901433712802827, 0.00048098101979121566, 0.00047231398639269173, 0.00046409922651946545, 0.0004562986723612994, 0.0004488786798901856, 0.00044180930126458406, 0.0004350637027528137, 0.00042861796100623906, 0.00042245048098266125, 0.0004165417922195047, 0.00041087428689934313, 0.0004054320161230862, 0.00040020039887167513, 0.000395166251109913, 0.00039031740743666887, 0.00038564277929253876, 0.0003811321803368628, 0.0003767762391362339, 0.0003725663118530065, 0.0003684944240376353, 0.00036455318331718445, 0.00036073577939532697, 0.0003570358094293624, 0.000353447423549369, 0.0003499650920275599, 0.0003465837216936052], "accuracy_train_last": 0.10024472891566265, "error_valid": [0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606, 0.9013087606837606], "accuracy_train_std": [0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193, 0.03676046794405193], "accuracy_test_std": 0.03747493015417098, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.6845014978480575, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0024992507606875457, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "optimization": "nesterov_momentum", "nb_data_augmentation": 3, "learning_rate_decay_method": "sqrt", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 2.826873394254875e-09, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.04135224922031492}, "accuracy_valid_max": 0.09869123931623931, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234423\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -4], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.09869123931623931, "loss_train": [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy_train_first": 0.10024472891566265, "model": "residualv2", "loss_std": [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:02 2016", "state": "available"}], "summary": "9138698f3178b13a142e47556e8daae9"}