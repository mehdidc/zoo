{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 32, "f3": 16, "nonlin": "leaky_rectify", "nbg1": 4, "nbg3": 4, "nbg2": 1, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.02309054597941472, 0.010689163635203384, 0.011907075676186976, 0.012578320837319051, 0.004477243424914038, 0.005688445032174659, 0.005458515550721872, 0.008906512746679682, 0.010253615032704916, 0.008192628023281048, 0.012621172575564988, 0.008514011971802293, 0.014430696133505479, 0.013555629352140719, 0.013562141091136879, 0.014449283060051428, 0.013710386752591836, 0.014230890282439852, 0.013047516036344688, 0.014127034411572377, 0.012249461067532075, 0.013958420464213268, 0.019708691611431607, 0.01258476213245411, 0.017722849375165675, 0.016930015899992563, 0.016050015071606825, 0.014982708672322011, 0.016093759005058612, 0.014703382158345277, 0.0113972775865457, 0.015780257459000153, 0.014580946885323715, 0.013873065039988666, 0.016584023079949915, 0.014452493737498547, 0.014759734394935888, 0.016413024565135454, 0.018224325086160304, 0.019793455051927443, 0.014024433590349885, 0.01476710921259348, 0.01546383630870526, 0.017590304972873852, 0.017722991194281015, 0.016011240138944276, 0.016402000434997198, 0.0165145069136905, 0.016376120702839683, 0.01862118075597566, 0.016377225951286975, 0.01725969812571479, 0.017641547097481218, 0.017796811571565947, 0.01660938431603449, 0.014755823267199182, 0.014798976274089522, 0.01751619394696954, 0.017327221344316638, 0.015812535141076032, 0.016812767689025735, 0.016653482859844273, 0.017250068566326732, 0.016892137152398904, 0.01815638255293435, 0.017001914585491624, 0.017093131178703484, 0.016057393098221795, 0.01703449117499038, 0.017744048868645525, 0.01633232509309917, 0.017995776753802907, 0.017952327203688598, 0.017357970285853248, 0.018031202799746033, 0.017290278354586002, 0.019131412244165782, 0.017457057055155982, 0.017527633767385305, 0.01752492112805546, 0.018284922708427888, 0.01689963895613789], "moving_avg_accuracy_train": [0.06104386203972867, 0.1242897607656192, 0.1853880642721599, 0.24327345655180066, 0.29759693699135115, 0.34761089996903405, 0.39447610556667656, 0.4376338584974582, 0.4776335079005732, 0.5141680126383859, 0.5482416879976093, 0.5793008738720824, 0.6081773333829454, 0.6346797885367144, 0.6589320319168008, 0.6817401195612227, 0.7023417671542883, 0.7209716777404467, 0.7382221200739141, 0.7539497700716445, 0.7685860329708107, 0.781884191566956, 0.794231389364164, 0.8056438115780798, 0.8162382233039467, 0.8258592243631792, 0.8348041186200599, 0.8430055860262341, 0.850547341959648, 0.8574325425009017, 0.8638453536808596, 0.8696867824023823, 0.8750510250969908, 0.8800207136483382, 0.8846932879957137, 0.888910266701218, 0.8927288711219046, 0.896321364021942, 0.8994778056236238, 0.9024976034746519, 0.9053201613834622, 0.9078278032716017, 0.9100824639685741, 0.9121395243327448, 0.914104810952165, 0.9158712437608337, 0.9175191620088736, 0.918986012390443, 0.9203294292219506, 0.9215896576441169, 0.92269603353599, 0.9237080118315234, 0.9246652231760566, 0.9256081296432885, 0.9263869549506928, 0.9271204498106899, 0.9276387971561251, 0.928275045630112, 0.9288476332078816, 0.9293513723326453, 0.9298279529842091, 0.9303522427206257, 0.9307496987214959, 0.931067917641336, 0.9314309724822688, 0.9316647158867274, 0.9320355202185973, 0.9322622872720421, 0.9324501015784757, 0.9326238208007038, 0.9327407126685847, 0.9329805937365361, 0.9330477853203392, 0.9331919270540859, 0.9333984205739911, 0.9335401229633435, 0.9337443489756563, 0.9338816494105473, 0.9339285259400536, 0.9339986166023236, 0.9341988459293098, 0.9342279176509783], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 874668169, "moving_var_accuracy_train": [0.03353717783452885, 0.06618385340188641, 0.09316249228409404, 0.1140027108099957, 0.12916180447259212, 0.13875819245993024, 0.14464950067532098, 0.14694787535009834, 0.14665283538643759, 0.1440004821757292, 0.14004957213052804, 0.13472667216214085, 0.12875865417086935, 0.12220420991638022, 0.1152773307054447, 0.10843147739286085, 0.10140818060551456, 0.09439102466099744, 0.08763012204120023, 0.08109334060714019, 0.07491198827130778, 0.06901235864261109, 0.0634832024193404, 0.058307072604504476, 0.05348653938240869, 0.04897095839660359, 0.04479396275634422, 0.040919943089240636, 0.037339851523349225, 0.03403252024945383, 0.030999385549576576, 0.0282065476001966, 0.025644868737356892, 0.023302662102297745, 0.02116889245135373, 0.019212049390842447, 0.01742208010925339, 0.015796026145459417, 0.014306091643176921, 0.012957555090408898, 0.01173350107970529, 0.010616745382287131, 0.009600822297784665, 0.008678823544082776, 0.007845702353142749, 0.0070892146816363445, 0.006404733924442717, 0.005783625382375634, 0.005221505763186671, 0.004713648767952327, 0.0042533004996841515, 0.003837187350351415, 0.0034617148973392, 0.0031235450610588105, 0.0028166496746880095, 0.002539826839605989, 0.0022882623113800685, 0.0020630793893279186, 0.0018597221592030707, 0.0016760337212351232, 0.001510474511168616, 0.0013619009776011614, 0.001227132621294695, 0.0011053307286937233, 0.000995983935182074, 0.0008968772654760176, 0.0008084270016012172, 0.0007280471111098479, 0.0006555598679221736, 0.0005902754864435001, 0.0005313709111781402, 0.0004787517064011798, 0.00043091716814146745, 0.00038801244288198854, 0.00034959495475765515, 0.00031481617538622344, 0.0002837099322245476, 0.0002555086016868842, 0.0002299775181993628, 0.00020702398068786357, 0.00018668240866954523, 0.00016802177428759766], "duration": 47562.040397, "accuracy_train": [0.6104386203972868, 0.6935028492986343, 0.7352727958310262, 0.7642419870685677, 0.7865082609473052, 0.7977365667681802, 0.8162629559454596, 0.8260536348744923, 0.8376303525286084, 0.8429785552787007, 0.8549047662306202, 0.8588335467423404, 0.8680654689807125, 0.8732018849206349, 0.8772022223375784, 0.8870129083610188, 0.8877565954918788, 0.8886408730158729, 0.8934761010751201, 0.8954986200512183, 0.9003123990633074, 0.9015676189322629, 0.9053561695390366, 0.9083556115033223, 0.9115879288367479, 0.9124482338962717, 0.915308166931986, 0.9168187926818014, 0.9184231453603728, 0.9193993473721853, 0.9215606543004798, 0.9222596408960871, 0.9233292093484681, 0.9247479106104651, 0.926746457122093, 0.9268630750507567, 0.9270963109080842, 0.9286538001222776, 0.9278857800387597, 0.9296757841339055, 0.9307231825627538, 0.9303965802648578, 0.9303744102413253, 0.9306530676102805, 0.9317923905269472, 0.931769139038852, 0.932350426241233, 0.9321876658245662, 0.9324201807055187, 0.9329317134436139, 0.9326534165628461, 0.9328158164913253, 0.9332801252768549, 0.9340942878483758, 0.9333963827173312, 0.9337219035506644, 0.9323039232650425, 0.9340012818959949, 0.9340009214078073, 0.9338850244555187, 0.9341171788482835, 0.9350708503483758, 0.9343268027293282, 0.9339318879198967, 0.9346984660506644, 0.9337684065268549, 0.9353727592054264, 0.9343031907530455, 0.9341404303363787, 0.9341872938007567, 0.9337927394795128, 0.9351395233480989, 0.9336525095745662, 0.9344892026578073, 0.9352568622531378, 0.9348154444675157, 0.935582383086471, 0.9351173533245662, 0.934350414705611, 0.9346294325627538, 0.9360009098721853, 0.9344895631459949], "end": "2016-01-24 07:20:03.097000", "learning_rate_per_epoch": [0.0037140026688575745, 0.0033785849809646606, 0.00307345949113369, 0.002795890439301729, 0.0025433890987187624, 0.0023136914242058992, 0.002104738261550665, 0.0019146559061482549, 0.0017417402705177665, 0.0015844409354031086, 0.001441347529180348, 0.0013111770385876298, 0.001192762516438961, 0.00108504225499928, 0.0009870503563433886, 0.0008979082340374589, 0.0008168166968971491, 0.000743048673029989, 0.0006759427487850189, 0.0006148972897790372, 0.0005593649111688137, 0.0005088477628305554, 0.0004628929018508643, 0.0004210883053019643, 0.00038305914495140314, 0.0003484644403215498, 0.0003169940609950572, 0.000288365816231817, 0.0002623230393510312, 0.00023863221576903015, 0.0002170809602830559, 0.00019747602345887572, 0.00017964164726436138, 0.00016341792070306838, 0.00014865938283037394, 0.00013523371308110654, 0.00012302053801249713, 0.00011191035446245223, 0.00010180354729527608, 9.260950173484161e-05, 8.424578845733777e-05, 7.663741416763514e-05, 6.971616676310077e-05, 6.341998960124329e-05, 5.7692428526934236e-05, 5.248213346931152e-05, 4.774238550453447e-05, 4.343069304013625e-05, 3.9508395275333896e-05, 3.5940327506978065e-05, 3.269449734943919e-05, 2.9741804610239342e-05, 2.7055773898609914e-05, 2.461232361383736e-05, 2.2389544028555974e-05, 2.0367508113849908e-05, 1.852808600233402e-05, 1.6854784917086363e-05, 1.5332601833506487e-05, 1.3947889783594292e-05, 1.2688233255175874e-05, 1.1542338143044617e-05, 1.0499930795049295e-05, 9.551665243634488e-06, 8.689038622833323e-06, 7.904317499196623e-06, 7.1904655669641215e-06, 6.5410831666667946e-06, 5.9503472584765404e-06, 5.412961854744935e-06, 4.9241084525419865e-06, 4.47940419689985e-06, 4.074861863045953e-06, 3.706854386109626e-06, 3.3720823466865113e-06, 3.0675441848870832e-06, 2.790509370242944e-06, 2.538493845349876e-06, 2.309238425368676e-06, 2.100687424899661e-06, 1.910970922835986e-06, 1.7383880503984983e-06], "accuracy_valid": [0.596325242375753, 0.6811994070030121, 0.7180264024849398, 0.7450451218938253, 0.7646999129329819, 0.7733977903802711, 0.786877000188253, 0.7915862669427711, 0.7996532026543675, 0.8049331113516567, 0.8094291227409638, 0.8134986233998494, 0.8170077772025602, 0.821667039250753, 0.8243628812123494, 0.8258277249623494, 0.8282794262989458, 0.8282794262989458, 0.8285338620105422, 0.8301310711596386, 0.8316062099962349, 0.8324709972703314, 0.8298251600150602, 0.8313517742846386, 0.8340167309864458, 0.8336608151355422, 0.8336505200489458, 0.8334269695971386, 0.8321856762989458, 0.8363669521837349, 0.8371405544051205, 0.8397849209337349, 0.8384421474962349, 0.8380862316453314, 0.8368346432605422, 0.8372317394578314, 0.8383200771837349, 0.8367228680346386, 0.8370684887989458, 0.834728562688253, 0.8390730892319277, 0.8390627941453314, 0.8379538662462349, 0.8375670651355422, 0.8367022778614458, 0.8364787274096386, 0.8383097820971386, 0.8358580807605422, 0.8374552899096386, 0.8379229809864458, 0.8388083584337349, 0.8370787838855422, 0.8358477856739458, 0.8385436276355422, 0.8362242916980422, 0.8374655849962349, 0.8383303722703314, 0.8373229245105422, 0.8385539227221386, 0.8383200771837349, 0.8379435711596386, 0.8381877117846386, 0.8369567135730422, 0.8361022213855422, 0.8365802075489458, 0.8359801510730422, 0.8370787838855422, 0.8376994305346386, 0.8369567135730422, 0.8362139966114458, 0.8373332195971386, 0.8371905591114458, 0.8364581372364458, 0.8372008541980422, 0.8365802075489458, 0.8374449948230422, 0.8368140530873494, 0.8378112057605422, 0.8376891354480422, 0.8389201336596386, 0.8371905591114458, 0.8373229245105422], "accuracy_test": 0.8215601084183672, "start": "2016-01-23 18:07:21.056000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0], "accuracy_train_last": 0.9344895631459949, "batch_size_eval": 1024, "accuracy_train_std": [0.018373403099333142, 0.020287064828853073, 0.018881304369143957, 0.018096719094545865, 0.018884030224113807, 0.018640296872982, 0.019527035284138287, 0.01847619360415195, 0.017282171127181424, 0.016908657598837615, 0.016519941270991833, 0.016343633713686665, 0.014041692352113683, 0.01472886288397219, 0.013930405405541217, 0.013608857470685517, 0.013464520391458675, 0.013703175076885845, 0.011911014259202077, 0.011932298721234207, 0.011652256757134794, 0.010958429035207561, 0.011232911972417327, 0.011483728874023241, 0.011532922232389534, 0.010637712247224233, 0.0104301596254309, 0.009845803461107637, 0.009694911210243816, 0.01001814177373343, 0.009226641251758165, 0.009029439975197619, 0.010133077467514379, 0.008623122114772388, 0.008306203075872895, 0.008584086927655015, 0.008511626218555682, 0.009009016206234934, 0.009170181939964956, 0.00903012721939072, 0.008689323550553648, 0.008796862423140686, 0.008455513620989018, 0.008267801659660467, 0.009088019693088412, 0.008820858277150588, 0.00835218317953344, 0.008289431149296655, 0.00921856730870147, 0.008804518108057087, 0.008467884392570605, 0.008291162750941496, 0.008164915280123012, 0.00834680665188885, 0.00808332541361305, 0.008008528426718637, 0.00846936631106137, 0.008066975376109701, 0.007824127140769497, 0.007994277574159556, 0.00846297231017909, 0.008309926160947226, 0.007653368160387053, 0.007670373634872688, 0.007785659069374031, 0.007745311955454619, 0.008135592960483275, 0.007716201302385952, 0.007850404539405, 0.007812155233562991, 0.007591541684905569, 0.007553558653738872, 0.00799652730820441, 0.008315123626513361, 0.007878293853005394, 0.00803090631845469, 0.007699956990413752, 0.007764460653425668, 0.007586764286990641, 0.007787588035102818, 0.00806152274464618, 0.00795783090651397], "accuracy_test_std": 0.010912035106814696, "error_valid": [0.403674757624247, 0.31880059299698793, 0.28197359751506024, 0.2549548781061747, 0.2353000870670181, 0.22660220961972888, 0.21312299981174698, 0.20841373305722888, 0.20034679734563254, 0.19506688864834332, 0.1905708772590362, 0.18650137660015065, 0.18299222279743976, 0.17833296074924698, 0.17563711878765065, 0.17417227503765065, 0.1717205737010542, 0.1717205737010542, 0.17146613798945776, 0.16986892884036142, 0.1683937900037651, 0.16752900272966864, 0.17017483998493976, 0.16864822571536142, 0.1659832690135542, 0.16633918486445776, 0.1663494799510542, 0.16657303040286142, 0.1678143237010542, 0.1636330478162651, 0.16285944559487953, 0.1602150790662651, 0.1615578525037651, 0.16191376835466864, 0.16316535673945776, 0.16276826054216864, 0.1616799228162651, 0.16327713196536142, 0.1629315112010542, 0.16527143731174698, 0.1609269107680723, 0.16093720585466864, 0.1620461337537651, 0.16243293486445776, 0.1632977221385542, 0.16352127259036142, 0.16169021790286142, 0.16414191923945776, 0.16254471009036142, 0.1620770190135542, 0.1611916415662651, 0.16292121611445776, 0.1641522143260542, 0.16145637236445776, 0.16377570830195776, 0.1625344150037651, 0.16166962772966864, 0.16267707548945776, 0.16144607727786142, 0.1616799228162651, 0.16205642884036142, 0.16181228821536142, 0.16304328642695776, 0.16389777861445776, 0.1634197924510542, 0.16401984892695776, 0.16292121611445776, 0.16230056946536142, 0.16304328642695776, 0.1637860033885542, 0.16266678040286142, 0.1628094408885542, 0.1635418627635542, 0.16279914580195776, 0.1634197924510542, 0.16255500517695776, 0.16318594691265065, 0.16218879423945776, 0.16231086455195776, 0.16107986634036142, 0.1628094408885542, 0.16267707548945776], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.7889940398202175, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.004082719663184943, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "optimization": "adam", "nb_data_augmentation": 1, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 1.6269923846734877e-06, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.09031162258594011}, "accuracy_valid_max": 0.8397849209337349, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8373229245105422, "loss_train": [1.5238336324691772, 1.1502677202224731, 0.9962348937988281, 0.8938454389572144, 0.8217231035232544, 0.7650688290596008, 0.7220516204833984, 0.6858941912651062, 0.6527757048606873, 0.6255224943161011, 0.6002357602119446, 0.5789574384689331, 0.559928297996521, 0.5422722101211548, 0.525732696056366, 0.5108609795570374, 0.49477389454841614, 0.486817330121994, 0.4748240113258362, 0.4634677469730377, 0.45258504152297974, 0.44229716062545776, 0.4350794553756714, 0.42699891328811646, 0.4208890199661255, 0.4147833585739136, 0.40899720788002014, 0.40308746695518494, 0.3991071581840515, 0.39279136061668396, 0.3901817798614502, 0.3827528953552246, 0.38067761063575745, 0.37852951884269714, 0.37429171800613403, 0.37257760763168335, 0.36834508180618286, 0.36807337403297424, 0.36738327145576477, 0.36599671840667725, 0.3587269186973572, 0.3596319258213043, 0.3607759475708008, 0.35939520597457886, 0.3562738597393036, 0.3552089333534241, 0.35209760069847107, 0.3532602787017822, 0.3529002070426941, 0.3488370478153229, 0.35001620650291443, 0.35027217864990234, 0.35003483295440674, 0.3493836224079132, 0.3484322428703308, 0.34823518991470337, 0.3475903570652008, 0.34697309136390686, 0.34650924801826477, 0.34343770146369934, 0.34384408593177795, 0.3450045883655548, 0.3445242941379547, 0.34413206577301025, 0.344802588224411, 0.34352555871009827, 0.34378623962402344, 0.3435979187488556, 0.34537333250045776, 0.3439498245716095, 0.344295471906662, 0.3435172438621521, 0.34383442997932434, 0.34450191259384155, 0.34151309728622437, 0.3429568409919739, 0.34421128034591675, 0.3433079421520233, 0.3423819839954376, 0.3428989052772522, 0.344090074300766, 0.3430194556713104], "accuracy_train_first": 0.6104386203972868, "model": "residualv5", "loss_std": [0.3235938549041748, 0.2641056180000305, 0.2592497169971466, 0.25443628430366516, 0.24921348690986633, 0.2445562481880188, 0.24262653291225433, 0.2366683930158615, 0.23152104020118713, 0.22791814804077148, 0.22216621041297913, 0.21771109104156494, 0.21291379630565643, 0.21141009032726288, 0.2058981955051422, 0.2023496925830841, 0.20256051421165466, 0.19985517859458923, 0.1950433999300003, 0.1917654275894165, 0.191531240940094, 0.1880401074886322, 0.185967817902565, 0.1834210902452469, 0.18162503838539124, 0.17991264164447784, 0.17661431431770325, 0.1739518642425537, 0.17435480654239655, 0.17139975726604462, 0.16898149251937866, 0.16927221417427063, 0.16722020506858826, 0.16875861585140228, 0.16615119576454163, 0.16593652963638306, 0.16135165095329285, 0.16381584107875824, 0.16350077092647552, 0.16349846124649048, 0.16076932847499847, 0.15999533236026764, 0.1613236665725708, 0.16073648631572723, 0.16014684736728668, 0.16115118563175201, 0.16035260260105133, 0.15864874422550201, 0.15837323665618896, 0.15740200877189636, 0.15745101869106293, 0.15781886875629425, 0.15766693651676178, 0.15825752913951874, 0.15698695182800293, 0.1576479971408844, 0.1563076376914978, 0.15591318905353546, 0.1574622392654419, 0.15375465154647827, 0.1561986654996872, 0.15682663023471832, 0.1540219783782959, 0.1548377126455307, 0.15818573534488678, 0.15622897446155548, 0.1571407914161682, 0.15600520372390747, 0.15480732917785645, 0.15483281016349792, 0.15712957084178925, 0.1557072103023529, 0.15485511720180511, 0.15538865327835083, 0.15532074868679047, 0.1572647988796234, 0.1567302793264389, 0.15409372746944427, 0.154397651553154, 0.1539618968963623, 0.15711991488933563, 0.15551289916038513]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:09 2016", "state": "available"}], "summary": "09d796094cf2189ebc69921b580cd21b"}