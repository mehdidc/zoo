{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 32, "f3": 32, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.8718252182006836, 1.4711438417434692, 1.1705671548843384, 1.0102750062942505, 0.9119526147842407, 0.8412759900093079, 0.7910854816436768, 0.7531220316886902, 0.7175029516220093, 0.6889953017234802, 0.6665011644363403, 0.6457346081733704, 0.6281181573867798, 0.612115740776062, 0.5957286953926086, 0.5824016332626343, 0.5672279596328735, 0.5573461055755615, 0.544769287109375, 0.5368430018424988, 0.5260372161865234, 0.5180855393409729, 0.5084392428398132, 0.5013859272003174, 0.4933375418186188, 0.4861679673194885, 0.48034241795539856, 0.47314926981925964, 0.4668352007865906, 0.46018505096435547, 0.45647138357162476, 0.44882479310035706, 0.44530853629112244, 0.43923500180244446, 0.4345865845680237, 0.43050509691238403, 0.4254993796348572, 0.42053237557411194, 0.41837069392204285, 0.41501080989837646, 0.41084814071655273, 0.40741243958473206, 0.4035107493400574, 0.40007284283638, 0.39529600739479065, 0.3913249969482422, 0.3889434337615967, 0.3859780728816986, 0.3845420181751251, 0.3811204731464386, 0.3792743384838104, 0.37711474299430847, 0.37233105301856995, 0.36930856108665466, 0.3670557737350464, 0.3653579354286194, 0.3630305528640747, 0.3606225550174713, 0.35754749178886414, 0.35603728890419006, 0.35224345326423645, 0.35018134117126465, 0.3505100905895233, 0.3489670157432556, 0.34586790204048157, 0.34443771839141846, 0.34325847029685974, 0.3409026563167572, 0.3394475281238556, 0.3361762762069702, 0.3340105414390564, 0.333149254322052, 0.33375322818756104, 0.32952776551246643, 0.3278985619544983, 0.3288124203681946, 0.3255627751350403, 0.32363906502723694, 0.3235478103160858, 0.321397066116333, 0.3187028467655182, 0.31824934482574463, 0.3183096945285797, 0.3170802891254425, 0.31450650095939636, 0.31285327672958374, 0.31072330474853516, 0.31129494309425354, 0.3077223598957062, 0.3094607889652252, 0.30822259187698364, 0.3064877688884735, 0.3055688142776489, 0.3043794631958008, 0.3035065233707428, 0.3022662103176117, 0.3013452887535095, 0.2994554042816162, 0.2966672480106354, 0.2983882427215576, 0.2968038022518158, 0.29511141777038574, 0.29455623030662537, 0.2929786145687103, 0.29251667857170105, 0.2901546359062195, 0.29127824306488037, 0.2898182272911072, 0.28842270374298096, 0.2859615385532379, 0.28789323568344116, 0.2864464521408081, 0.2830577492713928, 0.2841610312461853, 0.2812519669532776, 0.2815788984298706, 0.28091156482696533, 0.2801496386528015, 0.2785484790802002, 0.28115350008010864, 0.27852663397789, 0.2764807343482971, 0.2767883837223053, 0.27652931213378906, 0.2755013406276703, 0.2760107219219208, 0.2724829912185669, 0.27233418822288513, 0.27386167645454407, 0.27042263746261597, 0.27022042870521545, 0.2701924443244934, 0.26973778009414673, 0.26884010434150696, 0.2678089439868927, 0.26768890023231506, 0.26718416810035706, 0.2668569087982178, 0.26666900515556335, 0.26529568433761597, 0.26353782415390015, 0.2640688121318817, 0.26401469111442566, 0.262673020362854, 0.2621915340423584, 0.2625131607055664, 0.2610158622264862, 0.25999337434768677, 0.2604025602340698, 0.2592499852180481, 0.258841335773468, 0.25698554515838623, 0.25809445977211, 0.25666379928588867, 0.2568235695362091, 0.25530490279197693, 0.2559910714626312, 0.25565341114997864, 0.2539868652820587, 0.2539442777633667, 0.2530321478843689, 0.2519301474094391, 0.2525249421596527, 0.25178539752960205, 0.2522551417350769, 0.2508302927017212, 0.24961687624454498, 0.25004497170448303, 0.25082555413246155, 0.2496187686920166, 0.24860402941703796, 0.24884995818138123, 0.24809005856513977, 0.24873358011245728, 0.2455931156873703, 0.2466990053653717], "moving_avg_accuracy_train": [0.05082823529411764, 0.10659247058823526, 0.16850734117647054, 0.22847543058823525, 0.2853149463529411, 0.33840227524705874, 0.3875338124282352, 0.4328180782442352, 0.4745409763021646, 0.5127174669072422, 0.5474927790400473, 0.5797482070183955, 0.6091498569047912, 0.6364231065084296, 0.6613078546811161, 0.6841182456835927, 0.7049911269975864, 0.7242214260625336, 0.7416016363974567, 0.7576697080518286, 0.7721615607760576, 0.7857901105808047, 0.7983028642286066, 0.8099266954528048, 0.8203293200251713, 0.830075211552066, 0.8390135727498005, 0.847185156651291, 0.854532523339103, 0.861566329828722, 0.8679414615517321, 0.8739920212789118, 0.8795104662098442, 0.8847076548829774, 0.8893898305711503, 0.8938061416316823, 0.898065527468514, 0.9016519158981332, 0.905117312543614, 0.9083914636421938, 0.911380552572092, 0.9142707326090005, 0.9169801299363357, 0.9195338816485845, 0.9218910817190202, 0.9239325617824123, 0.9259157761924064, 0.9278371397496363, 0.9297663669511432, 0.9315285537854406, 0.9330298160539554, 0.9345644815073834, 0.9357009745331156, 0.9370838182562746, 0.9384319070188825, 0.9396169516111119, 0.9408129035088242, 0.9418845543344123, 0.9429149224303828, 0.943905783128521, 0.9448822636391982, 0.945706978451749, 0.9466986335477505, 0.9474428878400343, 0.9482468343501484, 0.9489468567974866, 0.9496709946471497, 0.950365071653023, 0.95105562331125, 0.9517265315683603, 0.9523585842938772, 0.953085078805666, 0.9536589238662758, 0.9542647961855306, 0.9547865518610953, 0.9553196613808681, 0.9557829893604284, 0.9562235139537972, 0.9566199860878293, 0.9570826933613993, 0.9576003063782005, 0.9581343933874392, 0.9585915422839895, 0.9589865057026493, 0.9594572668970902, 0.9599021284426753, 0.9603660332454665, 0.9607576652150375, 0.9610866045758867, 0.9614602970594744, 0.9618883850005858, 0.9621936641475861, 0.9625390036151804, 0.96287333854778, 0.963155416457708, 0.963369286576643, 0.9637217696836846, 0.9639990044800221, 0.9643214569731964, 0.9645834289229356, 0.9649933213247597, 0.9652234009569896, 0.9654398843907024, 0.9657194253633968, 0.9659757181211748, 0.9662604992502337, 0.9664179787369751, 0.9666444161573952, 0.9669282098357733, 0.967150682969843, 0.9673038499669763, 0.9674558179114551, 0.967677294943839, 0.9678601536847493, 0.968071785375098, 0.9681799009552352, 0.968413675565594, 0.9684570138913875, 0.9686607242669546, 0.9688299459579062, 0.969104598420939, 0.9693329621082568, 0.9694231953091959, 0.969504405190041, 0.9695986705533899, 0.9697917446745214, 0.9698596290305987, 0.9700101367157742, 0.9701479465736085, 0.9702884460338946, 0.9704525426069758, 0.9704896412874546, 0.9706171477469445, 0.9707883741487207, 0.9708436543809075, 0.9710039948251696, 0.9711835953426526, 0.9714558240436815, 0.9716655357569604, 0.9717742762989113, 0.9719215545513731, 0.9720799873315299, 0.9722178709513181, 0.9724172603267746, 0.9725167107646853, 0.9726438632176285, 0.972711241601748, 0.9728001174415732, 0.9728071645209453, 0.9728958598335566, 0.9730439209090245, 0.9731395288181219, 0.973272634759839, 0.9732512536367963, 0.9734108341554696, 0.9734979860340403, 0.9736164227247539, 0.9737088980993374, 0.9737427141717566, 0.9738507956957574, 0.9739504220085345, 0.9741012621606222, 0.9742205477092659, 0.9742879047030452, 0.9743273495268583, 0.9744052028094666, 0.9745270354696964, 0.9745896260403738, 0.9747024281422187, 0.9747874794456439, 0.9748757903246089, 0.9748823289392069, 0.9750152725158744, 0.975149039381934, 0.9752835472084465, 0.9755104866052489], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.049919999999999985, 0.10452799999999998, 0.16531519999999997, 0.22398367999999996, 0.27918531199999996, 0.33018678079999997, 0.3773414360533333, 0.42043395911466663, 0.4598838965365333, 0.49566884021621327, 0.5281152895279253, 0.5580370939084661, 0.5854467178509528, 0.6103687127325242, 0.6327851747926051, 0.6533466573133446, 0.6718919915820102, 0.6893427924238091, 0.7046351798480949, 0.7187183285299521, 0.731566495676957, 0.7433431794425946, 0.7538088614983351, 0.7635346420151683, 0.7721811778136515, 0.7802963933656197, 0.7876800873623911, 0.7945254119594853, 0.8001262040968702, 0.8055802503538498, 0.8103955586517981, 0.814862669453285, 0.8190030691746232, 0.8228894289238275, 0.826373819364778, 0.8293897707616337, 0.8323174603521369, 0.8346857143169233, 0.8368438095518976, 0.8390260952633746, 0.8411234857370371, 0.8428511371633335, 0.8443260234470001, 0.8459867544356335, 0.8474547456587368, 0.8485226044261964, 0.8495503439835768, 0.8504486429185525, 0.8516437786266973, 0.8525460674306942, 0.8533181273542914, 0.8541063146188622, 0.854655683156976, 0.8553234481746117, 0.8559644366904838, 0.8565013263547687, 0.8569311937192918, 0.857571407680696, 0.8582142669126263, 0.858606173554697, 0.8590255561992274, 0.8593763339126379, 0.8599987005213741, 0.8602254971359033, 0.8604296140889797, 0.8607066526800816, 0.8609959874120735, 0.8613230553375328, 0.8615907498037796, 0.8617916748234017, 0.8620125073410616, 0.8621045899402888, 0.8624407976129266, 0.8626767178516339, 0.8627557127331372, 0.8629601414598235, 0.8631974606471745, 0.863397714582457, 0.8634579431242113, 0.8638188154784568, 0.8639302672639445, 0.8640305738708833, 0.864347516483795, 0.8644994315020822, 0.8646761550185407, 0.86490187285002, 0.8650916855650179, 0.8654091836751827, 0.8654549319743312, 0.865549438776898, 0.8656078282325416, 0.8657003787426207, 0.8657170075350253, 0.8658119734481895, 0.8658574427700372, 0.8661116984930335, 0.8661405286437301, 0.8659931424460239, 0.8659938282014216, 0.8661544453812794, 0.8663256675098181, 0.8663864340921696, 0.8664944573496194, 0.8665783449479908, 0.8666138437865251, 0.8666191260745393, 0.866823880133752, 0.8667414921203769, 0.8667206762416726, 0.8670486086175053, 0.8671037477557547, 0.8671400396468459, 0.8673860356821614, 0.8672874321139452, 0.8675053555692174, 0.8675814866789623, 0.8676633380110661, 0.8676303375432929, 0.8677339704556303, 0.867747240076734, 0.8679058494023939, 0.8679019311288212, 0.8679517380159392, 0.8679298975476786, 0.8679769077929107, 0.8682858836802864, 0.8683772953122577, 0.868259565781032, 0.8682202758695955, 0.8680649149493026, 0.8680584234543723, 0.8680259144422684, 0.8679433229980416, 0.8680289906982374, 0.867879424961747, 0.8680248157989056, 0.868022334219015, 0.8682201007971134, 0.8680647573840687, 0.8682716149789952, 0.868297786814429, 0.8683213414663195, 0.8685158739863541, 0.868677619921052, 0.8685165245956133, 0.8685182054693854, 0.8683197182557802, 0.8682744130968689, 0.868126971787182, 0.8681676079417971, 0.8681641804809508, 0.868161095766189, 0.8681449861895701, 0.8680638209039465, 0.8680974388135518, 0.8681276949321965, 0.8682615921056436, 0.8680487662284125, 0.868150556272238, 0.8682555006450142, 0.8681099505805128, 0.8681789555224615, 0.8680677266368819, 0.8680209539731937, 0.8678988585758743, 0.8678956393849536, 0.867892742113125, 0.8677168012351458, 0.8678651211116313, 0.8678519423338016, 0.867773414767088, 0.8678227399570458, 0.8678271326280079, 0.8679110860318738, 0.8679066440953531, 0.8681426463524844], "moving_var_accuracy_train": [0.023251585528027682, 0.048913276416664354, 0.07852300957461923, 0.10303625434643396, 0.1218092038830868, 0.1349926638967881, 0.14321856901917723, 0.1473526946917068, 0.14828462722370747, 0.14657316441561297, 0.14279974897945794, 0.1378834877881098, 0.13187525215367857, 0.12538219823379204, 0.11841723463497504, 0.11125833661065034, 0.1040535975187179, 0.09697647738599191, 0.08999747504896824, 0.08332137388428171, 0.07687936065428021, 0.07086306091687646, 0.06518587585984402, 0.05988330934481741, 0.05486890979227812, 0.05023686042793628, 0.045932223093253156, 0.041939973835059735, 0.0382318306267603, 0.03485391746768494, 0.03173430646128802, 0.02889035927226874, 0.02627540245514346, 0.023890959140566412, 0.021699168149084024, 0.019704785564626022, 0.01789758831752645, 0.016223589123486763, 0.014709310976332672, 0.013334860467446384, 0.01208178629437931, 0.010948785930753074, 0.009919974842574111, 0.008986672188587022, 0.008138012499276877, 0.007361720016992236, 0.0066609462698570855, 0.006028076384142839, 0.0054587660040838655, 0.00494083712562622, 0.004467037508653393, 0.004041530540273562, 0.0036490020338240483, 0.0033013121413057664, 0.0029875370169820154, 0.002701422291453963, 0.0024441527707833423, 0.0022100734131328625, 0.001998620997538322, 0.001807595142092524, 0.0016354172555728653, 0.0014779969207139446, 0.0013390476471073832, 0.0012101281124608902, 0.0010949322711349247, 0.0009898493268624272, 0.000895583774804017, 0.0008103610833343534, 0.00073361672933504, 0.0006643061174066649, 0.0006014709214964986, 0.0005460739778277812, 0.0004944302634272803, 0.0004482909684897048, 0.0004059119325055889, 0.00036787859109568176, 0.000333022787335904, 0.00030146706585857936, 0.0002727350706502968, 0.0002473884457743985, 0.00022506091031341744, 0.00020512205968301425, 0.00018649071973726635, 0.00016924561268225521, 0.00015431559633375294, 0.0001406651528530409, 0.0001285355065622123, 0.0001170623363023016, 0.0001063299126001143, 9.69537359907131e-05, 8.890769595956658e-05, 8.085568458194864e-05, 7.38434502546588e-05, 6.746512385360041e-05, 6.143472299366387e-05, 5.570291454425728e-05, 5.125082215657871e-05, 4.68174721316231e-05, 4.3071505411649464e-05, 3.9382018592535846e-05, 3.695592276294032e-05, 3.373676022114979e-05, 3.0784869892683604e-05, 2.8409671302149982e-05, 2.6159877971139903e-05, 2.4273792797238987e-05, 2.2069611616213894e-05, 2.032411560289124e-05, 1.9016553709588612e-05, 1.7560346997075013e-05, 1.601545345846514e-05, 1.4621756417960768e-05, 1.3601049459026932e-05, 1.2541880385269661e-05, 1.169078409798094e-05, 1.0626906496198592e-05, 1.0056070962614538e-05, 9.067367760696368e-06, 8.534112238650065e-06, 7.938424840981746e-06, 7.82348813593399e-06, 7.510489085509315e-06, 6.832718451923708e-06, 6.208802009453248e-06, 5.6678954370535255e-06, 5.43660443960483e-06, 4.934418567844567e-06, 4.644849780731867e-06, 4.3512888149055956e-06, 4.093820818481501e-06, 3.926787904306083e-06, 3.5464959227149548e-06, 3.3381674053481474e-06, 3.2682169908001593e-06, 2.96889842835574e-06, 2.9033901081159594e-06, 2.9033582102259387e-06, 3.279998580178064e-06, 3.347809746337665e-06, 3.119449320878126e-06, 3.0027223416241736e-06, 2.9283586199157126e-06, 2.8066297913771695e-06, 2.883771919643575e-06, 2.6844082340850286e-06, 2.5614771272818588e-06, 2.3461880343726637e-06, 2.182659465077105e-06, 1.964840470518484e-06, 1.8391581497796667e-06, 1.8525410734200113e-06, 1.7495548166160678e-06, 1.7340540604383148e-06, 1.5647630261975986e-06, 1.6374802010382237e-06, 1.5420912303800067e-06, 1.5141273547067435e-06, 1.4396798733751849e-06, 1.3060036268224106e-06, 1.2805378066132205e-06, 1.2418126457301294e-06, 1.3224061444937343e-06, 1.3182269090813395e-06, 1.2272368996720565e-06, 1.1185162568356895e-06, 1.0612148336680882e-06, 1.0886821241893165e-06, 1.0150721276099046e-06, 1.0280837424747203e-06, 9.903788861561591e-07, 9.61530299632706e-07, 8.657620509971773e-07, 9.382517970918981e-07, 1.0054687874814094e-06, 1.0677531072712886e-06, 1.4244912049335658e-06], "duration": 222213.269622, "accuracy_train": [0.5082823529411765, 0.6084705882352941, 0.7257411764705882, 0.7681882352941176, 0.7968705882352941, 0.8161882352941177, 0.8297176470588236, 0.8403764705882353, 0.8500470588235294, 0.8563058823529411, 0.8604705882352941, 0.8700470588235294, 0.8737647058823529, 0.8818823529411765, 0.8852705882352941, 0.8894117647058823, 0.8928470588235294, 0.8972941176470588, 0.8980235294117647, 0.9022823529411764, 0.9025882352941177, 0.9084470588235294, 0.9109176470588235, 0.9145411764705882, 0.9139529411764706, 0.9177882352941177, 0.9194588235294118, 0.9207294117647059, 0.9206588235294118, 0.9248705882352941, 0.9253176470588236, 0.9284470588235294, 0.9291764705882353, 0.9314823529411764, 0.9315294117647058, 0.9335529411764706, 0.9364, 0.9339294117647059, 0.9363058823529412, 0.9378588235294117, 0.9382823529411765, 0.9402823529411765, 0.941364705882353, 0.9425176470588236, 0.9431058823529411, 0.9423058823529412, 0.943764705882353, 0.9451294117647059, 0.9471294117647059, 0.9473882352941176, 0.9465411764705882, 0.9483764705882353, 0.9459294117647059, 0.9495294117647058, 0.950564705882353, 0.9502823529411765, 0.9515764705882352, 0.9515294117647058, 0.9521882352941177, 0.9528235294117647, 0.9536705882352942, 0.9531294117647059, 0.9556235294117648, 0.9541411764705883, 0.9554823529411764, 0.9552470588235294, 0.9561882352941177, 0.9566117647058824, 0.9572705882352941, 0.957764705882353, 0.9580470588235294, 0.9596235294117647, 0.9588235294117647, 0.9597176470588236, 0.9594823529411765, 0.9601176470588235, 0.9599529411764706, 0.9601882352941177, 0.9601882352941177, 0.9612470588235295, 0.9622588235294117, 0.9629411764705882, 0.9627058823529412, 0.9625411764705882, 0.9636941176470588, 0.9639058823529412, 0.9645411764705882, 0.9642823529411765, 0.9640470588235294, 0.9648235294117647, 0.9657411764705882, 0.9649411764705882, 0.9656470588235294, 0.9658823529411765, 0.9656941176470588, 0.9652941176470589, 0.9668941176470588, 0.9664941176470588, 0.9672235294117647, 0.9669411764705882, 0.9686823529411764, 0.9672941176470589, 0.9673882352941177, 0.9682352941176471, 0.9682823529411765, 0.9688235294117648, 0.967835294117647, 0.9686823529411764, 0.9694823529411765, 0.9691529411764706, 0.9686823529411764, 0.9688235294117648, 0.9696705882352942, 0.9695058823529412, 0.9699764705882353, 0.9691529411764706, 0.9705176470588235, 0.9688470588235294, 0.9704941176470588, 0.9703529411764706, 0.9715764705882353, 0.9713882352941177, 0.9702352941176471, 0.9702352941176471, 0.9704470588235294, 0.9715294117647059, 0.9704705882352941, 0.9713647058823529, 0.9713882352941177, 0.9715529411764706, 0.9719294117647059, 0.9708235294117648, 0.971764705882353, 0.9723294117647059, 0.9713411764705883, 0.9724470588235294, 0.9728, 0.9739058823529412, 0.9735529411764706, 0.9727529411764706, 0.9732470588235295, 0.9735058823529412, 0.9734588235294117, 0.9742117647058823, 0.9734117647058823, 0.9737882352941176, 0.9733176470588235, 0.9736, 0.9728705882352942, 0.9736941176470588, 0.9743764705882353, 0.974, 0.9744705882352941, 0.9730588235294118, 0.9748470588235294, 0.9742823529411765, 0.9746823529411764, 0.9745411764705882, 0.9740470588235294, 0.9748235294117648, 0.9748470588235294, 0.9754588235294117, 0.9752941176470589, 0.9748941176470588, 0.9746823529411764, 0.9751058823529412, 0.9756235294117647, 0.9751529411764706, 0.9757176470588236, 0.9755529411764706, 0.9756705882352941, 0.9749411764705882, 0.9762117647058823, 0.9763529411764705, 0.9764941176470588, 0.9775529411764706], "end": "2016-02-07 23:31:09.354000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0], "moving_var_accuracy_valid": [0.022428057599999995, 0.047023554816, 0.07557695248895999, 0.0989971721496576, 0.11652243651386267, 0.12828054124029276, 0.13546454072480993, 0.13863077654645284, 0.1387743769551103, 0.1364219990070201, 0.13225474776275556, 0.12708710238296617, 0.12113997950668642, 0.11461593401591141, 0.10767682055593969, 0.10071410957140181, 0.0937380634224905, 0.08710503113042264, 0.08049924203559046, 0.07423433352318907, 0.06829657876220653, 0.06271513341062837, 0.05742939457759218, 0.05253777237978746, 0.04795685837363878, 0.04375388304736906, 0.039869165175973775, 0.036303974877932646, 0.032955897243235104, 0.029928027104071057, 0.027143909139702566, 0.02460911393594715, 0.02230248873102455, 0.020208173986824216, 0.018296625378846684, 0.01654882650641577, 0.014971086152819266, 0.013524455179112873, 0.012213926036590557, 0.011035394771270149, 0.009971446715334228, 0.009001165058857858, 0.008120626158919805, 0.007333385789777287, 0.006619442194879534, 0.0059677608765167445, 0.005380491026245309, 0.004849704392409984, 0.00437758909741693, 0.003947157313447602, 0.0035578062708334665, 0.003207616796226405, 0.0028895713687197883, 0.002604627422916812, 0.0023478624771224505, 0.0021156704840147493, 0.0019057665091730131, 0.001718878723503103, 0.0015507102630814963, 0.001397021554118239, 0.001258902334929214, 0.0011341195064743228, 0.001024193617587919, 0.0009222371861683845, 0.0008303884411263446, 0.0007480403504423484, 0.0006739897466823447, 0.0006075535328648885, 0.0005474431225237317, 0.0004930621480429496, 0.0004441948362463584, 0.00039985166546744645, 0.0003608838193129665, 0.00032529636261295543, 0.00029282288807339334, 0.0002639167192047052, 0.00023803193085439903, 0.00021458965251632448, 0.00019316333455986868, 0.00017501906080841025, 0.00015762894823196467, 0.00014195660614732853, 0.00012866501911150912, 0.0001160062207553889, 0.00010468667949127494, 9.467654839717676e-05, 8.553315335843333e-05, 7.78870834722144e-05, 7.01172112868677e-05, 6.318587397976365e-05, 5.6897970538560415e-05, 5.1285263856947624e-05, 4.615922612188438e-05, 4.162447023166383e-05, 3.7480630341561066e-05, 3.4314381061492186e-05, 3.0890423553645686e-05, 2.7996885419750133e-05, 2.5197201110119307e-05, 2.290966190529677e-05, 2.0882548870479094e-05, 1.8827527181207343e-05, 1.704979568043702e-05, 1.5408150274837996e-05, 1.3878676755189725e-05, 1.2491060202770733e-05, 1.1619272205370518e-05, 1.0518435047564684e-05, 9.470491250064327e-06, 9.491298913131647e-06, 8.569531942920536e-06, 7.724432660859262e-06, 7.496615839291418e-06, 6.8344582283468795e-06, 6.578428096731968e-06, 5.972748799897717e-06, 5.43577068501239e-06, 4.901994894370452e-06, 4.508453429609152e-06, 4.059192832246343e-06, 3.879685812698392e-06, 3.4918554072386694e-06, 3.164996400554153e-06, 2.8527898149833105e-06, 2.587400501896051e-06, 3.1878553425222555e-06, 2.944274586407039e-06, 2.7745893104701105e-06, 2.5110236536893166e-06, 2.4771544283086377e-06, 2.2298182410356404e-06, 2.0163479397438178e-06, 1.876105265704717e-06, 1.7545453328458577e-06, 1.78041998534851e-06, 1.7926244465808562e-06, 1.6134174260715495e-06, 1.804080258179522e-06, 1.8408564161488789e-06, 2.041881355742818e-06, 1.8438579048983096e-06, 1.664465509039595e-06, 1.8386050702951705e-06, 1.8902002897873997e-06, 1.934745595711963e-06, 1.7412964641705033e-06, 1.9217413834362788e-06, 1.7480402619085026e-06, 1.7688866939373201e-06, 1.6068596981007359e-06, 1.446279455681344e-06, 1.3017371492996618e-06, 1.1738991004992592e-06, 1.1157994227627078e-06, 1.0143909551025351e-06, 9.211907540313247e-07, 9.904277561420965e-07, 1.2990386667002883e-06, 1.2623857172280646e-06, 1.235267037901758e-06, 1.3024037255988869e-06, 1.21501849115912e-06, 1.2048634269284838e-06, 1.1040662228520281e-06, 1.1278251749859945e-06, 1.0151359261990543e-06, 9.136978812355932e-07, 1.1009248260087528e-06, 1.1888214152537097e-06, 1.0715023953941233e-06, 1.019851364460185e-06, 9.397629972935801e-07, 8.459603575878523e-07, 8.247978880150682e-07, 7.42495676414048e-07, 1.1695196971124938e-06], "accuracy_test": 0.8295, "start": "2016-02-05 09:47:36.085000", "learning_rate_per_epoch": [0.0026783961802721024, 0.0013391980901360512, 0.0008927987073548138, 0.0006695990450680256, 0.0005356792244128883, 0.0004463993536774069, 0.00038262802991084754, 0.0003347995225340128, 0.0002975995885208249, 0.00026783961220644414, 0.0002434905618429184, 0.00022319967683870345, 0.000206030483241193, 0.00019131401495542377, 0.00017855974147096276, 0.0001673997612670064, 0.0001575527130626142, 0.00014879979426041245, 0.00014096821541897953, 0.00013391980610322207, 0.00012754267663694918, 0.0001217452809214592, 0.00011645200720522553, 0.00011159983841935173, 0.00010713584924815223, 0.0001030152416205965, 9.919986041495577e-05, 9.565700747771189e-05, 9.23584884731099e-05, 8.927987073548138e-05, 8.639987936476246e-05, 8.36998806335032e-05, 8.116351818898693e-05, 7.87763565313071e-05, 7.652560452697799e-05, 7.439989713020623e-05, 7.238908438012004e-05, 7.048410770948976e-05, 6.867682532174513e-05, 6.695990305161104e-05, 6.532673432957381e-05, 6.377133831847459e-05, 6.22882871539332e-05, 6.08726404607296e-05, 5.951991624897346e-05, 5.8226003602612764e-05, 5.69871517654974e-05, 5.579991920967586e-05, 5.4661148169543594e-05, 5.356792462407611e-05, 5.25175710208714e-05, 5.150762081029825e-05, 5.053577842772938e-05, 4.959993020747788e-05, 4.869811164098792e-05, 4.782850373885594e-05, 4.6989407564979047e-05, 4.617924423655495e-05, 4.539654401014559e-05, 4.463993536774069e-05, 4.390813410282135e-05, 4.319993968238123e-05, 4.2514224332990125e-05, 4.18499403167516e-05, 4.1206094465451315e-05, 4.0581759094493464e-05, 3.997606108896434e-05, 3.938817826565355e-05, 3.8817335735075176e-05, 3.826280226348899e-05, 3.772389027290046e-05, 3.7199948565103114e-05, 3.669035868369974e-05, 3.619454219006002e-05, 3.5711949749384075e-05, 3.524205385474488e-05, 3.478436701698229e-05, 3.4338412660872564e-05, 3.390375059098005e-05, 3.347995152580552e-05, 3.3066618925658986e-05, 3.2663367164786905e-05, 3.2269832445308566e-05, 3.1885669159237295e-05, 3.151054261252284e-05, 3.11441435769666e-05, 3.078616282436997e-05, 3.04363202303648e-05, 3.0094339308561757e-05, 2.975995812448673e-05, 2.9432925657602027e-05, 2.9113001801306382e-05, 2.879995918192435e-05, 2.84935758827487e-05, 2.8193644538987428e-05, 2.789995960483793e-05, 2.7612331905402243e-05, 2.7330574084771797e-05, 2.7054507881985046e-05, 2.6783962312038057e-05, 2.651877366588451e-05, 2.62587855104357e-05, 2.6003846869571134e-05, 2.5753810405149125e-05, 2.5508536054985598e-05, 2.526788921386469e-05, 2.5031740733538754e-05, 2.479996510373894e-05, 2.457244227116462e-05, 2.434905582049396e-05, 2.4129694793373346e-05, 2.391425186942797e-05, 2.370262154727243e-05, 2.3494703782489523e-05, 2.3290402168640867e-05, 2.3089622118277475e-05, 2.2892274500918575e-05, 2.2698272005072795e-05, 2.2507530957227573e-05, 2.2319967683870345e-05, 2.2135505787446164e-05, 2.1954067051410675e-05, 2.1775578716187738e-05, 2.1599969841190614e-05, 2.1427169485832565e-05, 2.1257112166495062e-05, 2.1089734218548983e-05, 2.09249701583758e-05, 2.0762761778314598e-05, 2.0603047232725658e-05, 2.0445771951926872e-05, 2.0290879547246732e-05, 2.0138317267992534e-05, 1.998803054448217e-05, 1.9839972082991153e-05, 1.9694089132826775e-05, 1.9550338038243353e-05, 1.9408667867537588e-05, 1.9269036783953197e-05, 1.9131401131744497e-05, 1.89957172551658e-05, 1.886194513645023e-05, 1.8730042938841507e-05, 1.8599974282551557e-05, 1.84716973308241e-05, 1.834517934184987e-05, 1.8220382116851397e-05, 1.809727109503001e-05, 1.7975813534576446e-05, 1.7855974874692038e-05, 1.773772237356752e-05, 1.762102692737244e-05, 1.7505857613286935e-05, 1.7392183508491144e-05, 1.727997550915461e-05, 1.7169206330436282e-05, 1.7059848687495105e-05, 1.6951875295490026e-05, 1.6845258869579993e-05, 1.673997576290276e-05, 1.6636000509606674e-05, 1.6533309462829493e-05, 1.643187897570897e-05, 1.6331683582393453e-05, 1.6232705092988908e-05, 1.6134916222654283e-05, 1.6038300600484945e-05, 1.5942834579618648e-05, 1.5848498151171952e-05, 1.575527130626142e-05, 1.5663135854993016e-05, 1.55720717884833e-05, 1.5482059097848833e-05, 1.5393081412184983e-05, 1.5305120541597717e-05, 1.52181601151824e-05], "accuracy_train_first": 0.5082823529411765, "accuracy_train_last": 0.9775529411764706, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.5008, 0.404, 0.28759999999999997, 0.248, 0.22399999999999998, 0.2108, 0.1982666666666667, 0.1917333333333333, 0.1850666666666667, 0.1822666666666667, 0.17986666666666662, 0.17266666666666663, 0.16786666666666672, 0.16533333333333333, 0.16546666666666665, 0.16159999999999997, 0.1612, 0.15359999999999996, 0.15773333333333328, 0.1545333333333333, 0.15280000000000005, 0.15066666666666662, 0.15200000000000002, 0.14893333333333336, 0.15000000000000002, 0.1466666666666666, 0.1458666666666667, 0.1438666666666667, 0.14946666666666664, 0.14533333333333331, 0.14626666666666666, 0.14493333333333336, 0.14373333333333338, 0.14213333333333333, 0.14226666666666665, 0.14346666666666663, 0.1413333333333333, 0.14400000000000002, 0.14373333333333338, 0.1413333333333333, 0.14, 0.14159999999999995, 0.14239999999999997, 0.13906666666666667, 0.1393333333333333, 0.1418666666666667, 0.1412, 0.14146666666666663, 0.13759999999999994, 0.1393333333333333, 0.13973333333333338, 0.13880000000000003, 0.14039999999999997, 0.13866666666666672, 0.13826666666666665, 0.13866666666666672, 0.1392, 0.13666666666666671, 0.136, 0.1378666666666667, 0.1372, 0.13746666666666663, 0.13439999999999996, 0.13773333333333337, 0.13773333333333337, 0.13680000000000003, 0.13639999999999997, 0.13573333333333337, 0.136, 0.13639999999999997, 0.136, 0.13706666666666667, 0.13453333333333328, 0.1352, 0.13653333333333328, 0.1352, 0.1346666666666667, 0.13480000000000003, 0.136, 0.13293333333333335, 0.13506666666666667, 0.13506666666666667, 0.13280000000000003, 0.13413333333333333, 0.13373333333333337, 0.13306666666666667, 0.13319999999999999, 0.13173333333333337, 0.13413333333333333, 0.13360000000000005, 0.1338666666666667, 0.13346666666666662, 0.13413333333333333, 0.1333333333333333, 0.13373333333333337, 0.13160000000000005, 0.13360000000000005, 0.1353333333333333, 0.134, 0.13239999999999996, 0.13213333333333332, 0.13306666666666667, 0.13253333333333328, 0.1326666666666667, 0.13306666666666667, 0.1333333333333333, 0.1313333333333333, 0.134, 0.13346666666666662, 0.13, 0.13239999999999996, 0.13253333333333328, 0.13039999999999996, 0.13360000000000005, 0.13053333333333328, 0.13173333333333337, 0.13160000000000005, 0.1326666666666667, 0.1313333333333333, 0.13213333333333332, 0.1306666666666667, 0.13213333333333332, 0.13160000000000005, 0.13226666666666664, 0.13160000000000005, 0.12893333333333334, 0.13080000000000003, 0.13280000000000003, 0.13213333333333332, 0.1333333333333333, 0.132, 0.13226666666666664, 0.13280000000000003, 0.13119999999999998, 0.13346666666666662, 0.1306666666666667, 0.132, 0.13, 0.1333333333333333, 0.12986666666666669, 0.13146666666666662, 0.13146666666666662, 0.12973333333333337, 0.12986666666666669, 0.13293333333333335, 0.13146666666666662, 0.13346666666666662, 0.13213333333333332, 0.13319999999999999, 0.13146666666666662, 0.1318666666666667, 0.1318666666666667, 0.132, 0.1326666666666667, 0.13160000000000005, 0.13160000000000005, 0.13053333333333328, 0.1338666666666667, 0.13093333333333335, 0.13080000000000003, 0.13319999999999999, 0.13119999999999998, 0.13293333333333335, 0.13239999999999996, 0.13319999999999999, 0.13213333333333332, 0.13213333333333332, 0.1338666666666667, 0.13080000000000003, 0.13226666666666664, 0.13293333333333335, 0.13173333333333337, 0.13213333333333332, 0.1313333333333333, 0.13213333333333332, 0.12973333333333337], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.05156563099737992, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.0026783961986301978, "optimization": "adam", "nb_data_augmentation": 4, "learning_rate_decay_method": "lin", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 9.656555770259576e-05, "rotation_range": [0, 0], "momentum": 0.772023726570455}, "accuracy_valid_max": 0.8710666666666667, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8702666666666666, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.4992, 0.596, 0.7124, 0.752, 0.776, 0.7892, 0.8017333333333333, 0.8082666666666667, 0.8149333333333333, 0.8177333333333333, 0.8201333333333334, 0.8273333333333334, 0.8321333333333333, 0.8346666666666667, 0.8345333333333333, 0.8384, 0.8388, 0.8464, 0.8422666666666667, 0.8454666666666667, 0.8472, 0.8493333333333334, 0.848, 0.8510666666666666, 0.85, 0.8533333333333334, 0.8541333333333333, 0.8561333333333333, 0.8505333333333334, 0.8546666666666667, 0.8537333333333333, 0.8550666666666666, 0.8562666666666666, 0.8578666666666667, 0.8577333333333333, 0.8565333333333334, 0.8586666666666667, 0.856, 0.8562666666666666, 0.8586666666666667, 0.86, 0.8584, 0.8576, 0.8609333333333333, 0.8606666666666667, 0.8581333333333333, 0.8588, 0.8585333333333334, 0.8624, 0.8606666666666667, 0.8602666666666666, 0.8612, 0.8596, 0.8613333333333333, 0.8617333333333334, 0.8613333333333333, 0.8608, 0.8633333333333333, 0.864, 0.8621333333333333, 0.8628, 0.8625333333333334, 0.8656, 0.8622666666666666, 0.8622666666666666, 0.8632, 0.8636, 0.8642666666666666, 0.864, 0.8636, 0.864, 0.8629333333333333, 0.8654666666666667, 0.8648, 0.8634666666666667, 0.8648, 0.8653333333333333, 0.8652, 0.864, 0.8670666666666667, 0.8649333333333333, 0.8649333333333333, 0.8672, 0.8658666666666667, 0.8662666666666666, 0.8669333333333333, 0.8668, 0.8682666666666666, 0.8658666666666667, 0.8664, 0.8661333333333333, 0.8665333333333334, 0.8658666666666667, 0.8666666666666667, 0.8662666666666666, 0.8684, 0.8664, 0.8646666666666667, 0.866, 0.8676, 0.8678666666666667, 0.8669333333333333, 0.8674666666666667, 0.8673333333333333, 0.8669333333333333, 0.8666666666666667, 0.8686666666666667, 0.866, 0.8665333333333334, 0.87, 0.8676, 0.8674666666666667, 0.8696, 0.8664, 0.8694666666666667, 0.8682666666666666, 0.8684, 0.8673333333333333, 0.8686666666666667, 0.8678666666666667, 0.8693333333333333, 0.8678666666666667, 0.8684, 0.8677333333333334, 0.8684, 0.8710666666666667, 0.8692, 0.8672, 0.8678666666666667, 0.8666666666666667, 0.868, 0.8677333333333334, 0.8672, 0.8688, 0.8665333333333334, 0.8693333333333333, 0.868, 0.87, 0.8666666666666667, 0.8701333333333333, 0.8685333333333334, 0.8685333333333334, 0.8702666666666666, 0.8701333333333333, 0.8670666666666667, 0.8685333333333334, 0.8665333333333334, 0.8678666666666667, 0.8668, 0.8685333333333334, 0.8681333333333333, 0.8681333333333333, 0.868, 0.8673333333333333, 0.8684, 0.8684, 0.8694666666666667, 0.8661333333333333, 0.8690666666666667, 0.8692, 0.8668, 0.8688, 0.8670666666666667, 0.8676, 0.8668, 0.8678666666666667, 0.8678666666666667, 0.8661333333333333, 0.8692, 0.8677333333333334, 0.8670666666666667, 0.8682666666666666, 0.8678666666666667, 0.8686666666666667, 0.8678666666666667, 0.8702666666666666], "seed": 101905919, "model": "residualv3", "loss_std": [0.32309412956237793, 0.2565120756626129, 0.2525983154773712, 0.2415534108877182, 0.23719573020935059, 0.23107169568538666, 0.2258598804473877, 0.2222478836774826, 0.21674370765686035, 0.21170738339424133, 0.20641425251960754, 0.20389598608016968, 0.19877608120441437, 0.19655439257621765, 0.1935282051563263, 0.1884879171848297, 0.18539784848690033, 0.18527857959270477, 0.17906175553798676, 0.18046973645687103, 0.17522330582141876, 0.17380210757255554, 0.17218518257141113, 0.16958464682102203, 0.16716895997524261, 0.1645793616771698, 0.16413290798664093, 0.16078822314739227, 0.1609322726726532, 0.15811634063720703, 0.15606127679347992, 0.15248090028762817, 0.15196336805820465, 0.15265478193759918, 0.14973630011081696, 0.14726096391677856, 0.14711834490299225, 0.14402930438518524, 0.1434803456068039, 0.14203804731369019, 0.14167657494544983, 0.14152143895626068, 0.13928118348121643, 0.13643883168697357, 0.1363307237625122, 0.13389021158218384, 0.13288527727127075, 0.13174274563789368, 0.13082867860794067, 0.13103649020195007, 0.1315862536430359, 0.1287163943052292, 0.1267976015806198, 0.1247473880648613, 0.1263204663991928, 0.12423581629991531, 0.12445710599422455, 0.12147607654333115, 0.12107948958873749, 0.12080833315849304, 0.12000545114278793, 0.11791274696588516, 0.11806110292673111, 0.11698121577501297, 0.11584910750389099, 0.11627238988876343, 0.11563745886087418, 0.11322016268968582, 0.11442507058382034, 0.11156424134969711, 0.10973478853702545, 0.11283287405967712, 0.11117509007453918, 0.11001797765493393, 0.10892044007778168, 0.110896997153759, 0.10841244459152222, 0.10774385929107666, 0.10808464139699936, 0.10633233934640884, 0.10580603033304214, 0.1053759828209877, 0.10697000473737717, 0.10541357100009918, 0.10402792692184448, 0.10256361216306686, 0.10256776213645935, 0.10165590047836304, 0.10317903757095337, 0.1013275533914566, 0.10209956020116806, 0.10004397481679916, 0.09968680888414383, 0.09992341697216034, 0.0989607721567154, 0.10000339150428772, 0.09853982925415039, 0.09647100418806076, 0.09680169820785522, 0.09651188552379608, 0.09709548205137253, 0.09549622982740402, 0.09486320614814758, 0.09498246759176254, 0.09511076658964157, 0.09261345118284225, 0.09535347670316696, 0.09315440058708191, 0.09430323541164398, 0.09046374261379242, 0.09290466457605362, 0.09338147938251495, 0.09187252074480057, 0.09030250459909439, 0.08967164158821106, 0.09061030298471451, 0.09035651385784149, 0.08918549120426178, 0.08990102261304855, 0.09050295501947403, 0.09011155366897583, 0.08763018250465393, 0.08812480419874191, 0.08872009813785553, 0.08666318655014038, 0.08876214921474457, 0.08656757324934006, 0.08468496054410934, 0.08669383078813553, 0.08383157849311829, 0.08611617237329483, 0.08622194826602936, 0.08570805937051773, 0.08225248008966446, 0.08356338739395142, 0.0833023190498352, 0.08373833447694778, 0.08415696769952774, 0.08365476876497269, 0.08278098702430725, 0.08286214619874954, 0.08188054710626602, 0.0824316143989563, 0.08111152052879333, 0.08069304376840591, 0.08220721036195755, 0.07955065369606018, 0.08034020662307739, 0.08050195127725601, 0.08037295937538147, 0.07997047901153564, 0.07796765118837357, 0.08075061440467834, 0.07817770540714264, 0.08035046607255936, 0.07955844700336456, 0.0780596062541008, 0.07893695682287216, 0.07729990035295486, 0.07722228765487671, 0.07658721506595612, 0.07581273466348648, 0.07832957804203033, 0.07828043401241302, 0.0788201168179512, 0.07758387923240662, 0.07467111200094223, 0.07666847109794617, 0.07601027190685272, 0.07638787478208542, 0.07576402276754379, 0.076414093375206, 0.07472849637269974, 0.07647722959518433, 0.07238646596670151, 0.07639454305171967]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:46 2016", "state": "available"}], "summary": "bea35b8135844914416949200055b785"}