{"content": {"hp_model": {"f0": 16, "f1": 32, "f2": 32, "f3": 32, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.00961973558933438, 0.007989717113732503, 0.00782362828809395, 0.012129779916854357, 0.012091481243585942, 0.014299629478475606, 0.008979134460516153, 0.009192099491534591, 0.011872792807107565, 0.00782362828809395, 0.01058354481640175, 0.00782362828809395, 0.012091481243585942, 0.012091481243585942, 0.011553426154965095, 0.007606216074281426, 0.007606216074281426, 0.007606216074281426, 0.009981823877151148, 0.009981823877151148, 0.009981823877151148, 0.009981823877151148, 0.005125848273379712, 0.005125848273379712, 0.005125848273379712, 0.011553426154965095, 0.011553426154965095, 0.00782362828809395, 0.00782362828809395, 0.006831515662937604, 0.012091481243585942, 0.012091481243585942, 0.007606216074281426, 0.009981823877151148, 0.009981823877151148, 0.009981823877151148, 0.009981823877151148, 0.00782362828809395, 0.006831515662937604, 0.009981823877151148, 0.009981823877151148, 0.009981823877151148, 0.009981823877151148, 0.009981823877151148, 0.009981823877151148, 0.009981823877151148, 0.007606216074281426, 0.007606216074281426, 0.007606216074281426, 0.007606216074281426, 0.007606216074281426, 0.01058354481640175], "moving_avg_accuracy_train": [0.018281076965669985, 0.03283712134320782, 0.03955410855597083, 0.045590096452219446, 0.051001559219557485, 0.055712053272223366, 0.06313368937057319, 0.06681186338063658, 0.07021744294442785, 0.07319639799706885, 0.07587971059561778, 0.0782924388831398, 0.0804336674073858, 0.08236077307920721, 0.08410050340902181, 0.08564737112482874, 0.08703955206905499, 0.08829251491885862, 0.08943388003480775, 0.09046110863916197, 0.09138561438308077, 0.09221766955260768, 0.09306868155752596, 0.0938345923619524, 0.09452391208593619, 0.0950473285150779, 0.09551840330130544, 0.0959672623182587, 0.09637123543351662, 0.09672823232782646, 0.0970258815076038, 0.0972937657694034, 0.09752130724917218, 0.09773979313208996, 0.09793643042671596, 0.09811340399187936, 0.09827268020052642, 0.09844611152755757, 0.09859562081246331, 0.09870667533905197, 0.09880662441298177, 0.09889657857951858, 0.09897753732940172, 0.09905040020429653, 0.09911597679170188, 0.09917499572036668, 0.09921441420503914, 0.09924989084124435, 0.09928181981382903, 0.09931055588915524, 0.09933641835694884, 0.09940572891950977], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 276386510, "moving_var_accuracy_train": [0.003007779975222748, 0.00461390782898813, 0.004558578301037114, 0.004430618819886341, 0.00425111230143828, 0.004025699859276258, 0.004118856014735596, 0.0038287310896967888, 0.0035502397302149243, 0.0032750833160443307, 0.0030123764829536803, 0.0027635301547629925, 0.002528440875624096, 0.0023090204144949828, 0.002105358327629776, 0.0019163576924386505, 0.0017421654332279855, 0.001582078133032079, 0.0014355947486800215, 0.001301532061262451, 0.0011790712529710556, 0.0010673949699201782, 0.0009671734658207954, 0.0008757356934817503, 0.0007924385792704332, 0.000715660404168049, 0.0006460915668392179, 0.0005832956799091983, 0.0005264348604189393, 0.0004749383954199672, 0.0004282419111859696, 0.0003860635778668519, 0.000347923196205305, 0.0003135605013140838, 0.0002825524472134159, 0.00025457907927697415, 0.00022934949154504558, 0.0002066852482173031, 0.00018621790063203, 0.00016770710853970949, 0.00015102630604215336, 0.00013599650120663405, 0.0001224558399586144, 0.00011025803694959441, 9.927093585397654e-05, 8.937519137404556e-05, 8.045165658904585e-05, 7.241781825558919e-05, 6.518521156364309e-05, 5.867412226550517e-05, 5.281272984411802e-05, 4.757469244644883e-05], "duration": 17437.418995, "accuracy_train": [0.1828107696566999, 0.16384152074104835, 0.10000699347083795, 0.099913987518457, 0.09970472412559986, 0.09810649974621631, 0.12992841425572166, 0.09991542947120709, 0.10086765901854927, 0.10000699347083795, 0.10002952398255814, 0.10000699347083795, 0.09970472412559986, 0.09970472412559986, 0.09975807637735326, 0.09956918056709117, 0.09956918056709117, 0.09956918056709117, 0.09970616607834995, 0.09970616607834995, 0.09970616607834995, 0.09970616607834995, 0.10072778960179034, 0.10072778960179034, 0.10072778960179034, 0.09975807637735326, 0.09975807637735326, 0.10000699347083795, 0.10000699347083795, 0.09994120437661498, 0.09970472412559986, 0.09970472412559986, 0.09956918056709117, 0.09970616607834995, 0.09970616607834995, 0.09970616607834995, 0.09970616607834995, 0.10000699347083795, 0.09994120437661498, 0.09970616607834995, 0.09970616607834995, 0.09970616607834995, 0.09970616607834995, 0.09970616607834995, 0.09970616607834995, 0.09970616607834995, 0.09956918056709117, 0.09956918056709117, 0.09956918056709117, 0.09956918056709117, 0.09956918056709117, 0.10002952398255814], "end": "2016-01-29 15:37:41.222000", "learning_rate_per_epoch": [0.0008382222149521112, 0.0005927126039750874, 0.00048394783516414464, 0.0004191111074760556, 0.00037486437940970063, 0.00034220280940644443, 0.00031681821565143764, 0.0002963563019875437, 0.0002794074243865907, 0.00026506916037760675, 0.00025273350183852017, 0.00024197391758207232, 0.0002324810193385929, 0.00022402431932277977, 0.00021642804495058954, 0.0002095555537380278, 0.00020329875405877829, 0.0001975708728423342, 0.0001923013769555837, 0.00018743218970485032, 0.00018291508604306728, 0.00017870958254206926, 0.00017478142399340868, 0.00017110140470322222, 0.00016764445172157139, 0.00016438891179859638, 0.00016131594020407647, 0.00015840910782571882, 0.00015565396461170167, 0.00015303774853236973, 0.00015054915274959058, 0.00014817815099377185, 0.00014591576473321766, 0.00014375393220689148, 0.00014168542111292481, 0.00013970371219329536, 0.00013780288281850517, 0.00013597760698758066, 0.00013422298070508987, 0.00013253458018880337, 0.000130908316350542, 0.00012934049300383776, 0.00012782769044861197, 0.00012636675091926008, 0.00012495479313656688, 0.0001235891249962151, 0.00012226728722453117, 0.00012098695879103616, 0.00011974603694397956, 0.0001185425280709751, 0.00011737459135474637, 0.00011624050966929644], "accuracy_valid": [0.18084349115210843, 0.16242116905120482, 0.1009359704442771, 0.10417156908885541, 0.10404949877635541, 0.09805775837725904, 0.1362569418298193, 0.09929758094879518, 0.09349850574171686, 0.1009359704442771, 0.09927699077560241, 0.1009359704442771, 0.10404949877635541, 0.10404949877635541, 0.09792392225150602, 0.10242140436746988, 0.10242140436746988, 0.10242140436746988, 0.10330678181475904, 0.10330678181475904, 0.10330678181475904, 0.10330678181475904, 0.09562517648719879, 0.09562517648719879, 0.09562517648719879, 0.09792392225150602, 0.09792392225150602, 0.1009359704442771, 0.1009359704442771, 0.10097715079066265, 0.10404949877635541, 0.10404949877635541, 0.10242140436746988, 0.10330678181475904, 0.10330678181475904, 0.10330678181475904, 0.10330678181475904, 0.1009359704442771, 0.10097715079066265, 0.10330678181475904, 0.10330678181475904, 0.10330678181475904, 0.10330678181475904, 0.10330678181475904, 0.10330678181475904, 0.10330678181475904, 0.10242140436746988, 0.10242140436746988, 0.10242140436746988, 0.10242140436746988, 0.10242140436746988, 0.09927699077560241], "accuracy_test": 0.09968909438775511, "start": "2016-01-29 10:47:03.803000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0], "accuracy_train_last": 0.10002952398255814, "batch_size_eval": 1024, "accuracy_train_std": [0.014727308929538328, 0.011749623665823323, 0.01056600518277569, 0.007904303715872552, 0.007965379418821297, 0.008218113695986094, 0.010667853096258445, 0.00836892817383479, 0.010307294143909369, 0.01056600518277569, 0.010600264319074178, 0.01056600518277569, 0.007965379418821297, 0.007965379418821297, 0.010783764234938913, 0.0086341321859909, 0.0086341321859909, 0.0086341321859909, 0.008936686273527396, 0.008936686273527396, 0.008936686273527396, 0.008936686273527396, 0.009015486445453831, 0.009015486445453831, 0.009015486445453831, 0.010783764234938913, 0.010783764234938913, 0.01056600518277569, 0.01056600518277569, 0.009511601052955196, 0.007965379418821297, 0.007965379418821297, 0.0086341321859909, 0.008936686273527396, 0.008936686273527396, 0.008936686273527396, 0.008936686273527396, 0.01056600518277569, 0.009511601052955196, 0.008936686273527396, 0.008936686273527396, 0.008936686273527396, 0.008936686273527396, 0.008936686273527396, 0.008936686273527396, 0.008936686273527396, 0.0086341321859909, 0.0086341321859909, 0.0086341321859909, 0.0086341321859909, 0.0086341321859909, 0.010600264319074178], "accuracy_test_std": 0.007448442678108315, "error_valid": [0.8191565088478916, 0.8375788309487951, 0.8990640295557228, 0.8958284309111446, 0.8959505012236446, 0.901942241622741, 0.8637430581701807, 0.9007024190512049, 0.9065014942582832, 0.8990640295557228, 0.9007230092243976, 0.8990640295557228, 0.8959505012236446, 0.8959505012236446, 0.902076077748494, 0.8975785956325302, 0.8975785956325302, 0.8975785956325302, 0.896693218185241, 0.896693218185241, 0.896693218185241, 0.896693218185241, 0.9043748235128012, 0.9043748235128012, 0.9043748235128012, 0.902076077748494, 0.902076077748494, 0.8990640295557228, 0.8990640295557228, 0.8990228492093374, 0.8959505012236446, 0.8959505012236446, 0.8975785956325302, 0.896693218185241, 0.896693218185241, 0.896693218185241, 0.896693218185241, 0.8990640295557228, 0.8990228492093374, 0.896693218185241, 0.896693218185241, 0.896693218185241, 0.896693218185241, 0.896693218185241, 0.896693218185241, 0.896693218185241, 0.8975785956325302, 0.8975785956325302, 0.8975785956325302, 0.8975785956325302, 0.8975785956325302, 0.9007230092243976], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "momentum": 0.6611795946429893, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0008382222418261352, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "l2_decay": 9.14255072053836e-05, "optimization": "santa_sss", "nb_data_augmentation": 1, "learning_rate_decay_method": "sqrt", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.06252585608005934}, "accuracy_valid_max": 0.18084349115210843, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop', 'santa_sss'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.09927699077560241, "loss_train": [86855.4765625, 101585.1015625, 54823.6875, 99822.734375, 142137.65625, 138410.515625, 121964.4921875, 116375.328125, 125000.0625, 139317.6875, 149934.078125, 154000.4375, 153038.34375, 150515.046875, 150227.015625, 153170.421875, 157832.59375, 162360.015625, 165369.328125, 167613.71875, 169665.265625, 171189.515625, 172552.578125, 174136.9375, 176084.8125, 178201.78125, 180105.734375, 181751.421875, 183186.015625, 184660.09375, 186261.78125, 187796.15625, 189181.9375, 190680.828125, 192170.0625, 193392.375, 194551.15625, 195852.125, 197325.140625, 198815.96875, 200080.6875, 201130.015625, 202048.90625, 203283.75, 204829.0, 206530.640625, 207828.328125, 208802.59375, 209680.65625, 210385.96875, 211018.015625, 211760.578125], "accuracy_train_first": 0.1828107696566999, "model": "residualv3", "loss_std": [39765.0390625, 20316.478515625, 5157.91796875, 18861.998046875, 4931.62890625, 4809.45263671875, 3789.355712890625, 950.120849609375, 3935.047119140625, 3976.77587890625, 2113.9443359375, 381.7425537109375, 706.1685791015625, 533.0399169921875, 435.2508239746094, 1193.678466796875, 1432.50048828125, 1128.7388916015625, 696.8425903320312, 640.0707397460938, 551.8192138671875, 419.5242004394531, 393.4531555175781, 515.2811889648438, 638.2166748046875, 626.762451171875, 530.12890625, 491.0596008300781, 434.0762939453125, 467.9055480957031, 470.668701171875, 426.2572937011719, 451.6141662597656, 485.8830261230469, 439.8164978027344, 358.8177490234375, 330.48516845703125, 408.1311340332031, 456.3561096191406, 442.3782958984375, 404.73101806640625, 304.1761474609375, 314.933837890625, 437.1413269042969, 541.708984375, 445.5701599121094, 343.90765380859375, 277.1929626464844, 248.93310546875, 207.501708984375, 228.93568420410156, 307.79278564453125]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:21 2016", "state": "available"}], "summary": "43083618e932aed99f35deb9d5292c51"}