{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 64, "f3": 64, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.6832972764968872, 1.186369776725769, 0.9826570153236389, 0.883691132068634, 0.8166580200195312, 0.767987072467804, 0.724319577217102, 0.6891546845436096, 0.6610510945320129, 0.6311332583427429, 0.6049496531486511, 0.5803655982017517, 0.5553021430969238, 0.53457111120224, 0.5160606503486633, 0.4942913055419922, 0.4767054617404938, 0.4613242447376251, 0.4441326856613159, 0.4264354705810547, 0.4166537821292877, 0.40215346217155457, 0.3904077410697937, 0.3780905306339264, 0.3671381175518036, 0.355810284614563, 0.34909117221832275, 0.3395073711872101, 0.3340943157672882, 0.32759642601013184, 0.3185368776321411, 0.312874972820282, 0.3092852234840393, 0.30409786105155945, 0.299304336309433, 0.2942521572113037, 0.28812384605407715, 0.2867181599140167, 0.2859579622745514, 0.2792503833770752, 0.2786603271961212, 0.27570831775665283, 0.270395964384079, 0.269461452960968, 0.2677549421787262, 0.2631450593471527, 0.262876957654953, 0.26323404908180237, 0.26229938864707947, 0.2590773403644562, 0.2558717429637909, 0.25600922107696533, 0.2553933262825012, 0.2561153173446655, 0.25273916125297546, 0.25340938568115234, 0.2506820559501648, 0.2526613771915436, 0.25112926959991455, 0.24839934706687927, 0.25110575556755066, 0.24913252890110016, 0.24799473583698273, 0.2463091015815735, 0.24604082107543945, 0.24680696427822113, 0.2469577044248581, 0.24513916671276093, 0.24595101177692413, 0.24617069959640503, 0.24426507949829102, 0.24546754360198975, 0.24471381306648254, 0.24456465244293213, 0.24412421882152557, 0.24551750719547272, 0.24338093400001526, 0.24652795493602753, 0.24501703679561615, 0.24563893675804138, 0.24295851588249207, 0.2449052482843399, 0.24601610004901886, 0.24396385252475739, 0.24189502000808716, 0.2429923713207245, 0.24424417316913605, 0.24507591128349304, 0.24354498088359833, 0.24354401230812073, 0.2433965504169464, 0.24268057942390442, 0.24490217864513397, 0.24243351817131042, 0.2419767528772354, 0.24344265460968018, 0.24268431961536407, 0.24330361187458038, 0.24392202496528625, 0.24281227588653564, 0.245035782456398, 0.24344798922538757, 0.24319204688072205, 0.24250781536102295, 0.24198633432388306, 0.2413976490497589, 0.24452105164527893], "moving_avg_accuracy_train": [0.05663929119370615, 0.12349377941583607, 0.18704039486434104, 0.248040437834533, 0.3038746816456718, 0.356278841215047, 0.40561137188567037, 0.45030118494396565, 0.4916915665476219, 0.5304166217503256, 0.5656086792077681, 0.5984998007492006, 0.6282783772507387, 0.6561440142568848, 0.6819342947075807, 0.7057179302573561, 0.7275322481985363, 0.7479345423086384, 0.7667940446576934, 0.7840769497099658, 0.8000476937962782, 0.8147469203561114, 0.8279855969528369, 0.8404652007576916, 0.8520431471594049, 0.8625773393590698, 0.8723509729423119, 0.88125645306364, 0.8894039547037967, 0.8968576139180331, 0.9038681044584465, 0.9104171083698369, 0.9162204229400607, 0.9215759755842237, 0.9267122652997031, 0.9312582321817391, 0.9353658063196006, 0.9392510321948849, 0.9428174538981078, 0.946082892807162, 0.9491032761801003, 0.951819332115754, 0.9543032739387854, 0.9565156061402372, 0.9586438889013058, 0.9605151655588865, 0.9622504317756999, 0.9638284834613174, 0.9652324178878877, 0.9665959763194293, 0.9678185286101977, 0.9689769904409461, 0.9700057272934, 0.9709641064951231, 0.9718452129183314, 0.972631269301609, 0.9733713081787109, 0.9740325847240272, 0.9746347090612406, 0.9752487366266466, 0.9757874465914737, 0.9762560095181513, 0.976719496733095, 0.9771389964241727, 0.9775211964437617, 0.9778605261637727, 0.9782100646903449, 0.9784967836273643, 0.9787571558194913, 0.9789914547435868, 0.9792209610145678, 0.9794321309072509, 0.9796198226130375, 0.9798073823875403, 0.9799273580595929, 0.9801073797287166, 0.9802554843868897, 0.9803795500816448, 0.9805167858438291, 0.9806006623535768, 0.9806762233099873, 0.9807813584540716, 0.9808481143468519, 0.9809383855360593, 0.9810126541599173, 0.9810446547380655, 0.9810826837559994, 0.9811704603923964, 0.9812284969770493, 0.9812784047544274, 0.9813210326540769, 0.9813500611197046, 0.9813878485316359, 0.9814101954095078, 0.98144193334364, 0.9814774729307877, 0.9815094946080393, 0.9815359168711186, 0.981524855724566, 0.9815242012879067, 0.9814702059699318, 0.9814959788968404, 0.9815516905655727, 0.981560014437679, 0.9815349538392415, 0.9815146884006385, 0.981547638828524], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05616984539721385, 0.12193531450018821, 0.18381787256447663, 0.24324885003882715, 0.2970845566200348, 0.347866323567218, 0.3949422488629811, 0.43750898265514687, 0.4760356811046171, 0.5118480521413692, 0.5442817051350636, 0.574269567895277, 0.6007519790462614, 0.6253471030542859, 0.6480107055312367, 0.6680885059306733, 0.6866356300175758, 0.7034348164510591, 0.7185184926561038, 0.7324488346555537, 0.7449149592848778, 0.7561588855137695, 0.7662682711058414, 0.7755701196353175, 0.7843253488238943, 0.7923403619460229, 0.799702417148258, 0.8059498488615194, 0.8119021272472049, 0.817322271967891, 0.8223682121280296, 0.8268597006384947, 0.8308918922839825, 0.8347589754106295, 0.8383328884399732, 0.8417579592062922, 0.8446696244584793, 0.847411163989288, 0.8496191133847869, 0.8517223081739438, 0.8537941709182965, 0.8559600522074909, 0.8575665189841063, 0.858958363414762, 0.8604206019509213, 0.8615504226387358, 0.8626435919712477, 0.8637851062680989, 0.8646059791126746, 0.8655686092699312, 0.8661714221945946, 0.8669978040715207, 0.8676550690333446, 0.8679393727004168, 0.8685645454642605, 0.869215738696449, 0.8698974098380993, 0.8703756070131748, 0.8708314280419025, 0.8712294599365074, 0.8716629898464712, 0.8719178599130288, 0.8721828345580211, 0.8722839458687853, 0.8723515614946328, 0.872437859129055, 0.8725897986961947, 0.8727377218292107, 0.8728851186974944, 0.8730666040039499, 0.8731556690836001, 0.873172733481716, 0.8732155940284991, 0.873217547426854, 0.8732050394368042, 0.8732059892770093, 0.8732943523692631, 0.8733229920099723, 0.8732368453880414, 0.8732824132494631, 0.8733366608646523, 0.8734353413519823, 0.8734865031881696, 0.8735213713181478, 0.8734153867653992, 0.8735448747737237, 0.8735993493163061, 0.873548661137311, 0.8736393781372847, 0.873696609374761, 0.8735375094312607, 0.8735174193032702, 0.8736631771376269, 0.8736183132077497, 0.87365220736702, 0.8737559542978632, 0.873739463254372, 0.8737988930113897, 0.8737770785878862, 0.8737706821466428, 0.8738381675370237, 0.8737758045672069, 0.8737318849256217, 0.8738154570693547, 0.8737675721775547, 0.8738088954850252, 0.8736996020867485], "moving_var_accuracy_train": [0.02887208376232896, 0.06621057874508225, 0.09593307188521558, 0.11982881187798139, 0.13590309572783846, 0.1470285496166075, 0.15422898189625872, 0.15678069822730126, 0.15652110160823768, 0.15436566055148593, 0.15007542266912877, 0.14480431328849547, 0.1383047545257675, 0.13146272260501546, 0.12430269743604379, 0.11696337957212025, 0.1095498218200583, 0.10234112208264842, 0.09530813733406966, 0.08846561286407546, 0.08191463357770226, 0.0756677755730478, 0.0696783610380372, 0.06411218953436879, 0.05890741016686042, 0.05401539199786971, 0.049473568018858056, 0.04523997940269457, 0.041313417509212344, 0.037682089079428854, 0.034356202970041, 0.03130658774311958, 0.028479035108816365, 0.025889269095054342, 0.023537775433920965, 0.02136999022456198, 0.01938484068978804, 0.017582211441727044, 0.01593846457144131, 0.01444058593571606, 0.013078631783620152, 0.011837161243868532, 0.010708974822303523, 0.009682127063999398, 0.008754680645199013, 0.007910727667641972, 0.007146755240466702, 0.006454491940522355, 0.005826782033337105, 0.005260837454369447, 0.00474820541586547, 0.004285463178598631, 0.0038664415563431395, 0.0034880638169574847, 0.0031462445720229055, 0.0028371810765598377, 0.0025583918867604547, 0.00230648827810888, 0.002079102433755174, 0.0018745854590393625, 0.001689738788971262, 0.0015227408710204464, 0.0013724001675041492, 0.001236743970671063, 0.0011143842652987213, 0.0010039821406987942, 0.0009046835212629389, 0.0008149550388762549, 0.0007340696780945266, 0.0006611567741575649, 0.0005955151548975845, 0.0005363649739200082, 0.0004830455301157969, 0.00043505758512532117, 0.00039168137406974914, 0.00035280490687496116, 0.0003177218310954179, 0.0002860881786554117, 0.0002576488636796714, 0.00023194729473169148, 0.00020880395038172536, 0.00018802303593024752, 0.0001692608394802109, 0.00015240809552059803, 0.0001372169284249462, 0.0001235044519154679, 0.00011116702257976632, 0.00010011966296286438, 9.013801087300155e-05, 8.114662686188682e-05, 7.304831841615493e-05, 6.575107044088975e-05, 5.9188814393305e-05, 5.327442740053007e-05, 4.795605032864393e-05, 4.3171812856071146e-05, 3.886386006079009e-05, 3.498375727858723e-05, 3.148648269139603e-05, 2.83378382768425e-05, 2.553029389842712e-05, 2.2983242702437344e-05, 2.07128525424901e-05, 1.8642190869862693e-05, 1.678362408522285e-05, 1.5108957868716516e-05, 1.3607833658125444e-05], "duration": 127130.305554, "accuracy_train": [0.5663929119370616, 0.7251841734150055, 0.7589599339008859, 0.7970408245662606, 0.806382875945921, 0.8279162773394242, 0.8496041479212809, 0.8525095024686231, 0.8642050009805279, 0.8789421185746585, 0.8823371963247508, 0.894519894622093, 0.896285565764581, 0.9069347473122, 0.9140468187638427, 0.9197706502053341, 0.9238611096691584, 0.931555189299557, 0.9365295657991879, 0.9396230951804172, 0.9437843905730897, 0.9470399593946106, 0.9471336863233666, 0.9527816350013842, 0.9562446647748246, 0.9573850691560539, 0.9603136751914912, 0.9614057741555924, 0.9627314694652085, 0.9639405468461609, 0.9669625193221669, 0.9693581435723514, 0.9684502540720746, 0.9697759493816908, 0.972938872739018, 0.9721719341200628, 0.9723339735603543, 0.9742180650724437, 0.9749152492271133, 0.975471842988649, 0.9762867265365448, 0.9762638355366371, 0.9766587503460686, 0.9764265959533037, 0.9777984337509228, 0.9773566554771133, 0.977867827727021, 0.9780309486318751, 0.977867827727021, 0.9788680022033037, 0.9788214992271133, 0.9794031469176817, 0.9792643589654854, 0.9795895193106312, 0.9797751707272055, 0.9797057767511074, 0.9800316580726283, 0.9799840736318751, 0.9800538280961609, 0.9807749847153008, 0.9806358362749169, 0.9804730758582503, 0.9808908816675894, 0.9809144936438722, 0.9809609966200628, 0.9809144936438722, 0.9813559114294942, 0.9810772540605389, 0.9811005055486341, 0.9811001450604466, 0.981286517453396, 0.981332659941399, 0.9813090479651162, 0.9814954203580657, 0.9810071391080657, 0.9817275747508305, 0.9815884263104466, 0.9814961413344407, 0.9817519077034883, 0.9813555509413067, 0.9813562719176817, 0.9817275747508305, 0.9814489173818751, 0.9817508262389257, 0.98168107177464, 0.981332659941399, 0.9814249449174051, 0.9819604501199704, 0.9817508262389257, 0.9817275747508305, 0.9817046837509228, 0.9816113173103543, 0.981727935239018, 0.9816113173103543, 0.9817275747508305, 0.9817973292151162, 0.9817976897033037, 0.9817737172388336, 0.9814253054055924, 0.9815183113579733, 0.980984248108158, 0.981727935239018, 0.9820530955841639, 0.9816349292866371, 0.9813094084533037, 0.9813322994532114, 0.9818441926794942], "end": "2016-02-05 00:19:19.566000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0], "moving_var_accuracy_valid": [0.028395463787522158, 0.06448178974577845, 0.09249866970442083, 0.11503717248598958, 0.12961800496527157, 0.13986529515724672, 0.1458240503235925, 0.1475489867228312, 0.1461528464912958, 0.14308029511563225, 0.1382397422227075, 0.13250921521676534, 0.12557015659841683, 0.11845742206330606, 0.11123442975207477, 0.10373904939678383, 0.0964611067641601, 0.08935491007118648, 0.08246707465479552, 0.0759668570433107, 0.06976880970844421, 0.06392976163096661, 0.058456582561312656, 0.05338964377976924, 0.04874056574509286, 0.04444467308871463, 0.04048800449104997, 0.036790477669051774, 0.03343029646397288, 0.030351668536714227, 0.027545655291940103, 0.024972650984102854, 0.02262171301088605, 0.02049413069697302, 0.018559673316347534, 0.016809285972501413, 0.015204657526118413, 0.013751836124497452, 0.012420527876845463, 0.011218285944051146, 0.010135090886728959, 0.009163801173886005, 0.008270647676036726, 0.0074610179867053775, 0.006734159461864505, 0.006072231968757577, 0.005475763944587721, 0.004939915044138188, 0.004451988029767025, 0.0040151291381672624, 0.003616886675149809, 0.003261344170693435, 0.0029390977286944627, 0.0026459154130010127, 0.002384841440562781, 0.002150173770137335, 0.0019393384730318308, 0.0017474626785729005, 0.0015745863660076838, 0.0014185535939090206, 0.001278389768163617, 0.0011511354201046995, 0.0010366537821566288, 0.0009330804154154459, 0.0008398135207296299, 0.0007558991941920288, 0.0006805170454613893, 0.0006126622721947819, 0.0005515915775063224, 0.000496728852003823, 0.0004471273600991585, 0.00040241724483239017, 0.00036219205358738616, 0.00032597288257053375, 0.0002933770023618162, 0.0002640393102454023, 0.00023770565154551614, 0.0002139424684521441, 0.00019261501277116074, 0.00017337219936399564, 0.00015606146466137956, 0.0001405429587424587, 0.00012651222066955135, 0.00011387194068098983, 0.00010258584114168255, 9.2478161326213e-05, 8.325705247569781e-05, 7.495447085153657e-05, 6.7533089933141e-05, 6.080925967071458e-05, 5.4956148831839004e-05, 4.946416646783919e-05, 4.4708957937542494e-05, 4.025617709362444e-05, 3.624089871055571e-05, 3.2713679670434554e-05, 2.9444759294029938e-05, 2.6532070428799497e-05, 2.388314620757463e-05, 2.1495199816962394e-05, 1.9386668336499923e-05, 1.748300376288931e-05, 1.5752063800853094e-05, 1.4239716149640968e-05, 1.283638120044109e-05, 1.1568111622059643e-05, 1.0518805882015319e-05], "accuracy_test": 0.8556042729591837, "start": "2016-02-03 13:00:29.260000", "learning_rate_per_epoch": [0.006845185533165932, 0.006265230476856232, 0.005734411999583244, 0.005248566623777151, 0.0048038843087852, 0.004396877717226744, 0.004024354275316, 0.0036833928897976875, 0.003371319267898798, 0.003085685893893242, 0.0028242527041584253, 0.0025849693920463324, 0.002365959109738469, 0.0021655044984072447, 0.0019820332527160645, 0.0018141064792871475, 0.0016604071715846658, 0.0015197299653664231, 0.0013909715926274657, 0.0012731222668662667, 0.0011652576504275203, 0.00106653175316751, 0.000976170354988426, 0.0008934648358263075, 0.0008177664713002741, 0.0007484816014766693, 0.0006850668578408659, 0.0006270249141380191, 0.0005739005282521248, 0.0005252771079540253, 0.0004807732766494155, 0.00044003999209962785, 0.00040275781066156924, 0.0003686343552544713, 0.0003374019870534539, 0.00030881576822139323, 0.000282651511952281, 0.0002587040071375668, 0.00023678543220739812, 0.00021672389993909746, 0.00019836207502521574, 0.00018155595171265304, 0.0001661737187532708, 0.00015209472621791065, 0.00013920858327765018, 0.00012741421232931316, 0.00011661910684779286, 0.00010673861106624827, 9.769523603608832e-05, 8.941805572248995e-05, 8.184215403161943e-05, 7.490811549359933e-05, 6.856155960122123e-05, 6.275271880440414e-05, 5.743602741858922e-05, 5.256978693068959e-05, 4.811583858099766e-05, 4.4039246859028935e-05, 4.03080448450055e-05, 3.6892964999424294e-05, 3.376722816028632e-05, 3.090631798841059e-05, 2.828779543051496e-05, 2.58911259152228e-05, 2.3697513825027272e-05, 2.1689753339160234e-05, 1.9852099285344593e-05, 1.8170139810536057e-05, 1.663068360358011e-05, 1.5221657122310717e-05, 1.3932010006101336e-05, 1.2751627764373552e-05, 1.1671252650558017e-05, 1.0682411812013015e-05, 9.777349987416528e-06, 8.948968570621219e-06, 8.190771950467024e-06, 7.496812941099051e-06, 6.8616491262218915e-06, 6.280299203353934e-06, 5.748203875555191e-06, 5.261190381133929e-06, 4.815438842342701e-06, 4.407453161547892e-06, 4.034033736388665e-06, 3.692252221298986e-06, 3.379428108019056e-06, 3.093107807217166e-06, 2.831045776474639e-06, 2.5911867851391435e-06, 2.371649770793738e-06, 2.1707128325942904e-06, 1.9868002709699795e-06, 1.8184696273237932e-06, 1.6644006564092706e-06, 1.5233850945151062e-06, 1.3943171097707818e-06, 1.2761843208863866e-06, 1.168060293821327e-06, 1.0690969247661997e-06, 9.78518187366717e-07, 8.956137094173755e-07, 8.197332590498263e-07, 7.502817425120156e-07, 6.867144861644192e-07, 6.285329163802089e-07, 5.75280751036189e-07], "accuracy_train_first": 0.5663929119370616, "accuracy_train_last": 0.9818441926794942, "batch_size_eval": 1024, "accuracy_train_std": [0.011611141672488945, 0.016453130713520052, 0.01789527149037682, 0.018116554215564552, 0.018961574087583855, 0.0159052644782157, 0.015188249827311423, 0.017479392045011505, 0.015156574155886494, 0.017026843942691466, 0.01643726670262638, 0.014787467111106322, 0.017590149817372263, 0.01629141980309017, 0.016533754437076578, 0.015897356763041284, 0.015247858129267983, 0.015202219058574766, 0.012971687704888919, 0.013141300557801957, 0.013486602061322253, 0.011669499045317784, 0.01137975524610137, 0.011748004410239465, 0.010710735645363244, 0.01041428262111092, 0.009230145611419032, 0.009104407420563593, 0.009685649399706606, 0.008632737732501485, 0.006909074312851429, 0.0073782069060363675, 0.0072907560364638795, 0.0075126566844537475, 0.006490016844091352, 0.006853760524193686, 0.006224363629345041, 0.005609215765777002, 0.005998707919651837, 0.005392935252672978, 0.005025682764290562, 0.005039199352155472, 0.005112896366020258, 0.004384057999525658, 0.004317623188920767, 0.00514433779761441, 0.005142496248130485, 0.004568816455378687, 0.003747999672992896, 0.004143685319341285, 0.0041199118149410005, 0.004035873738149367, 0.004092859356347711, 0.004353001934733119, 0.004009973361588025, 0.00401491912767526, 0.004043937355331947, 0.0038614622905379244, 0.004105884084852991, 0.00377083707742493, 0.003941885258335464, 0.0036056234493272864, 0.0039009458985041277, 0.0035709820342176304, 0.00416963293425856, 0.003774989239367906, 0.004058380738174061, 0.003995446916575557, 0.003561983183506848, 0.003798585400107057, 0.0038738405024064193, 0.0038125714425142196, 0.003910551483350792, 0.0038524103770566096, 0.003941717304890269, 0.0035042060262732043, 0.003820475053513994, 0.0036417008437265672, 0.0038032670525955273, 0.003917695349650241, 0.003855513216189221, 0.003920146443338342, 0.0039631315530214576, 0.003932863349711606, 0.003911625180728765, 0.0037766681914299656, 0.00410947504475718, 0.00398117765220203, 0.003915504429757009, 0.003844109561693071, 0.0040088122120447885, 0.0035852230720893395, 0.003918427071287846, 0.003998415411381932, 0.004023056458162931, 0.003899970729508864, 0.0037132787442127105, 0.003847711278483998, 0.003961892436249199, 0.003961270393064556, 0.003951455975775375, 0.00398165975474394, 0.0037278787813219056, 0.0038421620114504245, 0.003718335544526975, 0.0037117208109821967, 0.0037268944868475663], "accuracy_test_std": 0.00907804768706985, "error_valid": [0.4383015460278614, 0.28617546357304224, 0.2592391048569277, 0.2218723526920181, 0.21839408414909633, 0.19509777390813254, 0.18137442347515065, 0.17939041321536142, 0.17722403285015065, 0.16584060852786142, 0.16381541792168675, 0.15583966726280118, 0.16090632059487953, 0.15329678087349397, 0.14801687217620485, 0.15121129047439763, 0.14644025320030118, 0.1453725056475903, 0.14572842149849397, 0.14217808734939763, 0.14288991905120485, 0.14264577842620485, 0.14274725856551207, 0.14071324359939763, 0.13687758847891573, 0.1355245199548193, 0.1340390860316265, 0.1378232657191265, 0.1345273672816265, 0.13389642554593373, 0.13221832643072284, 0.1327169027673193, 0.1328183829066265, 0.13043727644954817, 0.12950189429593373, 0.12741640389683728, 0.12912538827183728, 0.12791498023343373, 0.13050934205572284, 0.1293489387236446, 0.12755906438253017, 0.12454701618975905, 0.1279752800263554, 0.12851503670933728, 0.1264192512236446, 0.12828119117093373, 0.1275178840361446, 0.12594126506024095, 0.1280061652861446, 0.12576771931475905, 0.12840326148343373, 0.1255647590361446, 0.12642954631024095, 0.12950189429593373, 0.1258088996611446, 0.12492352221385539, 0.12396754988704817, 0.1253206184111446, 0.12506618269954817, 0.12518825301204817, 0.12443524096385539, 0.12578830948795183, 0.12543239363704817, 0.12680605233433728, 0.12703989787274095, 0.1267854621611446, 0.12604274519954817, 0.1259309699736446, 0.12578830948795183, 0.12530002823795183, 0.12604274519954817, 0.12667368693524095, 0.12639866105045183, 0.12676487198795183, 0.1269075324736446, 0.1267854621611446, 0.12591037980045183, 0.1264192512236446, 0.12753847420933728, 0.12630747599774095, 0.1261751105986446, 0.12567653426204817, 0.1260530402861446, 0.12616481551204817, 0.12753847420933728, 0.1252897331513554, 0.12591037980045183, 0.1269075324736446, 0.12554416886295183, 0.12578830948795183, 0.12789439006024095, 0.1266633918486446, 0.12502500235316272, 0.1267854621611446, 0.12604274519954817, 0.12531032332454817, 0.12640895613704817, 0.12566623917545183, 0.1264192512236446, 0.12628688582454817, 0.12555446394954817, 0.1267854621611446, 0.1266633918486446, 0.12543239363704817, 0.1266633918486446, 0.12581919474774095, 0.12728403849774095], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.08472450033919032, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.007478825082067097, "optimization": "adam", "nb_data_augmentation": 1, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 5.045856052208937e-06, "rotation_range": [0, 0], "momentum": 0.7074623193160335}, "accuracy_valid_max": 0.8760324501129518, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            print(X_train.min(), X_train.max())\n            print(X_valid.min(), X_valid.max())\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.872715961502259, "accuracy_valid_std": [0.01078310858055686, 0.011690703136742314, 0.022743620405730233, 0.011930756460217969, 0.01954298991392538, 0.014004248721409757, 0.015362166144627667, 0.012937602799177557, 0.013882322132075351, 0.017094855573038185, 0.010420050929339807, 0.00706313058411556, 0.014535047718203032, 0.009358628374736864, 0.012041559389684316, 0.011309256840772178, 0.011532415901453997, 0.015216649451431256, 0.013016241338786783, 0.012949907810762855, 0.010263552986765869, 0.01415357739014635, 0.008974975031224729, 0.014480396742497782, 0.01024878991619786, 0.00861201070047103, 0.007537093438493502, 0.006744114065266107, 0.005264500529412901, 0.008841214915987999, 0.009056478242444944, 0.011255796837595077, 0.009637580098484226, 0.008466983325427188, 0.011706682554561317, 0.009509299465926196, 0.00888867465670784, 0.00995520392463388, 0.0107116030251343, 0.008241317967512395, 0.009397587500717012, 0.00754655859236719, 0.00817157423087222, 0.007015725037232321, 0.008311599702051234, 0.007621939407928784, 0.0074550726574643756, 0.006888270724934035, 0.006015938670134079, 0.008056736202872233, 0.010239262358416714, 0.008901790293651794, 0.007044750595153245, 0.0077329681755690695, 0.007948010966182502, 0.007637782453647631, 0.005792222002586965, 0.007296025173635539, 0.008339048545946125, 0.00773645391320902, 0.0074591173138045365, 0.007510373063286456, 0.007864283902702563, 0.007446679319163239, 0.007560878435964682, 0.006316241403686385, 0.007211512413646463, 0.006244791805082242, 0.008091082100411425, 0.007337416229616856, 0.007145084812356728, 0.006800608889924643, 0.007067169391899354, 0.007211450175371397, 0.007977693039928348, 0.007442587796676886, 0.0069090147242104995, 0.0075605397064005975, 0.007785605748681516, 0.008528282032189487, 0.007166439013421356, 0.007113998335202888, 0.00692346381747004, 0.006147271491386104, 0.006627696156040444, 0.007916335520643736, 0.00840372941336806, 0.00683490066666007, 0.007404300575632708, 0.006828655929725462, 0.007760305335257422, 0.007478791686331176, 0.007824169469005743, 0.007771673132111034, 0.00804003084475177, 0.007247074659433009, 0.007190557551051654, 0.007223054550967203, 0.007465336507984799, 0.0073525341269559535, 0.007411583217094936, 0.007313327866192737, 0.0077910651819611655, 0.008248990505446549, 0.007897444315934017, 0.007818812133446205, 0.006789525305440758], "accuracy_valid": [0.5616984539721386, 0.7138245364269578, 0.7407608951430723, 0.7781276473079819, 0.7816059158509037, 0.8049022260918675, 0.8186255765248494, 0.8206095867846386, 0.8227759671498494, 0.8341593914721386, 0.8361845820783133, 0.8441603327371988, 0.8390936794051205, 0.846703219126506, 0.8519831278237951, 0.8487887095256024, 0.8535597467996988, 0.8546274943524097, 0.854271578501506, 0.8578219126506024, 0.8571100809487951, 0.8573542215737951, 0.8572527414344879, 0.8592867564006024, 0.8631224115210843, 0.8644754800451807, 0.8659609139683735, 0.8621767342808735, 0.8654726327183735, 0.8661035744540663, 0.8677816735692772, 0.8672830972326807, 0.8671816170933735, 0.8695627235504518, 0.8704981057040663, 0.8725835961031627, 0.8708746117281627, 0.8720850197665663, 0.8694906579442772, 0.8706510612763554, 0.8724409356174698, 0.875452983810241, 0.8720247199736446, 0.8714849632906627, 0.8735807487763554, 0.8717188088290663, 0.8724821159638554, 0.874058734939759, 0.8719938347138554, 0.874232280685241, 0.8715967385165663, 0.8744352409638554, 0.873570453689759, 0.8704981057040663, 0.8741911003388554, 0.8750764777861446, 0.8760324501129518, 0.8746793815888554, 0.8749338173004518, 0.8748117469879518, 0.8755647590361446, 0.8742116905120482, 0.8745676063629518, 0.8731939476656627, 0.872960102127259, 0.8732145378388554, 0.8739572548004518, 0.8740690300263554, 0.8742116905120482, 0.8746999717620482, 0.8739572548004518, 0.873326313064759, 0.8736013389495482, 0.8732351280120482, 0.8730924675263554, 0.8732145378388554, 0.8740896201995482, 0.8735807487763554, 0.8724615257906627, 0.873692524002259, 0.8738248894013554, 0.8743234657379518, 0.8739469597138554, 0.8738351844879518, 0.8724615257906627, 0.8747102668486446, 0.8740896201995482, 0.8730924675263554, 0.8744558311370482, 0.8742116905120482, 0.872105609939759, 0.8733366081513554, 0.8749749976468373, 0.8732145378388554, 0.8739572548004518, 0.8746896766754518, 0.8735910438629518, 0.8743337608245482, 0.8735807487763554, 0.8737131141754518, 0.8744455360504518, 0.8732145378388554, 0.8733366081513554, 0.8745676063629518, 0.8733366081513554, 0.874180805252259, 0.872715961502259], "seed": 297121007, "model": "residualv4", "loss_std": [0.3248613774776459, 0.2763066291809082, 0.2634824812412262, 0.25537487864494324, 0.24874070286750793, 0.24440814554691315, 0.23498407006263733, 0.22989971935749054, 0.22698113322257996, 0.22159592807292938, 0.2129373997449875, 0.20857982337474823, 0.2015855610370636, 0.1958553045988083, 0.19056802988052368, 0.18594534695148468, 0.18037976324558258, 0.1773134171962738, 0.17284564673900604, 0.1631256341934204, 0.16377346217632294, 0.15457533299922943, 0.1494387686252594, 0.1470358669757843, 0.14424873888492584, 0.13698235154151917, 0.13574717938899994, 0.13120365142822266, 0.12969060242176056, 0.12861062586307526, 0.1267760694026947, 0.12410115450620651, 0.12172732502222061, 0.12030693143606186, 0.11765234172344208, 0.11617621779441833, 0.11433868855237961, 0.11281032860279083, 0.11694171279668808, 0.11154463142156601, 0.11068172752857208, 0.10920754820108414, 0.10780228674411774, 0.10865674912929535, 0.10711299628019333, 0.10654611140489578, 0.10519431531429291, 0.10468754172325134, 0.10418830066919327, 0.10542349517345428, 0.09975963085889816, 0.1035124734044075, 0.10184509307146072, 0.10188598930835724, 0.10286226868629456, 0.10042404383420944, 0.09856148064136505, 0.097868911921978, 0.09678735584020615, 0.10085185617208481, 0.09927389025688171, 0.09973973035812378, 0.09857159107923508, 0.09618200361728668, 0.09510888159275055, 0.10081227868795395, 0.09825672209262848, 0.09508369117975235, 0.09757736325263977, 0.10036318004131317, 0.09703721851110458, 0.09621631354093552, 0.09480972588062286, 0.0981886014342308, 0.09840307384729385, 0.09787264466285706, 0.09960818290710449, 0.09813456982374191, 0.09875404834747314, 0.09771225601434708, 0.09544273465871811, 0.0986863374710083, 0.09935938566923141, 0.09510353207588196, 0.09665878117084503, 0.09606446325778961, 0.0968443900346756, 0.09894390404224396, 0.09723402559757233, 0.09791779518127441, 0.09484443813562393, 0.09750634431838989, 0.0960579365491867, 0.09625952690839767, 0.09604886174201965, 0.0955684706568718, 0.09634258598089218, 0.09740295261144638, 0.09808498620986938, 0.09745103120803833, 0.0984029620885849, 0.09806375950574875, 0.09625804424285889, 0.0973244309425354, 0.0957176685333252, 0.09447544068098068, 0.09766310453414917]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:39 2016", "state": "available"}], "summary": "bb2a16f3a289a37f1827ca4d2ddfe788"}