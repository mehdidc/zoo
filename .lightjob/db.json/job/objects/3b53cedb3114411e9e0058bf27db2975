{"content": {"hp_model": {"f0": 32, "f1": 16, "f2": 16, "f3": 32, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.01463299374298434, 0.011972371102568824, 0.01053295937654437, 0.011314270919269216, 0.020193490197960667, 0.020581607527337075, 0.012987129971330976, 0.011594644832786397, 0.023096959713776802, 0.01642114516737932, 0.015164407733932232, 0.008901683377860767, 0.010717649948544947, 0.01081452142595353, 0.012311778134035027, 0.01669488029406719, 0.009125838401869694, 0.015344693274176003, 0.009467994844170222, 0.012091207182036608, 0.013010953086750245, 0.010118482679365659, 0.020244836528336002, 0.012251799587382615, 0.012845655987473661, 0.0115030201902351, 0.012897651184576902, 0.007529109145811659, 0.010475116056762582, 0.006477360542810524, 0.015075643258294703, 0.016854620656370965, 0.019997826752382705, 0.016250704064465802, 0.011897397905154204, 0.017757804273173736, 0.02061142090063498, 0.013844632945379957, 0.012089800998316266, 0.008797128599077698, 0.01138486797507965, 0.019500160807403157, 0.01584762173495845, 0.013917231385030726, 0.015834088737039845, 0.016016527150649825, 0.022474676772372672, 0.015083437528836466, 0.014053289671364617, 0.006468673665221595, 0.007785077168436012, 0.01312224620999764, 0.007512110118128084, 0.011927183333286413, 0.0151897383176323, 0.016195201132801013, 0.021308176452704126, 0.013496566687151287, 0.011654476044483957, 0.009992366605150117, 0.017906136606025073, 0.012292983046638808, 0.01420496207797301, 0.012691063089174878, 0.01687985833606339, 0.017273636371728966, 0.02367475985434933, 0.0113417686305965, 0.018115727696704862, 0.01673925588213154, 0.016710230067483994, 0.018653316345042473, 0.010081168470565836, 0.011708573054962694, 0.021790968638015922, 0.021054692692926518, 0.014460087481296395, 0.015079803572708779, 0.02290806857162021, 0.015662094860717634, 0.010376866048207487, 0.013720383676651637, 0.018859750641040146, 0.021082802909965666, 0.014168425527225068, 0.01656239742285037, 0.022767258886211852, 0.019908772772663275, 0.016599099293104647, 0.015009073796626766, 0.01549058013849921, 0.010327763448430382, 0.012769099202871358, 0.008932747567875612, 0.014559641773404764, 0.015582106695908872, 0.01236828478728972, 0.018221537567642384, 0.017454835772017046, 0.013956520877575498, 0.010076301885240896, 0.015763273279788905, 0.014230735321781696, 0.012297188404387125, 0.012824861170218228, 0.012041802248296051, 0.023130067022196363, 0.013116794151942801, 0.007698007551348402, 0.0226569297483444, 0.01294562810174634, 0.018745791963043382, 0.014418761643643762, 0.030191712111759916, 0.013084392335841098, 0.014723459691319718, 0.01347589781890929, 0.015078403181240277], "moving_avg_accuracy_train": [0.02981103930186415, 0.07038186513704318, 0.11726038278077702, 0.16871496422515225, 0.21625580356421875, 0.26405485882633695, 0.31083276482031824, 0.3526098287256526, 0.39344739755574515, 0.4299805006100174, 0.46604520649562886, 0.4957069727023783, 0.5259063813003113, 0.5543340934609778, 0.5737562905713677, 0.5969176339037197, 0.6186276180158855, 0.6347287540432929, 0.6478874662001024, 0.6674229988921077, 0.6834494177125222, 0.6943629048760707, 0.7076466131195452, 0.7193836388923084, 0.7289847109688399, 0.7407173667291911, 0.7503630815778205, 0.7583610277285933, 0.7680395723117693, 0.7772524585306662, 0.7842049867063001, 0.7912689805548193, 0.7950577542186065, 0.798571633333706, 0.7992751625125631, 0.8023142910102917, 0.8084230091903164, 0.8133954800678425, 0.8188306658765806, 0.82491745959254, 0.82515315644544, 0.8291218589175904, 0.8316130376783785, 0.8353939505379862, 0.8377226254592706, 0.8416041111253221, 0.8448881848319114, 0.8487064453273563, 0.8456521457616287, 0.8490569717331772, 0.8524537032408764, 0.8530627764383835, 0.8529394068960124, 0.8555504746850933, 0.8574516098773906, 0.8583395649207054, 0.8588995585716767, 0.8611819672574677, 0.8629221678877563, 0.8663901759859316, 0.8673421996790973, 0.8704822810850801, 0.8721062524159409, 0.875223260468459, 0.8734253138051495, 0.8746827580556331, 0.8702702757278291, 0.8734289392253212, 0.8763647062766262, 0.8767516825216565, 0.8794923950719087, 0.8784018470791143, 0.879689627026057, 0.8824134901759337, 0.8841602666774433, 0.8840026711074288, 0.8845304779515586, 0.8857213615540587, 0.8855542490178389, 0.8872147421208537, 0.883850417975675, 0.8858557163924394, 0.8877813927056225, 0.8899608578612784, 0.890339094357358, 0.8899310616288943, 0.890700685745859, 0.8922347629296249, 0.8916071166535045, 0.8934621020857915, 0.8929768249071588, 0.8924982948654554, 0.8931133580111081, 0.8939041881672232, 0.8922818103423337, 0.8929765785628991, 0.8940181076471316, 0.8928608131361099, 0.8946835430189737, 0.8952150481266832, 0.8925249819214346, 0.8876834784748153, 0.8884312509381034, 0.8891392675824805, 0.891471479995744, 0.8916150570676905, 0.8928788048562148, 0.8947207340039913, 0.8959529319560285, 0.8964505401712322, 0.898258599618487, 0.8986719812471698, 0.900325037511757, 0.8991301071559763, 0.9014720978534924, 0.9006480210277223, 0.9019898294131377, 0.9026206758599744], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 850649951, "moving_var_accuracy_train": [0.007998282578315603, 0.02201238150101992, 0.039589502099182716, 0.059458717453807035, 0.07385402835399277, 0.08703137267415273, 0.09802178780937322, 0.1039275166453894, 0.10854412823242338, 0.10970172397814776, 0.11043751867587387, 0.10731215017882124, 0.10478897367792335, 0.10158328967833839, 0.09481995637585808, 0.09016599116290404, 0.08539130273796808, 0.07918539169652895, 0.07282521787750795, 0.06897742942780082, 0.06439130138688677, 0.05902410906681853, 0.05470981030241645, 0.050478649238089354, 0.046260409579449185, 0.04287326552222238, 0.03942329730446977, 0.036056671857698744, 0.03329407269916562, 0.030728560881590126, 0.028090743625727974, 0.02573076934498242, 0.023286885663362844, 0.021069323214946353, 0.01896684547320125, 0.017153287644112475, 0.015773806819927908, 0.014418955337585727, 0.013242931006806727, 0.012252079425791852, 0.01102737146027087, 0.010066389708055852, 0.00911560448181408, 0.008332701752100194, 0.007548236118891347, 0.006929005885784084, 0.006333171558198474, 0.005831066421278302, 0.005331918491685301, 0.004903062201585548, 0.004516596045845566, 0.004068275172700303, 0.0036615846358261364, 0.0033567852472361067, 0.0030536355576870153, 0.002755368179348848, 0.0024826536974161158, 0.002281272832355271, 0.002080400233222658, 0.001980603931421476, 0.0017907006802904697, 0.0017003716133872156, 0.0015540699979996128, 0.0014861046509948182, 0.0013665876957322898, 0.0012441594205467286, 0.0012949734811306993, 0.0012552705288311305, 0.001207312029563775, 0.001087928582135357, 0.0010467392714698116, 0.0009527689986441219, 0.0008724174935054408, 0.0008519506182882058, 0.0007942166097754213, 0.0007150184760710731, 0.0006460238490463578, 0.0005941852979340546, 0.0005350181075385056, 0.0005063314328910967, 0.0005575663821864827, 0.0005380007396303333, 0.0005175747290356922, 0.0005085678714145872, 0.0004589986498958278, 0.00041459720127372317, 0.00037846837267907485, 0.0003618020706629272, 0.0003291673222279856, 0.00032721932859116205, 0.00029661684119296097, 0.00026901607608097807, 0.00024551919253114194, 0.00022659598430041706, 0.000227625374130615, 0.0002092071626403227, 0.00019804949187600876, 0.0001902985179555779, 0.00020116976419297974, 0.00018359526688937333, 0.0002303638458980219, 0.0004182888619208568, 0.0003814924486404392, 0.0003478547918948313, 0.0003620222453705743, 0.0003260055502138153, 0.00030777852144943705, 0.0003075349961733498, 0.0002904463026930567, 0.0002636301978462951, 0.00026668888874493063, 0.0002415579592088301, 0.00024199551841296593, 0.00023064669356816556, 0.00025694630805661535, 0.000237363600783895, 0.00022983128839404224, 0.0002104298647100182], "duration": 9700.771472, "accuracy_train": [0.29811039301864156, 0.43551929765365455, 0.5391670415743817, 0.6318061972245294, 0.6441233576158176, 0.6942463561854005, 0.7318339187661499, 0.7286034038736618, 0.760985517026578, 0.7587784280984681, 0.7906275594661315, 0.762662868563123, 0.7977010586817092, 0.8101835029069768, 0.7485560645648763, 0.8053697238948875, 0.8140174750253784, 0.7796389782899593, 0.7663158756113879, 0.843242793120155, 0.8276871870962532, 0.7925842893480066, 0.8271999873108158, 0.8250168708471761, 0.8153943596576227, 0.8463112685723514, 0.8371745152154854, 0.8303425430855482, 0.8551464735603543, 0.8601684345007383, 0.8467777402870063, 0.8548449251914912, 0.8291567171926911, 0.8301965453696014, 0.8056069251222776, 0.8296664474898486, 0.8634014728105389, 0.8581477179655776, 0.8677473381552234, 0.8796986030361758, 0.8272744281215393, 0.8648401811669435, 0.8540336465254706, 0.8694221662744556, 0.8586806997508305, 0.876537482119786, 0.8744448481912146, 0.8830707897863603, 0.8181634496700813, 0.8797004054771133, 0.8830242868101699, 0.8585444352159468, 0.8518290810146733, 0.8790500847868217, 0.8745618266080657, 0.8663311603105389, 0.8639395014304172, 0.8817236454295865, 0.8785839735603543, 0.8976022488695091, 0.8759104129175894, 0.8987430137389257, 0.8867219943936876, 0.9032763329411223, 0.8572437938353636, 0.8859997563099853, 0.8305579347775931, 0.9018569107027501, 0.9027866097383721, 0.8802344687269288, 0.9041588080241787, 0.8685869151439645, 0.8912796465485419, 0.9069282585248246, 0.89988125519103, 0.8825843109772978, 0.8892807395487264, 0.8964393139765596, 0.8840502361918604, 0.9021591800479882, 0.8535715006690661, 0.9039034021433187, 0.905112479524271, 0.9095760442621816, 0.8937432228220746, 0.8862587670727206, 0.8976273027985419, 0.906041457583518, 0.8859583001684201, 0.910156970976375, 0.8886093302994648, 0.8881915244901256, 0.8986489263219823, 0.9010216595722591, 0.8776804099183279, 0.8992294925479882, 0.9033918694052234, 0.882445162536914, 0.9110881119647471, 0.8999985940960686, 0.8683143860741971, 0.8441099474552418, 0.8951612031076966, 0.8955114173818751, 0.9124613917151162, 0.8929072507152085, 0.9042525349529347, 0.9112980963339794, 0.9070427135243633, 0.9009290141080657, 0.9145311346437799, 0.9023924159053157, 0.9152025438930418, 0.8883757339539498, 0.922550014131137, 0.8932313295957919, 0.9140661048818751, 0.9082982938815062], "end": "2016-01-23 13:23:35.096000", "learning_rate_per_epoch": [0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048, 0.0015574520220980048], "accuracy_valid": [0.2938055934676205, 0.4237648837537651, 0.5228889189570783, 0.6043024637612951, 0.6178831537085843, 0.6537012307040663, 0.6888501270707832, 0.6845879612198795, 0.6935888083584337, 0.6936711690512049, 0.7277302569653614, 0.6976597797439759, 0.7243431734751506, 0.7347603303840362, 0.6694394766566265, 0.7254006259412651, 0.7326954301581325, 0.7011998188064759, 0.6968464679028614, 0.7521869705384037, 0.7254006259412651, 0.7065106127635542, 0.7285229786332832, 0.7264389589608433, 0.7252594361822289, 0.7413638930722892, 0.7350971267884037, 0.7392063370670181, 0.7532047133847892, 0.7471717926393072, 0.7366722750376506, 0.7412903567394578, 0.7194897755082832, 0.7273331607680723, 0.7031735339796686, 0.7068650578878012, 0.7428360904555723, 0.7451363069465362, 0.7425831254706325, 0.7492263977786144, 0.719958937311747, 0.7397843326430723, 0.735706007624247, 0.7499176393072289, 0.7395210725715362, 0.7482086549322289, 0.7462643542921686, 0.7519016495670181, 0.7115052004894578, 0.7527664368411144, 0.7571815582643072, 0.7376694277108433, 0.7383930252259037, 0.7535797486822289, 0.7464687852974398, 0.7487984163215362, 0.7350235904555723, 0.7528370317206325, 0.7540592055722892, 0.7576698395143072, 0.7429287462349398, 0.7529796922063253, 0.7457260683358433, 0.7630203430911144, 0.7236504612198795, 0.7497337984751506, 0.7141495670180723, 0.7640586761106928, 0.7567226915474398, 0.7363060641001506, 0.7548916368599398, 0.7284832690135542, 0.7482189500188253, 0.7607421875, 0.7484925051769578, 0.7470173663403614, 0.7554313935429217, 0.7606804169804217, 0.7367119846573795, 0.7548622223268072, 0.7222576830760542, 0.7501411897590362, 0.7491440370858433, 0.7541283297251506, 0.7343426440135542, 0.7440376741340362, 0.7448201007153614, 0.7554916933358433, 0.7416168580572289, 0.7555225785956325, 0.7478115587349398, 0.7387783556099398, 0.7475880082831325, 0.7511692276920181, 0.7332440112010542, 0.7451157167733433, 0.7467232210090362, 0.7296730868787651, 0.7481468844126506, 0.7511383424322289, 0.7224106386483433, 0.7115963855421686, 0.7418404085090362, 0.7495617234563253, 0.7596023743411144, 0.7412197618599398, 0.7371899708207832, 0.7517281038215362, 0.7571006682981928, 0.7417271625564759, 0.7512912980045181, 0.7450848315135542, 0.7509956819465362, 0.7384709737387049, 0.7488190064947289, 0.7410565112010542, 0.7527355515813253, 0.7508339020143072], "accuracy_test": 0.7534832802547771, "start": "2016-01-23 10:41:54.324000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0], "accuracy_train_last": 0.9082982938815062, "batch_size_eval": 1024, "accuracy_train_std": [0.016589527583262268, 0.021788462394611127, 0.028939955427726965, 0.032720711975676366, 0.034181278170104384, 0.03266277016216104, 0.0372848396791529, 0.03686911627055767, 0.03805423722986342, 0.036253701037119945, 0.038975317428618456, 0.03490210138773601, 0.033371892696867626, 0.037615309521471525, 0.033428640570582056, 0.036498908685950994, 0.036490168864755784, 0.031489764418757046, 0.03436638153947988, 0.033684938863620104, 0.03592708415741932, 0.03552571946461278, 0.03619830106214907, 0.03329528942406025, 0.03114309774310832, 0.033965276343767066, 0.03517332611775617, 0.03196758069508919, 0.03282128886559649, 0.031771010458828, 0.03312014469464538, 0.03367939665785037, 0.03434487748200285, 0.036235892833326185, 0.03160013528781357, 0.03297831083796044, 0.02972492377902516, 0.03117327378426216, 0.03182945276647007, 0.028396391394359538, 0.029368654663808003, 0.034100020716194474, 0.03133775569662839, 0.03147464747423261, 0.031262332684810074, 0.031017233625115468, 0.030333466365552616, 0.02838721438028957, 0.027330516132641675, 0.02688082064926814, 0.028498565155927604, 0.02840995998391901, 0.026016805349764614, 0.02699034077424105, 0.028976601031945347, 0.026771258221649507, 0.02837759324639676, 0.026959998982527985, 0.02690637371327448, 0.02684335632944701, 0.029762090084065225, 0.026187846336216826, 0.02661207166888263, 0.023177568053832268, 0.026204918577165573, 0.028700477745878892, 0.027335123368099443, 0.027251408831178065, 0.025926510020737915, 0.02883207681916239, 0.025001456409406278, 0.0294180986415097, 0.026029897538553337, 0.025713206580841412, 0.02627286156682084, 0.025991393048303106, 0.024624832652468658, 0.027885649527969927, 0.026564280293054212, 0.027487000213535694, 0.02634695643154779, 0.025306346523654225, 0.02737833689088727, 0.025267889834656637, 0.027073807420784773, 0.02753199151142409, 0.023698671229767772, 0.0243529700110153, 0.02544314253658084, 0.02513782940538707, 0.025702080138325537, 0.021993421173888673, 0.025953228980482385, 0.024918944485128693, 0.025136274524893653, 0.025441676207305093, 0.025585981409722125, 0.024273212308783397, 0.025395308915789262, 0.02401444376250225, 0.025027173392895147, 0.024372046529605798, 0.024400755380214086, 0.025464296972535074, 0.02257169292487012, 0.025909886947612884, 0.024705258406809812, 0.024511765916952446, 0.02423856282166823, 0.02486364544401418, 0.021873711409490813, 0.023928522131628056, 0.024324132744558496, 0.022489921343960172, 0.021690350967251682, 0.02606379717378049, 0.02250492503039513, 0.02325409624028105], "accuracy_test_std": 0.054201196706631954, "error_valid": [0.7061944065323795, 0.5762351162462349, 0.47711108104292166, 0.39569753623870485, 0.38211684629141573, 0.34629876929593373, 0.3111498729292168, 0.3154120387801205, 0.30641119164156627, 0.30632883094879515, 0.2722697430346386, 0.30234022025602414, 0.27565682652484935, 0.2652396696159638, 0.3305605233433735, 0.2745993740587349, 0.26730456984186746, 0.29880018119352414, 0.3031535320971386, 0.24781302946159633, 0.2745993740587349, 0.2934893872364458, 0.2714770213667168, 0.2735610410391567, 0.2747405638177711, 0.2586361069277108, 0.26490287321159633, 0.2607936629329819, 0.24679528661521077, 0.2528282073606928, 0.26332772496234935, 0.25870964326054224, 0.2805102244917168, 0.2726668392319277, 0.29682646602033136, 0.2931349421121988, 0.2571639095444277, 0.2548636930534638, 0.25741687452936746, 0.25077360222138556, 0.280041062688253, 0.2602156673569277, 0.264293992375753, 0.2500823606927711, 0.2604789274284638, 0.2517913450677711, 0.25373564570783136, 0.2480983504329819, 0.28849479951054224, 0.24723356315888556, 0.24281844173569278, 0.2623305722891567, 0.26160697477409633, 0.24642025131777112, 0.25353121470256024, 0.2512015836784638, 0.2649764095444277, 0.24716296827936746, 0.24594079442771077, 0.24233016048569278, 0.25707125376506024, 0.24702030779367468, 0.2542739316641567, 0.23697965690888556, 0.2763495387801205, 0.25026620152484935, 0.2858504329819277, 0.23594132388930722, 0.24327730845256024, 0.26369393589984935, 0.24510836314006024, 0.2715167309864458, 0.2517810499811747, 0.2392578125, 0.25150749482304224, 0.2529826336596386, 0.24456860645707834, 0.23931958301957834, 0.2632880153426205, 0.24513777767319278, 0.2777423169239458, 0.2498588102409638, 0.2508559629141567, 0.24587167027484935, 0.2656573559864458, 0.2559623258659638, 0.2551798992846386, 0.24450830666415668, 0.2583831419427711, 0.24447742140436746, 0.25218844126506024, 0.26122164439006024, 0.25241199171686746, 0.2488307723079819, 0.2667559887989458, 0.2548842832266567, 0.2532767789909638, 0.2703269131212349, 0.25185311558734935, 0.24886165756777112, 0.2775893613516567, 0.28840361445783136, 0.2581595914909638, 0.2504382765436747, 0.24039762565888556, 0.25878023814006024, 0.2628100291792168, 0.2482718961784638, 0.24289933170180722, 0.25827283744352414, 0.2487087019954819, 0.2549151684864458, 0.2490043180534638, 0.26152902626129515, 0.2511809935052711, 0.2589434887989458, 0.24726444841867468, 0.24916609798569278], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.524458221231497, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0015574520432614148, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "optimization": "rmsprop", "nb_data_augmentation": 0, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 1.0590407632032623e-07, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.04722068928718694}, "accuracy_valid_max": 0.7640586761106928, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import os\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7508339020143072, "loss_train": [3.822295665740967, 1.4516652822494507, 1.2405705451965332, 1.0733237266540527, 0.9521867036819458, 0.8707613348960876, 0.8076959252357483, 0.7556536197662354, 0.7182135581970215, 0.6887509822845459, 0.6631296873092651, 0.6348121166229248, 0.6170632839202881, 0.6009077429771423, 0.5883726477622986, 0.5748165249824524, 0.5592440962791443, 0.5541569590568542, 0.5379921793937683, 0.5305442214012146, 0.520815372467041, 0.5079520344734192, 0.49858778715133667, 0.4975443184375763, 0.48886483907699585, 0.4756014049053192, 0.4689759314060211, 0.4733554422855377, 0.46568921208381653, 0.4607900083065033, 0.44537168741226196, 0.45149660110473633, 0.43931880593299866, 0.4362189471721649, 0.4325212836265564, 0.42503294348716736, 0.427350252866745, 0.4178992807865143, 0.40967586636543274, 0.4135664105415344, 0.41207265853881836, 0.4032100737094879, 0.3962167501449585, 0.3948712944984436, 0.3934057354927063, 0.3888451159000397, 0.3851093351840973, 0.38422659039497375, 0.3803099989891052, 0.37505728006362915, 0.3748076558113098, 0.37253791093826294, 0.37185510993003845, 0.3654269874095917, 0.36607617139816284, 0.36517074704170227, 0.3544560670852661, 0.35685962438583374, 0.3570915162563324, 0.3513089716434479, 0.35022515058517456, 0.3478025496006012, 0.347753643989563, 0.33967435359954834, 0.3441309332847595, 0.34540870785713196, 0.3345322608947754, 0.33468011021614075, 0.338837593793869, 0.3327406048774719, 0.3332291841506958, 0.3307330310344696, 0.329880952835083, 0.3245868980884552, 0.3274933099746704, 0.32205113768577576, 0.32097187638282776, 0.323316752910614, 0.3234425485134125, 0.32149115204811096, 0.3174002468585968, 0.3190375566482544, 0.3222971260547638, 0.31601324677467346, 0.31439027190208435, 0.31276053190231323, 0.3036709725856781, 0.3132576644420624, 0.3140612840652466, 0.3090255856513977, 0.3075695037841797, 0.30461403727531433, 0.3052651584148407, 0.30480632185935974, 0.30723142623901367, 0.30256786942481995, 0.30276772379875183, 0.2994476556777954, 0.30505573749542236, 0.2986677587032318, 0.3005518317222595, 0.2986949384212494, 0.2954511344432831, 0.2973653972148895, 0.29594874382019043, 0.2916599214076996, 0.2986149191856384, 0.2940516471862793, 0.289395809173584, 0.2912123501300812, 0.28884732723236084, 0.2913457751274109, 0.28577375411987305, 0.28883877396583557, 0.2844638526439667, 0.28684332966804504, 0.28724876046180725, 0.2855895161628723], "accuracy_train_first": 0.29811039301864156, "model": "residualv2", "loss_std": [32.326412200927734, 0.1742812991142273, 0.16953900456428528, 0.1684693545103073, 0.15933166444301605, 0.15885962545871735, 0.15772178769111633, 0.14832963049411774, 0.1557692289352417, 0.14500533044338226, 0.1508055180311203, 0.1454855352640152, 0.14478956162929535, 0.1505405604839325, 0.14074799418449402, 0.14444920420646667, 0.13894233107566833, 0.13964563608169556, 0.13298583030700684, 0.13910144567489624, 0.13112832605838776, 0.13035118579864502, 0.13519105315208435, 0.12852005660533905, 0.1346646249294281, 0.1337294727563858, 0.13279181718826294, 0.13486337661743164, 0.12071489542722702, 0.1372889280319214, 0.12884701788425446, 0.13160187005996704, 0.12518522143363953, 0.12011390179395676, 0.1313558667898178, 0.12135983258485794, 0.12928882241249084, 0.1314144879579544, 0.12715904414653778, 0.12913304567337036, 0.1244899109005928, 0.1273924857378006, 0.12140610069036484, 0.12666377425193787, 0.12872444093227386, 0.1273365020751953, 0.12658251821994781, 0.1199035719037056, 0.11601506918668747, 0.12244071066379547, 0.12961506843566895, 0.12846320867538452, 0.11556091904640198, 0.12229514867067337, 0.11548841744661331, 0.11597906798124313, 0.12020421028137207, 0.11700492352247238, 0.12362012267112732, 0.1208227276802063, 0.12472143769264221, 0.11489851027727127, 0.12071921676397324, 0.11961054056882858, 0.12502557039260864, 0.12096191197633743, 0.12125390022993088, 0.11622067540884018, 0.12198609858751297, 0.11237142235040665, 0.1187032014131546, 0.11653745919466019, 0.11694242805242538, 0.11891870945692062, 0.11790759861469269, 0.11553570628166199, 0.1196615919470787, 0.11863301694393158, 0.12627103924751282, 0.12254782021045685, 0.11830689758062363, 0.1152099147439003, 0.11928537487983704, 0.11550171673297882, 0.12319709360599518, 0.11502213776111603, 0.12211136519908905, 0.11718151718378067, 0.11903814971446991, 0.11562268435955048, 0.11941835284233093, 0.11332619190216064, 0.11832789331674576, 0.11234879493713379, 0.11593735218048096, 0.11740726232528687, 0.11406402289867401, 0.11839020997285843, 0.12447512894868851, 0.11515992134809494, 0.11691008508205414, 0.11385466158390045, 0.11605700850486755, 0.11224251240491867, 0.11218421906232834, 0.11423368006944656, 0.12589390575885773, 0.12040099501609802, 0.11526916921138763, 0.11553816497325897, 0.12042383849620819, 0.11699268221855164, 0.11395540833473206, 0.11489630490541458, 0.11613616347312927, 0.11535429209470749, 0.11819379031658173, 0.1183624267578125]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:09 2016", "state": "available"}], "summary": "33cef9a96c9e5cdcdccaee103c2f191c"}