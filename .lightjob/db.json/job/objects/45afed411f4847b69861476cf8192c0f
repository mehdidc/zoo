{"content": {"hp_model": {"f0": 32, "f1": 16, "f2": 32, "f3": 16, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.662394642829895, 1.3166296482086182, 1.1213405132293701, 0.9817836284637451, 0.8923611640930176, 0.8225165605545044, 0.7720521688461304, 0.7279787659645081, 0.6992847323417664, 0.6714339852333069, 0.6468496322631836, 0.6248218417167664, 0.611211359500885, 0.5938119888305664, 0.5792054533958435, 0.5662226676940918, 0.5552223920822144, 0.5429323315620422, 0.535865843296051, 0.5273983478546143, 0.5169368386268616, 0.5104807019233704, 0.5013849139213562, 0.49603965878486633, 0.4879838824272156, 0.4823688566684723, 0.47581323981285095, 0.47194603085517883, 0.46784263849258423, 0.46396470069885254, 0.4573540985584259, 0.4554210603237152, 0.4515327215194702, 0.44800108671188354, 0.4438226819038391, 0.43955370783805847, 0.43504905700683594, 0.4330584406852722, 0.4261947274208069, 0.42764249444007874, 0.4234671890735626, 0.42271673679351807, 0.42164215445518494, 0.4197872281074524, 0.4160911738872528, 0.41461217403411865, 0.4152485132217407, 0.40999874472618103, 0.4095930755138397, 0.40850701928138733, 0.4082009196281433, 0.4019012153148651, 0.40231552720069885, 0.4001231789588928, 0.39845630526542664, 0.39670106768608093, 0.39598914980888367, 0.39613354206085205, 0.39278799295425415, 0.39562511444091797, 0.39155811071395874, 0.39057686924934387, 0.3877852261066437, 0.3900687098503113, 0.38882991671562195, 0.3891899883747101, 0.38689881563186646, 0.3843872845172882, 0.38422662019729614, 0.38237398862838745, 0.38381633162498474, 0.3821560740470886, 0.38062140345573425, 0.38139137625694275, 0.37762048840522766, 0.37904253602027893, 0.3780134916305542, 0.3757409453392029, 0.37582501769065857, 0.3751711845397949, 0.37703999876976013, 0.3748200237751007, 0.37354254722595215, 0.3692135214805603, 0.37457653880119324, 0.3726089298725128, 0.37346363067626953, 0.37210747599601746, 0.3681166470050812, 0.3696843981742859, 0.36679205298423767, 0.36687907576560974, 0.36705470085144043, 0.364013135433197, 0.3647061884403229, 0.365106463432312, 0.3652614653110504, 0.36579012870788574, 0.36371544003486633, 0.3647293746471405, 0.3661527931690216, 0.36335286498069763, 0.36075353622436523, 0.36405643820762634, 0.3636046051979065, 0.3609052002429962, 0.3605988323688507, 0.3589228093624115, 0.3619770109653473, 0.35953405499458313, 0.360921174287796, 0.35475262999534607, 0.3603174686431885, 0.35766348242759705, 0.35905492305755615, 0.3564375638961792, 0.354867160320282, 0.3592562973499298, 0.3544965386390686, 0.3559410274028778, 0.35426586866378784, 0.3546414375305176, 0.35524848103523254, 0.3533799648284912, 0.35396644473075867, 0.3562247157096863, 0.3534320890903473, 0.35319483280181885, 0.3522690534591675, 0.3521527647972107, 0.35175079107284546, 0.350178062915802, 0.35099950432777405, 0.34853172302246094, 0.3525940775871277, 0.35149985551834106, 0.34705880284309387, 0.34808123111724854, 0.3481898307800293, 0.348753958940506, 0.3456488251686096, 0.3507220447063446, 0.34753748774528503, 0.34651458263397217], "moving_avg_accuracy_train": [0.02986588235294117, 0.06088635294117646, 0.09893889411764704, 0.14215323999999996, 0.18381791599999994, 0.21596553616470582, 0.23144898254823523, 0.26536290782282346, 0.3004101464523058, 0.3402185435717811, 0.3769849245087207, 0.41234996146961334, 0.44200673002853436, 0.46706017467273975, 0.4920929807348775, 0.5172813297202132, 0.5442755496893683, 0.5674597594263139, 0.5690314305425059, 0.5820859345470788, 0.6023173410923709, 0.6179844305125455, 0.6341953992259969, 0.6491382122445737, 0.6622785086671752, 0.679187128388693, 0.6967013567262943, 0.708666515171312, 0.7218728048306513, 0.7342361125828802, 0.7370219130892981, 0.7432373688391919, 0.7557677496023316, 0.7639862687597455, 0.7724652889425945, 0.7824705247542174, 0.7893058252199722, 0.798485830933269, 0.8083148948987656, 0.8164386995265361, 0.8192630648680002, 0.8216238172047295, 0.8286520237195507, 0.8381444684064192, 0.8400100215657773, 0.8442631370562584, 0.8495921174682797, 0.8535152586626281, 0.8562037327963653, 0.855675124222611, 0.858618200035644, 0.8608599094438444, 0.8600186243818129, 0.8602120560612786, 0.8586284975139743, 0.8656197654096356, 0.8686789653392603, 0.869945186452393, 0.8681177266306831, 0.8636847774970265, 0.8677045350414415, 0.8728752580078856, 0.872067732207097, 0.872595076633446, 0.8779096866171603, 0.8727893061907384, 0.8766091991010764, 0.882764749779204, 0.8811423924483425, 0.8758258002623318, 0.8783514555302162, 0.8834292511536651, 0.8872298554500633, 0.8885492228462334, 0.8879743005616101, 0.8937203999172137, 0.8954660069843159, 0.8968417592270608, 0.9006469950690605, 0.903504648503331, 0.9045635954177038, 0.9077613535229923, 0.9075240417001048, 0.9056728140006826, 0.9098020031888496, 0.9094523911052588, 0.9101118578770858, 0.9079971426776124, 0.9082938989980864, 0.9080150973335719, 0.9088371170119793, 0.9119039935460755, 0.915113594191468, 0.91869635241938, 0.9215090701186184, 0.9237040454596978, 0.9238206997372573, 0.9198315709400022, 0.9202460609048255, 0.9161555724614018, 0.9186741328623205, 0.9137855431055002, 0.9165905182067149, 0.917719701680161, 0.9186465550415567, 0.9187442524785775, 0.9214321801718962, 0.9240277856841184, 0.9264697129980595, 0.9270415652276653, 0.9272903498813694, 0.9250177854814677, 0.9157442422274386, 0.9010662885929299, 0.905025542086578, 0.9067794584661555, 0.9083156302665988, 0.9118887731222919, 0.9105704840453568, 0.9094922591702329, 0.9133783273708567, 0.9042122593396533, 0.9086851510527468, 0.9064001653592368, 0.9102472076468425, 0.91052131041157, 0.9135468264292366, 0.9122062614333717, 0.9086162235253287, 0.9021875423492665, 0.9058793763496339, 0.9096279093029057, 0.9129168830784975, 0.9130181359471183, 0.912923381175936, 0.9159933959995188, 0.9183469975760375, 0.9198793566419632, 0.9207902445071786, 0.9219347494682255, 0.9211389215802265, 0.9231897353045567, 0.9259037029505716, 0.9251886267731615], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.029733333333333327, 0.060439999999999994, 0.09878266666666666, 0.14121106666666666, 0.18275662666666664, 0.21458763066666664, 0.23040886759999996, 0.2638613141733333, 0.2976085160893333, 0.33576766448039996, 0.37063089803236, 0.40422114156245736, 0.4323056940728783, 0.45603512466559043, 0.4796049455323647, 0.5027777843124616, 0.5273000058812154, 0.5482766719597605, 0.5503956714304511, 0.5635027709540726, 0.5816324938586653, 0.5957759111394655, 0.6098916533588522, 0.6234224880229671, 0.6353469058873371, 0.6502255486319367, 0.6643629937687431, 0.6742200277252021, 0.6853713582860151, 0.6947542224574136, 0.6977188002116722, 0.7026802535238383, 0.7126522281714545, 0.719507005354309, 0.7262629714855449, 0.7346900076703237, 0.7405010069032913, 0.7473175728796289, 0.7552258155916659, 0.7618765673658326, 0.7642089106292493, 0.7655213528996577, 0.7708225509430253, 0.7779669625153894, 0.7792235995971838, 0.7825812396374654, 0.7868964490070521, 0.790166804106347, 0.7919101236957122, 0.7917991113261411, 0.7940725335268602, 0.7955319468408408, 0.7942454188234234, 0.7943275436077477, 0.7927481225803062, 0.7982333103222756, 0.8008366459567148, 0.8018063146943766, 0.8001190165582722, 0.796667114902445, 0.7999337367455338, 0.8040470297376471, 0.8028556600972158, 0.8043967607541608, 0.8082637513454114, 0.8038907095442036, 0.8063283052564498, 0.8108954747308048, 0.8096992605910576, 0.8054226678652852, 0.80765373441209, 0.8114750276375478, 0.8139008582071263, 0.8145107723864137, 0.8140196951477723, 0.8186443922996618, 0.819833286403029, 0.8200632910960595, 0.8227769619864536, 0.8259259324544749, 0.8263866725423608, 0.8285346719547914, 0.8282145380926456, 0.8270864176167143, 0.8301244425217096, 0.8295653316028719, 0.8300221317759181, 0.8285132519316596, 0.8284885934051602, 0.8281064007313109, 0.8287090939915132, 0.8307048512590285, 0.8333276994664589, 0.836074929519813, 0.837840769901165, 0.8392700262443817, 0.8398230236199435, 0.8360540545912826, 0.8362219824654877, 0.8331864508856057, 0.8352144724637118, 0.8309330252173407, 0.8331997226956066, 0.8338797504260459, 0.8342251087167747, 0.8337625978450973, 0.836119671393921, 0.8380010375878622, 0.840040933829076, 0.8401701737795017, 0.8398998230682181, 0.8373098407613964, 0.8292588566852567, 0.817652971016731, 0.8205276739150578, 0.822194906523552, 0.82366874920453, 0.825581874284077, 0.8245170201890026, 0.8238653181701023, 0.8267987863530921, 0.8193589077177829, 0.8232363502793378, 0.8213127152514041, 0.824554777059597, 0.8249792993536372, 0.8272947027516068, 0.8268318991431127, 0.8236553758954681, 0.8179698383059213, 0.8213861878086626, 0.8240609023611296, 0.8268948121250167, 0.8270186642458484, 0.8271701311545969, 0.8292264513724705, 0.8310371395685568, 0.8321200922783678, 0.8326547497171977, 0.8334292747454779, 0.8326330139375968, 0.8340897125438371, 0.8363207412894533, 0.8357153338271747], "moving_var_accuracy_train": [0.008027738358477506, 0.015885390882269895, 0.027328814803925808, 0.041403250533889935, 0.05288643251616572, 0.056899014604836984, 0.05336674715155796, 0.058381461384175354, 0.06359809566572475, 0.07150066243014892, 0.07651649709193538, 0.08012101993594957, 0.08002463323457128, 0.07767124570797652, 0.0755438935512803, 0.07369958051761585, 0.07288781367154248, 0.07043660053452835, 0.06341517183195278, 0.0586074353220062, 0.05643048008701358, 0.05299655129640997, 0.050062055726425456, 0.04706543910195624, 0.043912901702425115, 0.0420947243201647, 0.04064598563650296, 0.03786987222238205, 0.03565253977924121, 0.03346294820850402, 0.030186499547807638, 0.027515536604636855, 0.026177076922796506, 0.024167265744783867, 0.022397583219655924, 0.021058767590505966, 0.019373382823569693, 0.018194497085278198, 0.017244541862690796, 0.016114053491093384, 0.014574441498222615, 0.013167155712758713, 0.012295001322817613, 0.011876459745735167, 0.010720136368475169, 0.009810923654005986, 0.00908541357869074, 0.008315391552298814, 0.0075489034355788985, 0.0067965279352392265, 0.0061948303988866435, 0.005620574708635303, 0.005064887082772149, 0.004558735116826523, 0.004125430524198536, 0.004152787912878834, 0.0038217374594756914, 0.003453993556694212, 0.0031386506856244663, 0.0030016449592562967, 0.0028469065197735985, 0.0028028432517576496, 0.0025284278078523377, 0.0022780878563631174, 0.0023044847842377597, 0.0023100009672155455, 0.00221032510711204, 0.002330309833759816, 0.002120967240164837, 0.002163265888399505, 0.0020043497103492875, 0.0020359708148560167, 0.0019623750705306184, 0.0017818041364122477, 0.0016065985434712317, 0.0017430976093643314, 0.0015962121447223511, 0.001453625178350874, 0.001438581038834947, 0.0013682185833050295, 0.0012414890420816634, 0.0012093710499729382, 0.0010889407970871838, 0.001010890113334439, 0.001063252932166075, 0.0009580276964304021, 0.000866138994595658, 0.000819773278510042, 0.0007385885294827094, 0.0006654292498476631, 0.0006049677720280996, 0.000629122579903798, 0.0006589241486395504, 0.0007085571424526376, 0.0007089038559078586, 0.00068137472104859, 0.0006133597229279876, 0.0006952420876850018, 0.0006272640962949547, 0.0007151265480175073, 0.0007007022116534359, 0.000845716778782486, 0.0008319560687701467, 0.0007602359597434675, 0.0006919438781508948, 0.0006228353934386092, 0.0006255764516553358, 0.000623653318265504, 0.0006149550674980982, 0.0005564026955008347, 0.0005013194701860191, 0.00049766846373272, 0.0012218890577185893, 0.003038681058017775, 0.002875894146258686, 0.00261599073563177, 0.0023756300762728874, 0.0022529732174503122, 0.002043316870518578, 0.0018494483033987441, 0.0018004172075979632, 0.0023765267152119924, 0.0023189348861843376, 0.0021340318341418114, 0.002053826259991271, 0.0018491198249228253, 0.0017465915669889534, 0.0015881064408633007, 0.001545291146407646, 0.0017627135067379992, 0.0017091089006406226, 0.0016646615042924496, 0.001595551490331979, 0.0014360886105894166, 0.0012925605557304316, 0.0012481294193105563, 0.0011731714408084225, 0.0010769874154899016, 0.0009767561242678823, 0.0008908695362938416, 0.0008074826609103103, 0.0007645869272063928, 0.0007544188179382953, 0.0006835789415999608], "duration": 46884.368995, "accuracy_train": [0.29865882352941175, 0.3400705882352941, 0.44141176470588234, 0.5310823529411764, 0.5588, 0.5052941176470588, 0.3708, 0.5705882352941176, 0.615835294117647, 0.6984941176470588, 0.7078823529411765, 0.730635294117647, 0.7089176470588235, 0.6925411764705882, 0.7173882352941177, 0.7439764705882352, 0.7872235294117647, 0.7761176470588236, 0.5831764705882353, 0.6995764705882352, 0.7844, 0.7589882352941176, 0.7800941176470588, 0.7836235294117647, 0.7805411764705882, 0.8313647058823529, 0.8543294117647059, 0.8163529411764706, 0.8407294117647058, 0.8455058823529412, 0.7620941176470588, 0.7991764705882353, 0.8685411764705883, 0.8379529411764706, 0.8487764705882352, 0.8725176470588235, 0.8508235294117648, 0.8811058823529412, 0.8967764705882353, 0.8895529411764705, 0.8446823529411764, 0.8428705882352941, 0.8919058823529412, 0.9235764705882353, 0.8568, 0.8825411764705883, 0.8975529411764706, 0.8888235294117647, 0.8804, 0.8509176470588236, 0.8851058823529412, 0.881035294117647, 0.8524470588235294, 0.8619529411764706, 0.8443764705882353, 0.9285411764705882, 0.8962117647058824, 0.8813411764705882, 0.8516705882352941, 0.8237882352941176, 0.9038823529411765, 0.9194117647058824, 0.8648, 0.8773411764705882, 0.9257411764705883, 0.8267058823529412, 0.9109882352941177, 0.9381647058823529, 0.8665411764705883, 0.8279764705882353, 0.9010823529411764, 0.9291294117647059, 0.921435294117647, 0.9004235294117647, 0.8828, 0.945435294117647, 0.9111764705882353, 0.9092235294117647, 0.9348941176470589, 0.9292235294117647, 0.9140941176470588, 0.9365411764705882, 0.9053882352941176, 0.8890117647058824, 0.9469647058823529, 0.9063058823529412, 0.9160470588235294, 0.888964705882353, 0.9109647058823529, 0.9055058823529412, 0.916235294117647, 0.9395058823529412, 0.944, 0.9509411764705883, 0.9468235294117647, 0.9434588235294118, 0.9248705882352941, 0.8839294117647059, 0.9239764705882353, 0.8793411764705882, 0.9413411764705882, 0.8697882352941176, 0.9418352941176471, 0.9278823529411765, 0.9269882352941177, 0.9196235294117647, 0.9456235294117648, 0.9473882352941176, 0.9484470588235294, 0.9321882352941177, 0.9295294117647059, 0.9045647058823529, 0.8322823529411765, 0.768964705882353, 0.9406588235294118, 0.922564705882353, 0.9221411764705882, 0.9440470588235295, 0.8987058823529411, 0.8997882352941177, 0.9483529411764706, 0.8217176470588236, 0.9489411764705883, 0.885835294117647, 0.9448705882352941, 0.9129882352941177, 0.9407764705882353, 0.9001411764705882, 0.8763058823529412, 0.8443294117647059, 0.9391058823529411, 0.943364705882353, 0.9425176470588236, 0.9139294117647059, 0.9120705882352941, 0.9436235294117647, 0.9395294117647058, 0.9336705882352941, 0.9289882352941177, 0.932235294117647, 0.9139764705882353, 0.9416470588235294, 0.9503294117647059, 0.9187529411764706], "end": "2016-02-06 14:12:52.309000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0], "moving_var_accuracy_valid": [0.00795664, 0.015647070399999997, 0.027313804143999997, 0.040783945868639995, 0.05223985328319839, 0.0561347832957107, 0.052774108809045664, 0.05756829356381658, 0.062061326941868396, 0.06896027970106457, 0.0730032572142447, 0.07585767163652143, 0.07537058328026461, 0.07290129783852725, 0.07061099615590098, 0.06838272065446614, 0.06695650274502303, 0.0642210371484578, 0.0578393448624231, 0.053601574897479874, 0.051199599081107716, 0.047879965444406467, 0.044885256505603426, 0.04204448223541157, 0.039119759684507364, 0.037200149805349476, 0.03527894101978041, 0.03262549698357144, 0.030482116844703023, 0.02822624842076294, 0.025482722070036056, 0.023155994033751688, 0.021735357135730816, 0.019984713154196986, 0.01839702954407493, 0.017196461039403584, 0.01578072434423318, 0.014620842055197723, 0.013721620574810345, 0.01274755100978355, 0.011521754334690845, 0.010385081443640153, 0.009599497605531176, 0.009098931395416034, 0.008203250486672498, 0.00748438915776617, 0.00690353952911988, 0.006309442578487243, 0.005705850789354502, 0.005135376624134832, 0.004668354998245856, 0.004220688483410486, 0.0038135160241258375, 0.0034322251220350567, 0.0031114537468688685, 0.003071093933263842, 0.002824980747767322, 0.0025509449901377785, 0.002321473266124911, 0.0021965665648859445, 0.002072947272789056, 0.0020179251586608647, 0.0018289068973760525, 0.0016673911287519768, 0.0016352345619721638, 0.0016438225571309452, 0.0015329171571251054, 0.0015673567744799173, 0.0014234994514451046, 0.0014457527143797604, 0.0013459763643682285, 0.0013427992651657633, 0.0012614812242199033, 0.0011386810595527751, 0.0010269833652863023, 0.00111677544247792, 0.0010178191209313187, 0.0009165133282675311, 0.000891138082753126, 0.0008912684095540462, 0.0008040521014559071, 0.0007651720045925358, 0.0006895771753405137, 0.0006320733600804, 0.0006519323819827019, 0.0005895525889605028, 0.0005324753276473073, 0.000499718260342262, 0.0004497519066943978, 0.00040609135718445516, 0.0003687513739590484, 0.00036772366020070674, 0.00039286528865362796, 0.0004215042164827335, 0.00040741752510618177, 0.0003850607358471937, 0.0003493069171388787, 0.00044222237327604477, 0.0003982539338868556, 0.0004413586082503246, 0.00043423859111666764, 0.0005557918467161356, 0.0005464539191663163, 0.000495970466677183, 0.00044744687115024043, 0.0004046274307929951, 0.0004141668491447702, 0.0004046060130316377, 0.0004015960018027372, 0.00036158672830553795, 0.0003260858610388076, 0.0003538493500817774, 0.0009018295164218847, 0.002023915804137702, 0.0018958994745067743, 0.0017313265081935353, 0.001577743767608637, 0.0014529098189776986, 0.0013178240652740988, 0.0011898640984396372, 0.0011483248088211928, 0.0015316584749122477, 0.00151380367478445, 0.0013957266527922494, 0.001350752670426313, 0.001217299375986917, 0.0011438192744461881, 0.001031365031621885, 0.0010190412279451361, 0.0012080651442899699, 0.001192301625184893, 0.001137458344101016, 0.0010959919106396032, 0.0009865307737061534, 0.0008880841763555505, 0.0008373318342659187, 0.0007831059765303427, 0.000715350458022491, 0.0006463881394123071, 0.000587148326645969, 0.0005341397754488796, 0.0004998235353687939, 0.0004946385852058106, 0.00044847339044367377], "accuracy_test": 0.4924, "start": "2016-02-06 01:11:27.940000", "learning_rate_per_epoch": [0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756, 0.005033659283071756], "accuracy_train_first": 0.29865882352941175, "accuracy_train_last": 0.9187529411764706, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.7026666666666667, 0.6632, 0.5561333333333334, 0.4769333333333333, 0.44333333333333336, 0.49893333333333334, 0.6272, 0.4350666666666667, 0.3986666666666666, 0.3208, 0.3156, 0.29346666666666665, 0.3149333333333333, 0.3304, 0.3082666666666667, 0.2886666666666666, 0.252, 0.26293333333333335, 0.4305333333333333, 0.31853333333333333, 0.2552, 0.27693333333333336, 0.26306666666666667, 0.2548, 0.2573333333333333, 0.21586666666666665, 0.20840000000000003, 0.23706666666666665, 0.21426666666666672, 0.2208, 0.27559999999999996, 0.2526666666666667, 0.1976, 0.2188, 0.2129333333333333, 0.18946666666666667, 0.20720000000000005, 0.19133333333333336, 0.17359999999999998, 0.17826666666666668, 0.2148, 0.22266666666666668, 0.18146666666666667, 0.15773333333333328, 0.2094666666666667, 0.18720000000000003, 0.17426666666666668, 0.1804, 0.19240000000000002, 0.20920000000000005, 0.18546666666666667, 0.19133333333333336, 0.21733333333333338, 0.2049333333333333, 0.2214666666666667, 0.15239999999999998, 0.1757333333333333, 0.18946666666666667, 0.21506666666666663, 0.23440000000000005, 0.17066666666666663, 0.15893333333333337, 0.20786666666666664, 0.1817333333333333, 0.15693333333333337, 0.2354666666666667, 0.1717333333333333, 0.14800000000000002, 0.20106666666666662, 0.23306666666666664, 0.17226666666666668, 0.15413333333333334, 0.16426666666666667, 0.18000000000000005, 0.1904, 0.13973333333333338, 0.16946666666666665, 0.17786666666666662, 0.15280000000000005, 0.14573333333333338, 0.16946666666666665, 0.15213333333333334, 0.17466666666666664, 0.1830666666666667, 0.1425333333333333, 0.17546666666666666, 0.16586666666666672, 0.1850666666666667, 0.1717333333333333, 0.17533333333333334, 0.16586666666666672, 0.15133333333333332, 0.14306666666666668, 0.1392, 0.14626666666666666, 0.1478666666666667, 0.1552, 0.19786666666666664, 0.16226666666666667, 0.19413333333333338, 0.1465333333333333, 0.2076, 0.14639999999999997, 0.16000000000000003, 0.16266666666666663, 0.1704, 0.14266666666666672, 0.14506666666666668, 0.14159999999999995, 0.15866666666666662, 0.1625333333333333, 0.18600000000000005, 0.24319999999999997, 0.28680000000000005, 0.15359999999999996, 0.16279999999999994, 0.1630666666666667, 0.1572, 0.1850666666666667, 0.18200000000000005, 0.14680000000000004, 0.24760000000000004, 0.1418666666666667, 0.19599999999999995, 0.14626666666666666, 0.17120000000000002, 0.1518666666666667, 0.17733333333333334, 0.2049333333333333, 0.23319999999999996, 0.1478666666666667, 0.1518666666666667, 0.14759999999999995, 0.1718666666666666, 0.17146666666666666, 0.15226666666666666, 0.15266666666666662, 0.15813333333333335, 0.1625333333333333, 0.15959999999999996, 0.17453333333333332, 0.15280000000000005, 0.14359999999999995, 0.1697333333333333], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.021596118994306426, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "valid_ratio": 0.15, "learning_rate": 0.005033659480879827, "optimization": "rmsprop", "nb_data_augmentation": 1, "learning_rate_decay_method": "discrete", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 4.092257082698079e-06, "rotation_range": [0, 0], "momentum": 0.5907971328654074}, "accuracy_valid_max": 0.8608, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8302666666666667, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.29733333333333334, 0.3368, 0.4438666666666667, 0.5230666666666667, 0.5566666666666666, 0.5010666666666667, 0.3728, 0.5649333333333333, 0.6013333333333334, 0.6792, 0.6844, 0.7065333333333333, 0.6850666666666667, 0.6696, 0.6917333333333333, 0.7113333333333334, 0.748, 0.7370666666666666, 0.5694666666666667, 0.6814666666666667, 0.7448, 0.7230666666666666, 0.7369333333333333, 0.7452, 0.7426666666666667, 0.7841333333333333, 0.7916, 0.7629333333333334, 0.7857333333333333, 0.7792, 0.7244, 0.7473333333333333, 0.8024, 0.7812, 0.7870666666666667, 0.8105333333333333, 0.7928, 0.8086666666666666, 0.8264, 0.8217333333333333, 0.7852, 0.7773333333333333, 0.8185333333333333, 0.8422666666666667, 0.7905333333333333, 0.8128, 0.8257333333333333, 0.8196, 0.8076, 0.7908, 0.8145333333333333, 0.8086666666666666, 0.7826666666666666, 0.7950666666666667, 0.7785333333333333, 0.8476, 0.8242666666666667, 0.8105333333333333, 0.7849333333333334, 0.7656, 0.8293333333333334, 0.8410666666666666, 0.7921333333333334, 0.8182666666666667, 0.8430666666666666, 0.7645333333333333, 0.8282666666666667, 0.852, 0.7989333333333334, 0.7669333333333334, 0.8277333333333333, 0.8458666666666667, 0.8357333333333333, 0.82, 0.8096, 0.8602666666666666, 0.8305333333333333, 0.8221333333333334, 0.8472, 0.8542666666666666, 0.8305333333333333, 0.8478666666666667, 0.8253333333333334, 0.8169333333333333, 0.8574666666666667, 0.8245333333333333, 0.8341333333333333, 0.8149333333333333, 0.8282666666666667, 0.8246666666666667, 0.8341333333333333, 0.8486666666666667, 0.8569333333333333, 0.8608, 0.8537333333333333, 0.8521333333333333, 0.8448, 0.8021333333333334, 0.8377333333333333, 0.8058666666666666, 0.8534666666666667, 0.7924, 0.8536, 0.84, 0.8373333333333334, 0.8296, 0.8573333333333333, 0.8549333333333333, 0.8584, 0.8413333333333334, 0.8374666666666667, 0.814, 0.7568, 0.7132, 0.8464, 0.8372, 0.8369333333333333, 0.8428, 0.8149333333333333, 0.818, 0.8532, 0.7524, 0.8581333333333333, 0.804, 0.8537333333333333, 0.8288, 0.8481333333333333, 0.8226666666666667, 0.7950666666666667, 0.7668, 0.8521333333333333, 0.8481333333333333, 0.8524, 0.8281333333333334, 0.8285333333333333, 0.8477333333333333, 0.8473333333333334, 0.8418666666666667, 0.8374666666666667, 0.8404, 0.8254666666666667, 0.8472, 0.8564, 0.8302666666666667], "seed": 228309063, "model": "residualv3", "loss_std": [0.24542932212352753, 0.14378026127815247, 0.1491229385137558, 0.13511893153190613, 0.12958094477653503, 0.12254606187343597, 0.1213194876909256, 0.1164805069565773, 0.11699983477592468, 0.11748060584068298, 0.11464753746986389, 0.11053342372179031, 0.10927567631006241, 0.11403820663690567, 0.10771637409925461, 0.10601241886615753, 0.1065649762749672, 0.1032928004860878, 0.10276082903146744, 0.10059255361557007, 0.10078714042901993, 0.09602104872465134, 0.09688089787960052, 0.09663958847522736, 0.09543616324663162, 0.09741567075252533, 0.09492374956607819, 0.09520980715751648, 0.09493847191333771, 0.09188910573720932, 0.09067513048648834, 0.09138772636651993, 0.08941280096769333, 0.0867549255490303, 0.08454415202140808, 0.08580376207828522, 0.08350716531276703, 0.08393097668886185, 0.08514588326215744, 0.08245531469583511, 0.08498901128768921, 0.082875557243824, 0.08303767442703247, 0.0840442106127739, 0.08340498805046082, 0.08253103494644165, 0.07792834937572479, 0.07991485297679901, 0.07872817665338516, 0.07791589945554733, 0.07875729352235794, 0.07904092967510223, 0.07793718576431274, 0.07726489752531052, 0.0765337347984314, 0.07858779281377792, 0.07544267177581787, 0.07507987320423126, 0.07646752148866653, 0.07411731779575348, 0.07286405563354492, 0.07294867187738419, 0.07691782712936401, 0.07529115676879883, 0.07655815780162811, 0.07603099197149277, 0.0728493481874466, 0.07373948395252228, 0.0731564462184906, 0.07386678457260132, 0.07393334060907364, 0.07267483323812485, 0.07018936425447464, 0.07184263318777084, 0.07085797190666199, 0.07031216472387314, 0.06910718977451324, 0.06949948519468307, 0.06844692677259445, 0.06792709231376648, 0.07052922993898392, 0.06926721334457397, 0.06819537281990051, 0.06702853739261627, 0.06624944508075714, 0.06906679272651672, 0.0702524483203888, 0.06720593571662903, 0.06621609628200531, 0.06937386840581894, 0.06993092596530914, 0.06974273175001144, 0.06414708495140076, 0.06663231551647186, 0.06505656987428665, 0.06835439801216125, 0.06654983013868332, 0.0657794177532196, 0.06616852432489395, 0.06484611332416534, 0.06741736829280853, 0.06699154525995255, 0.06894582509994507, 0.06800726056098938, 0.06801560521125793, 0.06484370678663254, 0.06616494804620743, 0.06314656883478165, 0.06539367884397507, 0.0663018673658371, 0.06264163553714752, 0.064923495054245, 0.0654306411743164, 0.06417153030633926, 0.0671190544962883, 0.061387237161397934, 0.0662725642323494, 0.06362327933311462, 0.06448499858379364, 0.06571007519960403, 0.06401661783456802, 0.06481785327196121, 0.06557735055685043, 0.06328914314508438, 0.06354814022779465, 0.06344831734895706, 0.0641317293047905, 0.06532952189445496, 0.061906784772872925, 0.0650395080447197, 0.0612068846821785, 0.06073469668626785, 0.06083042174577713, 0.0634261891245842, 0.06060350686311722, 0.0642506554722786, 0.061180539429187775, 0.061100561171770096, 0.06180368363857269, 0.062171656638383865, 0.06287392228841782, 0.062406767159700394, 0.06182606518268585, 0.06310418248176575]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:42 2016", "state": "available"}], "summary": "69e9eb62fc10fecfc8a120de73ab1315"}