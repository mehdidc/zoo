{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 64, "f3": 64, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.03639047869250117, 0.04117891743500797, 0.04988348376814027, 0.049735594184888356, 0.045086714265787656, 0.03909151902190585, 0.03892780172413793, 0.035290948275862065, 0.032299511875759156, 0.03372437050168048, 0.03241418223941604, 0.029173606728132195, 0.03292071055124638, 0.032615901819529516, 0.03673486479751135, 0.0354246222154253, 0.03155736550400726, 0.03029723258514989, 0.030564341818281972, 0.030510869181181014, 0.029847448076310127, 0.028656246981153814, 0.03419426564534868, 0.03168589057903476, 0.030676922408912885, 0.03002804951171615, 0.03209891284828685, 0.03189278586590891, 0.028596669201973273, 0.03163345346806706, 0.02963117152888487, 0.028257438233482868, 0.031692761141924014, 0.030869130410843142, 0.028355826712578934, 0.03438264190540142, 0.03056434181828197, 0.03089057618408269, 0.03146985312001571, 0.03202534720196892, 0.02976831896551724, 0.0321147356998473, 0.031763955540102085, 0.029466921904414835, 0.03135896208734595, 0.032866655330242876, 0.03237273472651148, 0.030311900962644335, 0.032800067360397464, 0.029808214119197436, 0.033177637298123945, 0.033562583190548494, 0.031923491379310345, 0.03032506652081819, 0.0307938052891887, 0.03172594788748468, 0.029454296764216834, 0.030987923142045636, 0.03186859868459077, 0.03025918144758052, 0.029431187980788982, 0.029366695561925473, 0.02991514975992995, 0.030346298899601963, 0.030207571208028694, 0.030513545038569734, 0.03018834487438539, 0.02905270388149573, 0.03042392478854822, 0.029927580486991685, 0.029170807957580435, 0.028992689194450312, 0.028567468839559924, 0.029116333945605182, 0.029687451107663604, 0.02960942634976676, 0.029917878898556946, 0.03024928630952198, 0.029900893544501088, 0.0303202797065549, 0.02943827660287713, 0.029842280660736797, 0.02904395946339464, 0.029471539506847725, 0.02988875523903226, 0.029116333945605182, 0.029626578806730187, 0.030515923381490277, 0.030273568602042465, 0.030596677041248833, 0.03010981036131006, 0.030273568602042465, 0.02991514975992995, 0.029959088952427573, 0.030074840306038367, 0.030049793651796216, 0.029736303289971185, 0.029580919045710568, 0.029498614881879878, 0.028801502717465725, 0.030088109594266627, 0.030527812316734945, 0.029864160059704357, 0.029959088952427573, 0.029900590146919617, 0.029899376525807122, 0.030320279706554897, 0.029747283974707318, 0.030155872640310832, 0.030192852144798013, 0.030168805587825594, 0.029947883008907657, 0.02991272364989312, 0.030181131841638172, 0.030331946242847872, 0.030562264075263443, 0.030446578052036904, 0.030285552676538364, 0.029971198772826498, 0.029888451718234888, 0.029653512622237067, 0.029449676458184578, 0.02969875531759142, 0.02970608547800686, 0.029507224563893347, 0.029910600642184263, 0.029676448283970727], "moving_avg_accuracy_train": [0.02092432228915662, 0.05589890813253011, 0.10141265060240962, 0.1453423569277108, 0.1983603614457831, 0.2532654774096385, 0.3089606728915662, 0.362449018253012, 0.4116639244096385, 0.45693625561325296, 0.5008110600218072, 0.5402913245015541, 0.5782143757863385, 0.6121003930269818, 0.6438167467965727, 0.6723802904904095, 0.6996382140016094, 0.7250057179026533, 0.7480623750280506, 0.7696110885794625, 0.788981399149227, 0.8069935566740634, 0.8238327928741269, 0.8394069684059914, 0.8537461096678018, 0.8667642886106602, 0.8784429990568232, 0.889349169783671, 0.8992823815703641, 0.9082034468771831, 0.9166277369786214, 0.9241907727687111, 0.9311810516665389, 0.9374958343010897, 0.943188551322788, 0.948415535798943, 0.953282190050374, 0.9576221751116016, 0.9615987565462246, 0.9651612076988311, 0.968395651687984, 0.9713772461577398, 0.9741053912708815, 0.9765536623847573, 0.978759459549896, 0.9807776212756292, 0.9826174984552951, 0.9842922132181994, 0.9857829843662589, 0.9871364442127655, 0.9883827960264288, 0.989490393682822, 0.9905037037121301, 0.9914203890638087, 0.9922548185309218, 0.9930034518886729, 0.9936842813986008, 0.994278202656331, 0.9948362634147943, 0.9953479307480135, 0.9958037250226098, 0.9962209993576983, 0.9965965462592778, 0.9969298321453983, 0.9972368489308585, 0.9975108108751221, 0.9977573766249592, 0.9979816389624633, 0.998183475066217, 0.9983651275595953, 0.9985286148036358, 0.9986757533232722, 0.998808177990945, 0.9989273601918505, 0.9990346241726654, 0.9991311617553988, 0.9992180455798589, 0.9992962410218731, 0.9993666169196858, 0.9994299552277172, 0.9994869597049454, 0.9995382637344509, 0.9995844373610058, 0.9996259936249052, 0.9996633942624147, 0.9996970548361732, 0.9997273493525559, 0.9997546144173003, 0.9997791529755703, 0.9998012376780132, 0.9998211139102119, 0.9998390025191907, 0.9998551022672716, 0.9998695920405444, 0.9998826328364899, 0.999894369552841, 0.9999049325975569, 0.9999144393378012, 0.9999229954040211, 0.9999306958636189, 0.999937626277257, 0.9999438636495314, 0.9999494772845782, 0.9999545295561203, 0.9999590766005083, 0.9999631689404574, 0.9999668520464117, 0.9999701668417705, 0.9999731501575935, 0.9999758351418341, 0.9999782516276506, 0.9999804264648856, 0.999982383818397, 0.9999841454365573, 0.9999857308929015, 0.9999871578036114, 0.9999884420232502, 0.9999895978209252, 0.9999906380388327, 0.9999915742349494, 0.9999924168114545, 0.999993175130309, 0.9999938576172781, 0.9999944718555502, 0.9999950246699952, 0.9999955222029957, 0.9999959699826961], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.003940445369344471, 0.014555395726649534, 0.03174336293651521, 0.04593739852330857, 0.06664183789868271, 0.08710879993985414, 0.10631551314379999, 0.12143298963496768, 0.1310886535635209, 0.1364260439606567, 0.14010842572159102, 0.14012580469994887, 0.13905664459868944, 0.13548533961871906, 0.1309901495247878, 0.12523401882745647, 0.1193975664919927, 0.1132494021303187, 0.10670894685747005, 0.10021717567321024, 0.09357233849001143, 0.08713504500930595, 0.08097357939058913, 0.07505921594300614, 0.06940379309784095, 0.0639886706349514, 0.05881733407062409, 0.05400610170287005, 0.049493509800176735, 0.045260427476035835, 0.041373102701850975, 0.03775058802492547, 0.03441530521405766, 0.03133266301014653, 0.028491059952934078, 0.025887846258066352, 0.02351222054468646, 0.02133051772320293, 0.01933978475003833, 0.01752002579896686, 0.015862177870340888, 0.014355969233545506, 0.012987357292016185, 0.01174256784583791, 0.010612100931457726, 0.009587547629072888, 0.0086592591984919, 0.007818575304476515, 0.007056719361571845, 0.0063675341074196125, 0.005744761232268446, 0.005181326062157632, 0.004672434630881337, 0.0042127539760990415, 0.0037977450313094172, 0.003423014595317516, 0.0030848848951800624, 0.0027795710878055118, 0.0025044168653161904, 0.002256331409923526, 0.002032568004717966, 0.0018308782650826806, 0.0016490597578519867, 0.0014851534974037715, 0.001337486481422383, 0.0012044133296022868, 0.001084519148662993, 0.000976519876160899, 0.0008792345288598152, 0.0007916080546289887, 0.0007126878018767653, 0.000641613869384736, 0.0005776103090797366, 0.000519977117744877, 0.0004680829560246118, 0.00042135853596607083, 0.00037929062156003907, 0.0003414165901484012, 0.0003073195060364976, 0.0002766236611042264, 0.0002489905405876204, 0.00022411517545984982, 0.00020172284594796794, 0.00018156610366079466, 0.00016342208256389025, 0.000147090071615533, 0.00013238932427348546, 0.00011915708229993657, 0.00010724679333752063, 9.652650361050652e-05, 8.687740883091361e-05, 7.819254796880302e-05, 7.037562598891715e-05, 6.333995297179091e-05, 5.700748823584187e-05, 5.1307979166854025e-05, 4.6178185451391654e-05, 4.156118030924314e-05, 3.7405721134741255e-05, 3.36656826949693e-05, 3.0299546701171125e-05, 2.7269942174370005e-05, 2.454323157301896e-05, 2.2089138144746688e-05, 1.9880410410786013e-05, 1.7892520094923747e-05, 1.6103390172856604e-05, 1.4493150046385383e-05, 1.304391514330654e-05, 1.173958851123924e-05, 1.0565682214748631e-05, 9.509156562526754e-06, 8.558275387368998e-06, 7.702475778318981e-06, 6.932250823533459e-06, 6.239044065847679e-06, 5.615154502243638e-06, 5.053651074833664e-06, 4.5482957058299535e-06, 4.093474023415478e-06, 3.6841330104904326e-06, 3.315724884868756e-06, 2.9841565884780474e-06, 2.685744325228138e-06, 2.4171726431396193e-06, 2.1754576066774365e-06, 1.957913650569634e-06], "duration": 72099.475868, "accuracy_train": [0.20924322289156627, 0.37067018072289154, 0.5110363328313253, 0.5407097138554217, 0.6755224021084337, 0.7474115210843374, 0.8102174322289156, 0.8438441265060241, 0.8545980798192772, 0.8643872364457831, 0.8956842996987951, 0.8956137048192772, 0.9195218373493976, 0.9170745481927711, 0.9292639307228916, 0.9294521837349398, 0.9449595256024096, 0.9533132530120482, 0.9555722891566265, 0.9635495105421686, 0.9633141942771084, 0.9691029743975904, 0.9753859186746988, 0.9795745481927711, 0.9827983810240963, 0.9839278990963856, 0.9835513930722891, 0.9875047063253012, 0.9886812876506024, 0.9884930346385542, 0.9924463478915663, 0.9922580948795181, 0.9940935617469879, 0.9943288780120482, 0.9944230045180723, 0.9954583960843374, 0.997082078313253, 0.9966820406626506, 0.9973879894578314, 0.9972232680722891, 0.9975056475903614, 0.9982115963855421, 0.9986586972891566, 0.9985881024096386, 0.9986116340361446, 0.9989410768072289, 0.9991763930722891, 0.9993646460843374, 0.9991999246987951, 0.9993175828313253, 0.9995999623493976, 0.9994587725903614, 0.9996234939759037, 0.9996705572289156, 0.9997646837349398, 0.9997411521084337, 0.9998117469879518, 0.9996234939759037, 0.9998588102409639, 0.9999529367469879, 0.9999058734939759, 0.999976468373494, 0.999976468373494, 0.9999294051204819, 1.0, 0.999976468373494, 0.999976468373494, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "end": "2016-01-19 12:05:56.623000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0], "accuracy_valid": [0.20070043103448276, 0.35856681034482757, 0.501885775862069, 0.521551724137931, 0.6489762931034483, 0.7099946120689655, 0.7679148706896551, 0.7952586206896551, 0.7960668103448276, 0.7994342672413793, 0.8239493534482759, 0.8177532327586207, 0.8312230603448276, 0.8270474137931034, 0.8324353448275862, 0.83203125, 0.8394396551724138, 0.8424030172413793, 0.8442887931034483, 0.841864224137931, 0.8430765086206896, 0.8480603448275862, 0.8464439655172413, 0.8483297413793104, 0.8502155172413793, 0.8511584051724138, 0.8488685344827587, 0.8522359913793104, 0.8542564655172413, 0.8530441810344828, 0.8558728448275862, 0.8541217672413793, 0.8556034482758621, 0.8577586206896551, 0.8547952586206896, 0.8585668103448276, 0.8588362068965517, 0.8619342672413793, 0.8620689655172413, 0.861260775862069, 0.8611260775862069, 0.8626077586206896, 0.8619342672413793, 0.861395474137931, 0.8631465517241379, 0.86328125, 0.8624730603448276, 0.861395474137931, 0.8628771551724138, 0.8628771551724138, 0.8616648706896551, 0.8630118534482759, 0.8630118534482759, 0.8640894396551724, 0.8644935344827587, 0.8631465517241379, 0.8647629310344828, 0.86328125, 0.8644935344827587, 0.8654364224137931, 0.865167025862069, 0.8655711206896551, 0.8647629310344828, 0.8644935344827587, 0.865167025862069, 0.8646282327586207, 0.8648976293103449, 0.8654364224137931, 0.8650323275862069, 0.865167025862069, 0.865301724137931, 0.8646282327586207, 0.8655711206896551, 0.8659752155172413, 0.8655711206896551, 0.865167025862069, 0.8665140086206896, 0.8655711206896551, 0.8659752155172413, 0.8659752155172413, 0.8655711206896551, 0.8658405172413793, 0.8659752155172413, 0.8663793103448276, 0.8657058189655172, 0.8659752155172413, 0.8654364224137931, 0.8657058189655172, 0.8657058189655172, 0.8659752155172413, 0.8655711206896551, 0.8657058189655172, 0.8647629310344828, 0.8657058189655172, 0.8655711206896551, 0.8654364224137931, 0.8658405172413793, 0.8655711206896551, 0.8661099137931034, 0.8658405172413793, 0.8658405172413793, 0.8659752155172413, 0.8655711206896551, 0.8657058189655172, 0.8650323275862069, 0.8655711206896551, 0.8659752155172413, 0.8661099137931034, 0.8662446120689655, 0.8658405172413793, 0.8661099137931034, 0.8658405172413793, 0.8658405172413793, 0.8659752155172413, 0.8658405172413793, 0.8659752155172413, 0.8661099137931034, 0.8659752155172413, 0.8659752155172413, 0.8661099137931034, 0.8659752155172413, 0.8662446120689655, 0.8662446120689655, 0.8665140086206896, 0.8663793103448276, 0.8662446120689655, 0.8661099137931034], "accuracy_test": 0.859375, "start": "2016-01-18 16:04:17.147000", "learning_rate_per_epoch": [0.0005682920455001295, 0.0005260975449346006, 0.0004870358679909259, 0.00045087444595992565, 0.00041739793960005045, 0.0003864069876726717, 0.00035771707189269364, 0.00033115732367150486, 0.000306569563690573, 0.00028380739968270063, 0.00026273526600562036, 0.0002432277105981484, 0.0002251685509691015, 0.00020845024846494198, 0.0001929732388816774, 0.00017864536494016647, 0.00016538130876142532, 0.00015310208254959434, 0.000141734562930651, 0.00013121105439495295, 0.00012146890367148444, 0.00011245008499827236, 0.00010410089453216642, 9.637161565478891e-05, 8.92162206582725e-05, 8.259210153482854e-05, 7.645980804227293e-05, 7.078282214934006e-05, 6.552733975695446e-05, 6.0662066971417516e-05, 5.615803092950955e-05, 5.198841245146468e-05, 4.8128378693945706e-05, 4.4554944906849414e-05, 4.124683255213313e-05, 3.818433833657764e-05, 3.53492287104018e-05, 3.272461981396191e-05, 3.0294882890302688e-05, 2.804554969770834e-05, 2.596322519821115e-05, 2.4035509341047145e-05, 2.2250922484090552e-05, 2.059883627225645e-05, 1.9069415429839864e-05, 1.765355045790784e-05, 1.6342810340574943e-05, 1.5129389794310555e-05, 1.4006063793203793e-05, 1.2966142094228417e-05, 1.2003432857454754e-05, 1.111220262828283e-05, 1.0287144505127799e-05, 9.523345397610683e-06, 8.816256013233215e-06, 8.161667210515589e-06, 7.555679985671304e-06, 6.994686373218428e-06, 6.475345344369998e-06, 5.994564162392635e-06, 5.549480192712508e-06, 5.137442713021301e-06, 4.755997906613629e-06, 4.402874765219167e-06, 4.075970537087414e-06, 3.773337994061876e-06, 3.4931754271383397e-06, 3.233814368286403e-06, 2.9937102681287797e-06, 2.771433400994283e-06, 2.565660224718158e-06, 2.3751651951897657e-06, 2.1988139451423194e-06, 2.0355564629426226e-06, 1.88442049875448e-06, 1.744506107570487e-06, 1.6149800785569823e-06, 1.4950711602068623e-06, 1.3840651718055597e-06, 1.281301138078561e-06, 1.1861671964652487e-06, 1.098096731766418e-06, 1.0165653065996594e-06, 9.410874213244824e-07, 8.712136150279548e-07, 8.065277938840154e-07, 7.466447300430445e-07, 6.912079015819472e-07, 6.39887105080561e-07, 5.923768071625091e-07, 5.483940412887023e-07, 5.076769298284489e-07, 4.6998295033517934e-07, 4.3508768499123107e-07, 4.02783314257249e-07, 3.7287748000380816e-07, 3.4519209179961763e-07, 3.1956227530827164e-07, 2.9583543437183835e-07, 2.738702562510298e-07, 2.5353594423904724e-07, 2.3471142185371718e-07, 2.172845796621914e-07, 2.0115165000333945e-07, 1.862165532884319e-07, 1.7239035798866098e-07, 1.5959072641180683e-07, 1.477414457440318e-07, 1.3677194488082023e-07, 1.2661691073390102e-07, 1.1721586190560629e-07, 1.0851282183921285e-07, 1.0045596354757436e-07, 9.299731118517229e-08, 8.60924487255943e-08, 7.970025706072192e-08, 7.378267241620051e-08, 6.830445897776372e-08, 6.323299572841279e-08, 5.853807394373689e-08, 5.419174087251122e-08, 5.016811499558571e-08, 4.644323325919686e-08, 4.299491962456159e-08, 3.980263585390276e-08, 3.68473713763251e-08, 3.411152960097752e-08], "accuracy_train_last": 1.0, "error_valid": [0.7992995689655172, 0.6414331896551724, 0.49811422413793105, 0.47844827586206895, 0.3510237068965517, 0.2900053879310345, 0.23208512931034486, 0.20474137931034486, 0.20393318965517238, 0.20056573275862066, 0.1760506465517241, 0.18224676724137934, 0.16877693965517238, 0.17295258620689657, 0.1675646551724138, 0.16796875, 0.1605603448275862, 0.15759698275862066, 0.1557112068965517, 0.15813577586206895, 0.1569234913793104, 0.1519396551724138, 0.15355603448275867, 0.1516702586206896, 0.14978448275862066, 0.1488415948275862, 0.15113146551724133, 0.1477640086206896, 0.14574353448275867, 0.14695581896551724, 0.1441271551724138, 0.14587823275862066, 0.1443965517241379, 0.14224137931034486, 0.1452047413793104, 0.14143318965517238, 0.1411637931034483, 0.13806573275862066, 0.13793103448275867, 0.13873922413793105, 0.13887392241379315, 0.1373922413793104, 0.13806573275862066, 0.13860452586206895, 0.1368534482758621, 0.13671875, 0.13752693965517238, 0.13860452586206895, 0.1371228448275862, 0.1371228448275862, 0.13833512931034486, 0.1369881465517241, 0.1369881465517241, 0.13591056034482762, 0.13550646551724133, 0.1368534482758621, 0.13523706896551724, 0.13671875, 0.13550646551724133, 0.13456357758620685, 0.13483297413793105, 0.13442887931034486, 0.13523706896551724, 0.13550646551724133, 0.13483297413793105, 0.13537176724137934, 0.13510237068965514, 0.13456357758620685, 0.13496767241379315, 0.13483297413793105, 0.13469827586206895, 0.13537176724137934, 0.13442887931034486, 0.13402478448275867, 0.13442887931034486, 0.13483297413793105, 0.1334859913793104, 0.13442887931034486, 0.13402478448275867, 0.13402478448275867, 0.13442887931034486, 0.13415948275862066, 0.13402478448275867, 0.13362068965517238, 0.13429418103448276, 0.13402478448275867, 0.13456357758620685, 0.13429418103448276, 0.13429418103448276, 0.13402478448275867, 0.13442887931034486, 0.13429418103448276, 0.13523706896551724, 0.13429418103448276, 0.13442887931034486, 0.13456357758620685, 0.13415948275862066, 0.13442887931034486, 0.13389008620689657, 0.13415948275862066, 0.13415948275862066, 0.13402478448275867, 0.13442887931034486, 0.13429418103448276, 0.13496767241379315, 0.13442887931034486, 0.13402478448275867, 0.13389008620689657, 0.13375538793103448, 0.13415948275862066, 0.13389008620689657, 0.13415948275862066, 0.13415948275862066, 0.13402478448275867, 0.13415948275862066, 0.13402478448275867, 0.13389008620689657, 0.13402478448275867, 0.13402478448275867, 0.13389008620689657, 0.13402478448275867, 0.13375538793103448, 0.13375538793103448, 0.1334859913793104, 0.13362068965517238, 0.13375538793103448, 0.13389008620689657], "accuracy_train_std": [0.03481834753571007, 0.04337547124111767, 0.04295905145258961, 0.04420091426081497, 0.04497889899487169, 0.041263201930622474, 0.038303669647771585, 0.03578070282700212, 0.03476151731463208, 0.034462667555373534, 0.03045682519376938, 0.031145776719066626, 0.028876978110761318, 0.027855482739647896, 0.026028021363679422, 0.02597384222603209, 0.024248344910388624, 0.02313674704480954, 0.02155558641986667, 0.019554243591542706, 0.02106756176553509, 0.018700922771876148, 0.01640821017674474, 0.014198914016437013, 0.013622901446495719, 0.013531053557061455, 0.012182634626555076, 0.010742464566508979, 0.009872155373153566, 0.010648236504660841, 0.008119843378116734, 0.008521276021460609, 0.007009225879021531, 0.0072264318526998736, 0.007042957239465353, 0.006136071841338152, 0.00495752789241856, 0.005305586024971857, 0.004535381451131578, 0.004852082156656509, 0.004417682938769395, 0.0037033726605621236, 0.003185994526513594, 0.0034074575225711504, 0.003335436857140013, 0.0029983207693838766, 0.0025478351751400488, 0.002301171700738528, 0.002661051382384634, 0.0023666546572075836, 0.001721994199592969, 0.001983787294257412, 0.0016732293707295914, 0.0015701079929981436, 0.001335303177627175, 0.001524115673447974, 0.0011980348325826295, 0.001779712951919149, 0.0010407259218512793, 0.0006045384308483212, 0.0008523517637554043, 0.00042812042071395547, 0.00042812042071395547, 0.0007392826653052056, 0.0, 0.00042812042071395547, 0.00042812042071395547, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0.028251584792171054, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.6183548850721035, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0006138706893666552, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "optimization": "rmsprop", "nb_data_augmentation": 4, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 8.701244161202882e-10, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.07424795649733565}, "accuracy_valid_max": 0.8665140086206896, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -4], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8661099137931034, "loss_train": [5.1317853927612305, 1.5732988119125366, 1.246886134147644, 1.0160208940505981, 0.8501777648925781, 0.7309191226959229, 0.639901876449585, 0.5682757496833801, 0.5117624402046204, 0.45987075567245483, 0.41689395904541016, 0.379779577255249, 0.3449751138687134, 0.3142909109592438, 0.2872176468372345, 0.264285147190094, 0.24181979894638062, 0.22262829542160034, 0.20406652987003326, 0.18837958574295044, 0.17392078042030334, 0.16119176149368286, 0.14760667085647583, 0.13615497946739197, 0.12673035264015198, 0.11754616349935532, 0.11150547862052917, 0.10352617502212524, 0.09711680561304092, 0.09158527106046677, 0.08450384438037872, 0.08056207746267319, 0.07573945075273514, 0.07266049832105637, 0.06741325557231903, 0.06351939588785172, 0.06114746630191803, 0.058556850999593735, 0.05610964819788933, 0.05384057015180588, 0.0520763099193573, 0.049539558589458466, 0.04860398545861244, 0.04667600616812706, 0.04533538594841957, 0.04406546428799629, 0.0425417460501194, 0.041257236152887344, 0.03977422043681145, 0.038988105952739716, 0.03875526785850525, 0.03793855011463165, 0.0367070697247982, 0.03638595715165138, 0.035466019064188004, 0.035739876329898834, 0.0341930091381073, 0.03420327603816986, 0.03380173072218895, 0.03390133008360863, 0.03244394809007645, 0.03223619610071182, 0.032381679862737656, 0.031973909586668015, 0.030838923528790474, 0.03101673722267151, 0.0307102482765913, 0.030088217929005623, 0.030925123021006584, 0.030225204303860664, 0.02938009425997734, 0.029799573123455048, 0.029603373259305954, 0.02943124808371067, 0.02977742999792099, 0.02886991575360298, 0.028759773820638657, 0.02879268117249012, 0.029132256284356117, 0.028364069759845734, 0.02868206799030304, 0.029424063861370087, 0.028810452669858932, 0.027999158948659897, 0.029140546917915344, 0.028358647599816322, 0.027685081586241722, 0.028023257851600647, 0.027354303747415543, 0.028759531676769257, 0.02780921757221222, 0.027617646381258965, 0.028385872021317482, 0.028567001223564148, 0.02812078595161438, 0.028943434357643127, 0.028099486604332924, 0.02810303308069706, 0.02733515575528145, 0.02825181372463703, 0.02832471765577793, 0.027161801233887672, 0.028047939762473106, 0.02794289030134678, 0.02703726291656494, 0.02685089223086834, 0.027981864288449287, 0.027165839448571205, 0.02753697708249092, 0.027574554085731506, 0.027197204530239105, 0.027584293857216835, 0.0270036980509758, 0.027850234881043434, 0.027548247948288918, 0.027691906318068504, 0.02701817825436592, 0.02748109959065914, 0.027272090315818787, 0.02841838262975216, 0.026412906125187874, 0.02811508998274803, 0.02671068161725998, 0.027242111042141914, 0.027786122635006905, 0.027199333533644676, 0.02705705724656582], "accuracy_train_first": 0.20924322289156627, "model": "residualv2", "loss_std": [28.250930786132812, 0.27711325883865356, 0.16990885138511658, 0.13489697873592377, 0.13364437222480774, 0.11272481083869934, 0.10444413125514984, 0.09816548973321915, 0.0909116342663765, 0.08575859665870667, 0.07706437259912491, 0.07681465893983841, 0.06967508047819138, 0.06436354666948318, 0.06329438090324402, 0.05727777257561684, 0.05717211961746216, 0.05417288839817047, 0.04986828193068504, 0.04830055683851242, 0.04553641006350517, 0.04206756129860878, 0.03944834694266319, 0.03748299181461334, 0.0350746251642704, 0.03214824199676514, 0.03319670632481575, 0.03067474067211151, 0.028201252222061157, 0.026276765391230583, 0.024337483569979668, 0.023917092010378838, 0.023930206894874573, 0.022009190171957016, 0.02211037278175354, 0.01945224218070507, 0.018979044631123543, 0.018072493374347687, 0.017829008400440216, 0.018478242680430412, 0.01715889945626259, 0.016710972413420677, 0.015580876730382442, 0.01591002754867077, 0.015112848952412605, 0.014868276193737984, 0.014340105466544628, 0.01450741570442915, 0.01361164916306734, 0.01273640152066946, 0.013550939969718456, 0.01426670141518116, 0.012922588735818863, 0.013277211226522923, 0.012961918488144875, 0.014172478578984737, 0.012577531859278679, 0.01310994103550911, 0.012713572941720486, 0.011963685974478722, 0.011929802596569061, 0.012227421626448631, 0.01133488304913044, 0.011530065909028053, 0.011928610503673553, 0.0105606559664011, 0.011146152392029762, 0.011221515014767647, 0.011607260443270206, 0.010968881659209728, 0.01040297094732523, 0.010649969801306725, 0.011328238062560558, 0.01054700929671526, 0.012261541560292244, 0.01075566466897726, 0.010757938027381897, 0.011124113574624062, 0.010186166502535343, 0.010863656178116798, 0.010425764136016369, 0.010841654613614082, 0.010442311875522137, 0.009991497732698917, 0.010759051889181137, 0.010457729920744896, 0.009905855171382427, 0.01087038405239582, 0.010791164822876453, 0.010698812082409859, 0.009958029724657536, 0.010644202120602131, 0.01092490740120411, 0.011111103929579258, 0.010057705454528332, 0.010541998781263828, 0.010912344790995121, 0.010473399423062801, 0.010017077438533306, 0.010635457001626492, 0.01040556188672781, 0.010633527301251888, 0.010844266973435879, 0.01018302608281374, 0.010575715452432632, 0.010160652920603752, 0.009996367618441582, 0.010440434329211712, 0.010278059169650078, 0.009980269707739353, 0.010955589823424816, 0.01052421610802412, 0.01025563757866621, 0.01053385529667139, 0.010776643641293049, 0.010013798251748085, 0.010399719700217247, 0.010735105723142624, 0.010825480334460735, 0.010928447358310223, 0.009981147944927216, 0.011197783052921295, 0.010152661241590977, 0.010784249752759933, 0.011234900914132595, 0.010806224308907986, 0.009661938063800335]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:02 2016", "state": "available"}], "summary": "755ef73b64406edd1697d17d7cfc5a24"}