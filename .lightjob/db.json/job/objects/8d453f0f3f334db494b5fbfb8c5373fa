{"content": {"hp_model": {"f0": 32, "f1": 16, "f2": 16, "f3": 16, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.4903825521469116, 1.1267733573913574, 0.9847776889801025, 0.8903709650039673, 0.819631814956665, 0.7689241766929626, 0.7262067198753357, 0.6897048354148865, 0.6567111611366272, 0.6284933686256409, 0.6025749444961548, 0.5784294009208679, 0.5534553527832031, 0.5314114689826965, 0.5081127882003784, 0.48808032274246216, 0.4686516225337982, 0.451764315366745, 0.4335980713367462, 0.4206990599632263, 0.40611597895622253, 0.3923875391483307, 0.38124045729637146, 0.367095023393631, 0.3603866696357727, 0.34560057520866394, 0.33745622634887695, 0.3213867247104645, 0.321755588054657, 0.31154128909111023, 0.3016182780265808, 0.30157944560050964, 0.29008182883262634, 0.28600627183914185, 0.2775989770889282, 0.27350670099258423, 0.26917728781700134, 0.26268044114112854, 0.26072755455970764, 0.25836437940597534, 0.24678605794906616, 0.2436850368976593, 0.24934838712215424, 0.24152009189128876, 0.23847904801368713, 0.2331935167312622, 0.23562133312225342, 0.22862058877944946, 0.2239251732826233, 0.2297898381948471, 0.2180202454328537, 0.21957559883594513, 0.2192111611366272, 0.2123565524816513, 0.21589615941047668, 0.21297429502010345, 0.20619964599609375, 0.20878250896930695, 0.21070945262908936, 0.20511475205421448, 0.20894111692905426, 0.20575208961963654], "moving_avg_accuracy_train": [0.05756118566006828, 0.11589858710259779, 0.17364648635768498, 0.22850220342997293, 0.2793904546747386, 0.3270518203079938, 0.3711351283219526, 0.41218634128802234, 0.44960447421463723, 0.48388508019733556, 0.5160580577638423, 0.5451277059141837, 0.5715437583720917, 0.5959760064043915, 0.6182068451096518, 0.638830620183635, 0.6575873302502199, 0.6746960896982045, 0.6905611118191924, 0.7048373065792721, 0.7181646101763743, 0.73062453761504, 0.7417963312407175, 0.7507722567003021, 0.7605363585496517, 0.7697748046437453, 0.7768225244666077, 0.7835933357369551, 0.7907885735860632, 0.7959391330729257, 0.8026555726979883, 0.8092698495747841, 0.8146437006615102, 0.8207356028014314, 0.8254235464203286, 0.8288775414749088, 0.8328954144038299, 0.8370017819992996, 0.8411766016364406, 0.8446296332063697, 0.8480902435060723, 0.8507239195580583, 0.852863858028609, 0.8565172440223059, 0.8601147164523935, 0.8600115993371928, 0.8623762599322665, 0.8648368065523198, 0.8668280481758346, 0.8689829249001024, 0.8722846709102305, 0.8743938284039251, 0.876849781423167, 0.8794299819964742, 0.8805686257195843, 0.8829164147430023, 0.8841715170510018, 0.8859682826412597, 0.8877691665749005, 0.888250567100873, 0.8893254604992205, 0.8900813481137041], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05581290003765059, 0.11222553299134033, 0.16812503235598641, 0.22052713167121607, 0.2690725336208113, 0.31472784497070305, 0.35667417639042487, 0.39525492328451495, 0.4303051263156267, 0.46186045705755796, 0.4907282399474347, 0.5168577879406431, 0.5400793533672114, 0.5612595239698728, 0.5801843116425391, 0.5969938054594599, 0.612283100318258, 0.6257352013839472, 0.6375094139733387, 0.6482853398105681, 0.6583142924164842, 0.6672222504112816, 0.6744215415128492, 0.6799741986379197, 0.685491344850935, 0.6907772477811276, 0.6940279480312528, 0.6976423195496636, 0.7014354518172122, 0.7036498932695272, 0.7067599074723185, 0.7096565765048306, 0.7116470500196337, 0.7141007443964353, 0.7159906570143972, 0.7169988661152918, 0.7179793494209313, 0.7194377209547419, 0.7212211820106231, 0.7224569974974373, 0.7237543959216394, 0.7244337732534212, 0.7250106507755941, 0.7265705267277787, 0.728013095195814, 0.7274965301227687, 0.7283133598382779, 0.7288929037019652, 0.7295558300109856, 0.730587945852131, 0.7325554772740716, 0.732760667027839, 0.7335964284971184, 0.7345000986651022, 0.7342900702086071, 0.7354001374535597, 0.7354977896061706, 0.7360435137517283, 0.7364359797240705, 0.7359113223578382, 0.7363109774902772, 0.7367031701685839], "moving_var_accuracy_train": [0.029819610851335658, 0.0574669214298037, 0.08173360810220465, 0.10064259455161834, 0.11388486212921009, 0.12294082788253063, 0.12813678750335966, 0.13048992752689423, 0.1300419848196292, 0.1276142258565354, 0.12416870764033637, 0.11935723686856461, 0.11370178362883866, 0.10770401796116118, 0.10138150787089878, 0.09507141796852914, 0.08873060372437354, 0.08249193020057723, 0.07650802752261444, 0.07069151240180253, 0.06522091435214632, 0.060096071042923006, 0.05520974469396329, 0.05041387536527113, 0.04623052699306428, 0.04237561426985909, 0.0385850860351873, 0.035139172398996533, 0.03209119818844402, 0.029120832736848998, 0.02661474451429809, 0.02434700799029453, 0.022172211670785844, 0.020288991948848662, 0.018457884092329416, 0.016719466419630062, 0.015192809503523669, 0.013825288846633418, 0.012599622032993993, 0.011446970672900942, 0.01041005601842852, 0.00943147666250691, 0.008529543026175907, 0.007796713786528781, 0.007133518678843067, 0.006420262509213786, 0.005828560835861453, 0.005300193359300403, 0.004805859412199322, 0.00436706491425051, 0.004028472163264035, 0.003665661854936503, 0.0033533810165373695, 0.0030779598298700836, 0.0027818324326366766, 0.0025532582090593515, 0.002312109924385328, 0.0021099542312238077, 0.0019281474545834348, 0.0017374184273227507, 0.0015740751469507759, 0.0014218099270272662], "duration": 14548.719583, "accuracy_train": [0.5756118566006829, 0.6409352000853635, 0.6933775796534699, 0.7222036570805648, 0.7373847158776301, 0.7560041110072905, 0.7678849004475821, 0.7816472579826504, 0.7863676705541713, 0.7924105340416205, 0.805614855862403, 0.8067545392672573, 0.8092882304932633, 0.8158662386950905, 0.8182843934569952, 0.8244445958494832, 0.8263977208494832, 0.8286749247300664, 0.8333463109080842, 0.833323059419989, 0.8381103425502953, 0.8427638845630308, 0.8423424738718162, 0.8315555858365633, 0.8484132751937985, 0.8529208194905868, 0.8402520028723699, 0.8445306371700813, 0.8555457142280363, 0.842294168454688, 0.8631035293235512, 0.8687983414659468, 0.8630083604420451, 0.8755627220607235, 0.8676150389904023, 0.8599634969661315, 0.8690562707641197, 0.8739590903585271, 0.8787499783707088, 0.8757069173357327, 0.879235736203396, 0.8744270040259321, 0.8721233042635659, 0.8893977179655776, 0.892491968323182, 0.8590835453003876, 0.8836582052879292, 0.8869817261327981, 0.8847492227874677, 0.8883768154185124, 0.9020003850013842, 0.8933762458471761, 0.8989533585963455, 0.9026517871562385, 0.8908164192275747, 0.9040465159537652, 0.8954674378229974, 0.9021391729535806, 0.903977121977667, 0.8925831718346253, 0.8989995010843485, 0.8968843366440569], "end": "2016-02-01 15:01:38.583000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0], "moving_var_accuracy_valid": [0.028035718295515002, 0.05387361287687301, 0.07660903785214832, 0.09366195418072223, 0.10550566321667991, 0.1137147639851119, 0.11817874006275902, 0.11975713233463567, 0.1188380696938715, 0.11591591280857844, 0.11182446152851414, 0.10678679488062712, 0.1009612853003079, 0.09490255341109768, 0.08863562636608745, 0.08231509547090858, 0.07618744875933112, 0.07019733509113167, 0.06442529032092015, 0.05902784648767335, 0.054030280852251415, 0.04934141820775994, 0.04487374451826994, 0.04066385807678031, 0.03687142239012438, 0.03343574707919871, 0.030187275840324317, 0.02728612138954978, 0.024686999922186877, 0.022262433688479764, 0.02012324001470586, 0.018186432236590503, 0.016403446876249644, 0.014817287733477414, 0.013367704887461456, 0.01204008276903545, 0.010844726619745646, 0.00977939558554674, 0.00883008262703267, 0.007960819523586451, 0.007179886755267904, 0.006466052061771565, 0.005822441944674704, 0.0052620966670830676, 0.004754616034439491, 0.0042815559862677535, 0.0038594052846982287, 0.003476487596037844, 0.0031327940780547818, 0.0028291020382351932, 0.0025810324534785833, 0.0023233081336461858, 0.002097263795383355, 0.0018948869937975568, 0.0017057953019906406, 0.0015463060153864253, 0.0013917612373339687, 0.0012552654471879735, 0.001131125168324195, 0.0010204900396592524, 0.0009198785537172913, 0.0008292750342178179], "accuracy_test": 0.1157764668367347, "start": "2016-02-01 10:59:09.863000", "learning_rate_per_epoch": [0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915, 0.0011018323712050915], "accuracy_train_first": 0.5756118566006829, "accuracy_train_last": 0.8968843366440569, "batch_size_eval": 1024, "accuracy_train_std": [0.018777175016724847, 0.019320422185347387, 0.021249358856127786, 0.020143815777047096, 0.019949453228966723, 0.0208422007525697, 0.020252582990845452, 0.0213574662306291, 0.021183862587195377, 0.02194393950806686, 0.023152833037524176, 0.024334743726849885, 0.024648416469737745, 0.024039251046508628, 0.025575821393299638, 0.0257338498710853, 0.025776673701249003, 0.02650886461346734, 0.027988752510868662, 0.027480197401165328, 0.028087721386606722, 0.02669731489817261, 0.026663907844510892, 0.02767475261620298, 0.024769932428308283, 0.027385639592829074, 0.02529954339720496, 0.02804766235275897, 0.02950994106576323, 0.029725091892150036, 0.027748393955318622, 0.02878577298870477, 0.02885827198552942, 0.028436017401681047, 0.027136510885459746, 0.02706511442542506, 0.027304620090224288, 0.028506083224097187, 0.02657781364101125, 0.02573942747695222, 0.02670264737093407, 0.026118493231322856, 0.026396011111059714, 0.02596329787982409, 0.025509367448894482, 0.025682990281413045, 0.023667060347050222, 0.02314463046979081, 0.02418991538510328, 0.022894067962547674, 0.0219001572966528, 0.02284500921538405, 0.024467984776719683, 0.022726566398577813, 0.025007019840946165, 0.02177720901938549, 0.024402191262163298, 0.02369621119170024, 0.02243175458620925, 0.023713748048603114, 0.022472099582029777, 0.024837402741728114], "accuracy_test_std": 0.010931919090582512, "error_valid": [0.44187099962349397, 0.38006077042545183, 0.3287794733621988, 0.3078539744917168, 0.29401884883283136, 0.2743743528802711, 0.26580884083207834, 0.2575183546686747, 0.25424304640436746, 0.25414156626506024, 0.24946171404367468, 0.2479762801204819, 0.2509265577936747, 0.24811894060617468, 0.2494925993034638, 0.251720750188253, 0.25011324595256024, 0.25319588902484935, 0.2565226727221386, 0.25473132765436746, 0.2514251341302711, 0.25260612763554224, 0.26078483857304224, 0.2700518872364458, 0.2648543392319277, 0.2616496258471386, 0.2767157497176205, 0.2698283367846386, 0.26442635777484935, 0.2764201336596386, 0.26524996470256024, 0.26427340220256024, 0.2704386883471386, 0.26381600621234935, 0.2670001294239458, 0.2739272519766567, 0.27319630082831325, 0.2674369352409638, 0.2627276684864458, 0.2664206631212349, 0.26456901826054224, 0.26945183076054224, 0.26979745152484935, 0.25939058970256024, 0.25900378859186746, 0.2771525555346386, 0.2643351727221386, 0.26589120152484935, 0.26447783320783136, 0.26012301157756024, 0.2497367399284638, 0.265392625188253, 0.25888171827936746, 0.25736686982304224, 0.26760018589984935, 0.25460925734186746, 0.26362334102033136, 0.259044968938253, 0.26003182652484935, 0.268810593938253, 0.2600921263177711, 0.2597670957266567], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.023513678808070627, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "valid_ratio": 0.15, "learning_rate": 0.0011018323513415824, "optimization": "adam", "nb_data_augmentation": 0, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 1.1136476163049096e-05, "rotation_range": [0, 0], "momentum": 0.5600318779448163}, "accuracy_valid_max": 0.7520237198795181, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7402329042733433, "accuracy_valid_std": [0.012496261657857543, 0.008461044183670196, 0.014712890652714366, 0.011347090598113915, 0.012486928713503927, 0.014713772724950997, 0.012821435572068407, 0.01501007111329925, 0.01802855867059491, 0.01911545750932221, 0.016244850418701634, 0.01459737749507953, 0.014298147380470744, 0.01554645475390113, 0.01589786311243792, 0.018621646319552338, 0.016120611133733816, 0.01755062426698341, 0.021532597072056955, 0.015493915883965167, 0.018148053197246442, 0.02108218531697405, 0.02173992698645851, 0.02360368821750828, 0.024144746755405917, 0.023950299437040422, 0.02217287871869449, 0.01960802409142147, 0.01769889684603403, 0.018547783965888808, 0.01672754554051656, 0.018538870621784564, 0.019136761988631967, 0.019856124759491764, 0.018519675455165915, 0.01684500016873354, 0.02341185678779604, 0.016300057630190084, 0.019481000578144697, 0.02054662720028279, 0.01959470954134589, 0.01942517038710069, 0.016405637710533078, 0.020074107071985023, 0.016852830032031724, 0.017648178398680724, 0.021744862226408083, 0.0187247973271534, 0.021814551535527228, 0.01980539989463617, 0.019303272464853694, 0.01684458084639238, 0.01636226541836954, 0.020230131606740823, 0.018286327481004987, 0.017292141075671924, 0.02214654281505813, 0.01659953686999002, 0.019103488091970884, 0.013669730443991219, 0.018735156646736337, 0.013132182060979852], "accuracy_valid": [0.558129000376506, 0.6199392295745482, 0.6712205266378012, 0.6921460255082832, 0.7059811511671686, 0.7256256471197289, 0.7341911591679217, 0.7424816453313253, 0.7457569535956325, 0.7458584337349398, 0.7505382859563253, 0.7520237198795181, 0.7490734422063253, 0.7518810593938253, 0.7505074006965362, 0.748279249811747, 0.7498867540474398, 0.7468041109751506, 0.7434773272778614, 0.7452686723456325, 0.7485748658697289, 0.7473938723644578, 0.7392151614269578, 0.7299481127635542, 0.7351456607680723, 0.7383503741528614, 0.7232842502823795, 0.7301716632153614, 0.7355736422251506, 0.7235798663403614, 0.7347500352974398, 0.7357265977974398, 0.7295613116528614, 0.7361839937876506, 0.7329998705760542, 0.7260727480233433, 0.7268036991716867, 0.7325630647590362, 0.7372723315135542, 0.7335793368787651, 0.7354309817394578, 0.7305481692394578, 0.7302025484751506, 0.7406094102974398, 0.7409962114081325, 0.7228474444653614, 0.7356648272778614, 0.7341087984751506, 0.7355221667921686, 0.7398769884224398, 0.7502632600715362, 0.734607374811747, 0.7411182817206325, 0.7426331301769578, 0.7323998141001506, 0.7453907426581325, 0.7363766589796686, 0.740955031061747, 0.7399681734751506, 0.731189406061747, 0.7399078736822289, 0.7402329042733433], "seed": 902345818, "model": "residualv3", "loss_std": [0.31944531202316284, 0.19699211418628693, 0.1888641119003296, 0.18378378450870514, 0.18214190006256104, 0.18131037056446075, 0.1774338185787201, 0.1738174855709076, 0.17074339091777802, 0.16710099577903748, 0.16485059261322021, 0.1631346344947815, 0.157890185713768, 0.15464553236961365, 0.15148547291755676, 0.14675000309944153, 0.14649824798107147, 0.14135830104351044, 0.13964077830314636, 0.13756303489208221, 0.13437817990779877, 0.12916035950183868, 0.13011695444583893, 0.12567736208438873, 0.12407667934894562, 0.12111474573612213, 0.11984775960445404, 0.11362432688474655, 0.11829975992441177, 0.1134924367070198, 0.11361003667116165, 0.11383987218141556, 0.10603080689907074, 0.10708454996347427, 0.10549816489219666, 0.10560256242752075, 0.10373666137456894, 0.10503329336643219, 0.09774823486804962, 0.10019176453351974, 0.09382636845111847, 0.09472924470901489, 0.09733650088310242, 0.09426173567771912, 0.09621723741292953, 0.08907109498977661, 0.09245322644710541, 0.0870417132973671, 0.0910872146487236, 0.09116481244564056, 0.08624925464391708, 0.08762165158987045, 0.0867343544960022, 0.08265461772680283, 0.0865032747387886, 0.08320887386798859, 0.08075106889009476, 0.08184472471475601, 0.08051682263612747, 0.07872822880744934, 0.08327318727970123, 0.07856651395559311]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:28 2016", "state": "available"}], "summary": "6b76201c628c7286048ba9bd3b21973d"}