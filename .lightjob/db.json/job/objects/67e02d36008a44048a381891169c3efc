{"content": {"hp_model": {"f0": 16, "f1": 64, "f2": 32, "f3": 64, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.6671173572540283, 1.4121378660202026, 1.280401587486267, 1.170276165008545, 1.0801934003829956, 1.0068539381027222, 0.9438934326171875, 0.887308657169342, 0.8343055844306946, 0.7838396430015564, 0.7348728179931641, 0.6851761937141418, 0.6354007124900818, 0.5838462710380554, 0.5315020680427551, 0.4759126305580139, 0.4197193682193756, 0.3626145124435425, 0.30525219440460205, 0.25646376609802246, 0.22236281633377075, 0.20290879905223846, 0.19002340734004974, 0.1746264547109604, 0.15503562986850739, 0.13632750511169434, 0.12333948910236359, 0.1067197322845459, 0.09281165897846222, 0.08596882224082947, 0.07551523298025131, 0.07350286841392517, 0.05915207788348198, 0.051738493144512177, 0.04031313955783844, 0.03421175107359886, 0.024801105260849, 0.016504134982824326, 0.009384939447045326, 0.005031386855989695, 0.0031281232368201017, 0.0023821049835532904, 0.0020326399244368076, 0.0018098670989274979, 0.0016450404655188322, 0.0015144494827836752, 0.0014079264365136623, 0.0013177846558392048, 0.0012407852336764336, 0.001173840370029211, 0.0011148578487336636, 0.0010624713031575084, 0.0010153353214263916, 0.0009731925092637539, 0.0009348626481369138, 0.0009001020807772875, 0.0008681401959620416, 0.0008387603447772563, 0.0008115036180242896, 0.0007863579667173326, 0.0007629673345945776, 0.0007411417900584638, 0.000720807584002614, 0.0007017496973276138, 0.0006838341942057014, 0.0006669584545306861, 0.0006510414532385767, 0.0006360195111483335, 0.000621828599832952, 0.0006083833868615329, 0.0005955926026217639, 0.0005834618350490928, 0.0005719297332689166, 0.0005609296495094895, 0.0005504412110894918, 0.0005404058028943837, 0.0005308105028234422, 0.0005216207355260849, 0.0005128437769599259, 0.0005044200224801898, 0.0004963735118508339, 0.0004885872476734221, 0.0004925353568978608, 0.0004880706546828151, 0.0004877948958892375, 0.00048779018106870353, 0.00048779018106870353, 0.0004877901519648731, 0.0004877900646533817, 0.00048779023927636445, 0.0004877900646533817, 0.00048779023927636445, 0.00048778997734189034, 0.0004877903265878558, 0.00048779023927636445, 0.0004877903265878558, 0.0004877903265878558, 0.0004877900646533817, 0.0004877901519648731, 0.0004877901519648731, 0.00048779018106870353, 0.00048779023927636445, 0.00048779018106870353, 0.0004877900646533817, 0.0004877903265878558, 0.00048778997734189034, 0.0004877901519648731, 0.00048779018106870353, 0.0004877901519648731, 0.0004877901519648731, 0.00048779023927636445, 0.00048779023927636445], "moving_avg_accuracy_train": [0.0462349351986434, 0.09533881744013009, 0.1446374370227136, 0.19262569431827353, 0.23839553637938637, 0.2818526205402203, 0.32312387928492475, 0.36211592867763015, 0.3987616841452769, 0.4332305988160667, 0.4657126712768834, 0.4963110023058027, 0.5250001605019943, 0.5519108255725959, 0.57683705308132, 0.5994614642368278, 0.6208160565255388, 0.6410647979221729, 0.6609136558064506, 0.6787168495938842, 0.6953349981466312, 0.7104052280869515, 0.7244637277784871, 0.7374581383270503, 0.7514130082683393, 0.7620173376036963, 0.7749508323351594, 0.7871650370076972, 0.7977092477368372, 0.8085870791347112, 0.8163102863940437, 0.823856411022681, 0.8331518561145805, 0.8425918312520151, 0.8521202109959535, 0.8620510982285379, 0.8701381085664907, 0.8793531586825252, 0.8886674080655185, 0.8975687406947362, 0.9058124188931659, 0.913322410075324, 0.9201349526595229, 0.9263034433662543, 0.9319155028225413, 0.9370035587141521, 0.941615361099935, 0.9457566826519017, 0.9495047983879574, 0.9529176300801695, 0.956005454644827, 0.9587891470506378, 0.9613153965551532, 0.9635959965556455, 0.9656601623001364, 0.9675155863213687, 0.9692017439821444, 0.9707309116208901, 0.9721234385374279, 0.973390663655169, 0.9745427920051837, 0.9755866829666255, 0.9765285099807327, 0.9773761542934291, 0.9781436844724749, 0.9788390758824165, 0.9794719035977925, 0.9800460988392498, 0.9805628745565613, 0.981041923594999, 0.9814800431760214, 0.9818813262453702, 0.9822448061565936, 0.9825789135231232, 0.9828865855994284, 0.9831704659145317, 0.9834306084957438, 0.9836670619676442, 0.9838845203899735, 0.9840779078212604, 0.9842612571046566, 0.9844309217573324, 0.9845975708375977, 0.984749880158646, 0.9848869585475893, 0.9850103290976384, 0.9851213625926826, 0.9852212927382223, 0.9853112298692082, 0.9853921732870954, 0.9854650223631939, 0.9855305865316826, 0.9855895942833224, 0.9856427012597981, 0.9856904975386264, 0.9857335141895718, 0.9857722291754226, 0.9858070726626884, 0.9858384318012277, 0.985866655025913, 0.9858920559281297, 0.9859149167401248, 0.9859354914709203, 0.9859540087286363, 0.9859706742605807, 0.9859856732393307, 0.9859991723202057, 0.9860113214929932, 0.9860222557485019, 0.9860320965784597, 0.9860409533254217, 0.9860489243976877], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.046372452701430714, 0.09453385318618221, 0.14207333190182603, 0.18814167171616147, 0.23159910069477124, 0.2723293214611375, 0.31027237646675565, 0.3460793702771584, 0.378827478524292, 0.4087677316601911, 0.43643417432625026, 0.4618609340867728, 0.48508887376356236, 0.5061191783111518, 0.5249090865342535, 0.5409359501417469, 0.5554099850221506, 0.5679595126871042, 0.5794382225629722, 0.5890742901786629, 0.5987833191803749, 0.6067676978703946, 0.6138367159222107, 0.6188823847384987, 0.625809005310206, 0.6300704252328752, 0.6351650863993467, 0.6397380744179211, 0.643048982008132, 0.646838728009126, 0.6490693883407436, 0.6520973727935667, 0.655589689825204, 0.6589472071002138, 0.6620372143645901, 0.6653706258347576, 0.6680980234357698, 0.6719088383267562, 0.6752459159492764, 0.6784965149605234, 0.6815075032893958, 0.6842306293252906, 0.6867180638513458, 0.6888346846122956, 0.69078950093081, 0.692512214523723, 0.6940382426948447, 0.6954238750801043, 0.6967563934455878, 0.697931245912023, 0.6989886131318148, 0.6999524506608773, 0.7008076974057835, 0.7016140405699491, 0.7023153353551982, 0.7029465006619223, 0.7035023424067242, 0.7040392210707956, 0.70455903296221, 0.705051277726983, 0.7055431261402787, 0.7059979967434947, 0.7063707591926391, 0.7066574172718691, 0.7069398236056762, 0.7071451611811026, 0.7073055509364864, 0.707400044082672, 0.7074850879142391, 0.7075494203313996, 0.7076937982342536, 0.7077616736819126, 0.7078227615848056, 0.7078533266349094, 0.7078808351800028, 0.7078933858393368, 0.7079290954952375, 0.7079744707254577, 0.708027515463906, 0.7081373203934189, 0.7082483518612307, 0.7083360731510113, 0.7084760574680637, 0.708614250384661, 0.7087386240095985, 0.7088505602720423, 0.7089513029082417, 0.7090419712808211, 0.7091235728161427, 0.709197014197932, 0.7092631114415424, 0.7093225989607918, 0.7093761377281161, 0.7094243226187081, 0.7094676890202409, 0.7095067187816204, 0.709541845566862, 0.7095734596735793, 0.709601912369625, 0.7096275197960661, 0.7096505664798631, 0.7096713084952805, 0.7096899763091561, 0.7097067773416441, 0.7097218982708833, 0.7097355071071986, 0.7097477550598823, 0.7097587782172977, 0.7097686990589716, 0.709777627816478, 0.7097856636982338, 0.709792895991814], "moving_var_accuracy_train": [0.019239023095404793, 0.03901584204653645, 0.05698744287661739, 0.0720145541333394, 0.0836670047006984, 0.09229696770448483, 0.09839712211938742, 0.10224082915003725, 0.10410294877918456, 0.10438560860850578, 0.10344281302980295, 0.10152485248262057, 0.09877997741641348, 0.095419634725651, 0.091469522613436, 0.08692934617329355, 0.08234057906231791, 0.07779662490941595, 0.07356275685226664, 0.0690590645483362, 0.0646386238453931, 0.06021876793494091, 0.05597566386363896, 0.05189778982681657, 0.048460656399839555, 0.044626656965730004, 0.041669468842876076, 0.038845203120632305, 0.03596130622767364, 0.03343012054819145, 0.030623939866707764, 0.028074041852235332, 0.02604428536212046, 0.02424187500126685, 0.022634797686042426, 0.02125892060847496, 0.01972162617348286, 0.018513717893903835, 0.017443143278630776, 0.0164119324539515, 0.015382363280709731, 0.014351726660643592, 0.013334250622732942, 0.012343278058850929, 0.011392407155033948, 0.010486161254335949, 0.00962896362011198, 0.008820422155871832, 0.008064815284422462, 0.007363160537414517, 0.006712656428551985, 0.0061111312763883026, 0.0055574555777810515, 0.005048520247263162, 0.00458201524452341, 0.004154797104758159, 0.003764905543195275, 0.0034094601718822315, 0.003085966335613549, 0.002791822437543501, 0.002524586791403319, 0.0022819354873174053, 0.002061725281706182, 0.0018620192614631828, 0.0016811192584985793, 0.0015173594555659056, 0.0013692277482654461, 0.0012352722750167122, 0.001114148561793068, 0.0010047990974448133, 0.0009060467266058095, 0.0008168913068609422, 0.0007363912349876148, 0.0006637567610801778, 0.0005982330439310018, 0.00053913503183763, 0.00048583059611690386, 0.000437750728704577, 0.000394401249323097, 0.000355297712678005, 0.00032007049404770194, 0.00028832251949223995, 0.00025974021478659536, 0.00023397497647143953, 0.00021074659318673358, 0.00018980891650163502, 0.00017093898078466714, 0.00015393495701208887, 0.00013861425949864963, 0.0001248118000808781, 0.00011237838296378595, 0.00010117923260911386, 9.109264658098473e-05, 8.20087650814399e-05, 7.382844893172435e-05, 6.646225792887895e-05, 5.9829521787155956e-05, 5.3857496225883934e-05, 4.848059716342483e-05, 4.3639706400787074e-05, 3.928154261320919e-05, 3.5358091902413945e-05, 3.1826092588098345e-05, 2.8646569328788408e-05, 2.5784412055504483e-05, 2.3207995574225914e-05, 2.0888836043463545e-05, 1.880128086071197e-05, 1.6922228796132547e-05, 1.5230877493927631e-05, 1.3708495722235621e-05, 1.2338217991949671e-05], "duration": 65078.59062, "accuracy_train": [0.46234935198643407, 0.5372737576135105, 0.5883250132659653, 0.624520009978313, 0.650324114929402, 0.6729663779877261, 0.6945652079872646, 0.7130443732119786, 0.7285734833540974, 0.7434508308531745, 0.7580513234242341, 0.7716959815660761, 0.7832025842677187, 0.7941068112080103, 0.8011731006598376, 0.8030811646363971, 0.8130073871239387, 0.8233034704918788, 0.8395533767649501, 0.8389455936807864, 0.8448983351213547, 0.8460372975498339, 0.850990225002307, 0.8544078332641197, 0.8770068377399409, 0.8574563016219084, 0.8913522849183279, 0.8970928790605389, 0.8926071442990956, 0.9064875617155776, 0.8858191517280363, 0.8917715326804172, 0.9168108619416758, 0.9275516074889257, 0.937875628691399, 0.9514290833217978, 0.9429212016080657, 0.9622886097268365, 0.9724956525124585, 0.9776807343576966, 0.980005522679033, 0.9809123307147471, 0.9814478359173128, 0.9818198597268365, 0.9824240379291252, 0.982796061738649, 0.9831215825719823, 0.9830285766196014, 0.9832378400124585, 0.9836331153100776, 0.9837958757267442, 0.9838423787029347, 0.9840516420957919, 0.9841213965600776, 0.9842376540005537, 0.9842144025124585, 0.9843771629291252, 0.9844934203696014, 0.984656180786268, 0.9847956897148394, 0.9849119471553157, 0.9849817016196014, 0.9850049531076966, 0.9850049531076966, 0.9850514560838871, 0.98509759857189, 0.9851673530361758, 0.9852138560123662, 0.9852138560123662, 0.9853533649409376, 0.9854231194052234, 0.9854928738695091, 0.9855161253576044, 0.98558587982189, 0.9856556342861758, 0.9857253887504615, 0.9857718917266519, 0.9857951432147471, 0.9858416461909376, 0.9858183947028424, 0.9859114006552234, 0.9859579036314139, 0.9860974125599853, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805, 0.9861206640480805], "end": "2016-01-30 09:48:09.243000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0], "moving_var_accuracy_valid": [0.01935363932591786, 0.03829395986319968, 0.05480458220587608, 0.06842475138453025, 0.07857920944695543, 0.08565184645535229, 0.09004374061825136, 0.09257863380807022, 0.09297271777115698, 0.09174321481461674, 0.08945778178130413, 0.08633068461044768, 0.0825534507840601, 0.07827856908993339, 0.0736282580402333, 0.06857717545004872, 0.06360493707651611, 0.058661859170385425, 0.05398152027707601, 0.04941905244121588, 0.04532553439449906, 0.041366733682639927, 0.03767979946032803, 0.03414094847852817, 0.031158656283574955, 0.028206227953033357, 0.0256192053093404, 0.02324549475316858, 0.02101960425948997, 0.019046903406309428, 0.017186995675313954, 0.015550814316401412, 0.014105499389006447, 0.0127964057503737, 0.011602698479381408, 0.010542433319708265, 0.009555138266803502, 0.008730325231323416, 0.007957517491719598, 0.007256863287934921, 0.0066127714155908785, 0.006018233012698102, 0.005472095686120998, 0.00496520686852005, 0.004503077943220217, 0.004079479828007059, 0.003692490703017866, 0.0033405214266797986, 0.0030224497307609773, 0.002732627262545879, 0.002469426765228701, 0.0022308449337476947, 0.0020143434633249795, 0.0018187608206780513, 0.001641311067992604, 0.0014807652879930537, 0.0013354693996011264, 0.0012045166079404312, 0.0010864967867684906, 0.000980027852267659, 0.0008842023007958464, 0.0007976442361072935, 0.000719130379087994, 0.0006479568968686854, 0.0005838789872181859, 0.0005258705601753051, 0.00047351502802046305, 0.00042624388581050137, 0.0003836845893090398, 0.00034535337831721513, 0.00031100564529498633, 0.0002799465444530419, 0.0002519854755946566, 0.00022679533603578152, 0.00020412261291268176, 0.00018371176929286105, 0.00016535206897929584, 0.0001488353922850241, 0.00013397717675501502, 0.00012068797318242178, 0.00010873012774577945, 9.792637019332837e-05, 8.83100936551814e-05, 7.965095982944215e-05, 7.182508303371883e-05, 6.475534227199586e-05, 5.83711497535319e-05, 5.260802156225457e-05, 4.740714870113055e-05, 4.271497656004966e-05, 3.848279851456075e-05, 3.4666367547622684e-05, 3.122552838932001e-05, 2.8123871603520283e-05, 2.5328410246205397e-05, 2.2809279122044943e-05, 2.0539456229213124e-05, 1.8494505671983683e-05, 1.665234110799573e-05, 1.4993008659796596e-05, 1.3498488140523291e-05, 1.2152511407303109e-05, 1.0940396652046835e-05, 9.84889745907612e-06, 8.866065495678023e-06, 7.981125749942928e-06, 7.1843632860531295e-06, 6.467020547442457e-06, 5.82120430059387e-06, 5.239801374929967e-06, 4.716402415997312e-06, 4.245232929031458e-06], "accuracy_test": 0.6968231823979592, "start": "2016-01-29 15:43:30.653000", "learning_rate_per_epoch": [0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 0.0009045454207807779, 9.045454498846084e-05, 9.045454135048203e-06, 9.045454021361365e-07, 9.045454163469913e-08, 9.045454163469913e-09, 9.045454385514518e-10, 9.045454663070274e-11, 9.045454489597926e-12, 9.045454272757492e-13, 9.045454001706948e-14, 9.045453832300359e-15, 9.045454255816833e-16, 9.045454255816833e-17, 9.04545409038071e-18, 9.045453676790404e-19, 9.045453935284345e-20, 9.045454258401772e-21, 9.045454258401772e-22, 9.045454005966282e-23, 9.045453848194101e-24, 9.045453848194101e-25, 9.045453848194101e-26, 9.04545354004531e-27, 9.04545354004531e-28, 9.045453780786553e-29, 9.04545347986e-30, 9.04545347986e-31, 9.04545371495887e-32, 9.045454008832457e-33, 9.045453825161465e-34, 9.045453710367095e-35], "accuracy_train_first": 0.46234935198643407, "accuracy_train_last": 0.9861206640480805, "batch_size_eval": 1024, "accuracy_train_std": [0.019586320713452728, 0.018828694432575753, 0.01945470367816823, 0.019893783203654043, 0.01900821870546309, 0.019046028509823832, 0.01798974890349005, 0.019718625545910945, 0.020562583985569947, 0.021331546203011024, 0.021063676950978782, 0.022033172667347403, 0.022645929250222303, 0.021848081701608874, 0.022965921567322727, 0.0223083823579529, 0.02328181350602884, 0.025471919391538304, 0.024712566649757055, 0.027925466744245286, 0.02725406264172678, 0.027549367450864438, 0.02657297687275971, 0.028262922543199735, 0.02524502093836758, 0.02382660168613743, 0.02271136601569806, 0.02367576622004588, 0.02274110041806092, 0.020876022050134176, 0.021539572465590715, 0.019952133004826924, 0.016773265969762495, 0.016560600466598706, 0.015698543956872976, 0.012881126808394996, 0.014477198085419498, 0.011349892263441177, 0.008581017687422572, 0.007066509084697167, 0.006307476197868913, 0.006049830639589331, 0.005468701771684215, 0.005247969106093474, 0.004986630518064491, 0.004871076421847797, 0.004662932583672694, 0.004646715585746872, 0.004552646527561554, 0.0045469332249371275, 0.004338584489103664, 0.004286662006425428, 0.0042677861121499325, 0.004280463003293249, 0.004272502972149211, 0.004204722432457099, 0.0042587441463731186, 0.004227660245788458, 0.004146684887585406, 0.004183992820201525, 0.004079846562525221, 0.0041006274167371725, 0.0041929845868107, 0.004187565722773326, 0.004212770245708985, 0.004232505998476323, 0.004141248963821358, 0.0041703690896139544, 0.004098976522095408, 0.004112346590695452, 0.004086798081386655, 0.004159344466598002, 0.0041938310967810965, 0.004176944210589638, 0.0041204227694559194, 0.004155862769005964, 0.004151417199170204, 0.004074444897601049, 0.004063529252666179, 0.00412448261773392, 0.004046098572368686, 0.004100759263754669, 0.004203817816784191, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116, 0.00419150805360116], "accuracy_test_std": 0.01445579214351422, "error_valid": [0.5362754729856928, 0.4720135424510542, 0.4300713596573795, 0.3972432699548193, 0.37728403849774095, 0.36109869164156627, 0.3482401284826807, 0.3316576854292168, 0.32643954725150603, 0.3217699901167168, 0.3145678416792168, 0.30929822806852414, 0.30585966914533136, 0.30460808076054224, 0.30598173945783136, 0.31482227739081325, 0.3143237010542168, 0.31909473832831325, 0.3172533885542168, 0.3242011012801205, 0.3138354198042168, 0.3213728939194277, 0.3225421216114458, 0.3357065959149097, 0.3118514095444277, 0.33157679546310237, 0.3189829631024097, 0.3191050334149097, 0.3271528496799698, 0.3190535579819277, 0.3308546686746988, 0.32065076713102414, 0.31297945689006024, 0.3108351374246988, 0.31015272025602414, 0.3046286709337349, 0.3073553981551205, 0.29379382765436746, 0.29472038544804224, 0.292248093938253, 0.291393601750753, 0.2912612363516567, 0.2908950254141567, 0.2921157285391567, 0.29161715220256024, 0.29198336314006024, 0.29222750376506024, 0.29210543345256024, 0.29125094126506024, 0.29149508189006024, 0.29149508189006024, 0.29137301157756024, 0.29149508189006024, 0.29112887095256024, 0.29137301157756024, 0.29137301157756024, 0.29149508189006024, 0.29112887095256024, 0.29076266001506024, 0.29051851939006024, 0.29003023814006024, 0.28990816782756024, 0.29027437876506024, 0.29076266001506024, 0.29051851939006024, 0.29100680064006024, 0.29125094126506024, 0.2917495176016567, 0.2917495176016567, 0.2918715879141567, 0.29100680064006024, 0.2916274472891567, 0.2916274472891567, 0.2918715879141567, 0.2918715879141567, 0.2919936582266567, 0.2917495176016567, 0.29161715220256024, 0.29149508189006024, 0.2908744352409638, 0.2907523649284638, 0.2908744352409638, 0.2902640836784638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638, 0.2901420133659638], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.06703958365293058, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.000904545434860332, "optimization": "nesterov_momentum", "nb_data_augmentation": 0, "learning_rate_decay_method": "discrete", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 1.6910364873499498e-08, "rotation_range": [0, 0], "momentum": 0.6468718321468501}, "accuracy_valid_max": 0.7100918321724398, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7098579866340362, "accuracy_valid_std": [0.019181437347704607, 0.0146205272771241, 0.013078927888453754, 0.011053671590629153, 0.008043276884649831, 0.009726318248282694, 0.012915568716893788, 0.01422482899129514, 0.011092731345245284, 0.008172728252695672, 0.007503429470807203, 0.009896583274770242, 0.008584914448098226, 0.008171803592451305, 0.00801377348799021, 0.011295260291221444, 0.012469161643365465, 0.014183948957060035, 0.01655346228427369, 0.018426816861596973, 0.013858934399800127, 0.013645389476540372, 0.01637958201591379, 0.014046804200225504, 0.018875788297364908, 0.015478554448758819, 0.013824775498159978, 0.016669158506258955, 0.01988903973724807, 0.0175001927407046, 0.020391117573083827, 0.014863722998841523, 0.022882669807374984, 0.020399356850167395, 0.015051326641277545, 0.022381726043932498, 0.016101601143826787, 0.015795948758887953, 0.015971641260790384, 0.017307767995567405, 0.01715746004870019, 0.016841717220464365, 0.01646006760703337, 0.016539432860801936, 0.016073008978996748, 0.015352954664809909, 0.015100613448902822, 0.01502684594752174, 0.015249303081062659, 0.015399191890333534, 0.015141575141475952, 0.015421845254919204, 0.01592438359351224, 0.015129055012817671, 0.01480664249236646, 0.014838811819453682, 0.014240886049845672, 0.014227573345465138, 0.014188015825223721, 0.014223528509075326, 0.014206453060186128, 0.01417645188255762, 0.014634403943764824, 0.014528418867859048, 0.01437359724189831, 0.013944517477386254, 0.013631258304140555, 0.013261855259490618, 0.013876818996469916, 0.013727276668952492, 0.013978670966638315, 0.013609562522592216, 0.013904187273832289, 0.013701199546341289, 0.013701199546341289, 0.013627576937349065, 0.013458157885235012, 0.013554209765977546, 0.01354588242151328, 0.013898027933509785, 0.013960442273318973, 0.014051573394621913, 0.0138397043691237, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369, 0.013956937468247369], "accuracy_valid": [0.4637245270143072, 0.5279864575489458, 0.5699286403426205, 0.6027567300451807, 0.622715961502259, 0.6389013083584337, 0.6517598715173193, 0.6683423145707832, 0.673560452748494, 0.6782300098832832, 0.6854321583207832, 0.6907017719314759, 0.6941403308546686, 0.6953919192394578, 0.6940182605421686, 0.6851777226091867, 0.6856762989457832, 0.6809052616716867, 0.6827466114457832, 0.6757988987198795, 0.6861645801957832, 0.6786271060805723, 0.6774578783885542, 0.6642934040850903, 0.6881485904555723, 0.6684232045368976, 0.6810170368975903, 0.6808949665850903, 0.6728471503200302, 0.6809464420180723, 0.6691453313253012, 0.6793492328689759, 0.6870205431099398, 0.6891648625753012, 0.6898472797439759, 0.6953713290662651, 0.6926446018448795, 0.7062061723456325, 0.7052796145519578, 0.707751906061747, 0.708606398249247, 0.7087387636483433, 0.7091049745858433, 0.7078842714608433, 0.7083828477974398, 0.7080166368599398, 0.7077724962349398, 0.7078945665474398, 0.7087490587349398, 0.7085049181099398, 0.7085049181099398, 0.7086269884224398, 0.7085049181099398, 0.7088711290474398, 0.7086269884224398, 0.7086269884224398, 0.7085049181099398, 0.7088711290474398, 0.7092373399849398, 0.7094814806099398, 0.7099697618599398, 0.7100918321724398, 0.7097256212349398, 0.7092373399849398, 0.7094814806099398, 0.7089931993599398, 0.7087490587349398, 0.7082504823983433, 0.7082504823983433, 0.7081284120858433, 0.7089931993599398, 0.7083725527108433, 0.7083725527108433, 0.7081284120858433, 0.7081284120858433, 0.7080063417733433, 0.7082504823983433, 0.7083828477974398, 0.7085049181099398, 0.7091255647590362, 0.7092476350715362, 0.7091255647590362, 0.7097359163215362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362, 0.7098579866340362], "seed": 583277923, "model": "residualv3", "loss_std": [0.29838624596595764, 0.25249403715133667, 0.25793731212615967, 0.2590574622154236, 0.2580507695674896, 0.2563146948814392, 0.25371816754341125, 0.2503891587257385, 0.24679721891880035, 0.242801234126091, 0.23860548436641693, 0.23349255323410034, 0.22698578238487244, 0.21969914436340332, 0.21049678325653076, 0.19957570731639862, 0.1877521127462387, 0.17302586138248444, 0.15522226691246033, 0.13967183232307434, 0.12495847046375275, 0.12148688733577728, 0.11690092086791992, 0.11274757236242294, 0.1040007472038269, 0.09741698950529099, 0.09295719116926193, 0.08415910601615906, 0.0780494436621666, 0.07571624964475632, 0.06795201450586319, 0.06884188950061798, 0.05745483934879303, 0.05282771214842796, 0.04511639475822449, 0.04048003628849983, 0.029933689162135124, 0.021257074549794197, 0.012301746755838394, 0.0053806244395673275, 0.002139587886631489, 0.001300508389249444, 0.0010234517976641655, 0.0008746701059862971, 0.0007737178239040077, 0.0006960738683119416, 0.0006348256720229983, 0.0005838344804942608, 0.0005411213496699929, 0.0005049934843555093, 0.00047366978833451867, 0.00044605342554859817, 0.00042152556125074625, 0.00040000351145863533, 0.00038045475957915187, 0.00036285098758526146, 0.0003468185313977301, 0.00033221617923118174, 0.0003187904949299991, 0.00030644083744846284, 0.00029503056430257857, 0.00028448004741221666, 0.00027468145708553493, 0.00026558118406683207, 0.00025708021712489426, 0.00024908670457080007, 0.00024160105385817587, 0.00023453938774764538, 0.00022790051298215985, 0.00022162731329444796, 0.00021569682576227933, 0.000210088343010284, 0.00020479103841353208, 0.00019972441077698022, 0.00019491446437314153, 0.00019032084674108773, 0.00018592295236885548, 0.00018173230637330562, 0.00017774906882550567, 0.0001739384897518903, 0.00017031579045578837, 0.0001668213662924245, 0.00017533493519295007, 0.00017276544531341642, 0.00017260049935430288, 0.00017259731248486787, 0.00017259734158869833, 0.0001725974871078506, 0.00017259745800402015, 0.0001725975307635963, 0.00017259741434827447, 0.00017259745800402015, 0.00017259729793295264, 0.00017259766173083335, 0.00017259725427720696, 0.0001725975307635963, 0.00017259754531551152, 0.0001725974871078506, 0.000172597385244444, 0.00017259747255593538, 0.00017259723972529173, 0.00017259754531551152, 0.00017259735614061356, 0.0001725974289001897, 0.00017259744345210493, 0.00017259725427720696, 0.00017259741434827447, 0.00017259757441934198, 0.00017259751621168107, 0.00017259751621168107, 0.0001725974289001897, 0.0001725974871078506]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:23 2016", "state": "available"}], "summary": "518b881afea2c362634b694c7cfb56b9"}