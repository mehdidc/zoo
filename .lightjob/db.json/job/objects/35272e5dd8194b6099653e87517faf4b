{"content": {"hp_model": {"f0": 32, "f1": 64, "f2": 64, "f3": 16, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.7120347023010254, 1.265289545059204, 1.0776405334472656, 0.949076771736145, 0.8660105466842651, 0.8126471638679504, 0.7719017267227173, 0.7425349950790405, 0.7183295488357544, 0.699546217918396, 0.6810740232467651, 0.6646985411643982, 0.6532471179962158, 0.6418526768684387, 0.6343657374382019, 0.6258999705314636, 0.6189876198768616, 0.6139324903488159, 0.6075826287269592, 0.6007075309753418, 0.5952070355415344, 0.5898387432098389, 0.5900993347167969, 0.5920459032058716, 0.5850249528884888, 0.581686794757843, 0.5789406299591064, 0.5762168765068054, 0.5738766193389893, 0.5748713612556458, 0.5741263628005981, 0.5649238228797913, 0.5657702684402466, 0.5608200430870056, 0.5616196393966675, 0.559846043586731, 0.5621110796928406, 0.5546769499778748, 0.5586763620376587, 0.558540403842926, 0.5572911500930786, 0.5550544857978821, 0.5456749796867371, 0.5523940324783325, 0.5493935346603394, 0.5504873394966125, 0.5453301668167114, 0.5488492250442505, 0.5438101887702942, 0.5441991090774536, 0.5466943383216858, 0.5387803912162781, 0.5472431778907776, 0.5356478095054626, 0.5372216701507568, 0.5411267280578613, 0.5386436581611633, 0.5409188866615295, 0.5337223410606384, 0.5408962368965149, 0.5386812090873718, 0.5298800468444824, 0.5368877649307251, 0.5387616157531738, 0.5305338501930237, 0.530693769454956, 0.531507670879364, 0.526070773601532, 0.5308118462562561, 0.5285463333129883, 0.5244995951652527, 0.5292118787765503, 0.5319697856903076, 0.5249975919723511, 0.524247407913208, 0.5278767347335815, 0.5250397324562073, 0.5252962112426758, 0.525450587272644, 0.5217611193656921, 0.5186665058135986, 0.5259002447128296, 0.5249238610267639, 0.5196152925491333, 0.5225291848182678, 0.5219890475273132, 0.5200080275535583, 0.5156570076942444, 0.5233966708183289, 0.5184953808784485, 0.4383602738380432, 0.36897557973861694, 0.33917728066444397, 0.3173085153102875, 0.2979775369167328, 0.2789716124534607, 0.25831571221351624, 0.23506613075733185, 0.20987501740455627, 0.21104377508163452, 0.19608838856220245, 0.1871795356273651, 0.17672494053840637, 0.17314693331718445, 0.16963884234428406, 0.157978817820549, 0.1518934667110443, 0.14433227479457855, 0.15086600184440613, 0.1479392796754837, 0.13506315648555756, 0.13273516297340393, 0.13259980082511902, 0.13257940113544464, 0.13257727026939392, 0.13257716596126556, 0.13257716596126556, 0.13257716596126556, 0.13257716596126556, 0.13257715106010437, 0.13257716596126556, 0.13257715106010437, 0.13257716596126556, 0.13257716596126556, 0.13257716596126556, 0.13257716596126556, 0.13257715106010437, 0.13257716596126556, 0.13257716596126556, 0.13257716596126556, 0.13257715106010437, 0.13257716596126556, 0.13257716596126556, 0.13257716596126556, 0.13257716596126556, 0.13257716596126556, 0.13257716596126556, 0.13257715106010437, 0.13257715106010437, 0.13257715106010437, 0.13257715106010437], "moving_avg_accuracy_train": [0.056452053629106665, 0.11687795239825578, 0.17705008875219175, 0.23298092047774777, 0.28721042740560976, 0.33660284904304805, 0.3840013071308529, 0.42783404746104925, 0.46689950371646705, 0.5039299067962785, 0.5363484247741349, 0.566452500889837, 0.5942390276903882, 0.6197514230537322, 0.6423775772080766, 0.6620808097339006, 0.6800601487321329, 0.6979061440852485, 0.7132585858090603, 0.7271733314640347, 0.7390131890476054, 0.7515637327132122, 0.7624177681778175, 0.7738859036316303, 0.7835282099900435, 0.7918436706447859, 0.7998995357923782, 0.8075078152442404, 0.8143528334556506, 0.8210900227995004, 0.8276069332756412, 0.8336465388648822, 0.8391076163368288, 0.8433344862092368, 0.8461017608718125, 0.8488804462764179, 0.8522045100144092, 0.8566258094570898, 0.8605724268721688, 0.8631085088088907, 0.8650980138019403, 0.8676327240611889, 0.8696441378861515, 0.871091723163151, 0.8732547468255181, 0.874529644310971, 0.8747678467657174, 0.8760795910666281, 0.8776159447541237, 0.8791613153430802, 0.8797081919529213, 0.8816604301588842, 0.8836778972597363, 0.8826503571934619, 0.8831482377658746, 0.884970457178656, 0.8860127832596553, 0.8838263814160171, 0.885471432372099, 0.8866684903219046, 0.8866530585850723, 0.8875761689433425, 0.8861868476896966, 0.8878679665267624, 0.887951223255177, 0.8894093655106855, 0.8909494139287015, 0.8911523532978746, 0.889528394153949, 0.8891410496744161, 0.8895595224570668, 0.8904941836757382, 0.8916957407891998, 0.8938351209484673, 0.8939352491786944, 0.8946090850835454, 0.8948134668979576, 0.8957109428249023, 0.8954515720508561, 0.8963015856018152, 0.8960157747310485, 0.8980346132901511, 0.9001305858504863, 0.9006546041965008, 0.9017818405745621, 0.9011943618338741, 0.9007797435030154, 0.9011691637171287, 0.9022564977895373, 0.9024561736035145, 0.9089812129372845, 0.9156420098329248, 0.9220970344056493, 0.9281971280246544, 0.9338313715079494, 0.9390602647131437, 0.9438406373109046, 0.9481685132369755, 0.9514660383263916, 0.954619822811628, 0.9580697790340644, 0.9613142485628285, 0.9642133447994305, 0.9652228650802387, 0.9671962793900905, 0.969314149143957, 0.9714666616474276, 0.9734085731981702, 0.9729476185177035, 0.974146268383818, 0.9755715364847589, 0.9768705538172724, 0.9780396694165345, 0.9790941986046799, 0.9800432748740108, 0.9808974435164085, 0.9816661952945664, 0.9823580718949086, 0.9829807608352166, 0.9835411808814938, 0.9840455589231433, 0.9844994991606277, 0.9849080453743638, 0.9852757369667262, 0.9856066593998524, 0.9859044895896659, 0.9861725367604981, 0.9864137792142471, 0.9866308974226212, 0.9868263038101579, 0.9870021695589409, 0.9871604487328457, 0.9873028999893599, 0.9874311061202228, 0.9875464916379993, 0.9876503386039982, 0.9877438008733972, 0.9878279169158563, 0.9879036213540694, 0.9879717553484613, 0.9880330759434139], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05502444347703312, 0.11339786391660389, 0.17191774078736818, 0.22571676584266748, 0.2773678102203736, 0.3239443469223573, 0.3684908301988715, 0.40886342686648436, 0.4447715177735859, 0.4779331437635466, 0.5068295472429901, 0.533813902383149, 0.558096733483313, 0.5801486529907799, 0.5996382881152712, 0.6165799327600694, 0.6317246091470895, 0.6463557944579077, 0.6588961551005958, 0.6704795664636537, 0.6795109761105865, 0.6891671827163953, 0.6977011362726926, 0.70655356947336, 0.7137781894650301, 0.719506156945485, 0.7246124995528943, 0.7295427982139452, 0.7339852145521892, 0.73758967573063, 0.7416221473518441, 0.7445402754724579, 0.7486702617147454, 0.7516964490221865, 0.753445367043537, 0.7545097864762316, 0.7564455030469819, 0.7588102065544071, 0.7611621372355628, 0.7630632663207415, 0.7641954044853541, 0.7654605284758247, 0.7662217516071579, 0.7665690265123306, 0.7679152006212633, 0.7687748124303719, 0.7683358489301811, 0.7688267475179613, 0.7694435727191019, 0.7696935396188784, 0.7697343748512677, 0.7709908001767585, 0.7723535165634501, 0.7710347217595147, 0.7718854982187289, 0.7724110273689946, 0.772104812621553, 0.7705352740363556, 0.7716332197125393, 0.7728838955293125, 0.772469358809589, 0.7729528269666572, 0.7709861046050819, 0.7715711290749201, 0.7704577908756359, 0.770850476584759, 0.7719311680546717, 0.7725222838828641, 0.7713697178157374, 0.7712073436433504, 0.7710235562857926, 0.7716210135807826, 0.7726908340506411, 0.7741043031211041, 0.7736105237879094, 0.7739238407615281, 0.7731001337373331, 0.773651713219398, 0.7738154563835274, 0.7741297527067711, 0.7736882865193018, 0.7752471804765584, 0.7768454975380893, 0.7767631044578497, 0.7774031355500919, 0.7775611830172965, 0.7770604240435035, 0.77711022924834, 0.7780126346461715, 0.7777433741936026, 0.7814287623954773, 0.7846458965098452, 0.7875901453377764, 0.7899581780555047, 0.7920060173000296, 0.7936415530888519, 0.795101328267542, 0.7961811333172938, 0.7963034661452029, 0.7965397540374597, 0.7973414391664697, 0.7981403160047174, 0.7986354605620016, 0.7990496171131056, 0.7992686670734818, 0.7993193276628203, 0.7998095228615233, 0.799957729790356, 0.7994979719656878, 0.7996193873538329, 0.7998517610243231, 0.7999855961229451, 0.8001060477117048, 0.8002144541415885, 0.800312019928484, 0.8003998291366898, 0.8004788574240751, 0.8005499828827218, 0.800613995795504, 0.8006716074170078, 0.8007234578763613, 0.8007701232897795, 0.8008121221618558, 0.8008499211467245, 0.8008839402331063, 0.8009145574108499, 0.8009421128708192, 0.8009669127847915, 0.8009892327073665, 0.8010093206376842, 0.80102739977497, 0.8010436709985272, 0.8010583150997288, 0.8010714947908102, 0.8010833565127834, 0.8010940320625594, 0.8011036400573577, 0.8011122872526761, 0.8011200697284628, 0.8011270739566708, 0.801133377762058], "moving_var_accuracy_train": [0.028681509230491824, 0.05867496148597776, 0.08539363927794993, 0.10500859678776711, 0.12097529190374169, 0.13083426455026184, 0.13797036255714817, 0.14146510842512316, 0.1410535864346065, 0.1392894845614256, 0.13481917887620845, 0.12949355957760744, 0.12349302326458644, 0.11700166179270798, 0.10990898127978259, 0.10241203949950452, 0.09508014522687427, 0.08843844665547766, 0.08171587919187724, 0.07528687259247317, 0.069019825381619, 0.06353548816017782, 0.058242230116962224, 0.05360167028234901, 0.04907826990129957, 0.04479276488427474, 0.040897561065332995, 0.037328778204758356, 0.03401758885311336, 0.03102433745009598, 0.02830413480447268, 0.02580201284508773, 0.023490221864970386, 0.021301997538737773, 0.0192407180663872, 0.017386136092948385, 0.015746967081261606, 0.01434820137199207, 0.013053563335981918, 0.011806092406691627, 0.01066110633707879, 0.009652818508255973, 0.008723948727607634, 0.007870413383054543, 0.007125480087024727, 0.006427560350707984, 0.005785314979322211, 0.005222269539388736, 0.004721286029327592, 0.004270650958709736, 0.003846277529076284, 0.0034959508822840486, 0.0031829873555828283, 0.0028741911673147397, 0.0025890030161627403, 0.0023599870668413194, 0.0021337663530893694, 0.001963412894977209, 0.0017914273393124431, 0.001625181134997934, 0.0014626651647446556, 0.0013240678428721013, 0.0012090329804973782, 0.001113565127346677, 0.001002270999757446, 0.0009211795093173967, 0.0008504073005541587, 0.000765737229986786, 0.0007128986966983609, 0.0006429591487409468, 0.0005802393090952266, 0.000530077702528897, 0.0004900635877481993, 0.00048224975616618763, 0.00043411501151196456, 0.0003947900038007669, 0.00035568695075525184, 0.00032736742303473475, 0.000295236139517125, 0.00027221523289673865, 0.00024572890029170004, 0.00025783739241200563, 0.0002715915619339084, 0.0002469037627831554, 0.00023364934317306153, 0.00021339059029259908, 0.00019359870650589647, 0.00017560366878374782, 0.0001686839603705588, 0.00015217439820969025, 0.0005201422031539332, 0.0008674239204032843, 0.001155687608473251, 0.0013750191270715585, 0.001523219511025872, 0.0016169694772852348, 0.0016609401891175236, 0.0016634207604889443, 0.0015949417298780108, 0.001524964766104072, 0.001479588070924208, 0.001426368506539496, 0.0013593744867872637, 0.0012326092188848041, 0.001144397573341272, 0.00107032616665623, 0.0010049933406889853, 0.0009384331908582566, 0.0008465021847294284, 0.0007747828197703119, 0.000715587040229316, 0.0006592153504779165, 0.0006055952969900658, 0.000555044053568914, 0.000507646360097085, 0.000463448160714277, 0.00042242215831063873, 0.00038448818155048433, 0.0003495290370428725, 0.00031740276899300897, 0.0002879520669737912, 0.0002610114159292794, 0.00023641246441517401, 0.00021398799193750288, 0.0001935747796544681, 0.00017501562708670086, 0.00015816070795015126, 0.00014286841844855374, 0.00012900583945136662, 0.00011644890841284125, 0.00010508237642591229, 9.479960945534873e-05, 8.550227975415626e-05, 7.7099983086658e-05, 6.950980913740525e-05, 6.26558859547893e-05, 5.646891412152127e-05, 5.088570228675998e-05, 4.584871251577057e-05, 4.1305621434919655e-05, 3.720890122971587e-05], "duration": 94173.962308, "accuracy_train": [0.5645205362910668, 0.660711041320598, 0.7185993159376154, 0.7363584060077519, 0.7752759897563677, 0.7811346437799926, 0.8105874299210963, 0.8223287104328165, 0.8184886100152271, 0.837203534514581, 0.8281150865748431, 0.8373891859311554, 0.8443177688953488, 0.8493629813238279, 0.8460129645971761, 0.8394099024663161, 0.8418741997162238, 0.858520102263289, 0.8514305613233666, 0.852406042358804, 0.8455719072997416, 0.8645186257036729, 0.8601040873592655, 0.8770991227159468, 0.8703089672157622, 0.8666828165374677, 0.8724023221207088, 0.8759823303110004, 0.8759579973583426, 0.8817247268941492, 0.8862591275609081, 0.888002989168051, 0.8882573135843485, 0.8813763150609081, 0.8710072328349945, 0.8738886149178663, 0.8821210836563308, 0.8964175044412146, 0.8960919836078812, 0.8859332462393872, 0.8830035587393872, 0.890445116394426, 0.8877468623108158, 0.8841199906561462, 0.8927219597868217, 0.886003721680048, 0.8769116688584349, 0.8878852897748246, 0.8914431279415835, 0.8930696506436876, 0.8846300814414912, 0.8992305740125508, 0.9018351011674051, 0.8734024965969915, 0.8876291629175894, 0.9013704318936876, 0.895393717988649, 0.8641487648232743, 0.9002768909768365, 0.897442011870155, 0.8865141729535806, 0.895884162167774, 0.8736829564068845, 0.9029980360603543, 0.8887005338109081, 0.9025326458102622, 0.9048098496908453, 0.8929788076204319, 0.8749127618586194, 0.8856549493586194, 0.8933257775009228, 0.8989061346437799, 0.9025097548103543, 0.9130895423818751, 0.8948364032507383, 0.9006736082272055, 0.896652903227667, 0.9037882261674051, 0.8931172350844407, 0.9039517075604466, 0.8934434768941492, 0.9162041603220746, 0.9189943388935032, 0.9053707693106312, 0.9119269679771133, 0.8959070531676817, 0.8970481785252861, 0.9046739456441492, 0.9120425044412146, 0.9042532559293098, 0.9677065669412146, 0.9755891818936876, 0.9801922555601699, 0.9830979705956996, 0.9845395628576044, 0.986120303559893, 0.986863990690753, 0.9871193965716132, 0.981143764131137, 0.983003883178756, 0.9891193850359912, 0.9905144743217055, 0.9903052109288483, 0.9743085476075121, 0.984957008178756, 0.988374976928756, 0.9908392741786637, 0.9908857771548542, 0.9687990263935032, 0.9849341171788483, 0.9883989493932264, 0.988561709809893, 0.988561709809893, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882, 0.9885849612979882], "end": "2016-02-02 11:58:07.479000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0], "moving_var_accuracy_valid": [0.027249204419614922, 0.05519138990198752, 0.0804934348125135, 0.09849310720336868, 0.11265426995080173, 0.12091320689608269, 0.12668138875721732, 0.1286827689366673, 0.1274190109763346, 0.12457435082338346, 0.11963193494746627, 0.11422214025369158, 0.10810682920447427, 0.10167273066970103, 0.09492407049830318, 0.08801483735790844, 0.08127760462792569, 0.07507648841752863, 0.0689841853812139, 0.06329334561234487, 0.05769810829300678, 0.0527674783978327, 0.048146185827758765, 0.04403685740713341, 0.04010292787263641, 0.0363879215884871, 0.03298380204305659, 0.02990419244273538, 0.02709138876476252, 0.024499179151768243, 0.022195608682974495, 0.020052687060231895, 0.01820092943146205, 0.016463256774893305, 0.014844459525612618, 0.013370210471609635, 0.012066912412229168, 0.010910547575108518, 0.009869277018958319, 0.008914877943249097, 0.008034925780338138, 0.007245838050705703, 0.006526469391536223, 0.005874907851120465, 0.005303726728592463, 0.004780004447894448, 0.004303738203695501, 0.003875533216137311, 0.0034914041544824395, 0.0031428260900930507, 0.0028285584887295843, 0.0025599100812434355, 0.002320632036674113, 0.002104221810620684, 0.0019003140148105932, 0.0017127682413195446, 0.0015423353244315467, 0.001410272854322205, 0.0012800949312606392, 0.0011661631481225266, 0.0010510933995382654, 0.0009480877327145293, 0.0008880909310707613, 0.0008023621206364703, 0.0007332816060866912, 0.0006613412640733681, 0.0006057181841443091, 0.0005482911270309352, 0.0005054176911796704, 0.0004551132104084286, 0.0004099058895027689, 0.0003721278975265232, 0.0003452157503134249, 0.00032867522860048225, 0.00029800206800944623, 0.0002690853689421198, 0.0002482832714032811, 0.00022619310358826765, 0.0002038150996436331, 0.00018432262928850997, 0.00016764439791176687, 0.00017275131145032952, 0.0001784677371679237, 0.00016068206102817374, 0.00014830061311668638, 0.00013369536282202606, 0.0001225826624883305, 0.00011034672126535662, 0.0001066410686571427, 9.662947251328723e-05, 0.00020920530104861173, 0.0002814343381322205, 0.0003313083147659639, 0.00034864569385945635, 0.0003515239346162548, 0.0003404463370032979, 0.0003255801954538459, 0.0003035159864176872, 0.0002732990756629768, 0.0002464716558089237, 0.00022760878164271417, 0.0002105917413026392, 0.00019173908036584957, 0.00017410890316866634, 0.00015712985881806697, 0.00014143997139406947, 0.0001294585962501449, 0.00011671042426891634, 0.00010694177715811684, 9.638027471061093e-05, 8.722822494418365e-05, 7.866660895237352e-05, 7.093052532424884e-05, 6.39432403781852e-05, 5.76345880853193e-05, 5.194052339019897e-05, 4.680268028304247e-05, 4.216794173254757e-05, 3.798802643631838e-05, 3.4219095683077244e-05, 3.082138234598598e-05, 2.7758843058672712e-05, 2.4998833900106553e-05, 2.2511809379409796e-05, 2.0271044125613072e-05, 1.8252376417208612e-05, 1.6433972505854794e-05, 1.479611057686662e-05, 1.3320983129673773e-05, 1.1992516541206387e-05, 1.0796206583930741e-05, 9.718968699982109e-06, 8.749001877283895e-06, 7.875665027868503e-06, 7.089364829115179e-06, 6.381454052470817e-06, 5.7441394693001306e-06, 5.1703984882519975e-06, 4.65390374179112e-06, 4.188954900527108e-06, 3.770417052135628e-06], "accuracy_test": 0.0920101243622449, "start": "2016-02-01 09:48:33.517000", "learning_rate_per_epoch": [0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 0.0003887256607413292, 3.887256752932444e-05, 3.887256752932444e-06, 3.887256809775863e-07, 3.8872567387215895e-08, 3.8872567387215895e-09, 3.887256627699287e-10, 3.887256488921409e-11, 3.887256402185235e-12, 3.887256456395344e-13, 3.887256456395344e-14, 3.8872565410986385e-15, 3.8872565410986385e-16, 3.8872565410986385e-17, 3.887256706534761e-18, 3.887256706534761e-19, 3.8872567711582464e-20, 3.88725693271696e-21, 3.887256882229862e-22, 3.887256945338734e-23, 3.887256866452644e-24, 3.887256817148837e-25, 3.8872569404083536e-26, 3.8872569404083536e-27, 3.887257036704851e-28, 3.88725697651954e-29, 3.887257126982817e-30, 3.887257079963043e-31, 3.887256962413608e-32, 3.887256962413608e-33, 3.887256962413608e-34, 3.887257077207978e-35, 3.8872570054614967e-36], "accuracy_train_first": 0.5645205362910668, "accuracy_train_last": 0.9885849612979882, "batch_size_eval": 1024, "accuracy_train_std": [0.020680746369502855, 0.02447711654537131, 0.023744001679779945, 0.02538943113694642, 0.026545450362064772, 0.02453720326938955, 0.02772365671306555, 0.02680138859733125, 0.029349465983547558, 0.02802878066698295, 0.02782299351783328, 0.02874630653955114, 0.029968402265466366, 0.029762361593451067, 0.03180257374725423, 0.02963696431511474, 0.029084119521286485, 0.030021834888873285, 0.02933752421895382, 0.031543438334250946, 0.02993372667621735, 0.031167871506038326, 0.02870084752926141, 0.029929223095837208, 0.02781328108858412, 0.02910426435866851, 0.027859652780987013, 0.027663741290004693, 0.030413275486135403, 0.03047187780750068, 0.026543460495601957, 0.028017393224903684, 0.028416298801009578, 0.026715840367997307, 0.02809060617601297, 0.028969822981031856, 0.027070151575071, 0.02673710898236085, 0.027353945559351056, 0.027591367903714862, 0.025885870878890313, 0.025882091371248035, 0.02496845322290831, 0.02905273493733499, 0.02847906945590666, 0.02611287279044385, 0.026436211797449902, 0.02823123970968212, 0.025338838177131503, 0.026968341116473768, 0.027728006374718454, 0.02829538509909185, 0.026876158136753068, 0.025497588477889216, 0.028564716915582215, 0.02776614821452314, 0.02713958283284974, 0.029622127979151102, 0.025681190191591388, 0.025117813787972253, 0.02637126761915005, 0.026164326080173588, 0.02745778310829107, 0.026526046235827643, 0.026556005749060255, 0.025805441849153968, 0.026717753365737736, 0.026622233988529694, 0.027921163746101207, 0.02756865387160792, 0.02500916868723037, 0.026180687613564964, 0.025818377008874172, 0.02282665732276252, 0.023955769276752574, 0.026638688608103894, 0.024391043786622046, 0.02588086378911779, 0.02380863666023733, 0.024647306179669936, 0.025198369805440046, 0.02351394743967893, 0.02407638624150513, 0.023325226823946794, 0.025227458418835447, 0.026344357412978074, 0.024022518511204564, 0.024581906756011886, 0.024559266410166723, 0.02462809486713721, 0.012833209965510885, 0.01027544384427978, 0.008840513758111315, 0.007416052679338482, 0.006699626133977744, 0.006396379559706141, 0.006247783664769644, 0.006081941187293005, 0.006819186795532889, 0.006631850809518568, 0.003991419940212041, 0.0040007832513744915, 0.004254478324684499, 0.009445615838484037, 0.005735664002568505, 0.004110494090711443, 0.0037281948383852672, 0.00415295012050624, 0.011412292293900278, 0.005640531426720362, 0.004704930126547032, 0.004553227161986668, 0.004528223964781679, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405, 0.0045592120300685405], "accuracy_test_std": 0.013799844097591427, "error_valid": [0.44975556522966864, 0.36124135212725905, 0.301403367375753, 0.2900920086596386, 0.2577727903802711, 0.2568668227597892, 0.2305908203125, 0.227783203125, 0.2320556640625, 0.22361222232680722, 0.2331028214420181, 0.22332690135542166, 0.22335778661521077, 0.2213840714420181, 0.22495499576430722, 0.23094526543674698, 0.23197330336972888, 0.22196353774472888, 0.22824059911521077, 0.22526973126882532, 0.2392063370670181, 0.22392695783132532, 0.22549328172063254, 0.21377453172063254, 0.22120023060993976, 0.22894213573042166, 0.22943041698042166, 0.22608451383659633, 0.22603303840361444, 0.22997017366340367, 0.22208560805722888, 0.2291965714420181, 0.21415986210466864, 0.22106786521084332, 0.23081437076430722, 0.2359104386295181, 0.2261330478162651, 0.2199074618787651, 0.2176704866340362, 0.21982657191265065, 0.22561535203313254, 0.22315335560993976, 0.22692724021084332, 0.23030549934111444, 0.21996923239834332, 0.22348868128765065, 0.2356148225715362, 0.2267551651920181, 0.22500500047063254, 0.22805675828313254, 0.22989810805722888, 0.21770137189382532, 0.21538203595632532, 0.24083443147590367, 0.22045751364834332, 0.22285921027861444, 0.23065112010542166, 0.24359057323042166, 0.21848526920180722, 0.21586002211972888, 0.23126147166792166, 0.22269595961972888, 0.24671439664909633, 0.2231636506965362, 0.23956225291792166, 0.22561535203313254, 0.21834260871611444, 0.22215767366340367, 0.23900337678840367, 0.23025402390813254, 0.23063052993222888, 0.22300187076430722, 0.21768078172063254, 0.21317447524472888, 0.23083349021084332, 0.22325630647590367, 0.23431322948042166, 0.2213840714420181, 0.22471085513930722, 0.2230415803840362, 0.23028490916792166, 0.21072277390813254, 0.20876964890813254, 0.22397843326430722, 0.21683658461972888, 0.22101638977786142, 0.22744640672063254, 0.22244152390813254, 0.21386571677334332, 0.2246799698795181, 0.18540274378765065, 0.18639989646084332, 0.18591161521084332, 0.18872952748493976, 0.18956342949924698, 0.19163862481174698, 0.19176069512424698, 0.19410062123493976, 0.20259553840361444, 0.20133365493222888, 0.19544339467243976, 0.1946697924510542, 0.19690823842243976, 0.19722297392695776, 0.19875988328313254, 0.20022472703313254, 0.19577872035015065, 0.19870840785015065, 0.20463984845632532, 0.19928787415286142, 0.1980568759412651, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776, 0.19880988798945776], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.051330619918591225, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "valid_ratio": 0.15, "learning_rate": 0.0038872567014003353, "optimization": "adam", "nb_data_augmentation": 0, "learning_rate_decay_method": "discrete", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 2.5674360061869438e-05, "rotation_range": [0, 0], "momentum": 0.6030704332093234}, "accuracy_valid_max": 0.8145972562123494, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8011901120105422, "accuracy_valid_std": [0.008951504911348943, 0.014924523597990253, 0.012748954215643735, 0.014993123937875436, 0.011393979682954972, 0.010902283028500737, 0.011382688460135654, 0.012532287859092382, 0.011585109359560912, 0.01527368631149663, 0.014326533013375213, 0.015279234767154065, 0.013002963028514962, 0.012999829290990184, 0.013144107773610287, 0.010939897198946282, 0.008154908501823755, 0.007209653732248915, 0.00844917897640435, 0.00856085908103605, 0.007004148056565821, 0.006884059092026502, 0.008004985503573552, 0.012989214622947673, 0.007853241319453391, 0.006876639120148406, 0.011065728208246094, 0.013822089038077436, 0.010549959334182601, 0.009905338573110534, 0.0068038275839923815, 0.009215359519577773, 0.012524892565411328, 0.010664518788716807, 0.009298543759240902, 0.007473715984159304, 0.013792721429844508, 0.012481586985553144, 0.010650588962395876, 0.010525185830116798, 0.009902634008842606, 0.011193600389761665, 0.01348839907831719, 0.012388748292974835, 0.005455335561671332, 0.007410313726553218, 0.01520128266769242, 0.011951804863209861, 0.008928882067402801, 0.007087652562217796, 0.010190473015773726, 0.008708234879953657, 0.007882431378264115, 0.015171354661990207, 0.012665524217125508, 0.010154448557881824, 0.009530575640854773, 0.01479364313142097, 0.014812997677136293, 0.008057370183002881, 0.008199349387318032, 0.012458562836314946, 0.008464017981054315, 0.011128769952870255, 0.009896359462696064, 0.01532691830464895, 0.01565635431025448, 0.012077955369982823, 0.014794658625510626, 0.007962247895071438, 0.008510906458485032, 0.012930719681476055, 0.011937431480801447, 0.013371632508521714, 0.013940809368943905, 0.015501563892788573, 0.007077957565848511, 0.010706826119804605, 0.013265600860369996, 0.012414445089581708, 0.006947921781384541, 0.009065835405332186, 0.012527142027430384, 0.01278393638115054, 0.011647058616151758, 0.015454117949620576, 0.007114313175752546, 0.008469049930961375, 0.005074369092234722, 0.008554395595789159, 0.011913187686174038, 0.012601996172158457, 0.013536867275130754, 0.014284464130164936, 0.01208269816564299, 0.010436552838422215, 0.011378629484630209, 0.012191719001246944, 0.015173975511400309, 0.012300188135458546, 0.011388798901469505, 0.008431190283901354, 0.0115384555811458, 0.007377837935764342, 0.012409733216266795, 0.012290414157369145, 0.009312680094718044, 0.008305051486835921, 0.013435363233402699, 0.008984561049040395, 0.008016238511601109, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582, 0.007748327944771582], "accuracy_valid": [0.5502444347703314, 0.638758647872741, 0.698596632624247, 0.7099079913403614, 0.7422272096197289, 0.7431331772402108, 0.7694091796875, 0.772216796875, 0.7679443359375, 0.7763877776731928, 0.7668971785579819, 0.7766730986445783, 0.7766422133847892, 0.7786159285579819, 0.7750450042356928, 0.769054734563253, 0.7680266966302711, 0.7780364622552711, 0.7717594008847892, 0.7747302687311747, 0.7607936629329819, 0.7760730421686747, 0.7745067182793675, 0.7862254682793675, 0.7787997693900602, 0.7710578642695783, 0.7705695830195783, 0.7739154861634037, 0.7739669615963856, 0.7700298263365963, 0.7779143919427711, 0.7708034285579819, 0.7858401378953314, 0.7789321347891567, 0.7691856292356928, 0.7640895613704819, 0.7738669521837349, 0.7800925381212349, 0.7823295133659638, 0.7801734280873494, 0.7743846479668675, 0.7768466443900602, 0.7730727597891567, 0.7696945006588856, 0.7800307676016567, 0.7765113187123494, 0.7643851774284638, 0.7732448348079819, 0.7749949995293675, 0.7719432417168675, 0.7701018919427711, 0.7822986281061747, 0.7846179640436747, 0.7591655685240963, 0.7795424863516567, 0.7771407897213856, 0.7693488798945783, 0.7564094267695783, 0.7815147307981928, 0.7841399778802711, 0.7687385283320783, 0.7773040403802711, 0.7532856033509037, 0.7768363493034638, 0.7604377470820783, 0.7743846479668675, 0.7816573912838856, 0.7778423263365963, 0.7609966232115963, 0.7697459760918675, 0.7693694700677711, 0.7769981292356928, 0.7823192182793675, 0.7868255247552711, 0.7691665097891567, 0.7767436935240963, 0.7656867705195783, 0.7786159285579819, 0.7752891448606928, 0.7769584196159638, 0.7697150908320783, 0.7892772260918675, 0.7912303510918675, 0.7760215667356928, 0.7831634153802711, 0.7789836102221386, 0.7725535932793675, 0.7775584760918675, 0.7861342832266567, 0.7753200301204819, 0.8145972562123494, 0.8136001035391567, 0.8140883847891567, 0.8112704725150602, 0.810436570500753, 0.808361375188253, 0.808239304875753, 0.8058993787650602, 0.7974044615963856, 0.7986663450677711, 0.8045566053275602, 0.8053302075489458, 0.8030917615775602, 0.8027770260730422, 0.8012401167168675, 0.7997752729668675, 0.8042212796498494, 0.8012915921498494, 0.7953601515436747, 0.8007121258471386, 0.8019431240587349, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422, 0.8011901120105422], "seed": 384063178, "model": "residualv4", "loss_std": [0.2951188087463379, 0.20363113284111023, 0.19758298993110657, 0.189753457903862, 0.18329571187496185, 0.17760637402534485, 0.17007745802402496, 0.16907750070095062, 0.16432909667491913, 0.16277945041656494, 0.15991008281707764, 0.1553761512041092, 0.1511841118335724, 0.15234018862247467, 0.14881856739521027, 0.14558567106723785, 0.14156219363212585, 0.14358550310134888, 0.13753102719783783, 0.13481755554676056, 0.13119687139987946, 0.13016176223754883, 0.128763347864151, 0.13277938961982727, 0.1278734803199768, 0.12900911271572113, 0.12913519144058228, 0.1290159970521927, 0.12445017695426941, 0.1209263727068901, 0.12102993577718735, 0.12025893479585648, 0.12208931148052216, 0.11923844367265701, 0.12444733083248138, 0.12081736326217651, 0.11807002872228622, 0.11315950006246567, 0.11378441751003265, 0.11394289135932922, 0.11368374526500702, 0.11286282539367676, 0.1081603467464447, 0.11190026253461838, 0.11025264859199524, 0.11275997012853622, 0.10934676975011826, 0.11268909275531769, 0.11350113898515701, 0.10660206526517868, 0.10864569246768951, 0.10675559937953949, 0.10928038507699966, 0.11547733098268509, 0.10670657455921173, 0.11004563421010971, 0.11133658140897751, 0.11161039024591446, 0.10800919681787491, 0.10929004848003387, 0.10951700806617737, 0.10468344390392303, 0.1067403256893158, 0.10703109949827194, 0.10150255262851715, 0.10615066438913345, 0.10159414261579514, 0.10266466438770294, 0.10432694107294083, 0.10401543229818344, 0.10213615745306015, 0.10452735424041748, 0.1055048257112503, 0.10585866868495941, 0.10448875278234482, 0.10433582961559296, 0.1025610938668251, 0.10484263300895691, 0.10765591263771057, 0.10254334658384323, 0.10112442076206207, 0.10321605950593948, 0.10305660218000412, 0.10488609969615936, 0.09945192188024521, 0.10456947237253189, 0.0998004898428917, 0.09874018281698227, 0.10407198965549469, 0.10120389610528946, 0.09261777997016907, 0.045130662620067596, 0.02893640287220478, 0.019064312800765038, 0.013248242437839508, 0.009933997876942158, 0.008180896751582623, 0.007875707931816578, 0.007584006059914827, 0.02359376847743988, 0.008567963726818562, 0.0031047388911247253, 0.003846972482278943, 0.026552991941571236, 0.018254011869430542, 0.004880344029515982, 0.002277681604027748, 0.0028141294606029987, 0.04244481399655342, 0.023038260638713837, 0.007529676891863346, 0.002610785886645317, 0.0024547544308006763, 0.0024324310943484306, 0.0024298173375427723, 0.00242972350679338, 0.0024297223426401615, 0.002429722109809518, 0.002429722109809518, 0.002429723273962736, 0.0024297223426401615, 0.002429721876978874, 0.0024297230411320925, 0.0024297216441482306, 0.0024297230411320925, 0.002429722808301449, 0.002429721876978874, 0.002429721876978874, 0.0024297230411320925, 0.002429723273962736, 0.002429721876978874, 0.002429722109809518, 0.0024297237396240234, 0.0024297230411320925, 0.0024297223426401615, 0.00242972350679338, 0.00242972350679338, 0.002429723273962736, 0.0024297237396240234, 0.0024297237396240234, 0.0024297223426401615]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:32 2016", "state": "available"}], "summary": "8ce1bbf6fb0bc3dd63ad33964a06e7c5"}