{"content": {"hp_model": {"f0": 32, "f1": 16, "f2": 64, "f3": 64, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.6974583864212036, 1.3363673686981201, 1.1835016012191772, 1.0788671970367432, 0.9997501969337463, 0.9353188872337341, 0.8824447989463806, 0.836764395236969, 0.7990536093711853, 0.7651922702789307, 0.7363507747650146, 0.7122024893760681, 0.6873536109924316, 0.6717891693115234, 0.6531766653060913, 0.638971209526062, 0.6243279576301575, 0.6129130125045776, 0.6018785834312439, 0.5885511040687561, 0.5799673795700073, 0.5726480484008789, 0.5649794936180115, 0.5580986142158508, 0.5515425205230713, 0.5451276302337646, 0.5398129820823669, 0.53409743309021, 0.5284286141395569, 0.5265161395072937, 0.5212152600288391, 0.5187556743621826, 0.5132772922515869, 0.5119343400001526, 0.5088048577308655, 0.5062037706375122, 0.5036993026733398, 0.5015519857406616, 0.498322993516922, 0.49721312522888184, 0.49491435289382935, 0.494383305311203, 0.49275094270706177, 0.49256187677383423, 0.48900485038757324, 0.48708009719848633, 0.487760990858078, 0.4857477843761444, 0.48430341482162476, 0.48372307419776917, 0.4841203987598419, 0.48475542664527893, 0.48422715067863464, 0.4812813997268677, 0.4829932153224945, 0.4802435040473938, 0.4800277352333069, 0.47926872968673706, 0.4793798327445984, 0.4784364104270935, 0.47705861926078796, 0.47761330008506775, 0.4775184988975525, 0.47716325521469116, 0.47691529989242554, 0.47471001744270325, 0.4763948917388916, 0.4759432375431061, 0.47572967410087585, 0.47757163643836975, 0.47444039583206177, 0.47434958815574646, 0.47424978017807007, 0.4754464328289032, 0.47647011280059814, 0.47639548778533936, 0.47585994005203247, 0.4747641682624817, 0.47330138087272644, 0.47430333495140076, 0.4737509787082672, 0.47454944252967834, 0.47377410531044006, 0.4741969108581543, 0.47306767106056213, 0.4750646650791168, 0.4735965132713318, 0.4751872718334198, 0.47592222690582275, 0.4739196002483368, 0.4743702709674835, 0.4742058217525482, 0.47529077529907227, 0.47358787059783936, 0.474128395318985, 0.47420361638069153, 0.47368761897087097, 0.4734731614589691], "moving_avg_accuracy_train": [0.047951724142903274, 0.0996352274103682, 0.1504252835960571, 0.19993490634156397, 0.24795281145999154, 0.2945584883473995, 0.33832837072689914, 0.3790626594386315, 0.41764870644465757, 0.45318025370117, 0.4859745571712616, 0.516654257750278, 0.54547492145707, 0.5719969869490983, 0.5965504396419238, 0.6187089648856955, 0.639493161230044, 0.658919589875635, 0.676668550767409, 0.6928471205187873, 0.7077868325509802, 0.7216299935822886, 0.734077284864056, 0.7456751944129033, 0.7562153672127536, 0.7659179057671796, 0.7748268296780493, 0.783054160639508, 0.790709766429793, 0.7978230619755826, 0.8043016136822325, 0.8102160516241791, 0.8156088002362167, 0.8206553334358786, 0.8253969958690995, 0.8296459990149784, 0.8336629450021849, 0.8374013932287567, 0.8409193483076437, 0.8441249272619475, 0.8471169772636966, 0.8497493323474045, 0.852192892733465, 0.8544897533309196, 0.8565405797293245, 0.8584792933914511, 0.8602613741171362, 0.8619558915250054, 0.8635414110611354, 0.8649683786436523, 0.8662457100703077, 0.8674535091721731, 0.8685195299269289, 0.8694441434717037, 0.8703925531024772, 0.8712460857213546, 0.8720003862831247, 0.8728047787756132, 0.8734938908355289, 0.8740908762501765, 0.8746676185554836, 0.8751797472326502, 0.8756615533325671, 0.8759882219772542, 0.876358953668187, 0.8767507409102645, 0.8770870373376488, 0.8774176059080091, 0.8776941912820476, 0.8778594848591769, 0.8781011468845179, 0.8782907769704293, 0.8784567937501305, 0.8786387248863762, 0.8788257504459114, 0.8789940013518556, 0.8791361986696047, 0.8792106978329598, 0.8793568021395033, 0.87949992175944, 0.8796264403173922, 0.8797170194826353, 0.8797450983575537, 0.8798494244045041, 0.879901465168188, 0.8799971660293223, 0.8800855498555151, 0.880183696489565, 0.8802860154018857, 0.8803756691277085, 0.8804495262297954, 0.8804601580014264, 0.8805046398768559, 0.8805144466302186, 0.8805906659749025, 0.8806034598136896, 0.8806126491197883, 0.8806092937512295], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.04797569182981927, 0.09934723268072287, 0.14930594055911142, 0.1981884112622364, 0.24494245346620852, 0.29040876323065695, 0.332519730610528, 0.37203195888607155, 0.40851555116576255, 0.4420314365141712, 0.4731906799109469, 0.5016672750410871, 0.5285454458803518, 0.5527653612414882, 0.5749650875891015, 0.5953263477966824, 0.6140665210460051, 0.6313741891127148, 0.647215527025615, 0.6615134702756137, 0.6743541166121336, 0.6863125008375919, 0.6966355935155044, 0.7065468765020564, 0.7151872989798628, 0.7231844352810481, 0.7302211075285457, 0.7369712106311128, 0.7430330668835137, 0.7486230148544243, 0.7535308682070843, 0.7580710360456379, 0.7621104179926554, 0.7660367714776519, 0.7696569683415584, 0.7728408738229147, 0.7758661096710449, 0.7786488275819524, 0.7811532737017692, 0.7833818316384448, 0.785438420923772, 0.7871662514594069, 0.7887192399241589, 0.7901189885597552, 0.7915476017519725, 0.7928943887812181, 0.7941085561248583, 0.7953111700153845, 0.7961849734769485, 0.7970191952086964, 0.7977221961509292, 0.7984159321551887, 0.7990158804965222, 0.7994337636912223, 0.8000428216688622, 0.8004678740275785, 0.800813800056673, 0.8013336825227677, 0.801655092367253, 0.8020165739061301, 0.8022564580723694, 0.8024224961883253, 0.8026106106037548, 0.8027910911002318, 0.8029291094845611, 0.803213046945367, 0.8034065259951827, 0.8035206514924265, 0.8035857138375362, 0.8034113068457254, 0.8034496530530957, 0.8035716728757982, 0.8036072190200708, 0.8036758316436662, 0.803737583004902, 0.8038419873550141, 0.8038749161138651, 0.803819102778081, 0.8039041776282849, 0.8039685379622185, 0.8040264622627586, 0.8040531505620853, 0.8040781995401388, 0.804198399870387, 0.8042211309488603, 0.8043036535843959, 0.8043891014789684, 0.8044792411239932, 0.8044860951083559, 0.8045410918192824, 0.8046394169841162, 0.8046180463512166, 0.8046852915090166, 0.8046603629322866, 0.8046358681959103, 0.8046016159019217, 0.8045229902209915, 0.804587533960564], "moving_var_accuracy_train": [0.02069431063449384, 0.04266554016102698, 0.0616156544110332, 0.07751491366955159, 0.09051489521025724, 0.1010122077524328, 0.10815321040882661, 0.11227142985960085, 0.11444423408560207, 0.11436222833101786, 0.11260520255871222, 0.10981587855140384, 0.10630996660476348, 0.1020097495659581, 0.09723462296161167, 0.09193016283426036, 0.0866249919099582, 0.08135896788826254, 0.07605830161407574, 0.0708081865254701, 0.06573612283336673, 0.06088720851607868, 0.05619290320674929, 0.051784216439203536, 0.047605651979139525, 0.04369234007082668, 0.040037426390991004, 0.036642884524636286, 0.033506070772318874, 0.03061085445678274, 0.027927513701046097, 0.02544958751646372, 0.023166364403151053, 0.02107893543885355, 0.019173392158643766, 0.01741853919238259, 0.015821907968721537, 0.014365501128134206, 0.013040335086754385, 0.011828783205969433, 0.010726476154289193, 0.009716192178440776, 0.008798311846839619, 0.007965960779592909, 0.007207217701881167, 0.0065203234276664974, 0.005896873390315572, 0.005333028554494162, 0.004822350548839793, 0.0043584416222898015, 0.0039372816402225164, 0.0035566824842344687, 0.003211241838057152, 0.002897811846116066, 0.0026161259889541546, 0.0023610700514421286, 0.002130083770335295, 0.0019228988188395135, 0.0017348828158356522, 0.0015646020585198042, 0.0014111355378484034, 0.0012723824661013514, 0.001147233453552471, 0.0010334705198280197, 0.0009313604457251744, 0.0008396058763401497, 0.0007566631462897784, 0.0006819803118781908, 0.00061447077591256, 0.0005532695960210658, 0.0004984682412293868, 0.0004489450532317932, 0.00040429860204889526, 0.00036416663228902666, 0.00032806477609939887, 0.00029551307379561807, 0.0002661437471106316, 0.000239579323527634, 0.00021581350939038545, 0.00019441650748184432, 0.00017511891924321677, 0.00015768086858548025, 0.00014191987753588243, 0.0001278258450989449, 0.0001150676347588137, 0.00010364329917632897, 9.334927456528856e-05, 8.410104196473747e-05, 7.578516020663018e-05, 6.827898430095247e-05, 6.150017971461547e-05, 5.535117905426605e-05, 4.983386888401499e-05, 4.485134754731715e-05, 4.0418497289121874e-05, 3.637812070100785e-05, 3.274106862102625e-05, 2.946706308540711e-05], "duration": 71912.312388, "accuracy_train": [0.47951724142903285, 0.5647867568175526, 0.6075357892672573, 0.6455215110511259, 0.6801139575258398, 0.7140095803340716, 0.7322573121423958, 0.745671257844223, 0.7649231294988926, 0.7729641790097821, 0.7811232884020857, 0.7927715629614249, 0.8048608948181986, 0.8106955763773532, 0.8175315138773532, 0.8181356920796419, 0.8265509283291805, 0.8337574476859542, 0.8364091987933739, 0.8384542482811923, 0.8422442408407161, 0.8462184428640642, 0.846102906399963, 0.8500563803525286, 0.8510769224114065, 0.8532407527570136, 0.8550071448758766, 0.8571001392926356, 0.8596102185423589, 0.8618427218876891, 0.862608579042082, 0.8634459931016981, 0.8641435377445552, 0.866074132232835, 0.8680719577680879, 0.8678870273278886, 0.8698154588870433, 0.8710474272679033, 0.8725809440176264, 0.8729751378506828, 0.8740454272794389, 0.8734405281007751, 0.8741849362080103, 0.8751614987080103, 0.8749980173149685, 0.8759277163505905, 0.8763001006483019, 0.8772065481958287, 0.8778110868863048, 0.8778110868863048, 0.8777416929102067, 0.8783237010889626, 0.8781137167197305, 0.8777656653746769, 0.8789282397794389, 0.8789278792912514, 0.878789091339055, 0.8800443112080103, 0.8796958993747692, 0.8794637449820044, 0.8798582993032484, 0.8797889053271503, 0.8799978082318198, 0.8789282397794389, 0.8796955388865817, 0.8802768260889626, 0.8801137051841085, 0.8803927230412514, 0.8801834596483942, 0.8793471270533407, 0.8802761051125876, 0.8799974477436323, 0.8799509447674418, 0.8802761051125876, 0.8805089804817275, 0.8805082595053525, 0.8804159745293466, 0.8798811903031561, 0.8806717408983942, 0.8807879983388703, 0.8807651073389626, 0.8805322319698228, 0.8799978082318198, 0.880788358827058, 0.8803698320413437, 0.8808584737795312, 0.8808810042912514, 0.8810670161960132, 0.8812068856127722, 0.8811825526601144, 0.8811142401485788, 0.8805558439461055, 0.8809049767557217, 0.8806027074104835, 0.881276640077058, 0.8807186043627722, 0.8806953528746769, 0.8805790954342008], "end": "2016-02-02 10:15:48.180000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0], "moving_var_accuracy_valid": [0.020715003058948092, 0.042394819637617806, 0.06061819010975948, 0.0760618345771604, 0.08812911528114163, 0.09792087166539848, 0.10408878666187571, 0.10773085364537613, 0.1089372408315151, 0.10815334788455266, 0.10607609913763295, 0.10276673745572301, 0.09899198831913304, 0.09437222818812528, 0.08937045601849297, 0.084164638671811, 0.07890892164536158, 0.07371402784599206, 0.06860115694322906, 0.06358092187952781, 0.05870676947663128, 0.05412311910852137, 0.04966990337960017, 0.04558701481559579, 0.04170022543939105, 0.038105790596629587, 0.03474084434383495, 0.03167683493650903, 0.02883986635388106, 0.02623710738335035, 0.02383017986579626, 0.021632679995236766, 0.01961626145433811, 0.017793381574106596, 0.01613199584469688, 0.014610031547255086, 0.013231396859960887, 0.011977948844709969, 0.010836604213542562, 0.00979764202648238, 0.008855943859230846, 0.00799721805854661, 0.007219202211236828, 0.006514915656298825, 0.0058817925115457375, 0.005309937778110459, 0.004792211821344674, 0.004326007160737386, 0.003900278237068618, 0.0035165137464412406, 0.003169310264720138, 0.0028567106650405774, 0.0025742790406469394, 0.002318422773861961, 0.0020899190610569056, 0.001882553180520067, 0.0016953748458265064, 0.0015282698612508305, 0.001376372613718936, 0.001239911372473583, 0.0011164381349451362, 0.0010050424393541742, 0.0009048566787183882, 0.0008146641697330265, 0.0007333691944294394, 0.0006607578593213359, 0.0005950189806736607, 0.0005356343042683849, 0.00048210897182030703, 0.00043417183482740893, 0.00039076788522924514, 0.0003518250962405117, 0.0003166539583718144, 0.0002850309317636826, 0.00025656215766284464, 0.0002310040443114614, 0.00020791339860875044, 0.00018715009490393751, 0.00016850022498477878, 0.00015168748275955725, 0.0001365489315049392, 0.00012290044874233374, 0.0001106160509298141, 9.96844789113586e-05, 8.97206813375798e-05, 8.080990307220357e-05, 7.2794624849165e-05, 6.558828876469535e-05, 5.9029882682140616e-05, 5.315411615784111e-05, 4.792571508441336e-05, 4.313725391152678e-05, 3.886422572160205e-05, 3.498339605488189e-05, 3.149045637838498e-05, 2.8351969717337825e-05, 2.5572410724919565e-05, 2.305266270128967e-05], "accuracy_test": 0.8006018813775511, "start": "2016-02-01 14:17:15.868000", "learning_rate_per_epoch": [0.00013221609697211534, 0.00012207560939714313, 0.00011271286348346621, 0.0001040682036546059, 9.608655818738043e-05, 8.87170754140243e-05, 8.191280358005315e-05, 7.56303925300017e-05, 6.982982449699193e-05, 6.44741376163438e-05, 5.952921128482558e-05, 5.4963540605967864e-05, 5.0748039939207956e-05, 4.68558537249919e-05, 4.326218186179176e-05, 3.9944134186953306e-05, 3.6880566767649725e-05, 3.4051965485559776e-05, 3.144030415569432e-05, 2.9028949938947335e-05, 2.6802537831827067e-05, 2.4746883354964666e-05, 2.2848889784654602e-05, 2.1096464479342103e-05, 1.9478444301057607e-05, 1.7984519217861816e-05, 1.6605174096184783e-05, 1.5331619579228573e-05, 1.4155741155263968e-05, 1.3070048225927167e-05, 1.2067624084011186e-05, 1.1142082257720176e-05, 1.0287525583407842e-05, 9.498510735284071e-06, 8.770010026637465e-06, 8.097383215499576e-06, 7.47634385334095e-06, 6.9029360929562245e-06, 6.373506494128378e-06, 5.884682195755886e-06, 5.433349087979877e-06, 5.0166313485533465e-06, 4.631874162441818e-06, 4.276626441424014e-06, 3.9486249079345725e-06, 3.6457799978961702e-06, 3.366162218298996e-06, 3.1079900963959517e-06, 2.8696188110188814e-06, 2.6495297333894996e-06, 2.446320650051348e-06, 2.2586968952964526e-06, 2.0854631657130085e-06, 1.9255157894804142e-06, 1.7778359051590087e-06, 1.64148252679297e-06, 1.5155868595684296e-06, 1.3993469565320993e-06, 1.2920222616230603e-06, 1.1929289485124173e-06, 1.101435714190302e-06, 1.0169596862397157e-06, 9.389626711708843e-07, 8.669476869727077e-07, 8.004560072549793e-07, 7.390639780169295e-07, 6.823805165367958e-07, 6.300444397311367e-07, 5.817223609483335e-07, 5.371064162318362e-07, 4.959123316439218e-07, 4.578776895414194e-07, 4.2276016642972536e-07, 3.9033602661220357e-07, 3.6039870110471384e-07, 3.327574518152687e-07, 3.0723617783223744e-07, 2.836723069776781e-07, 2.6191568736066984e-07, 2.4182773472603003e-07, 2.2328043769448414e-07, 2.0615566143078468e-07, 1.9034428078157362e-07, 1.7574558341948432e-07, 1.6226654508955107e-07, 1.4982130380758463e-07, 1.3833056300427415e-07, 1.2772112256698165e-07, 1.1792538856525425e-07, 1.088809469251828e-07, 1.005301797363245e-07, 9.2819888664053e-08, 8.570094678361784e-08, 7.912800015219545e-08, 7.30591764863675e-08, 6.745580805045392e-08, 6.228219717741013e-08, 5.75053817897242e-08], "accuracy_train_first": 0.47951724142903285, "accuracy_train_last": 0.8805790954342008, "batch_size_eval": 1024, "accuracy_train_std": [0.015705217922186456, 0.016620071329576734, 0.016786672749809085, 0.017412560681547895, 0.01657227240715611, 0.014821285938286962, 0.017071879026691255, 0.01573455168125681, 0.014610692545248225, 0.014815339772265394, 0.014737387427619464, 0.013078731256813074, 0.013354101372329171, 0.013042070442064662, 0.012191217492222092, 0.012333126619666132, 0.012832660834902795, 0.01188524600274119, 0.012056836670721445, 0.011992091870528439, 0.012198830553533857, 0.012633691156980889, 0.012267740417222546, 0.012459627861408388, 0.012059396013784545, 0.013098795636142052, 0.011349564446623276, 0.01236595854171821, 0.012122390183111809, 0.012261841595359561, 0.012120223234360017, 0.011910919847277381, 0.011854021632585672, 0.012768250307039262, 0.01220078238097429, 0.012449639993309582, 0.012508901549299274, 0.01254774880283808, 0.012950217251894635, 0.01195903554912522, 0.011687817084591916, 0.012048020708874268, 0.011587208625186777, 0.01189481168263702, 0.011867134653147121, 0.011808973499087435, 0.011519113343041482, 0.011681842821200035, 0.0114901824273645, 0.010964346579516395, 0.010863139816273256, 0.010654884583487177, 0.011369772267996807, 0.011152237072983311, 0.010636674112137097, 0.010807816832803076, 0.011022123070474775, 0.010545537137928308, 0.0104512643454508, 0.01060428698180991, 0.01058113620866282, 0.010343325927546778, 0.010457498542751555, 0.010730191560545041, 0.010437979562677533, 0.010213356074846852, 0.010519086106122946, 0.010424651827987824, 0.01050760374441666, 0.01048369552315286, 0.010660679765232543, 0.010420155242875291, 0.01042709804820571, 0.01066706764977595, 0.010181325253362752, 0.010574063504149174, 0.010317295149652383, 0.010648185385621145, 0.010761232356019836, 0.010472858432855139, 0.010325627699093452, 0.01017875326731987, 0.010646859879232935, 0.010810322664522077, 0.01070655370982393, 0.010595418087842558, 0.010372867957926699, 0.010604638296643121, 0.010603448251712203, 0.010222301485310099, 0.00998886662138379, 0.010542521924765217, 0.01050492537410153, 0.010670266341798166, 0.010744540475958082, 0.01022787771933715, 0.010765107609025435, 0.010776412824495325], "accuracy_test_std": 0.011924445633130831, "error_valid": [0.5202430817018072, 0.4383088996611446, 0.4010656885353916, 0.3618693524096386, 0.33427116669804224, 0.3003944488893072, 0.28848156297063254, 0.2723579866340362, 0.2631321183170181, 0.25632559535015065, 0.2463761295180723, 0.24204336878765065, 0.2295510165662651, 0.2292554005082832, 0.22523737528237953, 0.2214223103350903, 0.2172719197100903, 0.21285679828689763, 0.2102124317582832, 0.20980504047439763, 0.21008006635918675, 0.2060620411332832, 0.2104565723832832, 0.20425157661897586, 0.20704889871987953, 0.2048413380082832, 0.20644884224397586, 0.2022778614457832, 0.20241022684487953, 0.20106745340737953, 0.20229845161897586, 0.20106745340737953, 0.20153514448418675, 0.19862604715737953, 0.1977612598832832, 0.19850397684487953, 0.1969067676957832, 0.19630671121987953, 0.19630671121987953, 0.19656114693147586, 0.1960522755082832, 0.19728327371987953, 0.1973038638930723, 0.19728327371987953, 0.1955948795180723, 0.1949845279555723, 0.19496393778237953, 0.19386530496987953, 0.19595079536897586, 0.1954728092055723, 0.19595079536897586, 0.19534044380647586, 0.19558458443147586, 0.19680528755647586, 0.19447565653237953, 0.19570665474397586, 0.19607286568147586, 0.19398737528237953, 0.19545221903237953, 0.19473009224397586, 0.19558458443147586, 0.1960831607680723, 0.19569635965737953, 0.19558458443147586, 0.19582872505647586, 0.19423151590737953, 0.19485216255647586, 0.19545221903237953, 0.19582872505647586, 0.1981583560805723, 0.1962052310805723, 0.19533014871987953, 0.19607286568147586, 0.19570665474397586, 0.19570665474397586, 0.19521837349397586, 0.19582872505647586, 0.19668321724397586, 0.19533014871987953, 0.19545221903237953, 0.19545221903237953, 0.19570665474397586, 0.19569635965737953, 0.19471979715737953, 0.19557428934487953, 0.1949536426957832, 0.19484186746987953, 0.1947095020707832, 0.19545221903237953, 0.19496393778237953, 0.19447565653237953, 0.19557428934487953, 0.1947095020707832, 0.1955639942582832, 0.19558458443147586, 0.19570665474397586, 0.19618464090737953, 0.1948315723832832], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.07669629294458379, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "valid_ratio": 0.15, "learning_rate": 0.00014319892491400731, "optimization": "rmsprop", "nb_data_augmentation": 4, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 2.904200510782997e-06, "rotation_range": [0, 0], "momentum": 0.5716382911386757}, "accuracy_valid_max": 0.8061346950301205, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8051684276167168, "accuracy_valid_std": [0.015936788622164917, 0.02596564492655349, 0.02497338620972378, 0.025832680336329912, 0.018314051417097545, 0.023633366485397565, 0.026635856148148274, 0.02149552478167065, 0.013184460587219539, 0.019839847644860808, 0.02263827929409968, 0.015752308055210593, 0.014690971300196285, 0.019693870117708557, 0.017865916647949415, 0.02059443234433992, 0.01801170198908531, 0.019436436582603252, 0.012741514659631867, 0.017353401666369346, 0.014420723112146013, 0.012259995670206636, 0.013302095442084789, 0.010656522435886537, 0.012153586770049204, 0.011233234881622922, 0.011105541028174433, 0.012080459589697383, 0.010437986950550121, 0.0090676116689584, 0.009701561855406143, 0.008553459848106565, 0.011601434093504573, 0.008439270871399056, 0.009982305259177598, 0.00941198461543467, 0.010448962988481381, 0.007503178669015875, 0.010290226168180166, 0.00646722092730386, 0.009014084398349605, 0.008569093165468132, 0.007185152859166698, 0.008748074028424369, 0.007337798274570222, 0.00810044293320518, 0.008347552088617876, 0.008836286336886878, 0.00898699001287877, 0.007972030802921833, 0.0077166531573956134, 0.008470837959659408, 0.008295831706830653, 0.009374736929491843, 0.008759692291039229, 0.009197517664781274, 0.008632240771258798, 0.008463063550571734, 0.008730458276601195, 0.009265041923083491, 0.009362472507680877, 0.008959375152852082, 0.009292205001628357, 0.010399994675951263, 0.008636482490835831, 0.009702854365964164, 0.0092911741958438, 0.009651353316280843, 0.009933232419699626, 0.009401161696769772, 0.007968516870736402, 0.009902293251462661, 0.009512603509701609, 0.009364495326619789, 0.00851087443567251, 0.009486097095078689, 0.00944099375805901, 0.010108547289321842, 0.009383060871362677, 0.00956450159610914, 0.009725180322764952, 0.009440565883298165, 0.008831784843605077, 0.008725110030649156, 0.009838449906295, 0.009923745089687446, 0.009659413809022731, 0.009729830932792317, 0.009451662476520215, 0.009408331075233912, 0.00922371179635654, 0.009753264402494436, 0.010219822489842292, 0.009884926948697225, 0.008797948201467945, 0.008907812439298954, 0.010581012993456613, 0.009482317450879772], "accuracy_valid": [0.4797569182981928, 0.5616911003388554, 0.5989343114646084, 0.6381306475903614, 0.6657288333019578, 0.6996055511106928, 0.7115184370293675, 0.7276420133659638, 0.7368678816829819, 0.7436744046498494, 0.7536238704819277, 0.7579566312123494, 0.7704489834337349, 0.7707445994917168, 0.7747626247176205, 0.7785776896649097, 0.7827280802899097, 0.7871432017131024, 0.7897875682417168, 0.7901949595256024, 0.7899199336408133, 0.7939379588667168, 0.7895434276167168, 0.7957484233810241, 0.7929511012801205, 0.7951586619917168, 0.7935511577560241, 0.7977221385542168, 0.7975897731551205, 0.7989325465926205, 0.7977015483810241, 0.7989325465926205, 0.7984648555158133, 0.8013739528426205, 0.8022387401167168, 0.8014960231551205, 0.8030932323042168, 0.8036932887801205, 0.8036932887801205, 0.8034388530685241, 0.8039477244917168, 0.8027167262801205, 0.8026961361069277, 0.8027167262801205, 0.8044051204819277, 0.8050154720444277, 0.8050360622176205, 0.8061346950301205, 0.8040492046310241, 0.8045271907944277, 0.8040492046310241, 0.8046595561935241, 0.8044154155685241, 0.8031947124435241, 0.8055243434676205, 0.8042933452560241, 0.8039271343185241, 0.8060126247176205, 0.8045477809676205, 0.8052699077560241, 0.8044154155685241, 0.8039168392319277, 0.8043036403426205, 0.8044154155685241, 0.8041712749435241, 0.8057684840926205, 0.8051478374435241, 0.8045477809676205, 0.8041712749435241, 0.8018416439194277, 0.8037947689194277, 0.8046698512801205, 0.8039271343185241, 0.8042933452560241, 0.8042933452560241, 0.8047816265060241, 0.8041712749435241, 0.8033167827560241, 0.8046698512801205, 0.8045477809676205, 0.8045477809676205, 0.8042933452560241, 0.8043036403426205, 0.8052802028426205, 0.8044257106551205, 0.8050463573042168, 0.8051581325301205, 0.8052904979292168, 0.8045477809676205, 0.8050360622176205, 0.8055243434676205, 0.8044257106551205, 0.8052904979292168, 0.8044360057417168, 0.8044154155685241, 0.8042933452560241, 0.8038153590926205, 0.8051684276167168], "seed": 274272335, "model": "residualv3", "loss_std": [0.3637075424194336, 0.13459070026874542, 0.12804794311523438, 0.1250760704278946, 0.12471895664930344, 0.12280642986297607, 0.12042931467294693, 0.1201842874288559, 0.11778118461370468, 0.11546999216079712, 0.11514540761709213, 0.11373240500688553, 0.11207398772239685, 0.11258676648139954, 0.11054088920354843, 0.11006598174571991, 0.10904165357351303, 0.10858888179063797, 0.10682617127895355, 0.10559011995792389, 0.10536636412143707, 0.1037437692284584, 0.105293408036232, 0.10328356921672821, 0.10265589505434036, 0.10205557942390442, 0.09910887479782104, 0.10037302225828171, 0.10140374302864075, 0.10125182569026947, 0.09959784150123596, 0.09970276802778244, 0.09744064509868622, 0.09984661638736725, 0.0980580672621727, 0.09795155376195908, 0.09813077747821808, 0.09653621912002563, 0.09656386077404022, 0.09621904045343399, 0.09673572331666946, 0.09500011801719666, 0.09612122178077698, 0.09669458866119385, 0.09693251550197601, 0.09593874961137772, 0.09393797814846039, 0.09430030733346939, 0.09466297179460526, 0.09589814394712448, 0.0945606678724289, 0.09419962018728256, 0.0945357158780098, 0.09452512115240097, 0.09326806664466858, 0.09401849657297134, 0.09556321054697037, 0.09508691728115082, 0.09443879127502441, 0.09388140588998795, 0.09355241805315018, 0.09362877160310745, 0.09527043253183365, 0.0930185616016388, 0.09434232115745544, 0.09435717016458511, 0.09338049590587616, 0.09503347426652908, 0.09281639009714127, 0.09342082589864731, 0.09151595830917358, 0.09266717731952667, 0.09234259277582169, 0.09165579825639725, 0.09358745813369751, 0.0947539359331131, 0.09478874504566193, 0.09315021336078644, 0.0930088683962822, 0.09333395212888718, 0.09213807433843613, 0.09306409955024719, 0.09379388391971588, 0.09367576986551285, 0.09226498752832413, 0.09399750083684921, 0.09299682825803757, 0.09339021146297455, 0.09174603223800659, 0.09364823251962662, 0.09264236688613892, 0.09311677515506744, 0.09440023452043533, 0.09272973239421844, 0.09424573928117752, 0.09254595637321472, 0.09446512907743454, 0.0929354578256607]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:32 2016", "state": "available"}], "summary": "c8da0f153b6e1ab653c8b2e51b6337ab"}