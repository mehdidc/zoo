{"content": {"hp_model": {"f0": 64, "f1": 64, "f2": 64, "f3": 64, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.7310055494308472, 1.3685349225997925, 1.1731330156326294, 1.0428098440170288, 0.9363020062446594, 0.8414790630340576, 0.7544354796409607, 0.6863867044448853, 0.6303879618644714, 0.5848742127418518, 0.5442988872528076, 0.5087243318557739, 0.47826844453811646, 0.4474788010120392, 0.4232078492641449, 0.3989507555961609, 0.3772178292274475, 0.3558591306209564, 0.33602526783943176, 0.31793007254600525, 0.30144253373146057, 0.2843436896800995, 0.26958003640174866, 0.2555413544178009, 0.24004888534545898, 0.22627966105937958, 0.2140606790781021, 0.20151792466640472, 0.1903228461742401, 0.17925098538398743, 0.1695541888475418, 0.16064326465129852, 0.15230560302734375, 0.14419348537921906, 0.1380595564842224, 0.1282324343919754, 0.12331406772136688, 0.11424726992845535, 0.10895728319883347, 0.10459528863430023, 0.0986488088965416, 0.09270946681499481, 0.08801621198654175, 0.08402198553085327, 0.08237864822149277, 0.0773407369852066, 0.07393112778663635, 0.07026980072259903, 0.06818891316652298, 0.0648573637008667, 0.06226249411702156, 0.061532508581876755, 0.05915546789765358, 0.05647667124867439, 0.05485626682639122, 0.05349899083375931, 0.05227581784129143, 0.05016109719872475, 0.04923614487051964, 0.048026446253061295, 0.0468062162399292, 0.045348089188337326, 0.04461010918021202, 0.04369516298174858, 0.04340583458542824, 0.043217554688453674, 0.041845690459012985, 0.04128429666161537, 0.040636349469423294, 0.039867810904979706, 0.03902942314743996, 0.038939956575632095, 0.039225757122039795, 0.03779178485274315, 0.037586480379104614, 0.03721530735492706, 0.03705725073814392, 0.03653785586357117, 0.03623637557029724, 0.03649280220270157, 0.03546501323580742, 0.0353904590010643, 0.03480604290962219, 0.03514997661113739, 0.03476646915078163, 0.0341067761182785, 0.03380443528294563, 0.033918581902980804, 0.03331351280212402, 0.03378123790025711, 0.033812008798122406, 0.033571138978004456, 0.03325073421001434, 0.033225756138563156, 0.033151064068078995, 0.03281155601143837, 0.03313309699296951, 0.032678231596946716, 0.03278177231550217, 0.03243742883205414, 0.03245509788393974, 0.03240035101771355, 0.03230079263448715, 0.03183556720614433, 0.03209112212061882, 0.031868670135736465, 0.03167736530303955, 0.032049402594566345, 0.031711507588624954, 0.031323131173849106, 0.03216323256492615, 0.03159873187541962, 0.03164531663060188, 0.03140849992632866, 0.031789910048246384, 0.03138728067278862, 0.03172862157225609, 0.0319613553583622, 0.03151586279273033, 0.031284451484680176, 0.03176301345229149, 0.03124369867146015, 0.03143826499581337, 0.03130423277616501, 0.030833348631858826, 0.031191319227218628, 0.030741816386580467, 0.031230326741933823, 0.03143860772252083, 0.031030694022774696, 0.031373873353004456, 0.031234288588166237, 0.030897624790668488, 0.030948642641305923, 0.030850348994135857, 0.03133592754602432, 0.03089768812060356, 0.031449560075998306, 0.031045975163578987, 0.03081931732594967, 0.030694900080561638, 0.030891740694642067, 0.030676566064357758, 0.030956655740737915, 0.03083011694252491, 0.030692772939801216, 0.030940888449549675, 0.030986875295639038, 0.030783284455537796, 0.03060971014201641, 0.03119557723402977, 0.03113066777586937, 0.031123647466301918, 0.030791645869612694, 0.03095884621143341, 0.030811479315161705, 0.03098856844007969, 0.030868427827954292, 0.030388182029128075, 0.030607078224420547, 0.03098338469862938, 0.030918732285499573], "moving_avg_accuracy_train": [0.03551294117647058, 0.08451223529411764, 0.13286571764705882, 0.18410149882352939, 0.23304899599999998, 0.2835111552235294, 0.33011768676, 0.3765906239663529, 0.42130803215795287, 0.4614713465892164, 0.4990818589891183, 0.5351030848549123, 0.567962188134127, 0.5991330281442437, 0.6275373723886429, 0.653995399855661, 0.6785982128112713, 0.7016042738830853, 0.7214109053183062, 0.7404345206688285, 0.7587510686019457, 0.7748971382123393, 0.7905838949793407, 0.805052564304936, 0.8185096608156189, 0.8297081064987629, 0.841099648790063, 0.8517802721463509, 0.8611998919905393, 0.8701928439679558, 0.8781900301593956, 0.8867169094963971, 0.8938640420761692, 0.9010799908097288, 0.907597874081697, 0.9136380866735273, 0.9187989838885275, 0.9241755560879101, 0.9286097651850015, 0.9333158474900307, 0.9377066156822041, 0.9418700717610425, 0.9454548292908206, 0.9487681698911503, 0.9520678234902706, 0.9548422176118319, 0.9578662311447663, 0.9605243139126426, 0.9629824707566724, 0.9653712825045345, 0.9675565071952575, 0.9695820329463201, 0.9711626531810998, 0.9730110937453428, 0.9747052784884556, 0.9763312212278452, 0.9778416285168254, 0.9792457009592604, 0.9805540720398049, 0.9815927824828833, 0.9828782101169479, 0.9838633302817237, 0.9848793501947278, 0.9857749445870198, 0.9866233324812589, 0.9874080580566624, 0.9880648993098197, 0.9887125270258965, 0.9893589213821303, 0.9899194998321527, 0.9904099027901139, 0.9908795007463966, 0.9913256683188157, 0.99180251325164, 0.992226967808829, 0.9925619180867696, 0.9929127851016221, 0.993247388944401, 0.9935650029911374, 0.9938085026920237, 0.9940488288934095, 0.9943027695334803, 0.9944983749330734, 0.994653243322119, 0.9948232131075542, 0.9949855976791517, 0.9951176261465308, 0.9952811576495247, 0.9953930418845722, 0.9955149141667032, 0.9956198933382682, 0.9957331981220885, 0.9958492900745854, 0.9959278904788916, 0.996012748489826, 0.9960820618761375, 0.9961538556885238, 0.9962090583549654, 0.996263446637116, 0.9963288666792868, 0.9963712741290052, 0.9964306173043399, 0.9965028496915529, 0.9965537411929858, 0.9965807200148636, 0.9966402950722008, 0.9966892067414512, 0.9967567566555414, 0.9968199045193991, 0.9968720317145179, 0.9969071814842426, 0.9969364633358184, 0.9969557581787072, 0.9969943000078954, 0.9970031053012235, 0.9970251477122777, 0.9970473388234029, 0.9970814284704744, 0.9970909326822505, 0.9971277217669665, 0.9971396554726228, 0.9971762781606546, 0.9971974738740009, 0.9972094911924831, 0.9972085420732348, 0.9972241584541467, 0.9972099779028497, 0.9972113330537412, 0.9972101997483671, 0.9972256503617657, 0.9972395559138244, 0.9972544238518537, 0.9972654520549037, 0.9972800833200015, 0.9972838396938837, 0.9972895733715541, 0.9972947336814575, 0.9973040838427235, 0.9973077931055099, 0.9973158373243707, 0.9973207241801689, 0.9973274752915638, 0.9973453159977015, 0.9973425491038137, 0.9973494706640206, 0.9973604059505596, 0.997360835943739, 0.9973682817611298, 0.9973843947614874, 0.9973847788147505, 0.9973733597568049, 0.9973748473105362, 0.9973761861088943, 0.9973820969097696, 0.9973780048658516, 0.9973860867322076, 0.9973745368825163, 0.9973900243707353, 0.9974063160513088, 0.9974068609167661, 0.9973955865897953, 0.9974042632249334], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.03601333333333333, 0.08427866666666665, 0.1313441333333333, 0.18092971999999996, 0.2293300813333333, 0.2786370732, 0.3240666992133333, 0.3697666959586666, 0.4128566930294666, 0.4518643570598533, 0.48838458802053464, 0.5227594625518145, 0.5536568496299663, 0.5825578313336364, 0.6085420482002727, 0.6329011767135788, 0.6553443923755543, 0.6760632864713322, 0.6936569578241989, 0.7106779287084456, 0.726810135837601, 0.7408224555871742, 0.7543002100284567, 0.766390189025611, 0.7774311701230499, 0.7868347197774115, 0.7957512477996703, 0.8040294563530367, 0.8109998440510663, 0.8179931929792931, 0.8241005403480305, 0.8305438196465608, 0.8356894376819046, 0.8408138272470475, 0.845265777855676, 0.8494325334034417, 0.8531426133964308, 0.8568816853901211, 0.8599268501844424, 0.8629608318326647, 0.8662247486493982, 0.8694022737844584, 0.8718487130726792, 0.8743705084320779, 0.8765201242555367, 0.8785747784966497, 0.8806239673136514, 0.8824015705822863, 0.8842014135240577, 0.8859012721716519, 0.88708447828782, 0.888576030459038, 0.8898250940798009, 0.8913092513384875, 0.8922049928713054, 0.8933311602508416, 0.8944780442257575, 0.8954302398031817, 0.8963672158228636, 0.8970904942405773, 0.8978347781498529, 0.8988113003348676, 0.8994235036347141, 0.9002411532712427, 0.9009370379441184, 0.9014300008163731, 0.9017670007347358, 0.9022169673279289, 0.9027419372618026, 0.9032410768689556, 0.9035836358487267, 0.903945272263854, 0.9041507450374686, 0.9044823372003884, 0.9045274368136829, 0.9045413597989813, 0.9046072238190831, 0.9048398347705081, 0.9048091846267906, 0.9049549328307782, 0.904926106214367, 0.9051268289262636, 0.905200812700304, 0.9052407314302735, 0.9052099916205795, 0.9053156591251882, 0.9054240932126694, 0.9054016838914024, 0.9053815155022621, 0.9054833639520359, 0.9055216942234989, 0.905529524801149, 0.9056032389877008, 0.9058429150889307, 0.9059652902467042, 0.9061687612220338, 0.9063385517664971, 0.9065180299231808, 0.9066128935975294, 0.9068316042377764, 0.906921777147332, 0.9070029327659321, 0.9070893061560056, 0.9072870422070717, 0.9073450046530313, 0.9074905041877281, 0.9076214537689553, 0.9076726417253931, 0.907678710886187, 0.907817506464235, 0.9079157558178115, 0.9080441802360304, 0.9080797622124273, 0.9080051193245179, 0.9080979407253994, 0.9081014799861927, 0.9080513319875734, 0.908086198788816, 0.9080242455766011, 0.9079684876856077, 0.9080249722503803, 0.9081158083586756, 0.9080908941894748, 0.908188471437194, 0.9081696242934746, 0.9082193285307938, 0.9081707290110477, 0.9082603227766096, 0.9082076238322819, 0.9082535281157204, 0.9083215086374816, 0.9083426911070668, 0.90834842199636, 0.9083269131300573, 0.9084008884837182, 0.9084407996353464, 0.9084767196718118, 0.9085357143712973, 0.9085488096008343, 0.9085739286407508, 0.9085965357766758, 0.9085635488656748, 0.908613860645774, 0.9086191412478632, 0.9086638937897437, 0.9086241710774359, 0.9086417539696923, 0.9085509119060563, 0.9085624873821173, 0.9084662386439055, 0.9084462814461816, 0.9084016533015634, 0.9084281546380737, 0.908492005840933, 0.9084428052568397, 0.9084918580644891, 0.9085226722580402, 0.9085504050322362, 0.9085353645290126, 0.9085751614094446, 0.9085443119351668, 0.9085032140749835], "moving_var_accuracy_train": [0.011350520919031139, 0.031823846243377155, 0.049683994919945185, 0.06834154288281927, 0.08307010591310271, 0.09768096094329995, 0.10746238388571021, 0.11615375053040981, 0.1225351948357364, 0.12479950178710363, 0.12505050739524182, 0.1242232150715886, 0.1215183795792566, 0.11811113302375757, 0.1135612806689708, 0.10850539755908306, 0.10310254345113351, 0.0975557987203805, 0.09133094268763857, 0.08545492988791636, 0.07992890025280033, 0.07428227030229341, 0.06906871231286764, 0.06404592261006169, 0.05927117136753601, 0.05447270090224735, 0.050193335933992944, 0.046200683778103574, 0.042379178542374475, 0.03886911935555013, 0.0355578023028201, 0.03265639111358816, 0.029850485539244895, 0.027334066230448643, 0.024983004828526816, 0.022813061859064683, 0.02077146941373239, 0.018954490229895708, 0.017236001099756686, 0.015711725885736404, 0.014314062905019378, 0.013038665913201188, 0.011850453700806778, 0.010764212364130239, 0.0097857805525849, 0.008876477862002189, 0.008071131996428308, 0.007327607432793407, 0.006649229505142724, 0.006035664348728971, 0.005475074776396583, 0.004964492089870881, 0.00449052812382315, 0.004072225904116685, 0.0036908356711991817, 0.003345545312205232, 0.003031522752592149, 0.002746113252145385, 0.002486908440890494, 0.0022479278712624847, 0.002038006001957989, 0.0018429395574136212, 0.001667936269844847, 0.001508361446699905, 0.0013640031602017392, 0.0012331449922397969, 0.0011137134569024602, 0.0010061169061398925, 0.0009092656464998425, 0.0008211673156375224, 0.000741215039624364, 0.000669078235826832, 0.0006039620017682545, 0.0005456122314010711, 0.0004926724633010301, 0.00044441494216915966, 0.0004010814169112469, 0.0003619809128045443, 0.00032669072966824816, 0.0002945552856404087, 0.0002656195672240209, 0.000239637983139735, 0.00021601853807691145, 0.00019463254223055053, 0.00017542929555914333, 0.0001581236847450652, 0.00014246819991634455, 0.00012846206289695336, 0.00011572851934572754, 0.00010428934308952118, 9.395959441873126e-05, 8.467917674318711e-05, 7.633255514177956e-05, 6.875490183961544e-05, 6.194421959383152e-05, 5.57930367441461e-05, 5.0260122233204064e-05, 4.526153601932417e-05, 4.0762005184509316e-05, 3.6724322703317e-05, 3.3068075959109854e-05, 2.9792962875328202e-05, 2.6860624247657872e-05, 2.4197871327154985e-05, 2.1784634905908755e-05, 1.9638114102428424e-05, 1.7695833854685434e-05, 1.5967317387259193e-05, 1.4406474522921306e-05, 1.2990282270867878e-05, 1.1702373600586373e-05, 1.0539853082013064e-05, 9.489218392470673e-06, 8.553665806598093e-06, 7.69899702465363e-06, 6.933470133153977e-06, 6.244555128555304e-06, 5.630558552036894e-06, 5.068315667206567e-06, 4.573665031274167e-06, 4.117580248122967e-06, 3.717893214818764e-06, 3.3501472177152177e-06, 3.0164322394352333e-06, 2.714797122937838e-06, 2.4455122528190983e-06, 2.202770819852978e-06, 1.982510265773129e-06, 1.7842707986254552e-06, 1.6079922118524418e-06, 1.4489332700697186e-06, 1.3060294432939427e-06, 1.1765210903271406e-06, 1.060795646559703e-06, 9.54843075006419e-07, 8.59654643042436e-07, 7.739288379228865e-07, 6.973227837719031e-07, 6.277143330684855e-07, 5.655252848753581e-07, 5.09187688624156e-07, 4.5867911730733426e-07, 4.156758227360374e-07, 3.7417714177851056e-07, 3.371905995619345e-07, 3.0454776403097467e-07, 2.740946516750856e-07, 2.471841482771323e-07, 2.2480239247413744e-07, 2.0232348069890324e-07, 1.8326468658830535e-07, 1.6495813327440587e-07, 1.484784513763594e-07, 1.3394504434160765e-07, 1.207012433182988e-07, 1.0921896806063689e-07, 9.949766250560863e-08, 9.170665687703808e-08, 8.492476089252513e-08, 7.643495670857219e-08, 6.993545507550148e-08, 6.361946554383195e-08], "duration": 284921.519513, "accuracy_train": [0.35512941176470586, 0.5255058823529412, 0.5680470588235295, 0.6452235294117648, 0.6735764705882353, 0.7376705882352941, 0.7495764705882353, 0.7948470588235295, 0.823764705882353, 0.8229411764705883, 0.8375764705882353, 0.8592941176470589, 0.8636941176470588, 0.8796705882352941, 0.8831764705882353, 0.8921176470588236, 0.9000235294117647, 0.9086588235294117, 0.8996705882352941, 0.9116470588235294, 0.9236, 0.9202117647058824, 0.9317647058823529, 0.9352705882352941, 0.9396235294117647, 0.9304941176470588, 0.9436235294117647, 0.9479058823529412, 0.9459764705882353, 0.9511294117647059, 0.9501647058823529, 0.9634588235294118, 0.9581882352941177, 0.9660235294117647, 0.9662588235294117, 0.968, 0.9652470588235295, 0.9725647058823529, 0.9685176470588235, 0.9756705882352941, 0.9772235294117647, 0.9793411764705883, 0.9777176470588236, 0.9785882352941176, 0.981764705882353, 0.9798117647058824, 0.9850823529411765, 0.9844470588235295, 0.9851058823529412, 0.9868705882352942, 0.9872235294117647, 0.9878117647058824, 0.9853882352941177, 0.9896470588235294, 0.9899529411764706, 0.990964705882353, 0.9914352941176471, 0.9918823529411764, 0.9923294117647059, 0.9909411764705882, 0.9944470588235295, 0.9927294117647059, 0.9940235294117648, 0.993835294117647, 0.9942588235294118, 0.9944705882352941, 0.9939764705882352, 0.9945411764705883, 0.9951764705882353, 0.994964705882353, 0.9948235294117647, 0.9951058823529412, 0.9953411764705883, 0.9960941176470588, 0.9960470588235294, 0.9955764705882353, 0.9960705882352942, 0.9962588235294118, 0.9964235294117647, 0.996, 0.9962117647058824, 0.9965882352941177, 0.9962588235294118, 0.9960470588235294, 0.9963529411764706, 0.9964470588235295, 0.9963058823529412, 0.9967529411764706, 0.9964, 0.9966117647058823, 0.9965647058823529, 0.9967529411764706, 0.9968941176470588, 0.9966352941176471, 0.9967764705882353, 0.9967058823529412, 0.9968, 0.9967058823529412, 0.9967529411764706, 0.9969176470588236, 0.9967529411764706, 0.996964705882353, 0.9971529411764706, 0.9970117647058824, 0.9968235294117647, 0.9971764705882353, 0.9971294117647059, 0.9973647058823529, 0.9973882352941177, 0.9973411764705883, 0.9972235294117647, 0.9972, 0.9971294117647059, 0.9973411764705883, 0.9970823529411764, 0.9972235294117647, 0.9972470588235294, 0.9973882352941177, 0.9971764705882353, 0.9974588235294117, 0.9972470588235294, 0.9975058823529411, 0.9973882352941177, 0.9973176470588235, 0.9972, 0.9973647058823529, 0.9970823529411764, 0.9972235294117647, 0.9972, 0.9973647058823529, 0.9973647058823529, 0.9973882352941177, 0.9973647058823529, 0.9974117647058823, 0.9973176470588235, 0.9973411764705883, 0.9973411764705883, 0.9973882352941177, 0.9973411764705883, 0.9973882352941177, 0.9973647058823529, 0.9973882352941177, 0.9975058823529411, 0.9973176470588235, 0.9974117647058823, 0.9974588235294117, 0.9973647058823529, 0.9974352941176471, 0.9975294117647059, 0.9973882352941177, 0.9972705882352941, 0.9973882352941177, 0.9973882352941177, 0.9974352941176471, 0.9973411764705883, 0.9974588235294117, 0.9972705882352941, 0.9975294117647059, 0.9975529411764706, 0.9974117647058823, 0.9972941176470588, 0.9974823529411765], "end": "2016-02-07 15:43:58.934000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0], "moving_var_accuracy_valid": [0.011672641599999999, 0.031471259056, 0.04826055652335999, 0.06556307451672158, 0.08009012185982448, 0.09396172469629782, 0.10314021050407005, 0.11162259677637434, 0.1171710677267909, 0.1191483416320795, 0.11923705289366512, 0.11794803559566971, 0.11474506879041707, 0.11078796260229819, 0.10578578207761988, 0.10054750814720774, 0.09502603869573642, 0.08938688797913133, 0.08323403462627237, 0.07751805221222652, 0.07210847995272562, 0.06666473790033157, 0.06163311289331403, 0.05678530993334732, 0.052203908312358625, 0.04777935819604117, 0.0437169626241826, 0.03996202499344158, 0.03640309923604501, 0.03320295167552788, 0.030218353734916898, 0.027570160994495028, 0.025051441359736436, 0.0227826315395009, 0.020682747163545828, 0.018770729113344774, 0.017017538443999704, 0.015441610533965722, 0.01398090673819031, 0.012665661466147034, 0.011494973696411333, 0.010436346320625654, 0.009446577275281642, 0.008559154614265645, 0.007744826786535264, 0.00700833854433645, 0.006345297263172328, 0.005739206397281047, 0.00519444066908834, 0.004701002276975714, 0.004243501839698183, 0.0038391742066435507, 0.003469298225337615, 0.003142192907720462, 0.0028351947929909508, 0.002563089590392437, 0.0023186187170204623, 0.0020949169330774127, 0.0018933265563228006, 0.0017087020857162937, 0.0015428175039831234, 0.0013971181137852442, 0.0012607794383298072, 0.0011407184528498644, 0.0010310049068663683, 0.0009300915277205272, 0.0008381044954532626, 0.0007561162753228445, 0.0006829849886738031, 0.0006169287529332831, 0.0005562919975315512, 0.0005018398258491114, 0.0004520358148104722, 0.0004078218135920135, 0.00036705793800888596, 0.00033035388885367396, 0.00029735754259060243, 0.0002681087590240479, 0.00024130633800343226, 0.00021736688705377956, 0.00019563767711272504, 0.0001764365158650928, 0.00015884212666797477, 0.00014297225554619876, 0.00012868353441467908, 0.00011591567156698327, 0.00010442992597223584, 9.399145297412907e-05, 8.459596855200078e-05, 7.622972965729261e-05, 6.861997957895726e-05, 6.175853348257855e-05, 5.563158416601159e-05, 5.0585427450917426e-05, 4.566166581898671e-05, 4.146810317730217e-05, 3.758075232047421e-05, 3.4112588766965745e-05, 3.07823219406674e-05, 2.8134598844016203e-05, 2.5394319342174233e-05, 2.2914163517830133e-05, 2.0689890428662157e-05, 1.897279729881692e-05, 1.71057543752097e-05, 1.5585709969061806e-05, 1.4181469107567819e-05, 1.2786904058769547e-05, 1.1508545165307287e-05, 1.0531068561147583e-05, 9.56483812433664e-06, 8.756789792656626e-06, 7.892505506789792e-06, 7.153399002549903e-06, 6.515601414449434e-06, 5.864154010307164e-06, 5.300372005166114e-06, 4.7812760491095604e-06, 4.337692248732348e-06, 3.931903505531448e-06, 3.567427709496215e-06, 3.2849457256787324e-06, 2.9620375955535943e-06, 2.7515257094503113e-06, 2.4795700719426955e-06, 2.2538476656157793e-06, 2.0497201189301196e-06, 1.9169914924851526e-06, 1.7502869518358578e-06, 1.594223085794268e-06, 1.4763929392652927e-06, 1.3327919184983028e-06, 1.1998083144773037e-06, 1.0839911649962065e-06, 1.0248432250399333e-06, 9.366950027545292e-07, 8.546377436561346e-07, 8.004973403969697e-07, 7.219909716868964e-07, 6.554705700151832e-07, 5.945232563662161e-07, 5.448641574060304e-07, 5.131592186161695e-07, 4.6209425958037874e-07, 4.339099436651054e-07, 4.0471999415631354e-07, 3.6703041764158987e-07, 4.0459790060808274e-07, 3.653440353616305e-07, 4.121840082916219e-07, 3.745502151313705e-07, 3.550202352467629e-07, 3.25839099253587e-07, 3.2994797428744044e-07, 3.18739454134794e-07, 3.0852111016588533e-07, 2.8621462986713757e-07, 2.645151277618745e-07, 2.400995656206652e-07, 2.303437342877259e-07, 2.158745714279003e-07, 2.0948842128995986e-07], "accuracy_test": 0.8997, "start": "2016-02-04 08:35:17.414000", "learning_rate_per_epoch": [0.0027635253500193357, 0.002628302201628685, 0.0024996958673000336, 0.0023773822467774153, 0.0022610537707805634, 0.0021504173055291176, 0.002045194385573268, 0.0019451201660558581, 0.0018499427242204547, 0.0017594224773347378, 0.0016733314841985703, 0.0015914530958980322, 0.001513581140898168, 0.0014395195757970214, 0.0013690819032490253, 0.0013020908227190375, 0.0012383777648210526, 0.001177782192826271, 0.0011201517190784216, 0.001065341173671186, 0.0010132126044481993, 0.0009636346949264407, 0.0009164827060885727, 0.0008716379525139928, 0.0008289875113405287, 0.0007884239894337952, 0.0007498453487642109, 0.0007131543825380504, 0.0006782587734051049, 0.000645070627797395, 0.0006135064177215099, 0.0005834866897203028, 0.000554935890249908, 0.0005277821328490973, 0.0005019570235162973, 0.00047739557339809835, 0.0004540359659586102, 0.0004318193532526493, 0.00041068982682190835, 0.00039059421396814287, 0.0003714819031301886, 0.0003533047856763005, 0.0003360171103850007, 0.00031957533792592585, 0.0003039380826521665, 0.00028906596708111465, 0.000274921563686803, 0.0002614692784845829, 0.00024867523461580276, 0.00023650721414014697, 0.0002249345852760598, 0.0002139282296411693, 0.00020346042583696544, 0.00019350483489688486, 0.00018403638387098908, 0.00017503123672213405, 0.00016646672156639397, 0.0001583212724654004, 0.0001505744003225118, 0.00014320659101940691, 0.0001361992908641696, 0.0001295348774874583, 0.00012319655797909945, 0.0001171683834400028, 0.00011143517622258514, 0.00010598250082693994, 0.00010079663479700685, 9.58645177888684e-05, 9.11737370188348e-05, 8.671248360769823e-05, 8.24695234769024e-05, 7.843417552066967e-05, 7.459628250217065e-05, 7.094618194969371e-05, 6.747469160472974e-05, 6.41730657662265e-05, 6.103298801463097e-05, 5.8046560297952965e-05, 5.5206262913998216e-05, 5.2504943596431985e-05, 4.993580296286382e-05, 4.749237632495351e-05, 4.516850822255947e-05, 4.295835242373869e-05, 4.0856342820916325e-05, 3.885718615492806e-05, 3.695585110108368e-05, 3.514755007927306e-05, 3.3427731978008524e-05, 3.179206760250963e-05, 3.023643876076676e-05, 2.875692916859407e-05, 2.73498135356931e-05, 2.601155028969515e-05, 2.4738768843235448e-05, 2.352826777496375e-05, 2.2376996639650315e-05, 2.1282059606164694e-05, 2.0240699086571112e-05, 1.925029391713906e-05, 1.8308350263396278e-05, 1.7412497982149944e-05, 1.6560479707550257e-05, 1.5750152670079842e-05, 1.497947596362792e-05, 1.4246509635995608e-05, 1.354940832243301e-05, 1.2886417607660405e-05, 1.225586765940534e-05, 1.1656171409413218e-05, 1.10858190964791e-05, 1.0543374628468882e-05, 1.0027472853835206e-05, 9.53681501414394e-06, 9.070166015590075e-06, 8.626350791018922e-06, 8.204251571442e-06, 7.80280606704764e-06, 7.421004283969523e-06, 7.057884431560524e-06, 6.71253246764536e-06, 6.3840789152891375e-06, 6.071697043807944e-06, 5.774600595032098e-06, 5.49204150956939e-06, 5.223308562563034e-06, 4.967725089954911e-06, 4.7246476242435165e-06, 4.493464075494558e-06, 4.2735928218462504e-06, 4.064479981025215e-06, 3.865599410346476e-06, 3.676450432976708e-06, 3.496556701065856e-06, 3.325465286252438e-06, 3.16274577016884e-06, 3.0079881980782375e-06, 2.860803306248272e-06, 2.720820248214295e-06, 2.587686822153046e-06, 2.461067651893245e-06, 2.340644186915597e-06, 2.2261133381107356e-06, 2.1171865682845237e-06, 2.0135896647843765e-06, 1.915062057378236e-06, 1.8213554540125187e-06, 1.7322340681857895e-06, 1.647473482080386e-06, 1.5668603055019048e-06, 1.4901917211318505e-06, 1.417274575032934e-06, 1.3479253766490729e-06, 1.2819695029975264e-06, 1.2192409712952212e-06, 1.159581870524562e-06, 1.1028419066860806e-06, 1.0488782891115989e-06, 9.97555275716877e-07, 9.487435477240069e-07, 9.023202096614114e-07, 8.581684483033314e-07], "accuracy_train_first": 0.35512941176470586, "accuracy_train_last": 0.9974823529411765, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.6398666666666666, 0.4813333333333333, 0.4450666666666667, 0.3728, 0.3350666666666666, 0.27759999999999996, 0.2670666666666667, 0.2189333333333333, 0.19933333333333336, 0.1970666666666666, 0.18293333333333328, 0.16786666666666672, 0.16826666666666668, 0.15733333333333333, 0.15759999999999996, 0.1478666666666667, 0.14266666666666672, 0.13746666666666663, 0.14800000000000002, 0.13613333333333333, 0.128, 0.13306666666666667, 0.12439999999999996, 0.12480000000000002, 0.12319999999999998, 0.1285333333333334, 0.124, 0.12146666666666661, 0.12626666666666664, 0.11906666666666665, 0.12093333333333334, 0.11146666666666671, 0.118, 0.11306666666666665, 0.1146666666666667, 0.11306666666666665, 0.11346666666666672, 0.10946666666666671, 0.11266666666666669, 0.10973333333333335, 0.10440000000000005, 0.10199999999999998, 0.1061333333333333, 0.10293333333333332, 0.1041333333333333, 0.10293333333333332, 0.10093333333333332, 0.10160000000000002, 0.09960000000000002, 0.0988, 0.10226666666666662, 0.09799999999999998, 0.09893333333333332, 0.09533333333333338, 0.09973333333333334, 0.09653333333333336, 0.09519999999999995, 0.09599999999999997, 0.09519999999999995, 0.09640000000000004, 0.0954666666666667, 0.09240000000000004, 0.09506666666666663, 0.09240000000000004, 0.0928, 0.09413333333333329, 0.09519999999999995, 0.09373333333333334, 0.09253333333333336, 0.09226666666666672, 0.09333333333333338, 0.0928, 0.09399999999999997, 0.09253333333333336, 0.09506666666666663, 0.09533333333333338, 0.0948, 0.09306666666666663, 0.0954666666666667, 0.09373333333333334, 0.09533333333333338, 0.09306666666666663, 0.09413333333333329, 0.09440000000000004, 0.09506666666666663, 0.09373333333333334, 0.09360000000000002, 0.0948, 0.0948, 0.09360000000000002, 0.09413333333333329, 0.09440000000000004, 0.09373333333333334, 0.09199999999999997, 0.09293333333333331, 0.09199999999999997, 0.09213333333333329, 0.09186666666666665, 0.09253333333333336, 0.09119999999999995, 0.09226666666666672, 0.09226666666666672, 0.09213333333333329, 0.09093333333333331, 0.09213333333333329, 0.09119999999999995, 0.09119999999999995, 0.09186666666666665, 0.09226666666666672, 0.09093333333333331, 0.09119999999999995, 0.09079999999999999, 0.09160000000000001, 0.09266666666666667, 0.09106666666666663, 0.09186666666666665, 0.09240000000000004, 0.09160000000000001, 0.09253333333333336, 0.09253333333333336, 0.0914666666666667, 0.09106666666666663, 0.09213333333333329, 0.09093333333333331, 0.09199999999999997, 0.09133333333333338, 0.09226666666666672, 0.09093333333333331, 0.09226666666666672, 0.09133333333333338, 0.09106666666666663, 0.0914666666666667, 0.09160000000000001, 0.09186666666666665, 0.09093333333333331, 0.09119999999999995, 0.09119999999999995, 0.09093333333333331, 0.09133333333333338, 0.09119999999999995, 0.09119999999999995, 0.09173333333333333, 0.09093333333333331, 0.09133333333333338, 0.09093333333333331, 0.09173333333333333, 0.09119999999999995, 0.09226666666666672, 0.09133333333333338, 0.09240000000000004, 0.09173333333333333, 0.09199999999999997, 0.09133333333333338, 0.09093333333333331, 0.09199999999999997, 0.09106666666666663, 0.09119999999999995, 0.09119999999999995, 0.09160000000000001, 0.09106666666666663, 0.09173333333333333, 0.09186666666666665], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.04893137145552896, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "valid_ratio": 0.15, "learning_rate": 0.002905705578818445, "optimization": "rmsprop", "nb_data_augmentation": 4, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 8.077146069355268e-07, "rotation_range": [0, 0], "momentum": 0.8335425957249376}, "accuracy_valid_max": 0.9092, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.9081333333333333, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.36013333333333336, 0.5186666666666667, 0.5549333333333333, 0.6272, 0.6649333333333334, 0.7224, 0.7329333333333333, 0.7810666666666667, 0.8006666666666666, 0.8029333333333334, 0.8170666666666667, 0.8321333333333333, 0.8317333333333333, 0.8426666666666667, 0.8424, 0.8521333333333333, 0.8573333333333333, 0.8625333333333334, 0.852, 0.8638666666666667, 0.872, 0.8669333333333333, 0.8756, 0.8752, 0.8768, 0.8714666666666666, 0.876, 0.8785333333333334, 0.8737333333333334, 0.8809333333333333, 0.8790666666666667, 0.8885333333333333, 0.882, 0.8869333333333334, 0.8853333333333333, 0.8869333333333334, 0.8865333333333333, 0.8905333333333333, 0.8873333333333333, 0.8902666666666667, 0.8956, 0.898, 0.8938666666666667, 0.8970666666666667, 0.8958666666666667, 0.8970666666666667, 0.8990666666666667, 0.8984, 0.9004, 0.9012, 0.8977333333333334, 0.902, 0.9010666666666667, 0.9046666666666666, 0.9002666666666667, 0.9034666666666666, 0.9048, 0.904, 0.9048, 0.9036, 0.9045333333333333, 0.9076, 0.9049333333333334, 0.9076, 0.9072, 0.9058666666666667, 0.9048, 0.9062666666666667, 0.9074666666666666, 0.9077333333333333, 0.9066666666666666, 0.9072, 0.906, 0.9074666666666666, 0.9049333333333334, 0.9046666666666666, 0.9052, 0.9069333333333334, 0.9045333333333333, 0.9062666666666667, 0.9046666666666666, 0.9069333333333334, 0.9058666666666667, 0.9056, 0.9049333333333334, 0.9062666666666667, 0.9064, 0.9052, 0.9052, 0.9064, 0.9058666666666667, 0.9056, 0.9062666666666667, 0.908, 0.9070666666666667, 0.908, 0.9078666666666667, 0.9081333333333333, 0.9074666666666666, 0.9088, 0.9077333333333333, 0.9077333333333333, 0.9078666666666667, 0.9090666666666667, 0.9078666666666667, 0.9088, 0.9088, 0.9081333333333333, 0.9077333333333333, 0.9090666666666667, 0.9088, 0.9092, 0.9084, 0.9073333333333333, 0.9089333333333334, 0.9081333333333333, 0.9076, 0.9084, 0.9074666666666666, 0.9074666666666666, 0.9085333333333333, 0.9089333333333334, 0.9078666666666667, 0.9090666666666667, 0.908, 0.9086666666666666, 0.9077333333333333, 0.9090666666666667, 0.9077333333333333, 0.9086666666666666, 0.9089333333333334, 0.9085333333333333, 0.9084, 0.9081333333333333, 0.9090666666666667, 0.9088, 0.9088, 0.9090666666666667, 0.9086666666666666, 0.9088, 0.9088, 0.9082666666666667, 0.9090666666666667, 0.9086666666666666, 0.9090666666666667, 0.9082666666666667, 0.9088, 0.9077333333333333, 0.9086666666666666, 0.9076, 0.9082666666666667, 0.908, 0.9086666666666666, 0.9090666666666667, 0.908, 0.9089333333333334, 0.9088, 0.9088, 0.9084, 0.9089333333333334, 0.9082666666666667, 0.9081333333333333], "seed": 489474579, "model": "residualv3", "loss_std": [0.33502209186553955, 0.20305608212947845, 0.20022349059581757, 0.19623881578445435, 0.19026774168014526, 0.18730492889881134, 0.1803724318742752, 0.17538781464099884, 0.1695094257593155, 0.1636880785226822, 0.16021288931369781, 0.1547718048095703, 0.15160542726516724, 0.14450497925281525, 0.14219370484352112, 0.13676662743091583, 0.13357211649417877, 0.12844149768352509, 0.1251497119665146, 0.12157046794891357, 0.11490768194198608, 0.11225343495607376, 0.10895616561174393, 0.10499441623687744, 0.10050799697637558, 0.09798003733158112, 0.093073271214962, 0.08851246535778046, 0.08520738780498505, 0.08090012520551682, 0.07870546728372574, 0.07425857335329056, 0.0716681182384491, 0.06560520827770233, 0.06442072242498398, 0.06083222106099129, 0.056719787418842316, 0.05500217527151108, 0.05100851505994797, 0.05097866430878639, 0.045989252626895905, 0.042550623416900635, 0.041001588106155396, 0.04005226120352745, 0.03870408236980438, 0.036554135382175446, 0.034475166350603104, 0.03145153820514679, 0.030466096475720406, 0.02951834537088871, 0.02703704498708248, 0.027315396815538406, 0.024719689041376114, 0.023919034749269485, 0.024624301120638847, 0.022944074124097824, 0.022229690104722977, 0.02164403349161148, 0.020433954894542694, 0.02023199386894703, 0.018761303275823593, 0.017589103430509567, 0.017299577593803406, 0.017329009249806404, 0.017115190625190735, 0.017031492665410042, 0.016497809439897537, 0.01515121292322874, 0.015183060429990292, 0.013787908479571342, 0.013517281971871853, 0.01407427154481411, 0.014888735488057137, 0.013051409274339676, 0.013182922266423702, 0.012975524179637432, 0.012681253254413605, 0.012649784795939922, 0.0126228928565979, 0.012781774625182152, 0.012030839920043945, 0.011610499583184719, 0.011238547042012215, 0.011677042581140995, 0.011476553976535797, 0.010883459821343422, 0.010597429238259792, 0.011002521961927414, 0.010514261201024055, 0.010959221050143242, 0.010240054689347744, 0.010617177933454514, 0.010474879294633865, 0.010626239702105522, 0.010495280846953392, 0.009845945052802563, 0.010054134763777256, 0.009790098294615746, 0.009938905015587807, 0.010109546594321728, 0.009547579102218151, 0.009675920009613037, 0.009595610201358795, 0.009112912230193615, 0.009471483528614044, 0.009835551492869854, 0.00898237619549036, 0.009416842833161354, 0.009224222041666508, 0.008823387324810028, 0.00917590968310833, 0.009126115590333939, 0.009381671436131, 0.008527053520083427, 0.009802129119634628, 0.009028591215610504, 0.009344879537820816, 0.009624350816011429, 0.00892000924795866, 0.008900417946279049, 0.009474266320466995, 0.008817819878458977, 0.009170487523078918, 0.009280264377593994, 0.008302793838083744, 0.008792344480752945, 0.008335353806614876, 0.008883895352482796, 0.009458695538341999, 0.008872495032846928, 0.009496630169451237, 0.00908652227371931, 0.008940192870795727, 0.008671949617564678, 0.008463431149721146, 0.00898640975356102, 0.008834278210997581, 0.009331580251455307, 0.008810280822217464, 0.008303990587592125, 0.008803069591522217, 0.008866027928888798, 0.008302237838506699, 0.008254135958850384, 0.008397914469242096, 0.008399598300457, 0.009189563803374767, 0.009212374687194824, 0.008371689356863499, 0.008071071468293667, 0.0091933598741889, 0.009231425821781158, 0.009153855964541435, 0.008488067425787449, 0.00959948729723692, 0.008256706409156322, 0.008833585307002068, 0.008925492875277996, 0.0083305099979043, 0.00837918184697628, 0.009061497636139393, 0.008417603559792042]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:43 2016", "state": "available"}], "summary": "8ad7cac9e8d60e3d1c6599c6e47b33b7"}