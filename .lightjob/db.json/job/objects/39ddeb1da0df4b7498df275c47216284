{"content": {"hp_model": {"f0": 64, "f1": 64, "f2": 16, "f3": 64, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.5977245569229126, 1.1814936399459839, 0.9910207390785217, 0.8668310046195984, 0.7780953645706177, 0.7066433429718018, 0.643258273601532, 0.5866475105285645, 0.5322026014328003, 0.482181191444397, 0.4322228729724884, 0.38586971163749695, 0.34358468651771545, 0.30942532420158386, 0.2797560393810272, 0.2529129683971405, 0.22720682621002197, 0.20681646466255188, 0.18820679187774658, 0.1740768551826477, 0.16132444143295288, 0.1513037085533142, 0.13889823853969574, 0.13348616659641266, 0.12580591440200806, 0.11988390982151031, 0.11653685569763184, 0.10811400413513184, 0.10484720021486282, 0.10278992354869843, 0.09985150396823883, 0.09519459307193756, 0.09370545297861099, 0.0905466377735138, 0.08877887576818466, 0.0869973674416542, 0.08444226533174515, 0.08407627046108246, 0.08196110278367996, 0.08084861189126968, 0.07975055277347565, 0.07744941115379333, 0.0747092142701149, 0.06874937564134598, 0.06549288332462311, 0.06211862340569496, 0.06057874858379364, 0.05641686171293259, 0.05283670872449875, 0.05139540508389473, 0.050168439745903015, 0.046852923929691315, 0.041089680045843124, 0.03723611310124397, 0.03657827526330948, 0.035985104739665985, 0.03488122299313545, 0.03215373307466507, 0.028393473476171494, 0.025066489353775978, 0.022366385906934738, 0.020120032131671906, 0.018175337463617325, 0.016533054411411285, 0.015146254561841488, 0.01398311648517847, 0.01300045382231474, 0.012165955267846584, 0.011451137252151966, 0.010834770277142525, 0.010299147106707096, 0.009830928407609463, 0.009419338777661324, 0.009055905044078827, 0.008733349852263927, 0.008445904590189457, 0.00818885862827301, 0.007958250120282173, 0.007750748191028833, 0.0075635467655956745, 0.007394252810627222, 0.00724083511158824, 0.0071015311405062675, 0.006974842865020037, 0.006859419401735067, 0.006754077505320311, 0.006657776422798634, 0.006569650024175644, 0.006488922983407974, 0.006414898205548525, 0.006346949841827154, 0.006284536328166723, 0.006227145902812481, 0.006174343638122082, 0.006125725340098143, 0.006080941297113895, 0.0060396636836230755], "moving_avg_accuracy_train": [0.05590588235294116, 0.11576705882352938, 0.17455505882352937, 0.23115837647058818, 0.2839978329411764, 0.33320510847058815, 0.379352832917647, 0.42249754962588226, 0.46257720642799993, 0.4995618387263764, 0.5335774195596211, 0.5645702658389531, 0.5940991216079989, 0.6211315623883755, 0.645778406149538, 0.670094683181643, 0.6922263913340669, 0.7137049286712485, 0.7330685534511825, 0.7520534628119465, 0.7692481165307519, 0.7853115401717943, 0.801490974389909, 0.8161748181273887, 0.829333806902885, 0.8422192497420083, 0.8535267365325134, 0.8644070040557327, 0.8745710095325123, 0.883838614461614, 0.8924006353683938, 0.9008641012433192, 0.9084459264131048, 0.9152530984776767, 0.921452494512262, 0.9275754803551535, 0.9330814617314028, 0.9378086096759095, 0.942105395767142, 0.9462430914845454, 0.9502070176302085, 0.9541345511613054, 0.9577469783981161, 0.9609463982053632, 0.9637011701495327, 0.9663781119581089, 0.9688320654681803, 0.9710029765684212, 0.9728109142056967, 0.9745439404321858, 0.9761577816830849, 0.9775278858677175, 0.978836273751534, 0.9797432346116747, 0.9807312640916837, 0.9817287259178095, 0.9826382062672049, 0.9834261503463667, 0.9841023588411417, 0.9847109464864393, 0.9852257341907366, 0.9856796313598981, 0.9860787270474377, 0.9864449719897527, 0.9867722394966597, 0.9870856037822878, 0.9873982198746473, 0.9876725155342414, 0.9879405580984643, 0.9882053258180296, 0.9884694991185796, 0.988714313912604, 0.988929941344873, 0.9891404766221504, 0.9893228995481707, 0.9895011978286476, 0.9896687251046065, 0.9898265584764987, 0.9899780202759076, 0.9901355123659639, 0.9902701964234851, 0.9904055297223131, 0.9905414473383172, 0.9906755378986031, 0.9907938664616839, 0.9909050680508097, 0.9910122083045523, 0.9911039286505676, 0.9911935357855108, 0.9912788880893126, 0.9913721757509697, 0.9914702522935197, 0.9915655800053442, 0.9916607867106922, 0.9917582374513877, 0.9918459431180136, 0.9919225252768004], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05526666666666665, 0.1140733333333333, 0.17190599999999995, 0.22732873333333325, 0.2789291933333332, 0.32583627399999987, 0.36903931326666656, 0.4085220486066666, 0.4446298437459999, 0.47732685937139985, 0.5068075067675932, 0.532926756090834, 0.5573007471484172, 0.5787573391002421, 0.5976682718568845, 0.6152081113378627, 0.6311406335374097, 0.646719903517002, 0.6598079131653017, 0.6734937885154383, 0.6851444096638944, 0.695549968697505, 0.7064349718277544, 0.715911474644979, 0.7240536605138144, 0.732368294462433, 0.7394514650161896, 0.7466663185145707, 0.7527196866631136, 0.7579143846634689, 0.7625629461971221, 0.7672799849107432, 0.7714053197530023, 0.7755581211110354, 0.7786556423332652, 0.7820167447666054, 0.7850017369566116, 0.7874615632609505, 0.7898887402681888, 0.7919665329080365, 0.7946232129505663, 0.7971075583221763, 0.799250135823292, 0.8009784555742961, 0.8026272766835332, 0.8041645490151799, 0.8057214274469953, 0.8069359513689625, 0.8081223562320662, 0.8091234539421929, 0.8101311085479735, 0.8108379976931762, 0.8113941979238586, 0.8116681114648061, 0.8122613003183254, 0.8127818369531595, 0.8131703199245103, 0.8135732879320593, 0.8137626258055201, 0.8140530298916347, 0.8141410602358046, 0.8141402875455575, 0.8141395921243351, 0.8139656329119016, 0.8137557362873781, 0.8135801626586403, 0.8133821463927763, 0.8132305984201653, 0.8130142052448155, 0.812752784720334, 0.8125175062483005, 0.8123457556234706, 0.8121511800611235, 0.8120160620550112, 0.8119344558495101, 0.8118476769312257, 0.8117962425714365, 0.8117632849809595, 0.8117202898161968, 0.8116682608345771, 0.8115281014177861, 0.8113886246093409, 0.8112364288150735, 0.8110727859335662, 0.8109121740068762, 0.8107542899395219, 0.8106388609455697, 0.8105883081843461, 0.8105561440325783, 0.8105005296293204, 0.810437143333055, 0.8103667623330829, 0.810263419433108, 0.8100504108231305, 0.8097920364074841, 0.8095728327667356, 0.8093755494900621], "moving_var_accuracy_train": [0.028129209134948086, 0.057566532257439434, 0.08291413952769548, 0.1034581456928105, 0.11824040456449415, 0.12820856779329176, 0.13455422325873762, 0.13785200015136875, 0.1385242101406117, 0.13698255636276555, 0.13369783838129604, 0.12897306322761518, 0.12392333681211569, 0.11810777882180522, 0.11176420310610907, 0.10590931475381687, 0.0997266958301318, 0.09390597434242093, 0.0878899265897415, 0.0823447749816952, 0.07677120253211232, 0.07141638449054552, 0.06663071286605567, 0.06190817898161059, 0.0572757919537923, 0.05304252449285589, 0.04888900536122731, 0.045065526817495954, 0.041488737201734426, 0.03811285999165818, 0.03496134781056557, 0.032109885321053244, 0.02941625344509469, 0.02689166642423541, 0.024548392382554553, 0.022430971744989342, 0.020460717048730852, 0.01861575869306106, 0.016920344160179242, 0.015382394476809688, 0.013985569423523162, 0.012725842157911853, 0.01157070461699193, 0.010505760739219789, 0.009523483581477265, 0.008635629380348066, 0.007826263432779588, 0.007086052784547967, 0.006406865252595668, 0.005793209146451394, 0.0052373285840541855, 0.004730490394939499, 0.004272848265136209, 0.003852966640639033, 0.0034764557968554317, 0.003137764588021092, 0.0028314325197724122, 0.002553876970642147, 0.0023026045949335865, 0.0020756775457383076, 0.0018704948485889375, 0.0016852995674916003, 0.0015182031070527546, 0.0013675900145674212, 0.0012317949493003738, 0.0011094992289499015, 0.0009994288654457302, 0.0009001631218810066, 0.0008107934310390228, 0.0007303450054430351, 0.0006579385926932428, 0.0005926841419742774, 0.0005338341844827721, 0.00048084969196129934, 0.00043306422588060956, 0.0003900439157839383, 0.0003512921126992559, 0.0003163871037888763, 0.0002849548595001105, 0.00025668260737597216, 0.00023117760479652845, 0.0002082246802328205, 0.00018756847459460032, 0.00016897344964036042, 0.00015220211951589145, 0.00013709319970511908, 0.00012348719104035536, 0.00011121418553317842, 0.0001001650319275552, 9.021409387667824e-05, 8.127100777936725e-05, 7.323047807521775e-05, 6.598921662147123e-05, 5.947187381001296e-05, 5.361015625077055e-05, 4.83183711813182e-05, 4.3539317506586504e-05], "duration": 51747.522016, "accuracy_train": [0.5590588235294117, 0.6545176470588235, 0.7036470588235294, 0.7405882352941177, 0.7595529411764705, 0.7760705882352941, 0.7946823529411765, 0.8108, 0.8232941176470588, 0.8324235294117647, 0.8397176470588236, 0.8435058823529412, 0.8598588235294118, 0.8644235294117647, 0.8676, 0.8889411764705882, 0.8914117647058823, 0.9070117647058824, 0.9073411764705882, 0.9229176470588235, 0.924, 0.9298823529411765, 0.9471058823529411, 0.9483294117647059, 0.947764705882353, 0.9581882352941177, 0.9552941176470588, 0.9623294117647059, 0.9660470588235294, 0.9672470588235295, 0.9694588235294118, 0.9770352941176471, 0.9766823529411764, 0.9765176470588235, 0.9772470588235294, 0.9826823529411765, 0.982635294117647, 0.9803529411764705, 0.9807764705882352, 0.9834823529411765, 0.9858823529411764, 0.9894823529411765, 0.9902588235294117, 0.9897411764705882, 0.9884941176470589, 0.9904705882352941, 0.9909176470588236, 0.9905411764705883, 0.9890823529411765, 0.9901411764705882, 0.9906823529411765, 0.9898588235294118, 0.9906117647058823, 0.9879058823529412, 0.9896235294117647, 0.9907058823529412, 0.9908235294117647, 0.9905176470588235, 0.9901882352941177, 0.9901882352941177, 0.9898588235294118, 0.989764705882353, 0.9896705882352941, 0.9897411764705882, 0.9897176470588235, 0.9899058823529412, 0.9902117647058823, 0.9901411764705882, 0.9903529411764705, 0.9905882352941177, 0.9908470588235294, 0.9909176470588236, 0.9908705882352942, 0.991035294117647, 0.990964705882353, 0.9911058823529412, 0.9911764705882353, 0.9912470588235294, 0.9913411764705883, 0.9915529411764706, 0.9914823529411765, 0.9916235294117647, 0.991764705882353, 0.9918823529411764, 0.9918588235294118, 0.9919058823529412, 0.9919764705882353, 0.9919294117647058, 0.992, 0.9920470588235294, 0.9922117647058823, 0.9923529411764705, 0.9924235294117647, 0.9925176470588235, 0.9926352941176471, 0.9926352941176471, 0.9926117647058823], "end": "2016-02-04 22:58:09.681000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0], "moving_var_accuracy_valid": [0.027489639999999992, 0.055864692399999985, 0.08037977916399998, 0.09998691557883999, 0.1139516912708604, 0.12235899009379694, 0.12692161450131154, 0.12825943056053676, 0.12716744333289967, 0.12407255247687857, 0.11948727436727885, 0.11367848359743744, 0.10765745819837004, 0.10103518042221712, 0.0941502727795317, 0.08750405922274487, 0.08103826067322194, 0.07511885748377299, 0.06914863570438158, 0.06391950079083869, 0.058749183470058516, 0.05384874605227026, 0.049530221085353106, 0.045385435927621585, 0.041443549051363396, 0.037921392385522744, 0.034580794892812926, 0.03159120240255954, 0.028761871555779736, 0.026128548386035823, 0.023710175666421675, 0.02153941218781171, 0.019538636457077346, 0.017739984643443146, 0.016052337918598305, 0.014548777212845119, 0.013174091096930185, 0.011911138696264822, 0.010773045520658536, 0.009734595968880533, 0.008824657911627861, 0.007997739867794038, 0.0072392816261492195, 0.006542237265989697, 0.005912481038843119, 0.005342501790953625, 0.0048300664459213286, 0.00436033541654247, 0.003936969883380988, 0.0035522926646698785, 0.0032062017084438506, 0.002890078767971914, 0.0026038551194442227, 0.00234414486515103, 0.0021128972357793837, 0.0019040461376952852, 0.0017149997950970221, 0.0015449612645232918, 0.0013907877775439024, 0.001252468010588601, 0.001127290953603193, 0.0010145618636163256, 0.0009131056816071892, 0.0008220674697147846, 0.0007402572320801834, 0.0006665089437641386, 0.0006002109433616453, 0.0005403965501175033, 0.0004867783291627949, 0.0004387155624620973, 0.0003953422098505089, 0.0003560734733596237, 0.0003208068628688254, 0.0002888904884621249, 0.000260061375770899, 0.0002341230134197365, 0.00021073452151806522, 0.00018967084519118914, 0.0001707203979298069, 0.00015367272127118166, 0.00013848225110310033, 0.000124809110013637, 0.00011253667105040755, 0.00010152401487937907, 9.16037791103967e-05, 8.266774760787602e-05, 7.452088752089177e-05, 6.70917990038086e-05, 6.0391929897358305e-05, 5.438057356426999e-05, 4.8978676610831176e-05, 4.412539031616181e-05, 3.980896907932274e-05, 3.6236426182711216e-05, 3.321359961238557e-05, 3.0324691776203232e-05, 2.7642508819878437e-05], "accuracy_test": 0.0932, "start": "2016-02-04 08:35:42.159000", "learning_rate_per_epoch": [0.003584422869607806, 0.0033315722830593586, 0.003096558153629303, 0.002878122264519334, 0.002675095107406378, 0.0024863898288458586, 0.002310996176674962, 0.0021479749120771885, 0.001996453385800123, 0.001855620532296598, 0.0017247222131118178, 0.0016030577244237065, 0.0014899756060913205, 0.0013848704984411597, 0.0012871796498075128, 0.0011963800061494112, 0.0011119855334982276, 0.0010335444239899516, 0.0009606366511434317, 0.000892871874384582, 0.00082988734357059, 0.000771345803514123, 0.0007169339223764837, 0.0006663603126071393, 0.0006193542503751814, 0.0005756640457548201, 0.000535055820364505, 0.0004973121685907245, 0.00046223102253861725, 0.00042962454608641565, 0.00039931817445904016, 0.0003711496538016945, 0.00034496819716878235, 0.0003206336114089936, 0.0002980156277772039, 0.00027699314523488283, 0.00025745361926965415, 0.00023929245071485639, 0.00022241240367293358, 0.00020672309619840235, 0.00019214053463656455, 0.00017858664796222, 0.0001659888803260401, 0.00015427976904902607, 0.00014339663903228939, 0.00013328122440725565, 0.00012387936294544488, 0.00011514072684803978, 0.00010701852443162352, 9.946927457349375e-05, 9.245255932910368e-05, 8.593081292929128e-05, 7.98691253294237e-05, 7.423503848258406e-05, 6.899838626850396e-05, 6.413113442249596e-05, 5.960722774034366e-05, 5.5402444559149444e-05, 5.149427306605503e-05, 4.7861787606962025e-05, 4.4485543185146526e-05, 4.13474663218949e-05, 3.843075319309719e-05, 3.571978959371336e-05, 3.320005998830311e-05, 3.0858078389428556e-05, 2.8681302865152247e-05, 2.665808096935507e-05, 2.4777578801149502e-05, 2.3029730073176324e-05, 2.1405177903943695e-05, 1.989522388612386e-05, 1.8491784430807456e-05, 1.718734529276844e-05, 1.59749233716866e-05, 1.484802760387538e-05, 1.3800625310977921e-05, 1.2827108548663091e-05, 1.192226500279503e-05, 1.1081250704592094e-05, 1.0299562745785806e-05, 9.573015631758608e-06, 8.897720363165718e-06, 8.270061698567588e-06, 7.686679055041168e-06, 7.144449227780569e-06, 6.640469109697733e-06, 6.172040230012499e-06, 5.7366551118320785e-06, 5.331982720235828e-06, 4.955856638844125e-06, 4.606262791639892e-06, 4.281329893274233e-06, 3.979318535130005e-06, 3.6986114082537824e-06, 3.4377058000245597e-06, 3.195204726580414e-06], "accuracy_train_first": 0.5590588235294117, "accuracy_train_last": 0.9926117647058823, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.44733333333333336, 0.3566666666666667, 0.3076, 0.2738666666666667, 0.2566666666666667, 0.252, 0.2421333333333333, 0.2361333333333333, 0.23040000000000005, 0.22840000000000005, 0.22786666666666666, 0.23199999999999998, 0.22333333333333338, 0.2281333333333333, 0.2321333333333333, 0.22693333333333332, 0.2254666666666667, 0.21306666666666663, 0.22240000000000004, 0.20333333333333337, 0.20999999999999996, 0.2108, 0.1956, 0.19879999999999998, 0.20266666666666666, 0.19279999999999997, 0.19679999999999997, 0.1884, 0.19279999999999997, 0.19533333333333336, 0.1956, 0.1902666666666667, 0.19146666666666667, 0.18706666666666671, 0.19346666666666668, 0.1877333333333333, 0.18813333333333337, 0.1904, 0.1882666666666667, 0.18933333333333335, 0.18146666666666667, 0.18053333333333332, 0.18146666666666667, 0.18346666666666667, 0.18253333333333333, 0.18200000000000005, 0.1802666666666667, 0.18213333333333337, 0.18120000000000003, 0.18186666666666662, 0.18079999999999996, 0.18279999999999996, 0.18359999999999999, 0.18586666666666662, 0.1824, 0.18253333333333333, 0.18333333333333335, 0.18279999999999996, 0.18453333333333333, 0.18333333333333335, 0.1850666666666667, 0.18586666666666662, 0.18586666666666662, 0.1876, 0.18813333333333337, 0.18799999999999994, 0.1884, 0.18813333333333337, 0.1889333333333333, 0.1896, 0.1896, 0.18920000000000003, 0.1896, 0.18920000000000003, 0.18879999999999997, 0.1889333333333333, 0.18866666666666665, 0.18853333333333333, 0.18866666666666665, 0.18879999999999997, 0.1897333333333333, 0.18986666666666663, 0.19013333333333338, 0.1904, 0.19053333333333333, 0.19066666666666665, 0.1904, 0.18986666666666663, 0.1897333333333333, 0.18999999999999995, 0.19013333333333338, 0.1902666666666667, 0.19066666666666665, 0.19186666666666663, 0.19253333333333333, 0.19240000000000002, 0.19240000000000002], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.07054151889740604, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.00385646359561673, "optimization": "adam", "nb_data_augmentation": 0, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 1.2021788095499694e-06, "rotation_range": [0, 0], "momentum": 0.8578724050324005}, "accuracy_valid_max": 0.8197333333333333, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8076, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.5526666666666666, 0.6433333333333333, 0.6924, 0.7261333333333333, 0.7433333333333333, 0.748, 0.7578666666666667, 0.7638666666666667, 0.7696, 0.7716, 0.7721333333333333, 0.768, 0.7766666666666666, 0.7718666666666667, 0.7678666666666667, 0.7730666666666667, 0.7745333333333333, 0.7869333333333334, 0.7776, 0.7966666666666666, 0.79, 0.7892, 0.8044, 0.8012, 0.7973333333333333, 0.8072, 0.8032, 0.8116, 0.8072, 0.8046666666666666, 0.8044, 0.8097333333333333, 0.8085333333333333, 0.8129333333333333, 0.8065333333333333, 0.8122666666666667, 0.8118666666666666, 0.8096, 0.8117333333333333, 0.8106666666666666, 0.8185333333333333, 0.8194666666666667, 0.8185333333333333, 0.8165333333333333, 0.8174666666666667, 0.818, 0.8197333333333333, 0.8178666666666666, 0.8188, 0.8181333333333334, 0.8192, 0.8172, 0.8164, 0.8141333333333334, 0.8176, 0.8174666666666667, 0.8166666666666667, 0.8172, 0.8154666666666667, 0.8166666666666667, 0.8149333333333333, 0.8141333333333334, 0.8141333333333334, 0.8124, 0.8118666666666666, 0.812, 0.8116, 0.8118666666666666, 0.8110666666666667, 0.8104, 0.8104, 0.8108, 0.8104, 0.8108, 0.8112, 0.8110666666666667, 0.8113333333333334, 0.8114666666666667, 0.8113333333333334, 0.8112, 0.8102666666666667, 0.8101333333333334, 0.8098666666666666, 0.8096, 0.8094666666666667, 0.8093333333333333, 0.8096, 0.8101333333333334, 0.8102666666666667, 0.81, 0.8098666666666666, 0.8097333333333333, 0.8093333333333333, 0.8081333333333334, 0.8074666666666667, 0.8076, 0.8076], "seed": 766838947, "model": "residualv3", "loss_std": [0.3622821569442749, 0.28337615728378296, 0.27921369671821594, 0.2679803967475891, 0.26074284315109253, 0.2526368796825409, 0.24268755316734314, 0.23290486633777618, 0.221697136759758, 0.21090973913669586, 0.19913098216056824, 0.18235620856285095, 0.1711534857749939, 0.15805594623088837, 0.14204466342926025, 0.13322784006595612, 0.11885810643434525, 0.10735681653022766, 0.09765273332595825, 0.08743312954902649, 0.08312990516424179, 0.07573641836643219, 0.06516746431589127, 0.06318674981594086, 0.05898166447877884, 0.053281113505363464, 0.05114736407995224, 0.04014328867197037, 0.03654512017965317, 0.03618868067860603, 0.03217972815036774, 0.02645360305905342, 0.025387335568666458, 0.02120090276002884, 0.020761052146553993, 0.0185862947255373, 0.011515690013766289, 0.015819493681192398, 0.010540958493947983, 0.007957683876156807, 0.009032096713781357, 0.002822689013555646, 0.0011228796793147922, 0.0025773392990231514, 0.015606887638568878, 0.0007912387955002487, 0.0006896242266520858, 0.0018763160333037376, 0.00730222137644887, 0.00066669489024207, 0.0005561861908063293, 0.0014686037320643663, 0.001506815548054874, 0.0009551821858622134, 0.0017473993357270956, 0.00020673408289439976, 0.0005128043703734875, 0.0010539817158132792, 0.0010533559834584594, 0.0008546931785531342, 0.0007061215583235025, 0.0006084638880565763, 0.0005166210466995835, 0.0004343278123997152, 0.0003655848267953843, 0.00030787885771133006, 0.0002611046948004514, 0.0002229379169875756, 0.0001918518537422642, 0.0001663879374973476, 0.0001452912256354466, 0.0001276477996725589, 0.00011277526209596545, 0.00010010416735894978, 8.937779784901068e-05, 8.007034193724394e-05, 7.203820860013366e-05, 6.507073703687638e-05, 5.8969035308109596e-05, 5.3609750466421247e-05, 4.889576302957721e-05, 4.4735650590155274e-05, 4.1051756852539256e-05, 3.779320468311198e-05, 3.490984454401769e-05, 3.235265830880962e-05, 3.0075743779889308e-05, 2.8042129997629672e-05, 2.6227658963762224e-05, 2.4610171749372967e-05, 2.317210237379186e-05, 2.189117731177248e-05, 2.0754809156642295e-05, 1.974721635633614e-05, 1.8850199921871535e-05, 1.8057153283734806e-05, 1.7361018763040192e-05]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:38 2016", "state": "available"}], "summary": "5527cb5988d31bf85ca5c8aee41e0f08"}