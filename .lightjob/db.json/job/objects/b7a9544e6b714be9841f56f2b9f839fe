{"content": {"hp_model": {"f0": 16, "f1": 64, "f2": 64, "f3": 16, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.5922921895980835, 1.2805233001708984, 1.119832992553711, 1.0053346157073975, 0.9190093278884888, 0.8462146520614624, 0.7850763201713562, 0.7345438003540039, 0.692477285861969, 0.6530967354774475, 0.6158618330955505, 0.58415687084198, 0.5554066896438599, 0.5299867987632751, 0.5064938068389893, 0.4829922318458557, 0.4644507169723511, 0.4466036558151245, 0.42846015095710754, 0.41006696224212646, 0.39704543352127075, 0.3873710632324219, 0.3727223575115204, 0.36189714074134827, 0.3501195013523102, 0.34307897090911865, 0.3342802822589874, 0.3255235254764557, 0.3176557421684265, 0.31188374757766724, 0.30450865626335144, 0.29974129796028137, 0.2952168881893158, 0.28876742720603943, 0.2835862934589386, 0.28308066725730896, 0.2753783166408539, 0.27535954117774963, 0.2723172903060913, 0.268388569355011, 0.2665814161300659, 0.26265254616737366, 0.2582659125328064, 0.25871986150741577, 0.25608503818511963, 0.2556453049182892, 0.2550439238548279, 0.2528460621833801, 0.25113070011138916, 0.2503104507923126, 0.24836762249469757, 0.24546319246292114, 0.24691219627857208, 0.24198216199874878, 0.24510198831558228, 0.24480997025966644, 0.2433142215013504, 0.24388600885868073, 0.24451211094856262, 0.24140597879886627, 0.24210970103740692, 0.2399679571390152, 0.2406124621629715, 0.23984354734420776, 0.24020613729953766, 0.2367730587720871, 0.23873023688793182, 0.23800607025623322, 0.2360890656709671, 0.2363578826189041, 0.23790641129016876, 0.23943044245243073, 0.23741161823272705, 0.2361489236354828, 0.23717722296714783, 0.2359955757856369, 0.23525957763195038, 0.23729905486106873, 0.23720456659793854, 0.23560984432697296, 0.2364940345287323, 0.2370569258928299, 0.23680570721626282, 0.23680387437343597, 0.2363242208957672, 0.23655426502227783, 0.2351197600364685, 0.23677773773670197, 0.23613959550857544, 0.2355806827545166, 0.2341618537902832, 0.23772375285625458, 0.2363850325345993, 0.2335660457611084, 0.23573802411556244, 0.23437613248825073, 0.2339717298746109, 0.23518089950084686, 0.2366538792848587, 0.23580048978328705, 0.23340573906898499, 0.23389685153961182, 0.23573559522628784, 0.23484869301319122, 0.23665998876094818, 0.23506999015808105, 0.23503462970256805, 0.23486480116844177, 0.2338937520980835, 0.23655816912651062, 0.2344912886619568], "moving_avg_accuracy_train": [0.0487270588235294, 0.1024825882352941, 0.15842962352941176, 0.21175136705882353, 0.26207505388235297, 0.3109287249647059, 0.35717938188000004, 0.39912732604494117, 0.43919576991103526, 0.4756879576258141, 0.5070815148044092, 0.5387239515592624, 0.569985674050395, 0.597829459586532, 0.6233100430396434, 0.6487013916768556, 0.6717230172150523, 0.6930777743170765, 0.7126170557088982, 0.7314024089615377, 0.7487986386536192, 0.7657446571411984, 0.7811654855447256, 0.7955595252255472, 0.8089847491735808, 0.8213145095503404, 0.8323995291835415, 0.8431948703828344, 0.8524542068739627, 0.8618487861865664, 0.8704827310973214, 0.8779850462228833, 0.8852406592476538, 0.8920036521464179, 0.8985421104611878, 0.9042761347091867, 0.9097308741794444, 0.9149766102909118, 0.9196483610265265, 0.9240717602179915, 0.928248113607957, 0.9320727140118672, 0.9355313249636217, 0.9387758395260831, 0.9417547261617102, 0.944518077074951, 0.9470827399556911, 0.9494238777248278, 0.9516532546582274, 0.9536314586041694, 0.9555389009790466, 0.9572838344105538, 0.9588001568518513, 0.9602166117549015, 0.9615243623441172, 0.9626683966979408, 0.9637850864399113, 0.964825401325332, 0.965804037663387, 0.96660245742646, 0.9673869175661669, 0.9681611669860208, 0.9688579914638894, 0.9694921923175004, 0.9701053260269268, 0.9706265581301164, 0.971105078787693, 0.9715428062030413, 0.9719579373474432, 0.9723197906715224, 0.972697223369076, 0.9730604422086391, 0.9733426332818929, 0.97361072289488, 0.9738802388406862, 0.9741110384860293, 0.9743211111080146, 0.974538411761919, 0.9746704529386683, 0.9748292899977425, 0.9749604786450271, 0.9751020778393479, 0.9752271641730601, 0.9753609183439893, 0.9754460029801786, 0.9755084615056901, 0.9756140859433564, 0.9757115008784325, 0.9757921154964716, 0.9758387862997656, 0.975894907669789, 0.975964240432222, 0.9759631105066467, 0.976006799455982, 0.9760249430397956, 0.9760742134416984, 0.9760926744504698, 0.9761187011230699, 0.9761585957166452, 0.9762039126155689, 0.9762258742951885, 0.976219757453905, 0.9762660170026322, 0.976274709420016, 0.976315473772132, 0.976359220512566, 0.9764244749318975, 0.9764220274387078, 0.9764339423418957, 0.976439959872412, 0.976471258002818], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.04949333333333332, 0.10261066666666664, 0.15742959999999995, 0.21000663999999994, 0.25861930933333327, 0.3055840450666666, 0.3493323072266666, 0.38899907650399995, 0.42647250218693333, 0.4602119186349067, 0.489230726771416, 0.5179609874276078, 0.545444888684847, 0.569727066483029, 0.5918476931680594, 0.6130495905179201, 0.6327179647994614, 0.650312834986182, 0.6660948848208971, 0.6809253963388073, 0.6945528567049266, 0.707457571034434, 0.7193918139309906, 0.7301326325378915, 0.7399993692841024, 0.7488927656890254, 0.7568301557867895, 0.7644271402081105, 0.7710644261872994, 0.7779046502352361, 0.7832875185450459, 0.7880387666905412, 0.792874890021487, 0.7973474010193383, 0.8015726609174045, 0.8053887281589974, 0.8090898553430976, 0.812140869808788, 0.8149801161612426, 0.8176687712117849, 0.8199418940906065, 0.8221077046815458, 0.8238436008800578, 0.8258859074587187, 0.8275239833795135, 0.8287849183748954, 0.8299597598707392, 0.8312837838836653, 0.8324887388286322, 0.8336265316124356, 0.8345705451178587, 0.8355801572727395, 0.8364221415454656, 0.837219927390919, 0.8378979346518272, 0.8386948078533112, 0.8393186604013134, 0.839946794361182, 0.8403654482583972, 0.8405689034325575, 0.8411120130893018, 0.8415474784470384, 0.8417927306023345, 0.8420801242087678, 0.8423654451212244, 0.8425955672757687, 0.8428426772148584, 0.8429050761600393, 0.843001235210702, 0.8431811116896318, 0.8433830005206686, 0.8434313671352683, 0.8435815637550749, 0.843810074046234, 0.8439890666416106, 0.8440301599774495, 0.8441738106463712, 0.844316429581734, 0.8444314532902273, 0.8444683079612045, 0.8445148104984174, 0.844596662781909, 0.8446569965037181, 0.8446979635200129, 0.8448148338346784, 0.8448800171178772, 0.8448986820727561, 0.8448754805321472, 0.8448412658122658, 0.8448771392310391, 0.8448960919746018, 0.8449264827771416, 0.8449671678327607, 0.8449771177161512, 0.8449460726112028, 0.8449047986834158, 0.8448943188150743, 0.8449915536002335, 0.8449323982402102, 0.8449324917495225, 0.8448525759079035, 0.8447806516504466, 0.8448759198187352, 0.8449349945035284, 0.8449348283865089, 0.8449880122145247, 0.8449425443264055, 0.8449816232270982, 0.8450034609043884, 0.8449431148139496, 0.8450088033325546], "moving_var_accuracy_train": [0.021368936354325255, 0.045238955199944635, 0.06888569650376138, 0.08758600185053252, 0.10161966276509327, 0.11293782709258848, 0.12089615376919582, 0.12464320856926145, 0.12662820945698833, 0.1259505063891854, 0.12222545464119831, 0.11901410341114245, 0.11590835070804147, 0.11129500317407882, 0.10600884405466976, 0.10121044491975087, 0.09585935760956438, 0.090377652706586, 0.08477593909170654, 0.079474350653974, 0.07425057485607353, 0.06941002525369859, 0.06460924026618801, 0.06001301164456681, 0.0556338402226038, 0.051438663118878215, 0.047400695749406516, 0.04370948069894822, 0.04011015043935687, 0.036893458479568396, 0.033875017674109144, 0.030994078496887355, 0.028368465930485594, 0.02594326199397563, 0.02373369872878393, 0.02165624016259529, 0.01975840379053126, 0.018030223137638506, 0.016423628118296105, 0.014957363450129973, 0.013618604453857867, 0.01238839212271839, 0.011257210817886915, 0.010226231608812437, 0.009283472338222448, 0.00842385007882758, 0.007640662532171442, 0.006925924613441006, 0.006278063245697472, 0.0056854765387933884, 0.005149673912635344, 0.004662109655495329, 0.00421659179365964, 0.00381298971472505, 0.0034470826476848924, 0.00311415371434096, 0.0028139613067252657, 0.002542305471600189, 0.0022966944861796262, 0.0020727623046242543, 0.0018710244735589303, 0.0016893171856803342, 0.0015247555462889113, 0.0013758998881645093, 0.0012416932958587736, 0.001119969112421456, 0.001010033039356858, 0.0009107541830325002, 0.0008212297695327209, 0.0007402852330327733, 0.0006675388087001396, 0.000601972279158847, 0.0005424917374593791, 0.0004888894120787658, 0.0004406542204762831, 0.0003970682147152695, 0.00035775856780231256, 0.000322407687189767, 0.0002903238323220063, 0.0002615185119918242, 0.000235521554943229, 0.00021214985243539686, 0.0001910756865097914, 0.00017212912946298106, 0.00015498137107452216, 0.00013951834357375166, 0.00012566691791286735, 0.0001131856331477636, 0.00010192555828276156, 9.175260592940638e-05, 8.260569181002551e-05, 7.43883859165421e-05, 6.694955881547413e-05, 6.0271781452572945e-05, 5.424756601401805e-05, 4.8844657565149204e-05, 4.396325908823798e-05, 3.9573029668593864e-05, 3.5630050909103365e-05, 3.208552841014559e-05, 2.888131640747645e-05, 2.5993521508454402e-05, 2.341342887024491e-05, 2.1072766006300193e-05, 1.898044499730114e-05, 1.709962449325831e-05, 1.542798529711327e-05, 1.388524067940817e-05, 1.2497994295729178e-05, 1.1248520762217894e-05, 1.0132484842698218e-05], "duration": 92638.889619, "accuracy_train": [0.4872705882352941, 0.5862823529411765, 0.6619529411764706, 0.6916470588235294, 0.7149882352941177, 0.7506117647058823, 0.7734352941176471, 0.7766588235294117, 0.7998117647058823, 0.8041176470588235, 0.7896235294117647, 0.8235058823529412, 0.8513411764705883, 0.8484235294117647, 0.852635294117647, 0.8772235294117647, 0.8789176470588236, 0.8852705882352941, 0.8884705882352941, 0.9004705882352941, 0.905364705882353, 0.9182588235294118, 0.9199529411764706, 0.9251058823529412, 0.9298117647058823, 0.9322823529411765, 0.9321647058823529, 0.9403529411764706, 0.9357882352941177, 0.9464, 0.9481882352941177, 0.9455058823529412, 0.9505411764705882, 0.9528705882352941, 0.9573882352941177, 0.9558823529411765, 0.9588235294117647, 0.9621882352941177, 0.9616941176470588, 0.9638823529411765, 0.965835294117647, 0.9664941176470588, 0.9666588235294118, 0.9679764705882353, 0.968564705882353, 0.9693882352941177, 0.9701647058823529, 0.9704941176470588, 0.9717176470588236, 0.9714352941176471, 0.9727058823529412, 0.9729882352941176, 0.9724470588235294, 0.972964705882353, 0.9732941176470589, 0.972964705882353, 0.973835294117647, 0.9741882352941177, 0.9746117647058824, 0.9737882352941176, 0.9744470588235294, 0.9751294117647059, 0.9751294117647059, 0.9752, 0.9756235294117647, 0.9753176470588235, 0.9754117647058823, 0.9754823529411765, 0.9756941176470588, 0.9755764705882353, 0.9760941176470588, 0.9763294117647059, 0.9758823529411764, 0.9760235294117647, 0.9763058823529411, 0.9761882352941177, 0.9762117647058823, 0.9764941176470588, 0.9758588235294118, 0.9762588235294117, 0.9761411764705883, 0.9763764705882353, 0.9763529411764705, 0.9765647058823529, 0.9762117647058823, 0.9760705882352941, 0.9765647058823529, 0.9765882352941176, 0.9765176470588235, 0.9762588235294117, 0.9764, 0.9765882352941176, 0.9759529411764706, 0.9764, 0.9761882352941177, 0.9765176470588235, 0.9762588235294117, 0.9763529411764705, 0.9765176470588235, 0.9766117647058824, 0.9764235294117647, 0.9761647058823529, 0.9766823529411764, 0.9763529411764705, 0.9766823529411764, 0.9767529411764706, 0.9770117647058824, 0.9764, 0.9765411764705882, 0.9764941176470588, 0.9767529411764706], "end": "2016-02-06 11:33:43.184000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0], "moving_var_accuracy_valid": [0.022046310399999994, 0.045234739264, 0.06775730440384001, 0.08586068017991041, 0.09854333673932744, 0.10854018068791124, 0.11491135659730092, 0.11758129420168159, 0.11846148347324238, 0.1168604691261661, 0.11275324324452135, 0.10890676981642368, 0.1048143762896404, 0.09963955608827904, 0.09407949960389747, 0.08871723370461401, 0.08332711485606178, 0.07778061848244353, 0.07224421450706807, 0.0669992897033071, 0.06197072981724776, 0.05727244170285871, 0.05282703291419895, 0.048582616281896196, 0.04460052709987782, 0.04085230688642593, 0.0373340956518601, 0.03412011363735424, 0.031104584360144658, 0.02841522390936394, 0.025834478959594332, 0.023454200294095562, 0.02131927306453508, 0.019367375949714678, 0.017591313745599062, 0.015963243693770383, 0.01449020440628932, 0.013124962169089047, 0.011885017830829481, 0.0107615758415738, 0.009731922046016415, 0.0088009464610572, 0.007947971835459559, 0.007190713797364777, 0.006495792052128889, 0.00586052246047921, 0.005286892487294498, 0.004773980594846292, 0.004309649783136262, 0.0038903359565925126, 0.0035093228144190526, 0.003167564383306695, 0.0028571883826156875, 0.002577197704650972, 0.002323615178798472, 0.0020969687230118143, 0.0018907745787254725, 0.001705248091296788, 0.0015363007219379899, 0.001383043195815224, 0.0012473935891269413, 0.0011243609009143442, 0.0010124661484000065, 0.000911962889325174, 0.000821499272600422, 0.0007398259511944885, 0.0006663929259730123, 0.0005997886760309482, 0.0005398930274950727, 0.00048619492467461505, 0.00043794226410803023, 0.00039416909166189784, 0.00035495521371711974, 0.0003199296449238987, 0.00028822502557430567, 0.00025941772097712844, 0.00023366166851155053, 0.00021047856310691187, 0.00018954978087786057, 0.00017060702719103008, 0.00015356578684563217, 0.00013826950632788405, 0.00012447531711698168, 0.00011204289007310045, 0.00010096152909984026, 9.090361593353345e-05, 8.18163897650458e-05, 7.363959559192088e-05, 6.628617185623784e-05, 5.96691367901845e-05, 5.370545596956305e-05, 4.834322278051788e-05, 4.352379796622272e-05, 3.917230917121583e-05, 3.526375244096559e-05, 3.175270903090369e-05, 2.8578426576577433e-05, 2.5805675349924365e-05, 2.3256602024507352e-05, 2.093094190075254e-05, 1.8895326586352225e-05, 1.7052351817013705e-05, 1.5428800850314055e-05, 1.3917329130733338e-05, 1.2525596466013782e-05, 1.1298493495474112e-05, 1.0187250105576824e-05, 9.182269539333356e-06, 8.268334542744889e-06, 7.4742759441516694e-06, 6.765683183025233e-06], "accuracy_test": 0.834, "start": "2016-02-05 09:49:44.295000", "learning_rate_per_epoch": [0.009157032705843449, 0.008408197201788425, 0.007720599416643381, 0.007089231628924608, 0.0065094949677586555, 0.005977167747914791, 0.005488372407853603, 0.005039549432694912, 0.0046274298802018166, 0.0042490120977163315, 0.0039015403017401695, 0.0035824838560074568, 0.003289518877863884, 0.003020511707291007, 0.0027735030744224787, 0.002546694129705429, 0.002338432939723134, 0.0021472028456628323, 0.0019716108217835426, 0.00181037827860564, 0.001662330818362534, 0.0015263903187587857, 0.001401566551066935, 0.0012869505444541574, 0.0011817074846476316, 0.0010850708931684494, 0.0009963370393961668, 0.0009148595272563398, 0.0008400449878536165, 0.0007713485974818468, 0.0007082700030878186, 0.0006503497716039419, 0.0005971660721115768, 0.000548331590835005, 0.0005034906207583845, 0.00046231664600782096, 0.0004245097516104579, 0.0003897945862263441, 0.00035791832488030195, 0.00032864880631677806, 0.0003017728740815073, 0.00027709477581083775, 0.00025443476624786854, 0.00023362784122582525, 0.00021452244254760444, 0.00019697942479979247, 0.00018087102216668427, 0.00016607991710770875, 0.00015249839634634554, 0.00014002752141095698, 0.00012857648835051805, 0.00011806187831098214, 0.0001084071263903752, 9.954191045835614e-05, 9.140166366705671e-05, 8.392710151383653e-05, 7.70637925597839e-05, 7.076174370013177e-05, 6.497505819424987e-05, 5.966159005765803e-05, 5.478264210978523e-05, 5.030267857364379e-05, 4.618907405529171e-05, 4.241186616127379e-05, 3.894354813382961e-05, 3.5758857848122716e-05, 3.2834603189257905e-05, 3.0149485610309057e-05, 2.768394915619865e-05, 2.542003676353488e-05, 2.334126111236401e-05, 2.143248093489092e-05, 1.9679795514093712e-05, 1.8070439182338305e-05, 1.659269219089765e-05, 1.5235790669976268e-05, 1.3989852050144691e-05, 1.2845803212258033e-05, 1.1795311365858652e-05, 1.0830725841515232e-05, 9.945020792656578e-06, 9.131746082857717e-06, 8.384979082620703e-06, 7.699280104134232e-06, 7.06965556673822e-06, 6.491519798146328e-06, 5.960662292636698e-06, 5.473216788232094e-06, 5.025633072364144e-06, 4.614651516021695e-06, 4.237278972141212e-06, 3.890766947733937e-06, 3.5725913676287746e-06, 3.2804352940729586e-06, 3.012170964211691e-06, 2.7658445560518885e-06, 2.539661863920628e-06, 2.331975792912999e-06, 2.141273625966278e-06, 1.966166564670857e-06, 1.8053792700811755e-06, 1.6577406540818629e-06, 1.5221754665617482e-06, 1.3976964510220569e-06, 1.283396954931959e-06, 1.178444563265657e-06, 1.0820748457263107e-06, 9.935858997778269e-07, 9.123333484239993e-07, 8.377253948310681e-07, 7.692186727581429e-07], "accuracy_train_first": 0.4872705882352941, "accuracy_train_last": 0.9767529411764706, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.5050666666666667, 0.41933333333333334, 0.34919999999999995, 0.31679999999999997, 0.3038666666666666, 0.2717333333333334, 0.25693333333333335, 0.254, 0.23626666666666662, 0.2361333333333333, 0.24960000000000004, 0.2234666666666667, 0.20720000000000005, 0.21173333333333333, 0.20906666666666662, 0.19613333333333338, 0.1902666666666667, 0.19133333333333336, 0.19186666666666663, 0.1856, 0.18279999999999996, 0.1764, 0.17320000000000002, 0.17320000000000002, 0.17120000000000002, 0.1710666666666667, 0.1717333333333333, 0.16720000000000002, 0.16920000000000002, 0.1605333333333333, 0.16826666666666668, 0.16920000000000002, 0.16359999999999997, 0.1624, 0.1604, 0.16026666666666667, 0.15759999999999996, 0.1604, 0.15946666666666665, 0.15813333333333335, 0.15959999999999996, 0.15839999999999999, 0.1605333333333333, 0.15573333333333328, 0.15773333333333328, 0.1598666666666667, 0.15946666666666665, 0.15680000000000005, 0.15666666666666662, 0.15613333333333335, 0.15693333333333337, 0.15533333333333332, 0.15600000000000003, 0.15559999999999996, 0.15600000000000003, 0.15413333333333334, 0.15506666666666669, 0.15439999999999998, 0.1558666666666667, 0.15759999999999996, 0.15400000000000003, 0.1545333333333333, 0.15600000000000003, 0.15533333333333332, 0.15506666666666669, 0.15533333333333332, 0.15493333333333337, 0.1565333333333333, 0.15613333333333335, 0.1552, 0.15480000000000005, 0.15613333333333335, 0.15506666666666669, 0.15413333333333334, 0.15439999999999998, 0.15559999999999996, 0.1545333333333333, 0.15439999999999998, 0.1545333333333333, 0.1552, 0.15506666666666669, 0.15466666666666662, 0.15480000000000005, 0.15493333333333337, 0.15413333333333334, 0.1545333333333333, 0.15493333333333337, 0.15533333333333332, 0.15546666666666664, 0.15480000000000005, 0.15493333333333337, 0.15480000000000005, 0.15466666666666662, 0.15493333333333337, 0.15533333333333332, 0.15546666666666664, 0.1552, 0.15413333333333334, 0.15559999999999996, 0.15506666666666669, 0.1558666666666667, 0.1558666666666667, 0.15426666666666666, 0.1545333333333333, 0.15506666666666669, 0.1545333333333333, 0.15546666666666664, 0.15466666666666662, 0.15480000000000005, 0.15559999999999996, 0.15439999999999998], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.08177706356388065, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "valid_ratio": 0.15, "learning_rate": 0.009972559354764373, "optimization": "nesterov_momentum", "nb_data_augmentation": 1, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 8.236998750056652e-08, "rotation_range": [0, 0], "momentum": 0.5572726069210014}, "accuracy_valid_max": 0.846, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8456, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.49493333333333334, 0.5806666666666667, 0.6508, 0.6832, 0.6961333333333334, 0.7282666666666666, 0.7430666666666667, 0.746, 0.7637333333333334, 0.7638666666666667, 0.7504, 0.7765333333333333, 0.7928, 0.7882666666666667, 0.7909333333333334, 0.8038666666666666, 0.8097333333333333, 0.8086666666666666, 0.8081333333333334, 0.8144, 0.8172, 0.8236, 0.8268, 0.8268, 0.8288, 0.8289333333333333, 0.8282666666666667, 0.8328, 0.8308, 0.8394666666666667, 0.8317333333333333, 0.8308, 0.8364, 0.8376, 0.8396, 0.8397333333333333, 0.8424, 0.8396, 0.8405333333333334, 0.8418666666666667, 0.8404, 0.8416, 0.8394666666666667, 0.8442666666666667, 0.8422666666666667, 0.8401333333333333, 0.8405333333333334, 0.8432, 0.8433333333333334, 0.8438666666666667, 0.8430666666666666, 0.8446666666666667, 0.844, 0.8444, 0.844, 0.8458666666666667, 0.8449333333333333, 0.8456, 0.8441333333333333, 0.8424, 0.846, 0.8454666666666667, 0.844, 0.8446666666666667, 0.8449333333333333, 0.8446666666666667, 0.8450666666666666, 0.8434666666666667, 0.8438666666666667, 0.8448, 0.8452, 0.8438666666666667, 0.8449333333333333, 0.8458666666666667, 0.8456, 0.8444, 0.8454666666666667, 0.8456, 0.8454666666666667, 0.8448, 0.8449333333333333, 0.8453333333333334, 0.8452, 0.8450666666666666, 0.8458666666666667, 0.8454666666666667, 0.8450666666666666, 0.8446666666666667, 0.8445333333333334, 0.8452, 0.8450666666666666, 0.8452, 0.8453333333333334, 0.8450666666666666, 0.8446666666666667, 0.8445333333333334, 0.8448, 0.8458666666666667, 0.8444, 0.8449333333333333, 0.8441333333333333, 0.8441333333333333, 0.8457333333333333, 0.8454666666666667, 0.8449333333333333, 0.8454666666666667, 0.8445333333333334, 0.8453333333333334, 0.8452, 0.8444, 0.8456], "seed": 677176213, "model": "residualv3", "loss_std": [0.24568773806095123, 0.18714435398578644, 0.18574687838554382, 0.18111978471279144, 0.1767285168170929, 0.17648838460445404, 0.17352047562599182, 0.16748470067977905, 0.16516348719596863, 0.15990608930587769, 0.1580272614955902, 0.15681026875972748, 0.1526125967502594, 0.14693665504455566, 0.1448456197977066, 0.1425771266222, 0.13900607824325562, 0.13912925124168396, 0.13380010426044464, 0.12972459197044373, 0.12829269468784332, 0.12808065116405487, 0.12150701880455017, 0.12058878690004349, 0.11683321744203568, 0.11473250389099121, 0.11267425119876862, 0.11042042821645737, 0.11166274547576904, 0.11007677018642426, 0.10819105803966522, 0.10446830838918686, 0.10326533019542694, 0.10251035541296005, 0.10045704245567322, 0.10285528749227524, 0.09908202290534973, 0.09902492165565491, 0.09857477247714996, 0.09694559127092361, 0.09715090692043304, 0.09639575332403183, 0.09340227395296097, 0.09384380280971527, 0.09585990756750107, 0.09268364310264587, 0.09461101144552231, 0.09313234686851501, 0.09191681444644928, 0.09136033058166504, 0.09332817792892456, 0.09277945756912231, 0.09064239263534546, 0.0929226353764534, 0.09206276386976242, 0.09243065118789673, 0.0915299579501152, 0.0916064903140068, 0.09171709418296814, 0.08751995861530304, 0.09235822409391403, 0.08895489573478699, 0.091189906001091, 0.09016880393028259, 0.08911653608083725, 0.08806006610393524, 0.09003763645887375, 0.08938301354646683, 0.08835694938898087, 0.0904194787144661, 0.09203950315713882, 0.0889928787946701, 0.08959224075078964, 0.08729953318834305, 0.08830911666154861, 0.08798057585954666, 0.08825554698705673, 0.08954552561044693, 0.08941958844661713, 0.08904089778661728, 0.08766946941614151, 0.08881482481956482, 0.08873242139816284, 0.09024976938962936, 0.08860686421394348, 0.09061486274003983, 0.09018859267234802, 0.08970541507005692, 0.09001182019710541, 0.09017156064510345, 0.0878203883767128, 0.08911170065402985, 0.0889025628566742, 0.08810725808143616, 0.08881880342960358, 0.09067925810813904, 0.0878891721367836, 0.08775665611028671, 0.08672346919775009, 0.09007710963487625, 0.08730882406234741, 0.08996842056512833, 0.08896283060312271, 0.0886152982711792, 0.08986202627420425, 0.08933106809854507, 0.08800740540027618, 0.08975774794816971, 0.08842315524816513, 0.08858583122491837, 0.08594181388616562]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:42 2016", "state": "available"}], "summary": "837f7860b46eeef752230010fbc33ff1"}