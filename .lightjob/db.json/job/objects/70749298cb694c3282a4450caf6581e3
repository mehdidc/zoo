{"content": {"hp_model": {"f0": 32, "f1": 64, "f2": 16, "f3": 64, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [2.1518311500549316, 1.880211353302002, 1.787316083908081, 1.7275643348693848, 1.6904436349868774, 1.6636425256729126, 1.6412131786346436, 1.6194531917572021, 1.6013808250427246, 1.585079550743103, 1.568054437637329, 1.5511711835861206, 1.5386598110198975, 1.5215470790863037, 1.5081123113632202, 1.493271827697754, 1.4797815084457397, 1.4677848815917969, 1.454762578010559, 1.443523645401001, 1.4301292896270752, 1.4170140027999878, 1.4051116704940796, 1.3920812606811523, 1.3789699077606201, 1.3666560649871826, 1.3554009199142456, 1.344991683959961, 1.3306503295898438, 1.3191934823989868, 1.3086040019989014, 1.2981899976730347, 1.289957880973816, 1.2787704467773438, 1.2686625719070435, 1.26105535030365, 1.2519649267196655, 1.2424067258834839, 1.2345467805862427, 1.2297804355621338, 1.2184817790985107, 1.2115213871002197, 1.2046724557876587, 1.1973145008087158, 1.191106915473938, 1.1826614141464233, 1.1761900186538696, 1.1733932495117188, 1.1648510694503784, 1.1610867977142334, 1.152705430984497, 1.1473703384399414, 1.141080617904663, 1.1358530521392822, 1.1292237043380737, 1.1260361671447754, 1.1178815364837646, 1.113403081893921, 1.1078367233276367, 1.1033304929733276, 1.097987413406372, 1.0919647216796875, 1.0869075059890747, 1.0821547508239746, 1.0785897970199585, 1.0705335140228271, 1.0667065382003784, 1.0633794069290161, 1.0589494705200195, 1.0537456274032593, 1.0494050979614258, 1.0444262027740479, 1.0401685237884521, 1.0360426902770996, 1.0318013429641724, 1.0271636247634888, 1.0232619047164917, 1.0200320482254028, 1.0141329765319824, 1.0107039213180542, 1.0067389011383057, 1.0015760660171509, 0.9978561401367188, 0.9945310950279236, 0.9921146035194397, 0.9877445101737976, 0.9824647307395935, 0.9800825119018555, 0.9774360656738281, 0.9713736772537231, 0.9689873456954956, 0.9661697149276733, 0.9624251127243042, 0.9594641923904419, 0.9546924829483032, 0.9505919218063354, 0.9481292963027954, 0.9440843462944031, 0.9418886303901672, 0.9378449320793152, 0.9331552386283875, 0.931216299533844, 0.9289807677268982, 0.9246479868888855, 0.9220256209373474, 0.919121265411377, 0.9144948124885559, 0.9130072593688965, 0.909974992275238, 0.9062606692314148, 0.9025168418884277, 0.8990465402603149, 0.8982886075973511, 0.8949350714683533, 0.8902764320373535, 0.8887172341346741, 0.8693042993545532, 0.866328775882721, 0.8659091591835022, 0.8667544722557068, 0.8644137382507324, 0.8640430569648743, 0.8611193895339966, 0.8642873764038086, 0.8618767857551575, 0.862715482711792, 0.8628924489021301, 0.8622655868530273, 0.860639750957489, 0.8602120280265808, 0.8594054579734802, 0.8613840341567993, 0.859904944896698, 0.8580790162086487, 0.858603298664093, 0.8588017225265503, 0.8602993488311768, 0.8554781079292297, 0.8543296456336975, 0.8537065386772156, 0.8554242253303528, 0.8558309078216553, 0.8558217287063599, 0.853687047958374, 0.8549454808235168, 0.8559118509292603, 0.8550928235054016, 0.8558294773101807, 0.8550094962120056, 0.8539870381355286, 0.8548813462257385, 0.8550978302955627, 0.854347825050354, 0.855627179145813, 0.8559542894363403, 0.8546549081802368, 0.8571575284004211, 0.8551964163780212, 0.8558492660522461, 0.8556045889854431, 0.8546885848045349, 0.8563522696495056, 0.8544710874557495, 0.854448676109314, 0.8545509576797485, 0.8566396832466125, 0.8532451391220093, 0.8552438616752625, 0.8548505902290344, 0.8536393642425537, 0.8552038669586182, 0.8559385538101196, 0.855817437171936, 0.855962336063385, 0.8544167280197144, 0.8552623987197876, 0.8541474342346191, 0.8550454378128052, 0.8549619317054749, 0.8546327948570251, 0.8555011749267578, 0.8552237749099731, 0.8564760684967041, 0.8555278778076172, 0.8534515500068665, 0.856873095035553, 0.855390727519989, 0.8544345498085022, 0.857006311416626, 0.8565694093704224, 0.8560324907302856, 0.8551576137542725, 0.8565138578414917, 0.8560062050819397, 0.8556495904922485, 0.8544001579284668], "moving_avg_accuracy_train": [0.029367058823529406, 0.05954799999999999, 0.08932261176470586, 0.11797623294117644, 0.14525390376470584, 0.17100380750588232, 0.1953010738141176, 0.21810743702094113, 0.2394096344953176, 0.25956278869284466, 0.2784370980588543, 0.29607574119414537, 0.31262346119237794, 0.3280011150731401, 0.34259629768347316, 0.35629902085630233, 0.369038530535378, 0.38124526571713435, 0.39258191561600914, 0.40360137111323174, 0.41370005753132033, 0.42335593413112943, 0.4321309289533106, 0.44103077723445017, 0.4495488759815934, 0.45715163544225756, 0.46491411895685536, 0.4724321188258757, 0.47981243635505283, 0.48656766330778284, 0.4933414852122987, 0.4995814543381277, 0.5059056618454914, 0.511778625072707, 0.5175019390360245, 0.5232152745441867, 0.5280608059132974, 0.5334900194396147, 0.5387292527897709, 0.5429810333931467, 0.5474782241714791, 0.5516621664602135, 0.5559971262847804, 0.5600374136563023, 0.5632854369965544, 0.5670815991792519, 0.5705075569083855, 0.5741673894528411, 0.5773482975663805, 0.5807593501626837, 0.5840104739699447, 0.5870117795141266, 0.5902141309744787, 0.5931056590535014, 0.5957621519716807, 0.5983153485392185, 0.6012602842735321, 0.6037577852579437, 0.6057349479086199, 0.6083402766471697, 0.6109697783942175, 0.6134304476136193, 0.6158309322640221, 0.6180478390376198, 0.6200454080750343, 0.6225443966792956, 0.6245581923054837, 0.6271564907219942, 0.6291137828262654, 0.6307718163083448, 0.6322616935010398, 0.6346002300332888, 0.6361119717358423, 0.6377384216210816, 0.6395198735766205, 0.6404878862189585, 0.6427096858323568, 0.6446198937197093, 0.6467626102300913, 0.646575760971788, 0.6486428907569621, 0.651058601681266, 0.6532374473954923, 0.6549772320677079, 0.6561077441550548, 0.6572075579748434, 0.6579950374714767, 0.6590284749007996, 0.6611326862342491, 0.6632241234931772, 0.66473465232033, 0.6648494223824146, 0.6666350683794673, 0.6690515615415205, 0.6700828759756037, 0.6717569413192197, 0.6722236001284743, 0.6735259459979798, 0.6746674690452407, 0.6741560162583636, 0.6756910028678214, 0.677660726110451, 0.6779228887935236, 0.6792623646200536, 0.6798914222756953, 0.6819093388716553, 0.6835819343962545, 0.6855955056625114, 0.6871747786256721, 0.6895161242925166, 0.6910515706867943, 0.6922875900887032, 0.6927058899033623, 0.6925576538542025, 0.6936595355276058, 0.69443711138661, 0.6981557531891255, 0.7014954719878599, 0.7044635718478974, 0.7071983911336959, 0.7096009049615027, 0.7118196379947642, 0.7138659094894054, 0.7157240244228178, 0.7174033866864183, 0.7188512833118942, 0.7202743902748224, 0.7216281277179284, 0.7228159031814296, 0.7237554893338749, 0.7246646462828403, 0.7256075934192622, 0.7264727164302771, 0.7270960330225436, 0.7278640767791128, 0.7284776691012016, 0.7289922551322578, 0.729737735501385, 0.73040160901007, 0.7309873304620043, 0.7315121268275686, 0.7320126788506941, 0.7324325874362129, 0.7328505051631798, 0.7331701605292148, 0.7334554974174697, 0.7337075947345463, 0.7338991882022681, 0.7340833870291, 0.7342726953850136, 0.73447366114063, 0.7346474714971551, 0.7347827243474396, 0.7349138636774015, 0.7350507126037791, 0.7351527001669306, 0.7352280183855316, 0.7353358047822726, 0.7354069301863982, 0.7354803548148172, 0.7355911428627473, 0.7356602638705902, 0.735677766895296, 0.7357241078528252, 0.7357752264793074, 0.7358235861843179, 0.7358718158011802, 0.7358634577504739, 0.7358865237401324, 0.7359072831308251, 0.7359189077589191, 0.7359128993359684, 0.7359874917553126, 0.7359440366974285, 0.7359896330276856, 0.736030669724917, 0.7360558380465431, 0.7360808424771829, 0.736044522935347, 0.7360988941712241, 0.7361148871070429, 0.7361292807492799, 0.7360975291449402, 0.7360807174069167, 0.736077351548578, 0.7360978516878379, 0.7360810076955246, 0.7361105539847956, 0.7361347927039631, 0.736147195786508, 0.7362007115019749, 0.7361876991753068, 0.7361665763165997, 0.7361852128025868, 0.7362396326987987, 0.7362062576642129], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.029026666666666662, 0.05861733333333333, 0.08804893333333332, 0.11695070666666665, 0.14421563599999998, 0.17012740573333332, 0.19479466516, 0.21818186531066666, 0.23967034544626667, 0.25979664423497334, 0.27895031314480934, 0.2968819484969951, 0.31368708698062897, 0.32927837828256606, 0.3437372071209761, 0.3571768197422118, 0.369472471101324, 0.3812052239911916, 0.3918313682587391, 0.4021148980995319, 0.41149007495624534, 0.42042106746062086, 0.4286589607145588, 0.43687306464310294, 0.44475909151212595, 0.4516965156942467, 0.45882019745815533, 0.4657915110456731, 0.4725323599411058, 0.4786257906136619, 0.4850432115522957, 0.49103222373039945, 0.4970890013573595, 0.5025534345549569, 0.5076180910994612, 0.5130962819895151, 0.5173733204572302, 0.5225693217448405, 0.5270590562370231, 0.5309664839466541, 0.5353898355519887, 0.5392641853301232, 0.5432177667971109, 0.5468426567840665, 0.5500117244389933, 0.5537572186617606, 0.5567548301289179, 0.5600393471160261, 0.5628354124044235, 0.5659785378306478, 0.5689673507142496, 0.5718306156428248, 0.574634220745209, 0.5775174653373547, 0.5799123854702859, 0.582267813589924, 0.5850410322309315, 0.587003595674505, 0.5887565694403879, 0.5910542458296825, 0.593535487913381, 0.5958486057887096, 0.5978904118765053, 0.6001813706888548, 0.6020432336199693, 0.6042389102579724, 0.6060283525655085, 0.6084521839756243, 0.6099936322447286, 0.6113142690202558, 0.6126495087848969, 0.6146778912397405, 0.6159434354490998, 0.6173757585708565, 0.6186515160471042, 0.6194263644423939, 0.6213237279981545, 0.6228580218650057, 0.6244922196785051, 0.6240963310439879, 0.6258600312729224, 0.6278606948122969, 0.6295412919977339, 0.6307204961312938, 0.631515113184831, 0.6325369351996812, 0.6328965750130464, 0.6335269175117417, 0.6351475590939009, 0.6366861365178441, 0.6377775228660596, 0.6379197705794536, 0.6392611268548416, 0.6411350141693575, 0.6414481794190884, 0.6426233614771795, 0.6426943586627949, 0.6433715894631822, 0.6439410971835307, 0.6432669874651776, 0.6445802887186599, 0.6459889265134605, 0.6461233671954478, 0.6472843638092364, 0.647929260761646, 0.6494830013521481, 0.6503613678836, 0.65176523109524, 0.6528953746523827, 0.6546058371871444, 0.6559185868017633, 0.6566733947882536, 0.6566860553094283, 0.6566307831118188, 0.6575410381339701, 0.6580136009872398, 0.6607989075551826, 0.663385683466331, 0.6657271151196978, 0.6680077369410614, 0.669793629913622, 0.6714276002555931, 0.6730315068967004, 0.674475022873697, 0.6756808539196606, 0.6767127685276946, 0.6778948250082585, 0.6789320091740993, 0.6798388082566894, 0.6805349274310204, 0.681228101354585, 0.6818919578857932, 0.6825427620972139, 0.6832218192208258, 0.6837529706320765, 0.6843776735688688, 0.6847532395453152, 0.6853445822574503, 0.6860234573650387, 0.6865411116285348, 0.6870470004656813, 0.6874756337524466, 0.6878880703772019, 0.6882325966728151, 0.6885693370055336, 0.6890457366383136, 0.6892078296411489, 0.6894337133437007, 0.6897036753426641, 0.6897733078083976, 0.6899693103608912, 0.6901857126581354, 0.6903938080589885, 0.690527760586423, 0.690648317861114, 0.6908634860750027, 0.6909904708008358, 0.6910380903874189, 0.6910676146820103, 0.6910675198804759, 0.6910807678924282, 0.6911460244365187, 0.6910980886595335, 0.6910682797935801, 0.6910814518142221, 0.6911199732994666, 0.6910613093028533, 0.6910485117059013, 0.6910636605353112, 0.6912239611484468, 0.6912348983669354, 0.6912847418635752, 0.6913162676772178, 0.6913313075761627, 0.6912115101518796, 0.691223692470025, 0.6912613232230226, 0.6913085242340536, 0.6913910051439817, 0.6914919046295834, 0.6914627141666251, 0.6915164427499625, 0.6914581318082996, 0.691245651960803, 0.6914144200980561, 0.6913529780882506, 0.6914043469460922, 0.6914772455848164, 0.6914628543596681, 0.6914499022570346, 0.6913982453646645, 0.6913517541615315, 0.691323245412045, 0.6912842542041739, 0.6913824954504232, 0.6913509125720475], "moving_var_accuracy_train": [0.007761817295501729, 0.015183638458629755, 0.021644022164417437, 0.026868890006697847, 0.03087864293603951, 0.033758296526554245, 0.03569568122437858, 0.03680728492643471, 0.037210608988927224, 0.037144894707018226, 0.036636561222710966, 0.03577300068532721, 0.03466014395105363, 0.03332237970583696, 0.03190731593411397, 0.03040646594186328, 0.028826475309446313, 0.02728486723267943, 0.02571305718777841, 0.024234607064097996, 0.02272899756402618, 0.021295221383820243, 0.019858704052601976, 0.018585699342187498, 0.017380151464363496, 0.01616235388067762, 0.015088423845439477, 0.01408826435917084, 0.01316965970473707, 0.012263391554909374, 0.011450014368165323, 0.010655447863570476, 0.009949863482579188, 0.009265302407935305, 0.008633579071646124, 0.00806400098814096, 0.007468913457568191, 0.0069873093474404945, 0.006535624507572944, 0.006044760801508838, 0.005622307245428415, 0.005217624878564717, 0.004864989280833726, 0.004525405651150673, 0.004167811986605008, 0.003880728413800591, 0.0035982902496768266, 0.003359010592990249, 0.0031141731215322526, 0.002907473327711744, 0.0027118542490318256, 0.002521739338854482, 0.002361860898849603, 0.002200923220650634, 0.0020443434902046, 0.0018985784555965216, 0.001786774428349995, 0.0016642345860192233, 0.001532993676742362, 0.001440783949591346, 0.001358934069571755, 0.0012775346996803819, 0.0012016421687237179, 0.0011257100326367603, 0.0010490515679062176, 0.0010003509075136453, 0.0009368141721787692, 0.000903893146912059, 0.0008479827636538334, 0.0007879261625377154, 0.0007291111527277566, 0.0007054188154689477, 0.0006554452006992062, 0.0006137087336920401, 0.0005808999999518761, 0.0005312434362382234, 0.0005225466343132712, 0.0005031320184380794, 0.0004941399229890446, 0.0004450401444980964, 0.0004389933599870735, 0.0004476149574165718, 0.0004455797794925375, 0.000428263457894367, 0.0003969396303216664, 0.0003681319812332825, 0.00033689989872851483, 0.0003128218451385933, 0.0003213890086470877, 0.0003286170960546705, 0.0003162906624881419, 0.00028478014574368594, 0.0002849989158104288, 0.000309053977049638, 0.0002877210645022104, 0.00028417141102425803, 0.0002577142039201257, 0.00024720772640247587, 0.00023421462756907752, 0.0002131474203910081, 0.00021303833337283889, 0.0002266527869085533, 0.00020460607166926013, 0.00020029322391105784, 0.00018382532332704492, 0.00020209067748859302, 0.00020705979183991636, 0.00022284403585458377, 0.00022300656009865657, 0.0002500429998736568, 0.0002462570605535961, 0.00023538105015529143, 0.0002134177177542567, 0.0001922737113152655, 0.00018397362918337685, 0.00017101788421359308, 0.000278370767490973, 0.00035091718563346245, 0.0003951120180825101, 0.0004229139450080378, 0.0004325712047424636, 0.0004336190707241888, 0.0004279422069198012, 0.0004162213061797527, 0.00039998149407342816, 0.00037885098640866343, 0.00035919298861921046, 0.0003397671353410939, 0.0003184877167722458, 0.0002945843443358234, 0.0002725650071229106, 0.00025331085012939497, 0.00023471570553414375, 0.00021474084714848086, 0.00019857578334167667, 0.00018210666484704498, 0.00016627918741256504, 0.00015465293749809426, 0.0001431541960680888, 0.0001319264030345828, 0.00012121246375890982, 0.00011134618833371402, 0.00010179847848207441, 9.319052767248591e-05, 8.479109088255179e-05, 7.704473605248802e-05, 6.991223996273403e-05, 6.325138847832376e-05, 5.723161250074802e-05, 5.1830990133241364e-05, 4.701137623429105e-05, 4.258212897118083e-05, 3.848855607565344e-05, 3.479447818285384e-05, 3.148357902242451e-05, 2.8428834287520307e-05, 2.563700636524741e-05, 2.3177866894624246e-05, 2.0905609613170196e-05, 1.8863569236379386e-05, 1.708767823681879e-05, 1.54219098366639e-05, 1.3882476055862137e-05, 1.2513555809378452e-05, 1.128571825420144e-05, 1.0178194378399562e-05, 9.181309804043788e-06, 8.263807536743884e-06, 7.442215141979824e-06, 6.701872198499207e-06, 6.032901166454192e-06, 5.429935960125968e-06, 4.937018625326158e-06, 4.460311841295018e-06, 4.032991885161796e-06, 3.6448487913226047e-06, 3.286064911911546e-06, 2.96308541468498e-06, 2.678648855289035e-06, 2.4373900513773284e-06, 2.1959530122045233e-06, 1.978222303415661e-06, 1.7894735524774286e-06, 1.613069908048003e-06, 1.4518648782644105e-06, 1.310460691825027e-06, 1.1819681033359503e-06, 1.0716281418895626e-06, 9.697529672625315e-07, 8.741621986458104e-07, 8.125213649985839e-07, 7.327931143065751e-07, 6.635293793155759e-07, 6.003023088735408e-07, 5.669258039196225e-07, 5.202582599300578e-07], "duration": 183437.227446, "accuracy_train": [0.2936705882352941, 0.3311764705882353, 0.3572941176470588, 0.37585882352941175, 0.3907529411764706, 0.4027529411764706, 0.4139764705882353, 0.4233647058823529, 0.43112941176470587, 0.4409411764705882, 0.44830588235294117, 0.4548235294117647, 0.4615529411764706, 0.4664, 0.4739529411764706, 0.4796235294117647, 0.48369411764705883, 0.49110588235294117, 0.49461176470588236, 0.5027764705882353, 0.5045882352941177, 0.5102588235294118, 0.5111058823529412, 0.5211294117647058, 0.5262117647058824, 0.5255764705882353, 0.5347764705882353, 0.5400941176470588, 0.546235294117647, 0.547364705882353, 0.5543058823529412, 0.5557411764705882, 0.5628235294117647, 0.564635294117647, 0.5690117647058823, 0.574635294117647, 0.5716705882352942, 0.5823529411764706, 0.5858823529411765, 0.5812470588235294, 0.5879529411764706, 0.5893176470588235, 0.5950117647058824, 0.5964, 0.5925176470588235, 0.6012470588235294, 0.6013411764705883, 0.6071058823529412, 0.6059764705882353, 0.6114588235294117, 0.6132705882352941, 0.6140235294117647, 0.619035294117647, 0.6191294117647059, 0.6196705882352941, 0.6212941176470588, 0.6277647058823529, 0.6262352941176471, 0.6235294117647059, 0.6317882352941177, 0.6346352941176471, 0.6355764705882353, 0.6374352941176471, 0.638, 0.6380235294117647, 0.645035294117647, 0.6426823529411765, 0.6505411764705883, 0.6467294117647059, 0.6456941176470589, 0.6456705882352941, 0.6556470588235294, 0.6497176470588235, 0.6523764705882353, 0.6555529411764706, 0.6492, 0.6627058823529411, 0.6618117647058823, 0.6660470588235294, 0.6448941176470588, 0.6672470588235294, 0.6728, 0.6728470588235295, 0.6706352941176471, 0.6662823529411764, 0.6671058823529412, 0.6650823529411765, 0.6683294117647058, 0.6800705882352941, 0.6820470588235295, 0.6783294117647058, 0.6658823529411765, 0.6827058823529412, 0.6908, 0.679364705882353, 0.6868235294117647, 0.6764235294117648, 0.6852470588235294, 0.6849411764705883, 0.6695529411764706, 0.6895058823529412, 0.6953882352941176, 0.6802823529411764, 0.6913176470588235, 0.6855529411764706, 0.7000705882352941, 0.698635294117647, 0.7037176470588236, 0.7013882352941176, 0.7105882352941176, 0.7048705882352941, 0.7034117647058824, 0.6964705882352941, 0.6912235294117647, 0.7035764705882352, 0.701435294117647, 0.7316235294117647, 0.7315529411764706, 0.7311764705882353, 0.7318117647058824, 0.7312235294117647, 0.7317882352941176, 0.7322823529411765, 0.7324470588235295, 0.7325176470588235, 0.7318823529411764, 0.7330823529411765, 0.7338117647058824, 0.7335058823529412, 0.7322117647058823, 0.7328470588235294, 0.7340941176470588, 0.7342588235294117, 0.7327058823529412, 0.7347764705882353, 0.734, 0.7336235294117647, 0.7364470588235295, 0.7363764705882353, 0.7362588235294117, 0.7362352941176471, 0.7365176470588235, 0.7362117647058823, 0.7366117647058823, 0.7360470588235294, 0.7360235294117647, 0.7359764705882353, 0.7356235294117647, 0.7357411764705882, 0.7359764705882353, 0.7362823529411765, 0.7362117647058823, 0.736, 0.7360941176470588, 0.7362823529411765, 0.7360705882352941, 0.7359058823529412, 0.7363058823529411, 0.7360470588235294, 0.7361411764705882, 0.7365882352941177, 0.7362823529411765, 0.735835294117647, 0.7361411764705882, 0.7362352941176471, 0.7362588235294117, 0.7363058823529411, 0.7357882352941176, 0.7360941176470588, 0.7360941176470588, 0.7360235294117647, 0.7358588235294118, 0.7366588235294118, 0.7355529411764706, 0.7364, 0.7364, 0.7362823529411765, 0.7363058823529411, 0.7357176470588235, 0.7365882352941177, 0.7362588235294117, 0.7362588235294117, 0.7358117647058824, 0.7359294117647058, 0.7360470588235294, 0.7362823529411765, 0.7359294117647058, 0.7363764705882353, 0.7363529411764705, 0.7362588235294117, 0.7366823529411765, 0.7360705882352941, 0.7359764705882353, 0.7363529411764705, 0.7367294117647059, 0.7359058823529412], "end": "2016-02-06 03:46:12.526000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0], "moving_var_accuracy_valid": [0.0075829263999999995, 0.014705101743999999, 0.021030563276639998, 0.026445319465278398, 0.0304911748627155, 0.033484835672863554, 0.03561261529417948, 0.036974003942747614, 0.037432396555315536, 0.037334768026174636, 0.03690305851792573, 0.03610664458376697, 0.035037694240477264, 0.03372172009658628, 0.0322310676693336, 0.030633569589080145, 0.02893086001127566, 0.027276691423520363, 0.025565256759120924, 0.02396048995708711, 0.022355486431230302, 0.020837801432126168, 0.019364787256283034, 0.01803555206079505, 0.016791701632726124, 0.015545682157997575, 0.014447835519058821, 0.013440444885372532, 0.012505351791314782, 0.011588985688434531, 0.010800736743123618, 0.010043477470636534, 0.009369290720574875, 0.008701101920056424, 0.008061848441274895, 0.00752575877599823, 0.006937820420887244, 0.006487024243226153, 0.0060197412611961865, 0.0055551790568305, 0.005175755505967195, 0.004793275231200451, 0.004454624965825382, 0.004127420916000621, 0.0038050657326140816, 0.003550817702107725, 0.0032766070024692474, 0.0030460387687697445, 0.002811796721765597, 0.002619530186593838, 0.0024379741900131162, 0.0022679613454726745, 0.002111907025056439, 0.0019755342169540356, 0.001829601577246705, 0.0016965737941630706, 0.001596133089424252, 0.0014711846779122872, 0.0013517224633359196, 0.001264064068111622, 0.0011930667218017046, 0.001121914678368015, 0.00104724395943265, 0.0009897559940083205, 0.0009219791967758138, 0.0008731702401862846, 0.0008146721501156571, 0.0007860795634460677, 0.0007288561719983809, 0.0006716672882344152, 0.0006205463464726829, 0.0005955207302734725, 0.0005503830765587105, 0.0005138087146289088, 0.00047707585740983463, 0.00043477178198999655, 0.0004236944999555538, 0.00040251156898871393, 0.0003862958345326594, 0.00034907680137785224, 0.00034216486771796107, 0.0003439722723262047, 0.0003349947071908726, 0.0003140099379692291, 0.0002882916905282569, 0.0002688596035457246, 0.00024313771034936842, 0.00022239992430538518, 0.000223798244115257, 0.00022272340410894173, 0.0002111711811476898, 0.00019023617274061333, 0.0001874056853842562, 0.0002002681998533611, 0.00018112403213077624, 0.0001754411047446331, 0.00015794235967345755, 0.00014627589771904918, 0.00013456735933897265, 0.00012520043861647786, 0.0001282032363964121, 0.00013324125668923904, 0.00012007979969307398, 0.0001202030379588228, 0.00011192576287598645, 0.00012246017499155105, 0.00011715790736456882, 0.00012317960388107753, 0.00012235666363072956, 0.00013645213601306855, 0.0001383167263679001, 0.0001296126695993365, 0.00011665284523857056, 0.00010501505585717076, 0.00010197062811962122, 9.378340616027229e-05, 0.0001542264596410666, 0.00019902650020743904, 0.00022846456987319125, 0.0002524292359145884, 0.0002558910357080989, 0.0002543306638432605, 0.00025205024607942905, 0.0002455988668540869, 0.000234125236771366, 0.00022029634291869404, 0.0002108420263360121, 0.00019943958264724912, 0.00018689618556819976, 0.00017256780415522197, 0.00015963543453448962, 0.00014763824052729026, 0.00013668633156898734, 0.0001271677656062418, 0.00011699008544068066, 0.00010880336072974543, 9.919247288074854e-05, 9.242040142143185e-05, 8.732620398461594e-05, 8.10052770147959e-05, 7.52080609532614e-05, 6.93407933086435e-05, 6.393764970273537e-05, 5.861217004778206e-05, 5.3771499508118086e-05, 5.043695904832234e-05, 4.5629730417603604e-05, 4.1525968399549725e-05, 3.80292868875529e-05, 3.426999632135488e-05, 3.118874969447534e-05, 2.8491344313300987e-05, 2.60319431446769e-05, 2.359023834666398e-05, 2.1362021020325945e-05, 1.9642495160705406e-05, 1.7823371729988966e-05, 1.6061443182227168e-05, 1.4463144019744556e-05, 1.3016829698656078e-05, 1.1716726317176695e-05, 1.0583379434378753e-05, 9.545722039377458e-06, 8.599146951844536e-06, 7.74079377581022e-06, 6.980069541658147e-06, 6.313035767980168e-06, 5.6832061975718645e-06, 5.1169509611070825e-06, 4.836522444141058e-06, 4.35394680446137e-06, 3.940911491430758e-06, 3.555765234620061e-06, 3.2022244982005073e-06, 3.0111648541638643e-06, 2.711384048626033e-06, 2.452990305903855e-06, 2.227742694294669e-06, 2.0661963293881168e-06, 1.9512030522017464e-06, 1.763751495131071e-06, 1.6133571916250475e-06, 1.4826229657210944e-06, 1.7406898394786966e-06, 1.82296501289753e-06, 1.6746445967283598e-06, 1.5309289730590818e-06, 1.4256639795036338e-06, 1.2849615478046935e-06, 1.1579752056878773e-06, 1.0661935958831483e-06, 9.79027124013727e-07, 8.884391507878997e-07, 8.132780643303915e-07, 8.188123400788526e-07, 7.459084099293843e-07], "accuracy_test": 0.695, "start": "2016-02-04 00:48:55.298000", "learning_rate_per_epoch": [0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 0.00020122449495829642, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122450223425403e-05, 2.0122449768678052e-06, 2.0122449484460958e-07, 2.0122449484460958e-08, 2.0122450372639378e-09, 2.012245092775089e-10, 2.0122450580806195e-11, 2.0122449713444457e-12, 2.0122449442393914e-13, 2.012245012002027e-14, 2.0122449272987324e-15, 2.012244953768512e-16, 2.012244887594063e-17, 2.0122448462350324e-18, 2.012244794536244e-19, 2.012244794536244e-20, 2.0122448753156008e-21, 2.0122448248285029e-22, 2.012244856382939e-23, 2.0122449352690296e-24, 2.012244885965223e-25, 2.012244885965223e-26, 2.012244924483822e-27, 2.0122449485579462e-28, 2.012245008743257e-29, 2.0122450839748954e-30, 2.0122450839748954e-31, 2.012245025200178e-32, 2.012245025200178e-33, 2.01224497928243e-34, 2.0122450079810224e-35, 2.012245043854263e-36, 2.012245088695814e-37, 2.0122451167217832e-38, 2.0122449765919368e-39, 2.012250581785794e-40, 2.0122645947704373e-41, 2.0122645947704373e-42, 2.0178697886277366e-43, 1.961817850054744e-44, 1.401298464324817e-45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_train_first": 0.2936705882352941, "accuracy_train_last": 0.7359058823529412, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.7097333333333333, 0.6750666666666667, 0.6470666666666667, 0.6229333333333333, 0.6104, 0.5966666666666667, 0.5831999999999999, 0.5713333333333334, 0.5669333333333333, 0.5590666666666666, 0.5486666666666666, 0.5417333333333334, 0.5350666666666667, 0.5304, 0.5261333333333333, 0.5218666666666667, 0.5198666666666667, 0.5132, 0.5125333333333333, 0.5053333333333334, 0.5041333333333333, 0.4992, 0.4972, 0.48919999999999997, 0.4842666666666666, 0.48586666666666667, 0.47706666666666664, 0.4714666666666667, 0.4668, 0.46653333333333336, 0.45720000000000005, 0.4550666666666666, 0.4484, 0.4482666666666667, 0.4468, 0.4376, 0.4441333333333334, 0.43066666666666664, 0.4325333333333333, 0.4338666666666666, 0.42479999999999996, 0.4258666666666666, 0.4212, 0.4205333333333333, 0.42146666666666666, 0.4125333333333333, 0.4162666666666667, 0.4104, 0.41200000000000003, 0.4057333333333333, 0.40413333333333334, 0.4024, 0.40013333333333334, 0.3965333333333333, 0.3985333333333333, 0.3965333333333333, 0.39, 0.3953333333333333, 0.39546666666666663, 0.38826666666666665, 0.3841333333333333, 0.3833333333333333, 0.38373333333333337, 0.3792, 0.3812, 0.376, 0.3778666666666667, 0.36973333333333336, 0.3761333333333333, 0.3768, 0.3753333333333333, 0.36706666666666665, 0.3726666666666667, 0.36973333333333336, 0.3698666666666667, 0.37360000000000004, 0.36160000000000003, 0.3633333333333333, 0.3608, 0.3794666666666666, 0.3582666666666666, 0.3541333333333333, 0.3553333333333333, 0.3586666666666667, 0.3613333333333333, 0.3582666666666666, 0.36386666666666667, 0.3608, 0.3502666666666666, 0.3494666666666667, 0.35240000000000005, 0.3608, 0.3486666666666667, 0.34199999999999997, 0.35573333333333335, 0.3468, 0.3566666666666667, 0.35053333333333336, 0.3509333333333333, 0.3628, 0.3436, 0.3413333333333334, 0.3526666666666667, 0.3422666666666667, 0.3462666666666666, 0.33653333333333335, 0.34173333333333333, 0.3356, 0.3369333333333333, 0.32999999999999996, 0.3322666666666667, 0.33653333333333335, 0.34319999999999995, 0.34386666666666665, 0.3342666666666667, 0.33773333333333333, 0.3141333333333334, 0.31333333333333335, 0.31320000000000003, 0.31146666666666667, 0.3141333333333334, 0.3138666666666666, 0.31253333333333333, 0.31253333333333333, 0.31346666666666667, 0.31399999999999995, 0.31146666666666667, 0.3117333333333333, 0.31200000000000006, 0.31320000000000003, 0.31253333333333333, 0.3121333333333334, 0.3116, 0.31066666666666665, 0.31146666666666667, 0.31000000000000005, 0.3118666666666666, 0.30933333333333335, 0.3078666666666666, 0.30879999999999996, 0.3084, 0.30866666666666664, 0.3084, 0.30866666666666664, 0.3084, 0.30666666666666664, 0.30933333333333335, 0.3085333333333333, 0.3078666666666666, 0.3096, 0.3082666666666667, 0.3078666666666666, 0.3077333333333333, 0.3082666666666667, 0.3082666666666667, 0.30720000000000003, 0.3078666666666666, 0.3085333333333333, 0.30866666666666664, 0.3089333333333333, 0.30879999999999996, 0.3082666666666667, 0.30933333333333335, 0.30920000000000003, 0.30879999999999996, 0.3085333333333333, 0.30946666666666667, 0.3090666666666667, 0.30879999999999996, 0.30733333333333335, 0.30866666666666664, 0.3082666666666667, 0.3084, 0.3085333333333333, 0.3098666666666666, 0.30866666666666664, 0.3084, 0.3082666666666667, 0.3078666666666666, 0.3076, 0.30879999999999996, 0.30800000000000005, 0.3090666666666667, 0.31066666666666665, 0.3070666666666667, 0.30920000000000003, 0.30813333333333337, 0.3078666666666666, 0.30866666666666664, 0.30866666666666664, 0.3090666666666667, 0.3090666666666667, 0.3089333333333333, 0.3090666666666667, 0.3077333333333333, 0.3089333333333333], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.07875136441601042, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "valid_ratio": 0.15, "learning_rate": 0.00020122450191124706, "optimization": "nesterov_momentum", "nb_data_augmentation": 2, "learning_rate_decay_method": "discrete", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 5.3193055868228596e-08, "rotation_range": [0, 0], "momentum": 0.6325492457825784}, "accuracy_valid_max": 0.6933333333333334, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.6910666666666667, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.2902666666666667, 0.32493333333333335, 0.3529333333333333, 0.37706666666666666, 0.3896, 0.4033333333333333, 0.4168, 0.42866666666666664, 0.43306666666666666, 0.44093333333333334, 0.4513333333333333, 0.45826666666666666, 0.4649333333333333, 0.4696, 0.47386666666666666, 0.47813333333333335, 0.48013333333333336, 0.4868, 0.48746666666666666, 0.49466666666666664, 0.4958666666666667, 0.5008, 0.5028, 0.5108, 0.5157333333333334, 0.5141333333333333, 0.5229333333333334, 0.5285333333333333, 0.5332, 0.5334666666666666, 0.5428, 0.5449333333333334, 0.5516, 0.5517333333333333, 0.5532, 0.5624, 0.5558666666666666, 0.5693333333333334, 0.5674666666666667, 0.5661333333333334, 0.5752, 0.5741333333333334, 0.5788, 0.5794666666666667, 0.5785333333333333, 0.5874666666666667, 0.5837333333333333, 0.5896, 0.588, 0.5942666666666667, 0.5958666666666667, 0.5976, 0.5998666666666667, 0.6034666666666667, 0.6014666666666667, 0.6034666666666667, 0.61, 0.6046666666666667, 0.6045333333333334, 0.6117333333333334, 0.6158666666666667, 0.6166666666666667, 0.6162666666666666, 0.6208, 0.6188, 0.624, 0.6221333333333333, 0.6302666666666666, 0.6238666666666667, 0.6232, 0.6246666666666667, 0.6329333333333333, 0.6273333333333333, 0.6302666666666666, 0.6301333333333333, 0.6264, 0.6384, 0.6366666666666667, 0.6392, 0.6205333333333334, 0.6417333333333334, 0.6458666666666667, 0.6446666666666667, 0.6413333333333333, 0.6386666666666667, 0.6417333333333334, 0.6361333333333333, 0.6392, 0.6497333333333334, 0.6505333333333333, 0.6476, 0.6392, 0.6513333333333333, 0.658, 0.6442666666666667, 0.6532, 0.6433333333333333, 0.6494666666666666, 0.6490666666666667, 0.6372, 0.6564, 0.6586666666666666, 0.6473333333333333, 0.6577333333333333, 0.6537333333333334, 0.6634666666666666, 0.6582666666666667, 0.6644, 0.6630666666666667, 0.67, 0.6677333333333333, 0.6634666666666666, 0.6568, 0.6561333333333333, 0.6657333333333333, 0.6622666666666667, 0.6858666666666666, 0.6866666666666666, 0.6868, 0.6885333333333333, 0.6858666666666666, 0.6861333333333334, 0.6874666666666667, 0.6874666666666667, 0.6865333333333333, 0.686, 0.6885333333333333, 0.6882666666666667, 0.688, 0.6868, 0.6874666666666667, 0.6878666666666666, 0.6884, 0.6893333333333334, 0.6885333333333333, 0.69, 0.6881333333333334, 0.6906666666666667, 0.6921333333333334, 0.6912, 0.6916, 0.6913333333333334, 0.6916, 0.6913333333333334, 0.6916, 0.6933333333333334, 0.6906666666666667, 0.6914666666666667, 0.6921333333333334, 0.6904, 0.6917333333333333, 0.6921333333333334, 0.6922666666666667, 0.6917333333333333, 0.6917333333333333, 0.6928, 0.6921333333333334, 0.6914666666666667, 0.6913333333333334, 0.6910666666666667, 0.6912, 0.6917333333333333, 0.6906666666666667, 0.6908, 0.6912, 0.6914666666666667, 0.6905333333333333, 0.6909333333333333, 0.6912, 0.6926666666666667, 0.6913333333333334, 0.6917333333333333, 0.6916, 0.6914666666666667, 0.6901333333333334, 0.6913333333333334, 0.6916, 0.6917333333333333, 0.6921333333333334, 0.6924, 0.6912, 0.692, 0.6909333333333333, 0.6893333333333334, 0.6929333333333333, 0.6908, 0.6918666666666666, 0.6921333333333334, 0.6913333333333334, 0.6913333333333334, 0.6909333333333333, 0.6909333333333333, 0.6910666666666667, 0.6909333333333333, 0.6922666666666667, 0.6910666666666667], "seed": 823404525, "model": "residualv3", "loss_std": [0.2613524794578552, 0.09740658104419708, 0.09751521050930023, 0.09988369047641754, 0.10487210750579834, 0.10914617776870728, 0.11074109375476837, 0.11308447271585464, 0.11227338761091232, 0.11664126068353653, 0.11646033078432083, 0.11552832275629044, 0.11830352246761322, 0.11976765841245651, 0.11689150333404541, 0.11766666173934937, 0.12063445150852203, 0.11894911527633667, 0.11942043900489807, 0.12122754752635956, 0.11876923590898514, 0.12151498347520828, 0.12061844021081924, 0.12366168200969696, 0.12132440507411957, 0.12164823710918427, 0.12328623980283737, 0.12190620601177216, 0.12136425822973251, 0.12007630616426468, 0.12365635484457016, 0.12572890520095825, 0.1247270405292511, 0.1241333857178688, 0.12449043989181519, 0.12416253983974457, 0.1258832812309265, 0.1267377734184265, 0.12558116018772125, 0.12538982927799225, 0.12521544098854065, 0.12529273331165314, 0.12460797280073166, 0.1264653503894806, 0.12490243464708328, 0.12547197937965393, 0.12421034276485443, 0.12663060426712036, 0.12559567391872406, 0.12638454139232635, 0.12506750226020813, 0.1254257708787918, 0.12399981915950775, 0.12647031247615814, 0.12411314249038696, 0.12449812889099121, 0.12387150526046753, 0.1272113025188446, 0.1250886768102646, 0.12575122714042664, 0.12636405229568481, 0.12311460822820663, 0.12328001111745834, 0.12386124581098557, 0.12580952048301697, 0.12379928678274155, 0.12393765896558762, 0.12151992321014404, 0.12449349462985992, 0.1243022084236145, 0.12365038692951202, 0.1275315284729004, 0.12307784706354141, 0.12254711240530014, 0.12260399758815765, 0.1235341802239418, 0.12347544729709625, 0.12271107733249664, 0.12349621206521988, 0.12343045324087143, 0.1252557337284088, 0.12543435394763947, 0.12258133292198181, 0.12309856712818146, 0.1226419061422348, 0.12287737429141998, 0.12391459196805954, 0.12217008322477341, 0.1211777925491333, 0.12219403684139252, 0.1219024658203125, 0.12262178957462311, 0.12118855118751526, 0.12389419227838516, 0.12359893321990967, 0.12343312799930573, 0.12215381115674973, 0.1205783560872078, 0.12406894564628601, 0.12068380415439606, 0.1207084059715271, 0.12163342535495758, 0.12036393582820892, 0.1215737983584404, 0.12189885973930359, 0.12353062629699707, 0.1207718476653099, 0.11984537541866302, 0.1212133914232254, 0.11911650002002716, 0.11988425254821777, 0.1211797222495079, 0.12100917100906372, 0.12098990380764008, 0.12178347259759903, 0.12062924355268478, 0.11856413632631302, 0.1182326078414917, 0.11946198344230652, 0.1190880611538887, 0.11894320696592331, 0.1179627999663353, 0.1190681904554367, 0.11784727871417999, 0.11819000542163849, 0.11685886234045029, 0.1200641393661499, 0.11943136900663376, 0.11806196719408035, 0.12020763754844666, 0.11921431869268417, 0.11889749765396118, 0.11930230259895325, 0.12059156596660614, 0.12051603943109512, 0.11934641748666763, 0.12106402963399887, 0.11999532580375671, 0.11947018653154373, 0.12014520168304443, 0.1185351312160492, 0.12007565796375275, 0.11911068856716156, 0.11873260140419006, 0.12015429139137268, 0.11877378821372986, 0.11913806945085526, 0.12128742784261703, 0.11975803226232529, 0.11681250482797623, 0.11925982683897018, 0.11775047332048416, 0.1214265525341034, 0.11957135796546936, 0.12010989338159561, 0.11807331442832947, 0.12053869664669037, 0.11780741810798645, 0.11946927756071091, 0.1194174587726593, 0.11849221587181091, 0.12023957073688507, 0.11924366652965546, 0.11787735670804977, 0.11932925879955292, 0.1217012107372284, 0.12054817378520966, 0.11910057067871094, 0.11864063888788223, 0.11893173307180405, 0.12107988446950912, 0.1180497482419014, 0.12043115496635437, 0.11986495554447174, 0.11994530260562897, 0.11820834130048752, 0.11724499613046646, 0.1210625097155571, 0.12152451276779175, 0.12103001028299332, 0.11861645430326462, 0.12037051469087601, 0.12004904448986053, 0.12136298418045044, 0.11948377639055252, 0.12132984399795532, 0.11840824782848358, 0.1206120178103447, 0.11916352063417435, 0.11945566534996033, 0.12000684440135956, 0.11998899281024933, 0.11830268055200577, 0.11949417740106583, 0.11909612268209457, 0.11949926614761353]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:41 2016", "state": "available"}], "summary": "5f5c8722fdfe2b5bfce682f4a5e029f3"}