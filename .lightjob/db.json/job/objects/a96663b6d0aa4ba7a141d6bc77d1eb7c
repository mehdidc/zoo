{"content": {"hp_model": {"f0": 16, "f1": 16, "f2": 32, "f3": 64, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.4767489433288574, 0.9978772401809692, 0.7651421427726746, 0.6665335893630981, 0.6032601594924927, 0.5551566481590271, 0.5198846459388733, 0.4906512498855591, 0.466860830783844, 0.4439331889152527, 0.429107666015625, 0.4086155891418457, 0.39585399627685547, 0.3834092915058136, 0.36997130513191223, 0.3607129752635956, 0.3505162298679352, 0.3379654288291931, 0.33194097876548767, 0.32071205973625183, 0.31461530923843384, 0.308189332485199, 0.30173251032829285, 0.2927404046058655, 0.28749221563339233, 0.28234565258026123, 0.2766806185245514, 0.27122098207473755, 0.26582416892051697, 0.2643177807331085, 0.25699862837791443, 0.2535736560821533, 0.24864532053470612, 0.24575303494930267, 0.2425549477338791, 0.2390279769897461, 0.23613768815994263, 0.23189334571361542, 0.22825096547603607, 0.22601260244846344, 0.22275099158287048, 0.21988318860530853, 0.21607175469398499, 0.2171042561531067, 0.21175988018512726, 0.20972129702568054, 0.20731283724308014, 0.20641084015369415, 0.20273159444332123, 0.20129139721393585, 0.19905129075050354, 0.19663643836975098, 0.1963554471731186, 0.19448469579219818, 0.1911592185497284, 0.1902916133403778, 0.18788030743598938, 0.18846988677978516, 0.18546254932880402, 0.18267744779586792, 0.1838131844997406, 0.17749769985675812, 0.18024541437625885, 0.17712253332138062, 0.17562410235404968, 0.17586268484592438, 0.17327027022838593, 0.17146556079387665, 0.16941478848457336, 0.16873344779014587, 0.1690014898777008, 0.16587123274803162, 0.16486987471580505, 0.16313697397708893, 0.16268692910671234, 0.16074712574481964, 0.15882745385169983, 0.15981516242027283, 0.15901009738445282, 0.15799379348754883, 0.15652839839458466, 0.15591217577457428, 0.1557256132364273, 0.1533384621143341, 0.1535077840089798, 0.15225055813789368, 0.152415931224823, 0.14993397891521454, 0.1499965935945511, 0.14912177622318268, 0.1474071592092514, 0.14818772673606873, 0.14773626625537872, 0.14582248032093048, 0.1435530036687851, 0.14379249513149261, 0.14243237674236298, 0.14156140387058258, 0.13909964263439178, 0.1420288383960724, 0.13977594673633575, 0.14041250944137573, 0.13804790377616882, 0.13837593793869019, 0.13756690919399261, 0.13603584468364716, 0.13748404383659363, 0.1354043185710907, 0.1342620849609375, 0.1322830766439438, 0.1332716941833496, 0.13251906633377075, 0.13299152255058289, 0.13224256038665771, 0.13002045452594757, 0.1302632987499237, 0.13238337635993958, 0.13038094341754913, 0.12818633019924164, 0.1272762268781662, 0.12930093705654144, 0.1287728250026703, 0.12646211683750153, 0.12537868320941925, 0.12543946504592896, 0.12410154938697815], "moving_avg_accuracy_train": [0.0652534808739387, 0.1343036521779254, 0.20155879850729047, 0.26497132633697856, 0.3237650319680924, 0.3783255723932378, 0.42872244497695755, 0.4749327436224881, 0.5171170342057911, 0.55578509067124, 0.5913535684996494, 0.6236952615297139, 0.6534536466793449, 0.6808546828973462, 0.705729457086386, 0.728446816841018, 0.749201613314216, 0.7683737535412569, 0.785803065906308, 0.8017384182015669, 0.8162592356768145, 0.8295486442485295, 0.8417138332047673, 0.8529739290105827, 0.8630986425429408, 0.8723690669387482, 0.8809286877342605, 0.8887579405347547, 0.8959274288444667, 0.9025638353232538, 0.9086922419291251, 0.9143076811267625, 0.919454618405836, 0.924247189078403, 0.9286186674527701, 0.9325599734361292, 0.9363070034723151, 0.9397049431906059, 0.942863106384696, 0.945661275431996, 0.948186530923357, 0.9505173895858201, 0.9527826091451413, 0.9548886639663692, 0.9568121232376448, 0.958561837772269, 0.9601806865831742, 0.9617003574332086, 0.9631123832208954, 0.9644366488036139, 0.965595971793546, 0.9667625232737521, 0.9678752346726135, 0.9688510622458653, 0.9697619672915815, 0.9705375319077075, 0.9713471111562595, 0.9721454508954231, 0.9727756010059085, 0.9734288026601164, 0.9740795352643982, 0.9746605082618139, 0.9752926659535358, 0.9758685833225141, 0.9762497251748327, 0.9766322803716813, 0.9770416481666929, 0.9775031211834031, 0.9779022429544131, 0.9782033238280841, 0.978578856213179, 0.9789959625169257, 0.9792434029081364, 0.9795405400709495, 0.9798172280639007, 0.9800615969599378, 0.9801978236092281, 0.9804598644245235, 0.9807120132487748, 0.9810064125548958, 0.9811387663506245, 0.9813765394537034, 0.9816299906785988, 0.9817348638940999, 0.9819107381428406, 0.9820689168202509, 0.9822624309037297, 0.9823204803336594, 0.982481970765825, 0.9825853513297463, 0.9827273301087318, 0.9829178539788572, 0.9830870003131604, 0.9831973432866432, 0.9832130908009099, 0.9833852294875225, 0.9835169028173786, 0.9836935735833059, 0.9838200251893072, 0.9839035686513657, 0.9840508373803137, 0.9841484659554053, 0.9842316813753685, 0.9842950937045629, 0.9843660075472388, 0.9844507563449328, 0.9845781835366669, 0.984690578909237, 0.9847475929659877, 0.9848337107515687, 0.9849159031050294, 0.9849759974279244, 0.9850346605185115, 0.985150236317897, 0.9852914208694776, 0.9853417210063671, 0.985417290161729, 0.9855015423944025, 0.9855657797085797, 0.9856189429937203, 0.9857202323241471, 0.9857555531012839, 0.9857502475662109, 0.9858361894370353, 0.985904128379083, 0.9859512864852501], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.06294915992093371, 0.13066341538027104, 0.19590738540097885, 0.25666656214702555, 0.3124486011036332, 0.36322513712467047, 0.40959437675369437, 0.45212426748570445, 0.4904988253945135, 0.5254662621321705, 0.5575178922254294, 0.5858200433737449, 0.611748787106777, 0.6352809984751656, 0.656485432277875, 0.6757647352003134, 0.6929359438150712, 0.7089109629501303, 0.7233302488087318, 0.7358752124444249, 0.7474861510550276, 0.7580967462281393, 0.76768187346903, 0.7759615435675338, 0.7835872336196659, 0.7904441776146269, 0.7966185157360709, 0.8025600150660783, 0.8079917841731753, 0.8126463837584933, 0.8171173146126891, 0.8209905499718269, 0.8245639700311201, 0.8279052069229629, 0.8308136343669618, 0.8337241878165608, 0.8361839650062902, 0.8384954207270467, 0.8406133814781372, 0.842716917671438, 0.844413758236749, 0.8459225306623211, 0.8472377747722939, 0.8486025409227, 0.849658902511906, 0.8503410732546913, 0.8510129735534692, 0.8516329793795981, 0.8522906998904335, 0.8528429387304564, 0.853599389868706, 0.8540451737734017, 0.8544484383049471, 0.8547493117184283, 0.8553517466516306, 0.8556212653693742, 0.856112090874982, 0.8566403125574386, 0.8569559911567399, 0.8573265806235209, 0.8576458450950543, 0.857885384503094, 0.8579127169582815, 0.8583707393136581, 0.8586588301036779, 0.8589059047834456, 0.8591251834692577, 0.859610502565856, 0.8598377112042253, 0.8601164706749171, 0.8602432248687206, 0.8605139360320744, 0.860539908533912, 0.8608359565077046, 0.8610535715591179, 0.8613938504630706, 0.8614539018343087, 0.8615700127333327, 0.8616368619400445, 0.8615373053111757, 0.8615718336750129, 0.8616262937563068, 0.8615044093919713, 0.8616765046914789, 0.8617347637196955, 0.8619082376489308, 0.8620765712164925, 0.8619309846426595, 0.8621570491584387, 0.8619444386514804, 0.8619616382351275, 0.8621277202700485, 0.8622110114019291, 0.8622371452956218, 0.8623217009561952, 0.8623489729257112, 0.8622504178771161, 0.8623926224184707, 0.8623904471965784, 0.8624617316843755, 0.8624750005810734, 0.8626232789491709, 0.862572594503049, 0.8625238899755603, 0.8625553571056398, 0.8626202986164613, 0.8626675684536104, 0.8627345253695445, 0.8625374094289756, 0.8623945671588944, 0.8623413103206405, 0.8622658765777331, 0.8622621098913454, 0.8621956257000272, 0.8622996288773889, 0.8622182152648759, 0.8620483162722737, 0.8620652761077723, 0.8620795104510613, 0.8620730548408196, 0.861793542560804, 0.8617017024236995, 0.8617289095815555, 0.8617411889923758, 0.8619374049481835, 0.8619044207598411], "moving_var_accuracy_train": [0.03832215089548937, 0.07740127121992962, 0.11037043646799544, 0.1355237309929546, 0.15308165629020176, 0.16456516380453684, 0.17096725032006035, 0.1730890505962364, 0.17179577488476172, 0.16807316471362188, 0.16265189777753017, 0.1558005739722355, 0.148190569955436, 0.14012886403227437, 0.13168476714764846, 0.12316099634087598, 0.11472175089658321, 0.10655771445489277, 0.09863597137507021, 0.09105779331252929, 0.08384970124262145, 0.07705420654003305, 0.07068071228709849, 0.06475374887639389, 0.05920096240576534, 0.054054333081494245, 0.049308303746811534, 0.0449291481668568, 0.040898847413779, 0.037205339690966274, 0.033822822029611635, 0.03072433824309175, 0.027890323088975016, 0.02530800938294146, 0.02294919685324535, 0.02079408220361097, 0.01884103609007859, 0.017060846430032976, 0.015444527739874224, 0.013970542716042216, 0.01263088068210784, 0.01141668873283647, 0.010321200836420208, 0.00932899995496834, 0.008429397219585811, 0.007614011006201308, 0.006876195948834302, 0.006209360949382869, 0.005606369205870417, 0.005061515399285531, 0.004567460127511843, 0.0041229616959643995, 0.003721808666282365, 0.003358197954728594, 0.003029845891276536, 0.0027322748064129636, 0.0024649460928088396, 0.0022241876005801068, 0.0020053426429777984, 0.001808648430289559, 0.0016315946635610818, 0.0014714729638185108, 0.0013279222775614884, 0.0011981151771483572, 0.0010796110814378207, 0.0009729671096017615, 0.0008771786365659197, 0.0007913773890156922, 0.0007136733338069705, 0.0006431218476586876, 0.0005800788840431144, 0.0005236367946564301, 0.00047182415591560977, 0.00042543635476577075, 0.00038358172549818396, 0.00034576099836451874, 0.00031135191782785904, 0.000280834714544999, 0.00025332345435664065, 0.0002287711474839776, 0.0002060516904807737, 0.00018595534586962644, 0.0001679379489932728, 0.00015124313961591149, 0.00013639721141665105, 0.00012298267472087137, 0.00011102143655332599, 9.99496205248299e-05, 9.01893709094763e-05, 8.1266621687499e-05, 7.332138128188905e-05, 6.631593725948799e-05, 5.994183787521335e-05, 5.4057234233865215e-05, 4.86537426683289e-05, 4.405505394835441e-05, 3.98055893456775e-05, 3.610594344690991e-05, 3.263925918016163e-05, 2.943814885262007e-05, 2.6689526674091585e-05, 2.4106356054752098e-05, 2.1758043704353996e-05, 1.9618429445363355e-05, 1.7701845458574537e-05, 1.599630214111227e-05, 1.4542811129740219e-05, 1.3202224494742386e-05, 1.1911257469272722e-05, 1.078687817928584e-05, 9.768990608063943e-06, 8.824593496055424e-06, 7.973106370224889e-06, 7.296015621834712e-06, 6.745811758096247e-06, 6.094001516226496e-06, 5.535997639782733e-06, 5.046283824198755e-06, 4.578793334573335e-06, 4.146351015098424e-06, 3.824051669713354e-06, 3.4528745184199396e-06, 3.107840404899645e-06, 2.8635304108569693e-06, 2.618718668390285e-06, 2.3768617843465757e-06], "duration": 192628.714983, "accuracy_train": [0.6525348087393872, 0.7557551939138059, 0.8068551154715762, 0.8356840768041713, 0.8529083826481173, 0.8693704362195459, 0.8822942982304356, 0.8908254314322629, 0.8967756494555187, 0.9037975988602805, 0.9114698689553341, 0.9147704988002953, 0.9212791130260245, 0.9274640088593578, 0.9296024247877446, 0.9329030546327058, 0.9359947815729974, 0.9409230155846253, 0.9426668771917681, 0.9451565888588963, 0.9469465929540422, 0.9491533213939645, 0.9512005338109081, 0.9543147912629198, 0.9542210643341639, 0.9558028865010151, 0.9579652748938722, 0.9592212157392026, 0.9604528236318751, 0.9622914936323367, 0.9638479013819674, 0.9648466339055003, 0.9657770539174971, 0.9673803251315062, 0.9679619728220746, 0.9680317272863603, 0.9700302737979882, 0.9702864006552234, 0.9712865751315062, 0.9708447968576966, 0.9709138303456073, 0.9714951175479882, 0.973169585179033, 0.9738431573574198, 0.9741232566791252, 0.9743092685838871, 0.9747503258813216, 0.975377395083518, 0.9758206153100776, 0.9763550390480805, 0.9760298787029347, 0.9772614865956073, 0.9778896372623662, 0.9776335104051311, 0.9779601127030271, 0.9775176134528424, 0.9786333243932264, 0.9793305085478959, 0.9784469520002769, 0.9793076175479882, 0.9799361287029347, 0.9798892652385567, 0.980982085179033, 0.9810518396433187, 0.9796800018456996, 0.9800752771433187, 0.9807259583217978, 0.9816563783337948, 0.9814943388935032, 0.9809130516911223, 0.981958647679033, 0.982749919250646, 0.981470366429033, 0.982214774536268, 0.9823074200004615, 0.982260917024271, 0.9814238634528424, 0.9828182317621816, 0.9829813526670359, 0.9836560063099853, 0.9823299505121816, 0.9835164973814139, 0.9839110517026578, 0.9826787228336102, 0.9834936063815062, 0.9834925249169435, 0.9840040576550388, 0.9828429252030271, 0.9839353846553157, 0.9835157764050388, 0.9840051391196014, 0.9846325688099853, 0.98460931732189, 0.9841904300479882, 0.9833548184293098, 0.9849344776670359, 0.9847019627860835, 0.9852836104766519, 0.9849580896433187, 0.984655459809893, 0.9853762559408453, 0.9850271231312293, 0.9849806201550388, 0.9848658046673128, 0.9850042321313216, 0.9852134955241787, 0.9857250282622739, 0.9857021372623662, 0.9852607194767442, 0.9856087708217978, 0.9856556342861758, 0.9855168463339794, 0.9855626283337948, 0.9861904185123662, 0.9865620818337025, 0.9857944222383721, 0.9860974125599853, 0.9862598124884644, 0.9861439155361758, 0.9860974125599853, 0.9866318362979882, 0.986073440095515, 0.9857024977505537, 0.9866096662744556, 0.9865155788575121, 0.986375709440753], "end": "2016-02-05 17:24:00.764000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0], "moving_var_accuracy_valid": [0.03566337061276159, 0.07336401708319701, 0.1043385959914445, 0.1271298344220161, 0.14242157381122297, 0.15138372592276195, 0.15559631078445035, 0.15631580415709578, 0.15393768399365507, 0.149548410282308, 0.14383933217879308, 0.13666450479751263, 0.12904875208192065, 0.12112776162070724, 0.11306163757467785, 0.10510069750778635, 0.09724428140463151, 0.08981666439145791, 0.0827062401943607, 0.07585200118851239, 0.06948012612843381, 0.06354537608493939, 0.05801771045446207, 0.05283291584147636, 0.048072984596269415, 0.043688845265192774, 0.03966306279981474, 0.03601446924842957, 0.032678559364281934, 0.029605691103550526, 0.026825024997522477, 0.024277540067095704, 0.021964710038667564, 0.01986871381050751, 0.017957972981229815, 0.01623841757555359, 0.014669030352406251, 0.013250212765106788, 0.01196556330828455, 0.01080883075810483, 0.009753861093431114, 0.008798962532177504, 0.007934635082579114, 0.007157934854128853, 0.006452184466980314, 0.005811154232583093, 0.0052341018594282635, 0.0047141513385053424, 0.00424662957108817, 0.003824711323607222, 0.003447390156167531, 0.0031044396501579497, 0.0027954592856837776, 0.0025167280804138585, 0.0022683216230111555, 0.002042143223762967, 0.0018400970884792664, 0.0016585985429436955, 0.0014936355654518376, 0.0013455080378826539, 0.0012118746023194404, 0.0010912035542395327, 0.000982089922383539, 0.0008857689904474081, 0.0007979390581323149, 0.0007186945653955244, 0.0006472578571344352, 0.0005846518830506988, 0.0005266513086337753, 0.00047468553935290183, 0.00042736158504843257, 0.00038528498734926886, 0.0003467625597520074, 0.00031287510340188656, 0.0002820137998571123, 0.00025485452746367815, 0.00022940153022199856, 0.00020658271286764804, 0.00018596466092882534, 0.00016745739853710849, 0.00015072238855458114, 0.00013567684280321388, 0.00012224286070731773, 0.00011028512576559974, 9.928716021835841e-05, 8.962928303364148e-05, 8.092138043998989e-05, 7.302000145031472e-05, 6.617794779293375e-05, 5.9966982062662096e-05, 5.39729462874946e-05, 4.882390083965658e-05, 4.400394746954063e-05, 3.96096995461824e-05, 3.5713076529179134e-05, 3.214846271915276e-05, 2.9021034325669943e-05, 2.630093007733997e-05, 2.36708796539185e-05, 2.1349524992330938e-05, 1.9216157065674086e-05, 1.7492419629117534e-05, 1.576629788391394e-05, 1.4211017274503559e-05, 1.2798827169532171e-05, 1.155690105102904e-05, 1.0421320883463019e-05, 9.419537852439428e-06, 8.827276313432796e-06, 8.128183909187312e-06, 7.340892135655803e-06, 6.658015168211438e-06, 5.992341342727388e-06, 5.432888537711852e-06, 4.986949632052718e-06, 4.547908255569169e-06, 4.352908439196953e-06, 3.920206319458493e-06, 3.5300092362724762e-06, 3.17738338677756e-06, 3.562789080215951e-06, 3.2824216692447034e-06, 2.9608415672676232e-06, 2.666114465911717e-06, 2.746009331141942e-06, 2.4812000081532377e-06], "accuracy_test": 0.8538703762755102, "start": "2016-02-03 11:53:32.049000", "learning_rate_per_epoch": [0.006056336686015129, 0.0030281683430075645, 0.002018778817728162, 0.0015140841715037823, 0.0012112673139199615, 0.001009389408864081, 0.000865190930198878, 0.0007570420857518911, 0.0006729263113811612, 0.0006056336569599807, 0.0005505760782398283, 0.0005046947044320405, 0.0004658720572479069, 0.000432595465099439, 0.00040375578100793064, 0.00037852104287594557, 0.00035625509917736053, 0.0003364631556905806, 0.00031875455169938505, 0.00030281682847999036, 0.00028839698643423617, 0.0002752880391199142, 0.0002633189724292606, 0.0002523473522160202, 0.00024225345987360924, 0.00023293602862395346, 0.00022430876560974866, 0.0002162977325497195, 0.00020883919205516577, 0.00020187789050396532, 0.00019536569016054273, 0.00018926052143797278, 0.0001835253497119993, 0.00017812754958868027, 0.0001730381918605417, 0.0001682315778452903, 0.00016368477372452617, 0.00015937727584969252, 0.0001552906760480255, 0.00015140841423999518, 0.00014771553105674684, 0.00014419849321711808, 0.0001408450334565714, 0.0001376440195599571, 0.00013458525063470006, 0.0001316594862146303, 0.00012885822798125446, 0.0001261736761080101, 0.00012359870015643537, 0.00012112672993680462, 0.00011875169730046764, 0.00011646801431197673, 0.0001142705004895106, 0.00011215438280487433, 0.00011011520837200806, 0.00010814886627485976, 0.00010625152208376676, 0.00010441959602758288, 0.00010264977026963606, 0.00010093894525198266, 9.928420331561938e-05, 9.768284508027136e-05, 9.613232396077365e-05, 9.463026071898639e-05, 9.317440708400682e-05, 9.176267485599965e-05, 9.039308497449383e-05, 8.906377479434013e-05, 8.777299080975354e-05, 8.651909593027085e-05, 8.530051854904741e-05, 8.411578892264515e-05, 8.296351734315977e-05, 8.184238686226308e-05, 8.075115329120308e-05, 7.968863792484626e-05, 7.865372026572004e-05, 7.764533802401274e-05, 7.666248711757362e-05, 7.570420711999759e-05, 7.476958853658289e-05, 7.385776552837342e-05, 7.296790863620117e-05, 7.209924660855904e-05, 7.125101546989754e-05, 7.04225167282857e-05, 6.96130664437078e-05, 6.882200977997854e-05, 6.804872828070074e-05, 6.729262531735003e-05, 6.655314791714773e-05, 6.582974310731515e-05, 6.512190157081932e-05, 6.442911399062723e-05, 6.375091470545158e-05, 6.308683805400506e-05, 6.243646203074604e-05, 6.179935007821769e-05, 6.117511657066643e-05, 6.056336496840231e-05, 5.9963727835565805e-05, 5.937584865023382e-05, 5.879938544239849e-05, 5.8234007155988365e-05, 5.7679397286847234e-05, 5.71352502447553e-05, 5.660127499140799e-05, 5.6077191402437165e-05, 5.5562719353474677e-05, 5.505760418600403e-05, 5.456159124150872e-05, 5.407443313742988e-05, 5.359589704312384e-05, 5.312576104188338e-05, 5.2663795941043645e-05, 5.220979801379144e-05, 5.1763559895334765e-05, 5.132488513481803e-05, 5.0893584557343274e-05, 5.046947262599133e-05, 5.005236744182184e-05, 4.964210165780969e-05, 4.923850792692974e-05, 4.884142254013568e-05, 4.845069270231761e-05, 4.8066161980386823e-05], "accuracy_train_first": 0.6525348087393872, "accuracy_train_last": 0.986375709440753, "batch_size_eval": 1024, "accuracy_train_std": [0.018642404625898383, 0.016413060400128465, 0.017753866427069158, 0.016399012491333607, 0.016845396030751168, 0.01632211013989484, 0.014933684425996853, 0.015121564168408146, 0.015896288361609584, 0.014356376306582631, 0.014556720527986233, 0.013919668653903119, 0.014039224857320702, 0.012489994265244232, 0.012080255339341588, 0.011875378762095727, 0.01170624791124574, 0.010553089194099573, 0.010275419821608858, 0.00904199153621616, 0.009295855392131961, 0.010021826092850681, 0.00877654976612127, 0.009734830846027765, 0.009277323642313961, 0.007792247473251199, 0.007776248475021724, 0.008468363078085944, 0.007934890538201527, 0.007630123446360221, 0.0074922275882819385, 0.0077818879449032844, 0.0070881814314643484, 0.007660037181829639, 0.007336717967359287, 0.0074862680348396484, 0.007093165864667121, 0.007402788522327545, 0.006349204235026119, 0.00727128310222103, 0.007506833803550311, 0.006341586893732923, 0.00658070699550586, 0.006500539665058238, 0.006546136643348685, 0.007194641979465741, 0.005999838287430032, 0.006776534224509812, 0.0062856507595973185, 0.00599590035049908, 0.00638021008304142, 0.006272033880896453, 0.006403055058855991, 0.006469840984450351, 0.0063327177934875524, 0.006583828427346814, 0.0061322892910057785, 0.005636668335033876, 0.005730625332290369, 0.005761907858114287, 0.005224301802880434, 0.005352603595211432, 0.0049748378712433095, 0.005205970627341804, 0.005462597250630726, 0.005974003633482168, 0.005966093751485928, 0.004943905890249981, 0.005513968220577918, 0.005556281408501109, 0.0055688862534056145, 0.004947811184874877, 0.005553733457281293, 0.005272395433369002, 0.005245265398283587, 0.005103604958208196, 0.005268399632679058, 0.00502761432861919, 0.004806554118139038, 0.00494098894565189, 0.005623560923955925, 0.004725606984408392, 0.005604767174767427, 0.005059159912877225, 0.004631115126354449, 0.005030855512340638, 0.005120854382922291, 0.004280866136444843, 0.004772854063064154, 0.00441751352199097, 0.0048424866374623945, 0.004487875162714842, 0.004596611948859892, 0.004677354806592834, 0.00471767739793717, 0.0047489338919843, 0.004938962842901531, 0.004397314988378973, 0.004322803720504586, 0.004830288543929434, 0.004433998350360466, 0.004590891585377756, 0.0044363900131565255, 0.004482363313039143, 0.004591770560833609, 0.004026562108600061, 0.0045574481549760515, 0.004586351101685504, 0.004683922151608939, 0.005384728311829909, 0.004392487905053057, 0.005110097339594517, 0.004797949451438289, 0.004788408044313339, 0.005124101160839797, 0.004603235871310172, 0.0047658088709955125, 0.005082287354048412, 0.004607992863453271, 0.00455633322962237, 0.00482123971070682, 0.004359227271174879, 0.004099521947778992, 0.00403357217840582, 0.004657176207378513, 0.004258461545941482], "accuracy_test_std": 0.010190642713125777, "error_valid": [0.3705084007906627, 0.2599082854856928, 0.21689688441265065, 0.1965008471385542, 0.18551304828689763, 0.17978603868599397, 0.1730824665850903, 0.16510671592620485, 0.16413015342620485, 0.15982680722891573, 0.15401743693524095, 0.15946059629141573, 0.15489251929593373, 0.15292909920933728, 0.15267466349774095, 0.15072153849774095, 0.1525231786521084, 0.14731386483433728, 0.1468961784638554, 0.15122011483433728, 0.14801540144954817, 0.1464078972138554, 0.14605198136295183, 0.14952142554593373, 0.1477815559111446, 0.14784332643072284, 0.14781244117093373, 0.1439664909638554, 0.14312229386295183, 0.1454622199736446, 0.14264430769954817, 0.14415033179593373, 0.14327524943524095, 0.14202366105045183, 0.14301051863704817, 0.14008083113704817, 0.1416780402861446, 0.1407014777861446, 0.14032497176204817, 0.1383512565888554, 0.14031467667545183, 0.14049851750753017, 0.14092502823795183, 0.1391145637236446, 0.14083384318524095, 0.14351939006024095, 0.14293992375753017, 0.14278696818524095, 0.14178981551204817, 0.14218691170933728, 0.13959254988704817, 0.14194277108433728, 0.1419221809111446, 0.14254282756024095, 0.13922633894954817, 0.14195306617093373, 0.13947047957454817, 0.13860569230045183, 0.14020290144954817, 0.13933811417545183, 0.1394807746611446, 0.13995876082454817, 0.14184129094503017, 0.13750705948795183, 0.1387483527861446, 0.1388704230986446, 0.13890130835843373, 0.13602162556475905, 0.13811741105045183, 0.1373746940888554, 0.13861598738704817, 0.13704966349774095, 0.13922633894954817, 0.13649961172816272, 0.13698789297816272, 0.1355436394013554, 0.13800563582454817, 0.13738498917545183, 0.13776149519954817, 0.1393587043486446, 0.13811741105045183, 0.13788356551204817, 0.13959254988704817, 0.13677463761295183, 0.1377409050263554, 0.13653049698795183, 0.13640842667545183, 0.13937929452183728, 0.13580837019954817, 0.1399690559111446, 0.13788356551204817, 0.13637754141566272, 0.1370393684111446, 0.1375276496611446, 0.1369172980986446, 0.1374055793486446, 0.13863657756024095, 0.13632753670933728, 0.13762912980045183, 0.13689670792545183, 0.1374055793486446, 0.13604221573795183, 0.13788356551204817, 0.13791445077183728, 0.1371614387236446, 0.1367952277861446, 0.13690700301204817, 0.13666286238704817, 0.1392366340361446, 0.13889101327183728, 0.1381380012236446, 0.13841302710843373, 0.1377717902861446, 0.13840273202183728, 0.1367643425263554, 0.13851450724774095, 0.1394807746611446, 0.13778208537274095, 0.13779238045933728, 0.1379850456513554, 0.14072206795933728, 0.13912485881024095, 0.13802622599774095, 0.13814829631024095, 0.13629665144954817, 0.13839243693524095], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.014205444038633852, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.006056336561195772, "optimization": "nesterov_momentum", "nb_data_augmentation": 2, "learning_rate_decay_method": "lin", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 2.5312921916148865e-08, "rotation_range": [0, 0], "momentum": 0.9406672267040803}, "accuracy_valid_max": 0.8644563605986446, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.861607563064759, "accuracy_valid_std": [0.01608847915588489, 0.014523836638231782, 0.00960687478229086, 0.010432108740763701, 0.013625973085755125, 0.006659626831536854, 0.006543066861622157, 0.006262037706628031, 0.007596280828675824, 0.007579875782695197, 0.011800614697012244, 0.005391190248341096, 0.008428289723612451, 0.009625035289522056, 0.009897373570665715, 0.011598990652418602, 0.007122289910056668, 0.009028425711581963, 0.01356485503423389, 0.008812189618302076, 0.011047786071585389, 0.011150155244944265, 0.010521669779085434, 0.006473810476778266, 0.007856041416638437, 0.006116109771241394, 0.00809830857230867, 0.011543433626142612, 0.010649750570472289, 0.00906990713917475, 0.010076967327092012, 0.007366763826607224, 0.009567011221484506, 0.0098405175395288, 0.009942800979757829, 0.008806303985214016, 0.01030061840408603, 0.0089323931788959, 0.010232223225003969, 0.011059782707031507, 0.009874393384839315, 0.006429709468776387, 0.011150426829932314, 0.008958453698540675, 0.008445601949382044, 0.00986542393074067, 0.010006642166527045, 0.007974851710289851, 0.008608491660173622, 0.009073531983199934, 0.010066691116902777, 0.009344707840859966, 0.010353641151223676, 0.009133968000453619, 0.010286514889630874, 0.008766660866551732, 0.010999057106000429, 0.01121199580260238, 0.011485171709239461, 0.011507472040436728, 0.009266888424936883, 0.009852551332947965, 0.009871974719570508, 0.008653587677178208, 0.00825623766006255, 0.010349556777313643, 0.009248857262441538, 0.011505426484464213, 0.00931568515684655, 0.010047396145800688, 0.009233367194543825, 0.008056479938858713, 0.01029809725889687, 0.010676609971414234, 0.01146168139478696, 0.010641042156642591, 0.009695021084611575, 0.009951040352455904, 0.008223192322135529, 0.009636012385435377, 0.010664112217149992, 0.009789914940567059, 0.008652965258387197, 0.009273257550105716, 0.008629438870977167, 0.008604653442425836, 0.008947562420130256, 0.008149126264387652, 0.0069519130209324915, 0.008154056097119448, 0.005838837431906582, 0.010199373889271115, 0.008960367363721711, 0.00876787533256464, 0.007477543296633495, 0.006581944470455875, 0.006074570424276115, 0.006975484588887612, 0.008267957898304954, 0.008514347319284358, 0.00894642130652281, 0.0096523636970122, 0.008443063478150404, 0.006943716424198407, 0.008868217712044052, 0.008025651737200898, 0.009089568592562889, 0.0088924852703643, 0.008251713456089185, 0.007757896587077043, 0.00851677463800758, 0.008224694806702208, 0.008520936885068851, 0.00820445613482808, 0.009676246661753443, 0.009018977333474898, 0.009432638157405885, 0.0065864780293084955, 0.008227084013787267, 0.009056199155200088, 0.009747365159393307, 0.008540262375351281, 0.008450627843716965, 0.008480180824216256, 0.0091536239487001, 0.0072002733698176904], "accuracy_valid": [0.6294915992093373, 0.7400917145143072, 0.7831031155873494, 0.8034991528614458, 0.8144869517131024, 0.820213961314006, 0.8269175334149097, 0.8348932840737951, 0.8358698465737951, 0.8401731927710843, 0.845982563064759, 0.8405394037085843, 0.8451074807040663, 0.8470709007906627, 0.847325336502259, 0.849278461502259, 0.8474768213478916, 0.8526861351656627, 0.8531038215361446, 0.8487798851656627, 0.8519845985504518, 0.8535921027861446, 0.8539480186370482, 0.8504785744540663, 0.8522184440888554, 0.8521566735692772, 0.8521875588290663, 0.8560335090361446, 0.8568777061370482, 0.8545377800263554, 0.8573556923004518, 0.8558496682040663, 0.856724750564759, 0.8579763389495482, 0.8569894813629518, 0.8599191688629518, 0.8583219597138554, 0.8592985222138554, 0.8596750282379518, 0.8616487434111446, 0.8596853233245482, 0.8595014824924698, 0.8590749717620482, 0.8608854362763554, 0.859166156814759, 0.856480609939759, 0.8570600762424698, 0.857213031814759, 0.8582101844879518, 0.8578130882906627, 0.8604074501129518, 0.8580572289156627, 0.8580778190888554, 0.857457172439759, 0.8607736610504518, 0.8580469338290663, 0.8605295204254518, 0.8613943076995482, 0.8597970985504518, 0.8606618858245482, 0.8605192253388554, 0.8600412391754518, 0.8581587090549698, 0.8624929405120482, 0.8612516472138554, 0.8611295769013554, 0.8610986916415663, 0.863978374435241, 0.8618825889495482, 0.8626253059111446, 0.8613840126129518, 0.862950336502259, 0.8607736610504518, 0.8635003882718373, 0.8630121070218373, 0.8644563605986446, 0.8619943641754518, 0.8626150108245482, 0.8622385048004518, 0.8606412956513554, 0.8618825889495482, 0.8621164344879518, 0.8604074501129518, 0.8632253623870482, 0.8622590949736446, 0.8634695030120482, 0.8635915733245482, 0.8606207054781627, 0.8641916298004518, 0.8600309440888554, 0.8621164344879518, 0.8636224585843373, 0.8629606315888554, 0.8624723503388554, 0.8630827019013554, 0.8625944206513554, 0.861363422439759, 0.8636724632906627, 0.8623708701995482, 0.8631032920745482, 0.8625944206513554, 0.8639577842620482, 0.8621164344879518, 0.8620855492281627, 0.8628385612763554, 0.8632047722138554, 0.8630929969879518, 0.8633371376129518, 0.8607633659638554, 0.8611089867281627, 0.8618619987763554, 0.8615869728915663, 0.8622282097138554, 0.8615972679781627, 0.8632356574736446, 0.861485492752259, 0.8605192253388554, 0.862217914627259, 0.8622076195406627, 0.8620149543486446, 0.8592779320406627, 0.860875141189759, 0.861973774002259, 0.861851703689759, 0.8637033485504518, 0.861607563064759], "seed": 499415291, "model": "residualv4", "loss_std": [0.337932288646698, 0.26820820569992065, 0.24589015543460846, 0.23483270406723022, 0.22434863448143005, 0.21713146567344666, 0.20914635062217712, 0.2043197751045227, 0.1986600160598755, 0.1925973743200302, 0.18915265798568726, 0.180654376745224, 0.17956344783306122, 0.17618460953235626, 0.17087730765342712, 0.17011848092079163, 0.16486439108848572, 0.16034261882305145, 0.15921562910079956, 0.15661023557186127, 0.15354447066783905, 0.15229789912700653, 0.15043114125728607, 0.14496374130249023, 0.14406388998031616, 0.14235150814056396, 0.13892243802547455, 0.13770678639411926, 0.1364172101020813, 0.13674554228782654, 0.1327369660139084, 0.12976181507110596, 0.1293736696243286, 0.12835103273391724, 0.12620550394058228, 0.12573625147342682, 0.1241949275135994, 0.12207735329866409, 0.12215660512447357, 0.1205962598323822, 0.11962740868330002, 0.11788974702358246, 0.11543412506580353, 0.11438748985528946, 0.11410491913557053, 0.11201122403144836, 0.11329842358827591, 0.11080901324748993, 0.10988392680883408, 0.11016736179590225, 0.10926620662212372, 0.10764922946691513, 0.10831288248300552, 0.10729610919952393, 0.1054631918668747, 0.10572731494903564, 0.10517124831676483, 0.10265088826417923, 0.10248952358961105, 0.10099780559539795, 0.10477735102176666, 0.09889132529497147, 0.1004292294383049, 0.10036774724721909, 0.0995350256562233, 0.09985213726758957, 0.09658676385879517, 0.09785288572311401, 0.09662951529026031, 0.09562734514474869, 0.09688475728034973, 0.09484255313873291, 0.09507819265127182, 0.09411021322011948, 0.09391448646783829, 0.091626837849617, 0.09274666011333466, 0.09220252186059952, 0.0936407670378685, 0.09401463717222214, 0.0907977968454361, 0.08843638002872467, 0.09251601248979568, 0.09024471044540405, 0.08872123807668686, 0.09078171849250793, 0.08980028331279755, 0.08703655004501343, 0.08579723536968231, 0.08731315284967422, 0.08716413378715515, 0.08602705597877502, 0.08632449060678482, 0.08609144389629364, 0.08601798862218857, 0.08753422647714615, 0.0848543792963028, 0.08463048934936523, 0.08226321637630463, 0.08518556505441666, 0.0814172551035881, 0.08204322308301926, 0.08266613632440567, 0.08304329216480255, 0.0832061916589737, 0.08286748826503754, 0.08277787268161774, 0.08131923526525497, 0.08184938132762909, 0.08122412860393524, 0.08121629804372787, 0.08257003128528595, 0.0799529179930687, 0.08035287261009216, 0.07827699929475784, 0.07976573705673218, 0.08065450936555862, 0.0804981142282486, 0.07843977212905884, 0.07886557281017303, 0.07853361964225769, 0.07784981280565262, 0.07627090811729431, 0.07741241157054901, 0.07673794776201248, 0.07460115104913712]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:41 2016", "state": "available"}], "summary": "e21648f31677f558a5725e71211afb13"}