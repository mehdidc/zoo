{"content": {"hp_model": {"f0": 32, "f1": 32, "f2": 16, "f3": 16, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.589484691619873, 1.211634635925293, 1.0007843971252441, 0.8845089077949524, 0.8100058436393738, 0.7536054849624634, 0.7124837636947632, 0.6777565479278564, 0.6489083170890808, 0.6227611303329468, 0.6020728945732117, 0.5806334018707275, 0.5652382373809814, 0.5469502806663513, 0.5327005386352539, 0.5191366076469421, 0.5075430274009705, 0.4942113757133484, 0.4858330488204956, 0.47627007961273193, 0.4629201889038086, 0.45859429240226746, 0.4495474696159363, 0.441877543926239, 0.4361589848995209, 0.4272420406341553, 0.4212014079093933, 0.4141984283924103, 0.4091671109199524, 0.40314793586730957, 0.39680367708206177, 0.3915230333805084, 0.388093501329422, 0.38059958815574646, 0.37627896666526794, 0.3740347921848297, 0.3678789734840393, 0.3629913628101349, 0.35882773995399475, 0.35510191321372986, 0.3505363166332245, 0.3482351303100586, 0.34399712085723877, 0.3381129205226898, 0.33588123321533203, 0.3346218168735504, 0.33070725202560425, 0.3264751136302948, 0.3230001926422119, 0.3202393352985382, 0.3181639611721039, 0.31271594762802124, 0.31049805879592896, 0.30748704075813293, 0.3059077560901642, 0.30263713002204895, 0.2971414029598236, 0.29637065529823303, 0.2941836714744568, 0.2906360924243927, 0.2885502278804779, 0.2883215844631195, 0.28445544838905334, 0.2826971709728241, 0.2794448137283325, 0.2765989303588867, 0.276180237531662, 0.2723948657512665, 0.27062028646469116, 0.26809802651405334, 0.26498931646347046, 0.26390060782432556, 0.264352023601532, 0.2588506042957306, 0.2600865066051483, 0.2566450238227844, 0.2553355395793915, 0.2522588074207306, 0.2514108717441559, 0.24997283518314362, 0.24617710709571838, 0.24547559022903442, 0.24525995552539825, 0.24277587234973907, 0.24066349864006042, 0.23832447826862335, 0.23545624315738678, 0.23504382371902466, 0.23333404958248138, 0.23332253098487854, 0.22938770055770874, 0.22977839410305023, 0.2272649109363556, 0.22606614232063293, 0.22257210314273834, 0.2241073101758957, 0.22161346673965454, 0.22013026475906372, 0.21932744979858398, 0.2173178344964981, 0.21537551283836365, 0.2157077193260193, 0.21428754925727844, 0.21320320665836334, 0.2107190191745758, 0.20906810462474823, 0.20718331634998322, 0.20805278420448303, 0.20519496500492096, 0.2038317620754242, 0.20378074049949646, 0.20125696063041687, 0.20270472764968872, 0.2009807825088501, 0.19969993829727173, 0.19921737909317017, 0.19465075433254242, 0.19517983496189117, 0.19551928341388702, 0.1943163424730301, 0.1928316056728363, 0.19044220447540283, 0.19159916043281555, 0.18845134973526, 0.18793529272079468, 0.18794363737106323, 0.18492892384529114, 0.18546360731124878, 0.18574480712413788, 0.18126913905143738, 0.1825195550918579, 0.1813652068376541, 0.18018630146980286, 0.17812952399253845, 0.17705313861370087, 0.17637395858764648, 0.17655304074287415, 0.17635665833950043], "moving_avg_accuracy_train": [0.0515110943844592, 0.10551189683116463, 0.16230453285056753, 0.21729113455005303, 0.26982920268304145, 0.3184942058585819, 0.3622650592725853, 0.4035089248211942, 0.44249302896490533, 0.47832477102273374, 0.5112337892831403, 0.5421701208972313, 0.5706056241498854, 0.5964974491760652, 0.6204904806519618, 0.6418493329016881, 0.6619023780514417, 0.6801245048469343, 0.6967777880854783, 0.7124073759251401, 0.7264180932629509, 0.7399438474979331, 0.7517217870606168, 0.7627333398110427, 0.7732180850911973, 0.782307800524261, 0.7910630003652457, 0.7993378834221135, 0.8066248789542562, 0.8131878973284411, 0.8192365560890447, 0.825493754519915, 0.831134605800574, 0.8365528083399795, 0.8411364742171756, 0.845847602860196, 0.8498225156258099, 0.853739516987509, 0.8577391125213625, 0.8609039096256309, 0.8643613078611113, 0.8677473698813862, 0.8712457603734063, 0.8748661728292827, 0.8775620382717605, 0.8804671896782961, 0.8835398802596544, 0.885905195943545, 0.8883735238828745, 0.8909646816401666, 0.8930037548717296, 0.8948947604003834, 0.8968129402642764, 0.8986857865167801, 0.9005735639928245, 0.9016843371212737, 0.903372132789222, 0.9051562519034799, 0.906394621643226, 0.9080416134863785, 0.9098517160785399, 0.9112623165210273, 0.9126386335204103, 0.9141703236186738, 0.9157115330261401, 0.917247467065488, 0.9183810888759196, 0.9196616930743373, 0.9207629754326474, 0.9221191779182217, 0.9234838112349728, 0.9243075134736478, 0.9254999604063218, 0.9265080224302429, 0.9273501740851053, 0.9282475474054154, 0.9288298242032644, 0.9298396491784252, 0.9312412429595952, 0.9322330682471998, 0.9331955015191483, 0.9339548788139389, 0.934870653016109, 0.9355136323861943, 0.9360712793335291, 0.936731127509903, 0.9372461160532094, 0.9380653174612236, 0.9387699745474656, 0.9392205873155872, 0.939628500004525, 0.9405975826245044, 0.9410651450408101, 0.9418649504714374, 0.9424616866673723, 0.9430800573544096, 0.9437622211060949, 0.9445409656575378, 0.9450908452764923, 0.9456159638680753, 0.9463302779302343, 0.9467965574231098, 0.9474324117571646, 0.9479581416328048, 0.9484335876208717, 0.9490825583911304, 0.9495199674652696, 0.9499091295296507, 0.9504103298161191, 0.9509265142406071, 0.9515236137047893, 0.9517820214142292, 0.9525749131670015, 0.9529979081921249, 0.95330423500165, 0.9538868487730796, 0.9543414467030806, 0.9548155448114731, 0.9550701360483029, 0.9555086397007632, 0.9556708502046625, 0.955974877679582, 0.9562277202629988, 0.9566153894165623, 0.9566506128583964, 0.9569844751548288, 0.9570780129775703, 0.9575180889811699, 0.95777690150701, 0.9580376624683429, 0.9585885675716378, 0.958789052216975, 0.9592066896251685, 0.9597406734115904, 0.9600560651074377, 0.9603377006313469, 0.9606981294481034, 0.9606201564926803], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05125644178275601, 0.10497721844408883, 0.1606717558711408, 0.21398905176369537, 0.2648078258983198, 0.31194250123393963, 0.3541225098643107, 0.39361554408119287, 0.43108210290726034, 0.46577856835072107, 0.4974305743262664, 0.5268095224941669, 0.5540452094578526, 0.5784942335516006, 0.6005929229599947, 0.6204726249222783, 0.6388648449695836, 0.6557861129669778, 0.6706550732064246, 0.6846933756561134, 0.6972138665449448, 0.7093622441035528, 0.7198766268091613, 0.7298482955947361, 0.7388919216546148, 0.746935587875825, 0.7545990450426854, 0.7620719459789289, 0.7682736839864578, 0.773723029866803, 0.778785103056704, 0.7836929138165456, 0.7881842151965628, 0.7922905101208071, 0.795986175552627, 0.7993966941513553, 0.8022464343277107, 0.8051366722955421, 0.8080248252372981, 0.8101582366800593, 0.8124943755497039, 0.815173719527113, 0.8175607150442813, 0.8197903421938442, 0.82135961252077, 0.8230547765510725, 0.8249720786870044, 0.8264891015694334, 0.8280131135698696, 0.8292239739466929, 0.8305355338656532, 0.8317688839523559, 0.8327934498116384, 0.8338223338402637, 0.834874517813165, 0.8352070137916378, 0.836009836979492, 0.8370629972009705, 0.8372112073170934, 0.8379946576038328, 0.8386000475945792, 0.8387908946800008, 0.8393532820568802, 0.8398981108071409, 0.8403741906338063, 0.8409145847763745, 0.8409014807320955, 0.8415132751946539, 0.8417434188724776, 0.8423798532935883, 0.8428661655451783, 0.8429579316619707, 0.8433386374603821, 0.8435867049549312, 0.8437234869726158, 0.8439035079101435, 0.8438091790976683, 0.843942980220281, 0.8443807840431323, 0.8444828682423583, 0.8443529584418423, 0.8444944462949473, 0.8447092935988111, 0.8449372182487191, 0.8448280561471153, 0.8447490767748737, 0.8446047531523562, 0.845064917426729, 0.8447770874404567, 0.8445790756090615, 0.8443042382194657, 0.8444007404611487, 0.8441182930151844, 0.8443575191071147, 0.8441588130360117, 0.8440836638013112, 0.8445237243319481, 0.8445585683426539, 0.8444821236883584, 0.8443309628067214, 0.8442497761175403, 0.8442062697030753, 0.8444611121887166, 0.8442702838199955, 0.8445431389564447, 0.8448232706556797, 0.8445351912840124, 0.8445730066341504, 0.8445805673694552, 0.8447338564062296, 0.8449725613153054, 0.8450765029435641, 0.8454884627301564, 0.8455927308679089, 0.8456590696034071, 0.8456699463403555, 0.8458241607612899, 0.8459161846324501, 0.8458657582814039, 0.846025835079393, 0.8462350573884718, 0.8463937958608445, 0.8465621040571395, 0.8467787346246937, 0.8465168944359441, 0.8463911015473197, 0.8461324330812172, 0.8464398293627039, 0.8463430685179244, 0.8459772810561922, 0.8461760632103622, 0.8462064237567959, 0.8465064209707247, 0.8464549176161221, 0.8467178584128684, 0.8467703701525303, 0.8467067379283165, 0.846222222832774], "moving_var_accuracy_train": [0.02388053560216198, 0.04773726202593874, 0.07199216737763629, 0.09200468793799343, 0.1076464565725129, 0.11819635372193986, 0.12361970682705742, 0.12656724415287726, 0.12758836312057897, 0.1263847504586098, 0.1234933067585228, 0.11975748560630352, 0.11505893765275849, 0.10958652331615942, 0.10380886101917378, 0.09753378004208715, 0.09139952361588098, 0.08524798439885196, 0.07921917254257528, 0.0734958114326571, 0.06791293209227169, 0.06276815313167075, 0.05773981656158373, 0.05305712355120407, 0.04874078014839116, 0.04461030847343874, 0.04083915934439508, 0.03737150661639912, 0.034112258689728406, 0.03108869171237457, 0.02830909899635716, 0.025830561886551022, 0.023533878526430522, 0.021444702942609653, 0.019489322584212643, 0.01774014292361116, 0.016108328014698203, 0.014635581310236363, 0.013315994059122505, 0.012074538119610921, 0.010974666730678161, 0.009980388801656685, 0.009092498545802928, 0.008301215168378622, 0.0075365028658962736, 0.006858811721560712, 0.006257903396083551, 0.005682465521035326, 0.005169052754276466, 0.004712574365557395, 0.004278737305794742, 0.0038830466923998655, 0.00352785674907208, 0.0032066390519345273, 0.0029180484809326196, 0.002637347985325321, 0.002399251074743494, 0.0021879736963938898, 0.001982978363265371, 0.0018090937661215313, 0.0016576726320567212, 0.0015098135113261618, 0.0013758803965386627, 0.001259407027898863, 0.0011548442630479412, 0.0010605916771021973, 0.0009660983950737544, 0.0008842480795834228, 0.0008067386771196057, 0.0007426183760445465, 0.0006851165552427758, 0.0006227112681204838, 0.0005732375084936275, 0.0005250594590409132, 0.00047893648782490873, 0.00043829034892645656, 0.0003975127304576306, 0.0003669391757359944, 0.0003479254443091258, 0.00032198635648839926, 0.00029812422106614123, 0.00027350168384211845, 0.00025369929696215, 0.0002320501694991324, 0.00021164388361006548, 0.00019439809179183502, 0.00017734520141028394, 0.00016565049979128818, 0.0001535543242948788, 0.00014002635866653922, 0.0001275212576560532, 0.0001232212220095631, 0.00011286663132688015, 0.00010733716673594157, 9.98082968501971e-05, 9.326890792445939e-05, 8.813014358903366e-05, 8.477511691774884e-05, 7.901891358404894e-05, 7.35987680426787e-05, 7.083109245299196e-05, 6.570473229697827e-05, 6.277305567450735e-05, 5.8983277226321835e-05, 5.511938949180966e-05, 5.339791808848042e-05, 4.978006656288525e-05, 4.6165083917777196e-05, 4.380939107040265e-05, 4.18264692041197e-05, 4.0852572214847575e-05, 3.736828589204439e-05, 3.928955328736969e-05, 3.697092108014508e-05, 3.411835400023473e-05, 3.376146786014697e-05, 3.22452545757831e-05, 3.104365026563747e-05, 2.8522635519908436e-05, 2.7400941046906173e-05, 2.4897657170392993e-05, 2.3239785802907026e-05, 2.1491171570516466e-05, 2.0694640767086816e-05, 1.863634290806982e-05, 1.7775884914075002e-05, 1.607704034121659e-05, 1.621233830759234e-05, 1.5193959788619131e-05, 1.4286530320354855e-05, 1.5589345183846715e-05, 1.4392157502605668e-05, 1.4522730794849166e-05, 1.563670587281713e-05, 1.4968282581819951e-05, 1.4185321438586644e-05, 1.3935969682263782e-05, 1.2597090750034152e-05], "duration": 75931.850861, "accuracy_train": [0.5151109438445921, 0.5915191188515135, 0.6734382570251938, 0.7121705498454227, 0.7426718158799372, 0.7564792344384459, 0.7562027399986158, 0.7747037147586747, 0.7933499662583056, 0.8008104495431894, 0.8074149536267996, 0.8205971054240495, 0.8265251534237725, 0.8295238744116832, 0.8364277639350315, 0.8340790031492249, 0.8423797843992249, 0.8441236460063677, 0.8466573372323736, 0.8530736664820967, 0.8525145493032484, 0.8616756356127722, 0.8577232431247692, 0.8618373145648762, 0.8675807926125876, 0.8641152394218347, 0.8698597989341085, 0.8738118309339239, 0.87220783874354, 0.8722550626961055, 0.8736744849344776, 0.8818085403977483, 0.8819022673265043, 0.885316631194629, 0.8823894671119417, 0.8882477606473791, 0.8855967305163345, 0.8889925292428018, 0.8937354723260429, 0.8893870835640458, 0.8954778919804356, 0.8982219280638611, 0.9027312748015872, 0.9074498849321706, 0.9018248272540605, 0.9066135523371169, 0.9111940954918788, 0.9071930370985604, 0.9105884753368402, 0.9142851014557956, 0.9113554139557956, 0.9119138101582688, 0.9140765590393135, 0.9155414027893135, 0.9175635612772242, 0.9116812952773165, 0.9185622938007567, 0.9212133239318014, 0.9175399493009413, 0.9228645400747508, 0.9261426394079919, 0.9239577205034146, 0.9250254865148578, 0.9279555345030455, 0.929582417693337, 0.9310708734196198, 0.9285836851698044, 0.931187130860096, 0.9306745166574382, 0.9343250002883905, 0.9357655110857327, 0.9317208336217239, 0.9362319828003876, 0.9355805806455334, 0.9349295389788667, 0.9363239072882059, 0.9340703153839055, 0.9389280739548725, 0.9438555869901256, 0.9411594958356404, 0.941857400966685, 0.9407892744670543, 0.9431126208356404, 0.9413004467169619, 0.9410901018595422, 0.9426697610972684, 0.9418810129429678, 0.9454381301333518, 0.9451118883236435, 0.9432761022286821, 0.9432997142049648, 0.949319326204319, 0.94527320678756, 0.9490631993470838, 0.9478323124307864, 0.9486453935377446, 0.9499016948712625, 0.9515496666205242, 0.9500397618470838, 0.950342031192322, 0.952759104489664, 0.9509930728589886, 0.9531551007636582, 0.9526897105135659, 0.9527126015134736, 0.9549232953234589, 0.9534566491325213, 0.9534115881090809, 0.9549211323943337, 0.9555721740610004, 0.956897508882429, 0.9541076907991879, 0.9597109389419527, 0.9568048634182356, 0.9560611762873754, 0.9591303727159468, 0.9584328280730897, 0.9590824277870063, 0.9573614571797711, 0.9594551725729051, 0.9571307447397563, 0.9587111249538575, 0.9585033035137505, 0.9601044117986341, 0.9569676238349022, 0.9599892358227206, 0.9579198533822444, 0.9614787730135659, 0.9601062142395718, 0.9603845111203396, 0.963546713501292, 0.9605934140250092, 0.962965426298911, 0.9645465274893872, 0.9628945903700628, 0.9628724203465301, 0.963941988798911, 0.9599183998938722], "end": "2016-02-02 11:16:40.118000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0], "moving_var_accuracy_valid": [0.023645005418061513, 0.04725380148212657, 0.07044535482683353, 0.08898542571579815, 0.1033298133851321, 0.11299193061756749, 0.11770511570833436, 0.11997190190240337, 0.1206083989845676, 0.11938216151453421, 0.11646059070356442, 0.11258263499227761, 0.10800041529250477, 0.10258016677548427, 0.0967173187600539, 0.09060240983503155, 0.08458663267594489, 0.07870493320410708, 0.07282421369111663, 0.06731545774302544, 0.061994776197598696, 0.057123546273597225, 0.052406161839357514, 0.04806045326074463, 0.04399049248546844, 0.04017374833342574, 0.036684930681817884, 0.03351903584926228, 0.030513286253162297, 0.027729215962558784, 0.025186915631122138, 0.022885003526099682, 0.020778049266265006, 0.01885199926168238, 0.01708972082236968, 0.015485433474143155, 0.014009979298383449, 0.012684162648141348, 0.011490819230061981, 0.010382700306512721, 0.009393548179225832, 0.008518803318646755, 0.007718202715172909, 0.006991123578690228, 0.006314174705051934, 0.005708619464353424, 0.005170841945242123, 0.004674469976550232, 0.00422792649209247, 0.0038183294885526685, 0.003451978244486608, 0.003120470791965275, 0.0028178713295688123, 0.0025456116177111736, 0.0023010142759555307, 0.002071907830541282, 0.0018705177731257626, 0.0016934483138821284, 0.0015243011786406058, 0.0013773952099426744, 0.0012429541623164683, 0.0011189865495749467, 0.001009934410672512, 0.0009116125149092573, 0.0008224911314305516, 0.0007428702507513943, 0.0006685847711200432, 0.0006050949261877944, 0.0005450621285809952, 0.0004942013546742659, 0.00044690971566125774, 0.00040229453327685235, 0.00036336951209366337, 0.00032758639822096406, 0.0002949961422821245, 0.0002657881958954468, 0.00023928945762966895, 0.00021552163653041379, 0.00019569452256310225, 0.0001762188609603764, 0.0001587488638707696, 0.0001430541467968788, 0.0001291641663929884, 0.00011671529656801092, 0.00010515101419104894, 9.469205244310122e-05, 8.541031097094023e-05, 7.87750403085277e-05, 7.16431511866525e-05, 6.483171423633907e-05, 5.902836312918426e-05, 5.320934096011434e-05, 4.8606395901688516e-05, 4.426081841906212e-05, 4.019009350139478e-05, 3.622191081854003e-05, 3.434259917230634e-05, 3.09192662008143e-05, 2.7879933647266106e-05, 2.5297586791775104e-05, 2.2827149619099394e-05, 2.056146993008575e-05, 1.9089825169467525e-05, 1.750858184929941e-05, 1.6427772993750095e-05, 1.5491259614621902e-05, 1.468904117258214e-05, 1.3233007061678404e-05, 1.1910220837975713e-05, 1.0930676513335049e-05, 1.0350429164553676e-05, 9.412621006863782e-06, 9.998756698100612e-06, 9.096727629243783e-06, 8.226662316766996e-06, 7.405060815750109e-06, 6.878593522792091e-06, 6.266949706282613e-06, 5.663140087572878e-06, 5.32744731010566e-06, 5.1886683506413595e-06, 4.896582639078189e-06, 4.6618732156312625e-06, 4.618045119257514e-06, 4.773283167331043e-06, 4.438369508054482e-06, 4.596716935451191e-06, 4.98747750675276e-06, 4.57299370581932e-06, 5.319898539681776e-06, 5.143537789061562e-06, 4.63747987517316e-06, 4.983716842941433e-06, 4.509218518465171e-06, 4.680537429960443e-06, 4.237301032185324e-06, 3.850012468592436e-06, 5.577805122010154e-06], "accuracy_test": 0.6577826052295919, "start": "2016-02-01 14:11:08.267000", "learning_rate_per_epoch": [0.0012954851845279336, 0.0009160463814623654, 0.0007479487103410065, 0.0006477425922639668, 0.0005793586024083197, 0.0005288796382956207, 0.0004896473838016391, 0.0004580231907311827, 0.00043182840454392135, 0.00040966839878819883, 0.0003906034689862281, 0.00037397435517050326, 0.00035930293961428106, 0.0003462329914327711, 0.00033449282636865973, 0.0003238712961319834, 0.00031420131563208997, 0.0003053487744182348, 0.0002972046786453575, 0.00028967930120415986, 0.0002826980489771813, 0.00027619837783277035, 0.00027012734790332615, 0.00026443981914781034, 0.00025909702526405454, 0.0002540655550546944, 0.0002493162464816123, 0.00024482369190081954, 0.00024056555412244052, 0.0002365221589570865, 0.000232676015002653, 0.00022901159536559135, 0.0002255150320706889, 0.00022217388323042542, 0.00021897695842199028, 0.00021591420227196068, 0.00021297644707374275, 0.000210155441891402, 0.00020744364883285016, 0.00020483419939409941, 0.0002023207925958559, 0.00019989770953543484, 0.0001975596387637779, 0.00019530173449311405, 0.00019311952928546816, 0.00019100887584500015, 0.00018896593246608973, 0.00018698717758525163, 0.00018506930791772902, 0.00018320926756132394, 0.00018140420434065163, 0.00017965146980714053, 0.00017794857558328658, 0.00017629320791456848, 0.00017468318401370198, 0.00017311649571638554, 0.00017159120761789382, 0.00017010554438456893, 0.00016865780344232917, 0.00016724641318432987, 0.0001658698747633025, 0.00016452677664346993, 0.00016321579460054636, 0.0001619356480659917, 0.00016068515833467245, 0.00015946320490911603, 0.00015826871094759554, 0.00015710065781604499, 0.0001559580850880593, 0.00015484009054489434, 0.00015374580107163638, 0.0001526743872091174, 0.00015162507770583034, 0.00015059710131026804, 0.00014958974497858435, 0.00014860233932267874, 0.00014763424405828118, 0.00014668481890112162, 0.00014575346722267568, 0.00014483965060207993, 0.00014394280151464045, 0.00014306241064332426, 0.00014219796867109835, 0.00014134902448859066, 0.00014051509788259864, 0.00013969576684758067, 0.0001388905948260799, 0.00013809918891638517, 0.0001373211562167853, 0.0001365561329293996, 0.00013580374070443213, 0.00013506367395166308, 0.0001343355543212965, 0.00013361909077502787, 0.00013291397772263736, 0.00013221990957390517, 0.00013153659529052675, 0.00013086377293802798, 0.00013020116603001952, 0.00012954851263202727, 0.0001289055944653228, 0.00012827214959543198, 0.0001276479451917112, 0.0001270327775273472, 0.0001264264137716964, 0.00012582865019794554, 0.00012523928307928145, 0.00012465812324080616, 0.0001240849815076217, 0.0001235196687048301, 0.00012296201020944864, 0.00012241184595040977, 0.00012186899402877316, 0.0001213333016494289, 0.00012080461601726711, 0.00012028277706122026, 0.00011976764653809369, 0.00011925907892873511, 0.00011875693598994985, 0.00011826107947854325, 0.00011777137842727825, 0.00011728771642083302, 0.00011680996249197051, 0.0001163380075013265, 0.00011587172048166394, 0.00011541099229361862, 0.00011495572107378393, 0.00011450579768279567, 0.00011406111298128963, 0.00011362156510585919, 0.000113187066745013, 0.00011275751603534445, 0.00011233281111344695, 0.00011191287194378674, 0.00011149761121487245, 0.00011108694161521271, 0.00011068076855735853, 0.00011027901928173378], "accuracy_train_first": 0.5151109438445921, "accuracy_train_last": 0.9599183998938722, "batch_size_eval": 1024, "accuracy_train_std": [0.01652809490658587, 0.012723483103112955, 0.01724471814839737, 0.016474061148085715, 0.017374441501042826, 0.01655243771621491, 0.014769387643991876, 0.0159406209368209, 0.016466874989897927, 0.016064257282334446, 0.0169034328513361, 0.017037951340585892, 0.01622753491912842, 0.015226560768307308, 0.015298515112175446, 0.01576980712743514, 0.016280827826911485, 0.01428195581697308, 0.015991873834573997, 0.016001243180956866, 0.015707413118935327, 0.014762241937275053, 0.015604073238470996, 0.014886115719702794, 0.01412359207085656, 0.013973915642209725, 0.013695217641757018, 0.01271159281173628, 0.014738675060695086, 0.01302845857578748, 0.012418285829027643, 0.013697836633885522, 0.012737535890403117, 0.013546058225007625, 0.014509484117487861, 0.01300800867469686, 0.01444542312031782, 0.013396794349599079, 0.012995914447300666, 0.014090921752685741, 0.012867515333411288, 0.014013925466169542, 0.014826008113979312, 0.013124235420783477, 0.013751345375282737, 0.014044938768289873, 0.012773483474181273, 0.014201336843573154, 0.013642756608085024, 0.01328371923983676, 0.01361916748206303, 0.0141406266657145, 0.012763497640154971, 0.01366285041752433, 0.013555597685373223, 0.012909716499469526, 0.012046122306487213, 0.01291771068571704, 0.013590760048236969, 0.013062142135029084, 0.012754247300628414, 0.012220675558435489, 0.01263615012457484, 0.012073106246156418, 0.011672501721093282, 0.011094589394488754, 0.011779469002672613, 0.01158344199274951, 0.011745736440126223, 0.01100802866773806, 0.010997399673250419, 0.011764880758820916, 0.010780301433143883, 0.010563510287526867, 0.011386197141836205, 0.009932346364443439, 0.010333002758577172, 0.010067565236351194, 0.010761007753722292, 0.010271297639591411, 0.010608877869549631, 0.010229465324672117, 0.010935621325368898, 0.008953523411617596, 0.010640467117689014, 0.010791455027119935, 0.010880042291900548, 0.009857837763745872, 0.009935418835692758, 0.009192168869101586, 0.009743240863190417, 0.010106329040214173, 0.010478915240191851, 0.009834523060281231, 0.009166494844454713, 0.00935969970372396, 0.01017060909984629, 0.009119613481578158, 0.0090848713086836, 0.011112039971928117, 0.009802239340655251, 0.009852305187943406, 0.010234443271755198, 0.009924112650388518, 0.009472871127114976, 0.009421755669912222, 0.009789550862667567, 0.008635811313482265, 0.009314498441591584, 0.009409496170367206, 0.009275786124462088, 0.009129834170751942, 0.008722640582557496, 0.009673443848172604, 0.008839424680881537, 0.00874047206404593, 0.008521511450207757, 0.009058400514631753, 0.009456719692835151, 0.007995299733734895, 0.008574740745117038, 0.008689988170076686, 0.008879208982724294, 0.009108273946489448, 0.008940395968827876, 0.008958781187331046, 0.00899869107262481, 0.008830825897728852, 0.008608424443004454, 0.007927602995632181, 0.007989858960285342, 0.008189203659729258, 0.007805436758121795, 0.007293352334114781, 0.008733972099191302, 0.007831910646459382, 0.00782514391720455, 0.008794783109188452], "accuracy_test_std": 0.014133138084084673, "error_valid": [0.48743558217243976, 0.41153579160391573, 0.3380774072853916, 0.30615528520331325, 0.27782320689006024, 0.2638454207454819, 0.26625741246234935, 0.25094714796686746, 0.23171886765813254, 0.22195324265813254, 0.21770137189382532, 0.20877994399472888, 0.20083360786897586, 0.20146454960466864, 0.20051887236445776, 0.20061005741716864, 0.19560517460466864, 0.19192247505647586, 0.1955242846385542, 0.18896190229668675, 0.1901017154555723, 0.18130235786897586, 0.18549392884036142, 0.1804066853350903, 0.17971544380647586, 0.1806714161332832, 0.1764298404555723, 0.17067194559487953, 0.1759106739457832, 0.1772328572100903, 0.17565623823418675, 0.17213678934487953, 0.1713940723832832, 0.17075283556099397, 0.17075283556099397, 0.1699086384600903, 0.1721059040850903, 0.16885118599397586, 0.16598179828689763, 0.1706410603350903, 0.16648037462349397, 0.16071218467620485, 0.16095632530120485, 0.1601430134600903, 0.16451695453689763, 0.16168874717620485, 0.1577722020896084, 0.15985769248870485, 0.15827077842620485, 0.15987828266189763, 0.15766042686370485, 0.1571309652673193, 0.1579854574548193, 0.1569177099021084, 0.15565582643072284, 0.1618005224021084, 0.1567647543298193, 0.15345856080572284, 0.16145490163780118, 0.15495428981551207, 0.15595144248870485, 0.15949148155120485, 0.15558523155120485, 0.15519843044051207, 0.15534109092620485, 0.15422186794051207, 0.15921645566641573, 0.1529805746423193, 0.1561852880271084, 0.15189223691641573, 0.15275702419051207, 0.15621617328689763, 0.15323501035391573, 0.1541806875941265, 0.15504547486822284, 0.1544763036521084, 0.1570397802146084, 0.15485280967620485, 0.15167898155120485, 0.1545983739646084, 0.15681622976280118, 0.1542321630271084, 0.15335708066641573, 0.1530114599021084, 0.1561544027673193, 0.15596173757530118, 0.15669415945030118, 0.15079360410391573, 0.15781338243599397, 0.15720303087349397, 0.15816929828689763, 0.15473073936370485, 0.15842373399849397, 0.15348944606551207, 0.15762954160391573, 0.15659267931099397, 0.1515157308923193, 0.15512783556099397, 0.15620587820030118, 0.15702948512801207, 0.1564809040850903, 0.1561852880271084, 0.15324530544051207, 0.15744717149849397, 0.15300116481551207, 0.15265554405120485, 0.15805752306099397, 0.1550866552146084, 0.15535138601280118, 0.15388654226280118, 0.15287909450301207, 0.1539880224021084, 0.15080389919051207, 0.1534688558923193, 0.1537438817771084, 0.1542321630271084, 0.15278790945030118, 0.1532556005271084, 0.15458807887801207, 0.15253347373870485, 0.1518819418298193, 0.15217755788780118, 0.15192312217620485, 0.1512715902673193, 0.15583966726280118, 0.15474103445030118, 0.15619558311370485, 0.15079360410391573, 0.1545277790850903, 0.15731480609939763, 0.1520348974021084, 0.15352033132530118, 0.15079360410391573, 0.15400861257530118, 0.15091567441641573, 0.15275702419051207, 0.1538659520896084, 0.1581384130271084], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.04755098540985379, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "valid_ratio": 0.15, "learning_rate": 0.001295485188089716, "optimization": "adam", "nb_data_augmentation": 3, "learning_rate_decay_method": "sqrt", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 5.115718994531917e-07, "rotation_range": [0, 0], "momentum": 0.7381961070165229}, "accuracy_valid_max": 0.8492063958960843, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8418615869728916, "accuracy_valid_std": [0.014508714144145627, 0.010835604568776, 0.012960666072212685, 0.016889152557175338, 0.009845918639243062, 0.010982359005546722, 0.015095065826408845, 0.012577573195203516, 0.008810013104339095, 0.0068699649355486656, 0.01041617492467151, 0.012259727492946746, 0.014290988185222793, 0.012237671003261449, 0.012376009527474908, 0.013198747438636641, 0.011097280348839085, 0.013262602246228654, 0.010755456117108042, 0.00993838116154277, 0.010861208618216182, 0.012469739981989032, 0.014558726071123981, 0.012604643907171677, 0.014215823160947352, 0.011809963899431331, 0.011082695730122882, 0.012776509491640504, 0.011583002444068513, 0.010163715006601945, 0.009819025739357553, 0.009511562591392717, 0.012222391476981644, 0.008173963616562932, 0.007630898528825967, 0.00864496368961472, 0.007940494352512305, 0.011530154813815809, 0.009267087643063209, 0.009268271426243044, 0.010819105135637754, 0.009186511890945158, 0.010479033836287318, 0.009320656475695688, 0.009092874691611684, 0.004565142175595941, 0.009338835753802524, 0.0077878662224916215, 0.00894169828028134, 0.009817007672105863, 0.008452134811721908, 0.00828593445378932, 0.009827560595263492, 0.007111997989301784, 0.0095037550857235, 0.01080636745224923, 0.008047179247492207, 0.008121240734535913, 0.011180712741134566, 0.008394073796096234, 0.010202683320084591, 0.009333818615410786, 0.006433934099127141, 0.009147115716466933, 0.010148898459655784, 0.009806090579826232, 0.009583661954000261, 0.010350972851036143, 0.00892369843539988, 0.010189664588844747, 0.0064111927144489865, 0.008292608361421967, 0.007540979369026852, 0.006852703569245426, 0.009105241886988436, 0.009364627909780683, 0.009885782067063763, 0.011506158914812705, 0.01129231244172765, 0.009148969469235595, 0.009990168770873288, 0.009898295903425622, 0.009543865071512059, 0.00961839176742637, 0.010221115490578771, 0.009368160767492736, 0.009906496416708594, 0.009170954728636079, 0.010909373204709394, 0.01339995965824561, 0.01026535589429421, 0.012451629362301769, 0.010930474945045395, 0.008309550815429676, 0.009514087431457817, 0.009617302697707575, 0.00889977605164797, 0.011515081478040758, 0.012576846404915487, 0.010060559418334938, 0.013945726332223341, 0.010230657093834312, 0.010627353076514644, 0.011999434818511517, 0.009938697503212988, 0.010464358138506326, 0.011333289356852579, 0.006692189473701898, 0.010001591716028461, 0.011204131872773188, 0.007523563701637296, 0.008904403985335667, 0.010843485517414686, 0.010594469585428045, 0.007699951733049526, 0.010288054962048172, 0.01058768550912838, 0.010047353519610969, 0.007540582375251498, 0.009200503799692106, 0.009078555848029654, 0.009721448353834702, 0.010136437184745729, 0.007312300153510076, 0.008724325610007945, 0.00914664997297333, 0.009199489052857281, 0.007685861033679206, 0.010386800926434387, 0.009084924151966168, 0.007201104857754531, 0.00734370329174443, 0.00771681909773914, 0.008657592084011225, 0.008840354671347661, 0.010059069239019955, 0.00797381268750611, 0.009329401496511597], "accuracy_valid": [0.5125644178275602, 0.5884642083960843, 0.6619225927146084, 0.6938447147966867, 0.7221767931099398, 0.7361545792545181, 0.7337425875376506, 0.7490528520331325, 0.7682811323418675, 0.7780467573418675, 0.7822986281061747, 0.7912200560052711, 0.7991663921310241, 0.7985354503953314, 0.7994811276355422, 0.7993899425828314, 0.8043948253953314, 0.8080775249435241, 0.8044757153614458, 0.8110380977033133, 0.8098982845444277, 0.8186976421310241, 0.8145060711596386, 0.8195933146649097, 0.8202845561935241, 0.8193285838667168, 0.8235701595444277, 0.8293280544051205, 0.8240893260542168, 0.8227671427899097, 0.8243437617658133, 0.8278632106551205, 0.8286059276167168, 0.829247164439006, 0.829247164439006, 0.8300913615399097, 0.8278940959149097, 0.8311488140060241, 0.8340182017131024, 0.8293589396649097, 0.833519625376506, 0.8392878153237951, 0.8390436746987951, 0.8398569865399097, 0.8354830454631024, 0.8383112528237951, 0.8422277979103916, 0.8401423075112951, 0.8417292215737951, 0.8401217173381024, 0.8423395731362951, 0.8428690347326807, 0.8420145425451807, 0.8430822900978916, 0.8443441735692772, 0.8381994775978916, 0.8432352456701807, 0.8465414391942772, 0.8385450983621988, 0.8450457101844879, 0.8440485575112951, 0.8405085184487951, 0.8444147684487951, 0.8448015695594879, 0.8446589090737951, 0.8457781320594879, 0.8407835443335843, 0.8470194253576807, 0.8438147119728916, 0.8481077630835843, 0.8472429758094879, 0.8437838267131024, 0.8467649896460843, 0.8458193124058735, 0.8449545251317772, 0.8455236963478916, 0.8429602197853916, 0.8451471903237951, 0.8483210184487951, 0.8454016260353916, 0.8431837702371988, 0.8457678369728916, 0.8466429193335843, 0.8469885400978916, 0.8438455972326807, 0.8440382624246988, 0.8433058405496988, 0.8492063958960843, 0.842186617564006, 0.842796969126506, 0.8418307017131024, 0.8452692606362951, 0.841576266001506, 0.8465105539344879, 0.8423704583960843, 0.843407320689006, 0.8484842691076807, 0.844872164439006, 0.8437941217996988, 0.8429705148719879, 0.8435190959149097, 0.8438147119728916, 0.8467546945594879, 0.842552828501506, 0.8469988351844879, 0.8473444559487951, 0.841942476939006, 0.8449133447853916, 0.8446486139871988, 0.8461134577371988, 0.8471209054969879, 0.8460119775978916, 0.8491961008094879, 0.8465311441076807, 0.8462561182228916, 0.8457678369728916, 0.8472120905496988, 0.8467443994728916, 0.8454119211219879, 0.8474665262612951, 0.8481180581701807, 0.8478224421121988, 0.8480768778237951, 0.8487284097326807, 0.8441603327371988, 0.8452589655496988, 0.8438044168862951, 0.8492063958960843, 0.8454722209149097, 0.8426851939006024, 0.8479651025978916, 0.8464796686746988, 0.8492063958960843, 0.8459913874246988, 0.8490843255835843, 0.8472429758094879, 0.8461340479103916, 0.8418615869728916], "seed": 197240113, "model": "residualv3", "loss_std": [0.2752942442893982, 0.1485799252986908, 0.13622207939624786, 0.12841449677944183, 0.12469556927680969, 0.12169535458087921, 0.11941516399383545, 0.11948360502719879, 0.11847393214702606, 0.11564026772975922, 0.11427419632673264, 0.11361093819141388, 0.11428451538085938, 0.10901439189910889, 0.11112017929553986, 0.10781026631593704, 0.10796693712472916, 0.10738909989595413, 0.10533634573221207, 0.1052887961268425, 0.10330091416835785, 0.1040356457233429, 0.10109271109104156, 0.10030364990234375, 0.10052982717752457, 0.09882041066884995, 0.09801182895898819, 0.09613935649394989, 0.0989149734377861, 0.09520798176527023, 0.09543202072381973, 0.09627324342727661, 0.09394688159227371, 0.09172901511192322, 0.09190225601196289, 0.09254802018404007, 0.0905221551656723, 0.0892731174826622, 0.08973562717437744, 0.08859267830848694, 0.0856063961982727, 0.08648061007261276, 0.08725552260875702, 0.08703909814357758, 0.08673028647899628, 0.08404596149921417, 0.08565317839384079, 0.08324617892503738, 0.08298380672931671, 0.08352278172969818, 0.08414654433727264, 0.08216267824172974, 0.08273003995418549, 0.07912524789571762, 0.08134106546640396, 0.07977307587862015, 0.07912612706422806, 0.07916830480098724, 0.07918989658355713, 0.07846725732088089, 0.07778441160917282, 0.0780164822936058, 0.07674319297075272, 0.07587418705224991, 0.07533633708953857, 0.07478936016559601, 0.07393529266119003, 0.07333521544933319, 0.07475711405277252, 0.07343872636556625, 0.07335580140352249, 0.0725574940443039, 0.07405474036931992, 0.07193531095981598, 0.07247395813465118, 0.07050156593322754, 0.07266601175069809, 0.07127275317907333, 0.07177527248859406, 0.07049126923084259, 0.06875595450401306, 0.07101476937532425, 0.06925893574953079, 0.06950487196445465, 0.0678834468126297, 0.06651239842176437, 0.06855487823486328, 0.06949151307344437, 0.0679507851600647, 0.06852785497903824, 0.06583357602357864, 0.0657200962305069, 0.06392194330692291, 0.06529668718576431, 0.06491349637508392, 0.06672631204128265, 0.06337670981884003, 0.06243983656167984, 0.06346338242292404, 0.06430800259113312, 0.06204148009419441, 0.06349564343690872, 0.06141579896211624, 0.06281407922506332, 0.06188249588012695, 0.06259001791477203, 0.062273576855659485, 0.06070958450436592, 0.06035197153687477, 0.061690881848335266, 0.060696572065353394, 0.05812082067131996, 0.06127351149916649, 0.06028629094362259, 0.06066041812300682, 0.061098918318748474, 0.059076178818941116, 0.058864351361989975, 0.059905651956796646, 0.059063203632831573, 0.05784497782588005, 0.05588962137699127, 0.0585428886115551, 0.05736925080418587, 0.05542831867933273, 0.05713606998324394, 0.05645362287759781, 0.055449869483709335, 0.058055948466062546, 0.05436566844582558, 0.05553872510790825, 0.0561753585934639, 0.0548483207821846, 0.05612029507756233, 0.05464591830968857, 0.054912250488996506, 0.05449388176202774, 0.05443407967686653]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:31 2016", "state": "available"}], "summary": "da293f0e494843803b1e6a8222670d48"}