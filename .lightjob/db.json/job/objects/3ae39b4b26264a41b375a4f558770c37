{"content": {"hp_model": {"f0": 16, "f1": 16, "f2": 32, "f3": 32, "nonlin": "leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [2.191494941711426, 1.8229798078536987, 1.7457056045532227, 1.683292031288147, 1.6367473602294922, 1.6013033390045166, 1.5700809955596924, 1.5408066511154175, 1.512467384338379, 1.4850050210952759, 1.4584780931472778, 1.433327078819275, 1.409529447555542, 1.3871058225631714, 1.3659107685089111, 1.3460443019866943, 1.3274060487747192, 1.3098008632659912, 1.2931400537490845, 1.2774420976638794, 1.2625846862792969, 1.2483938932418823, 1.2347232103347778, 1.221553087234497, 1.2087867259979248, 1.1964432001113892, 1.1844290494918823, 1.1727745532989502, 1.161364197731018, 1.1502559185028076, 1.1393834352493286, 1.128781795501709, 1.1184391975402832, 1.1084115505218506, 1.098630666732788, 1.089022159576416, 1.0796459913253784, 1.070499062538147, 1.0614148378372192, 1.0525538921356201, 1.0438674688339233, 1.0353490114212036, 1.0270230770111084, 1.018843173980713, 1.010837435722351, 1.002933144569397, 0.9951910376548767, 0.9875661134719849, 0.9800722002983093, 0.9726956486701965, 0.9653995037078857, 0.9581488370895386, 0.9510384798049927, 0.9440517425537109, 0.9371173977851868, 0.9302539825439453, 0.9234657287597656, 0.9167487025260925, 0.9101218581199646, 0.9035720825195312, 0.8970956206321716, 0.8906714916229248, 0.8842535614967346, 0.8778541684150696, 0.8715463876724243, 0.8652152419090271, 0.8589572906494141, 0.8527263402938843, 0.8465222716331482, 0.8403749465942383, 0.834252119064331, 0.8281233310699463, 0.8219926357269287, 0.8158825039863586, 0.8097867965698242, 0.8036873936653137, 0.7976072430610657, 0.7915303707122803, 0.7854526042938232, 0.7793565988540649, 0.7732884883880615, 0.767153263092041, 0.7610541582107544, 0.7549410462379456, 0.74881911277771, 0.742721438407898, 0.7365012168884277, 0.730361819267273, 0.7241228222846985, 0.7179548740386963, 0.7117125988006592, 0.705440878868103, 0.699145495891571, 0.6927709579467773, 0.6864618062973022, 0.6800389885902405, 0.6736875772476196, 0.6673182249069214, 0.6609150171279907, 0.65450119972229, 0.6480442881584167, 0.6415812373161316, 0.6350672245025635, 0.6285555958747864, 0.6219251155853271, 0.6152924299240112, 0.6085906624794006, 0.6018960475921631, 0.5950680375099182, 0.5882853865623474, 0.5814913511276245, 0.5746505260467529, 0.5677869915962219, 0.5608395934104919, 0.5539495944976807, 0.5469674468040466, 0.5399531722068787, 0.5328862071037292, 0.5257765054702759, 0.5185883045196533, 0.5114362239837646, 0.5042136311531067, 0.4969942271709442, 0.4896745979785919, 0.4824085533618927, 0.47514158487319946, 0.4678252637386322, 0.46056270599365234, 0.45321449637413025, 0.44586941599845886, 0.43843287229537964, 0.4309922456741333, 0.42350825667381287, 0.41610217094421387, 0.40870165824890137, 0.40121397376060486, 0.39378637075424194, 0.38632625341415405, 0.378856360912323, 0.3713364601135254, 0.3637612760066986, 0.35623958706855774, 0.34875234961509705, 0.34126996994018555, 0.3338044583797455, 0.3263707756996155, 0.31884509325027466, 0.3113591969013214, 0.3038921356201172, 0.2964871823787689, 0.2889384627342224, 0.2814801037311554, 0.27405840158462524, 0.2666052281856537], "moving_avg_accuracy_train": [0.031071738591269837, 0.06383454529461978, 0.09626213222995107, 0.12776713454428523, 0.15787207714375112, 0.1862916440117865, 0.21325722383702903, 0.2389420450118348, 0.2633275548309725, 0.28640853740850647, 0.30816492362589687, 0.3287499552631688, 0.3483180062081051, 0.36676376418825435, 0.38415066642391393, 0.40057068364549453, 0.4161344912960798, 0.4307324338815881, 0.44456097116088034, 0.4576877791181589, 0.4699832841809185, 0.4814909449135742, 0.4923406990229458, 0.5025981929760868, 0.5122693546100949, 0.5214616092330647, 0.5300927113104043, 0.5382721103240206, 0.5460496268779049, 0.5534212713906497, 0.5604766394354626, 0.567175206948404, 0.5735573403290988, 0.5796894881252772, 0.5855337256822586, 0.5910957367311425, 0.5964176227179581, 0.6014791822727127, 0.6063274464755355, 0.6110070323985338, 0.6155138815304043, 0.6198489915085932, 0.6240690277294116, 0.6282065320543387, 0.6321998950622216, 0.6360240394038216, 0.6397005732922046, 0.6432255484357601, 0.6467118490566083, 0.6500449042130091, 0.6532446527002077, 0.6563684948660489, 0.6594450558284104, 0.6624045507992792, 0.6653424638325849, 0.6682701816196845, 0.6711283779626072, 0.6739564849914664, 0.676673770231707, 0.6793168924990955, 0.681872413849269, 0.6843652622691593, 0.686857436525586, 0.6892119644504083, 0.6914240455351295, 0.6935986413161496, 0.695765004863106, 0.6979191649065112, 0.6999880812300905, 0.702031395430817, 0.7040051286959672, 0.7059466102488973, 0.7078565959167447, 0.7097731846177981, 0.7116678142630228, 0.7135379944115636, 0.7153907842618893, 0.7172164052462301, 0.7190338142440322, 0.7208415073051403, 0.7225986393934709, 0.7243450356919884, 0.7260377000987494, 0.7277540493672059, 0.7294568377790457, 0.7311450241734834, 0.7328132014522868, 0.7344098560555815, 0.7360048471711382, 0.7375867514525017, 0.7391755869200238, 0.740726446578889, 0.7422640543492485, 0.7437641587830482, 0.7453141795222684, 0.7468254556280427, 0.7483506896887157, 0.7498651262742461, 0.7514210705035951, 0.7529817834802289, 0.7545143083437232, 0.7560516547910969, 0.7575956658127716, 0.7591200622655938, 0.7606222634552858, 0.7621230180009994, 0.7636782741385608, 0.7652313923861573, 0.7667455283471079, 0.7682616384357543, 0.7698493878500693, 0.77135269498722, 0.7728520836880182, 0.7743317779008885, 0.7757913858769956, 0.777242216835254, 0.7787106530167157, 0.7802205105359652, 0.7816980009413942, 0.7831113034681481, 0.7845413498124554, 0.7859609971021124, 0.7872921580854229, 0.7886668421822884, 0.7899877992754291, 0.7913672147151803, 0.7927481254418904, 0.7941094916363965, 0.7954671825959573, 0.7968308664393055, 0.7981488627018902, 0.7994722070691598, 0.8007352966127975, 0.8019836482961098, 0.8032002068122907, 0.8043602136435201, 0.8055297057297033, 0.8066171618882298, 0.8077144550201893, 0.8088228905282295, 0.8100157949854656, 0.8112521333648259, 0.8124066184871842, 0.8135503588913728, 0.8146842127562961, 0.8158139992775935, 0.8169260661503139, 0.8180222934857716, 0.819108879486493, 0.8202076425276, 0.8212708619288637, 0.8222672869197628, 0.8232965668448962, 0.8243298756227543], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.030433158414909633, 0.06171322006777107, 0.0929610080948795, 0.12337893919427709, 0.1526330480515813, 0.18030363702466112, 0.20621123218891188, 0.2308474567203972, 0.25411163212328214, 0.27591505969596897, 0.29666736843834496, 0.31617452443148336, 0.3348438636863772, 0.35276019738551057, 0.3695624614854384, 0.3855807599999217, 0.4004997759615259, 0.4145525374466986, 0.4277290431617426, 0.44030002415242075, 0.4518081900353714, 0.46251954323627703, 0.4724781734382517, 0.4818845117796675, 0.49080187644319173, 0.49924254370286353, 0.5070588707990681, 0.5143000552082426, 0.5212586333188189, 0.5278153518769972, 0.5338995040481077, 0.5398676402867457, 0.5454230978789295, 0.5505705235955547, 0.5555816247092673, 0.5603723774303586, 0.5651520401014795, 0.5698342134915574, 0.5742678961051276, 0.57856544525591, 0.5826651730853643, 0.586675399470352, 0.5903557863870216, 0.5939255117769339, 0.5974699134889242, 0.6008938676407848, 0.6041819164000497, 0.6072754376271381, 0.6103281614190176, 0.6132109196841189, 0.6159752710515504, 0.6185496660096483, 0.6210528154666655, 0.6233799216741405, 0.6254621102296181, 0.6274093221170478, 0.6292452030171654, 0.6310073591085211, 0.6326787488094914, 0.6342541827105452, 0.6357086943152437, 0.6370543758532223, 0.6384007960898128, 0.6397102305527441, 0.6409884368367017, 0.6422008871571732, 0.6434141627580975, 0.644690245776339, 0.645864164063916, 0.6468718623977352, 0.6479374823044225, 0.6488466825867815, 0.6496517263009949, 0.6504993654649466, 0.6512612112038435, 0.6519834934626008, 0.652646784035392, 0.6532793371359944, 0.6538364278952865, 0.6542889814536494, 0.6547196642100165, 0.6550706575969968, 0.6553722855967098, 0.6557312590325208, 0.6560533056160911, 0.656405212206214, 0.6567961998334841, 0.6571470591893677, 0.6574373890385031, 0.6575358764618365, 0.6576987868389962, 0.6579440919370996, 0.658176044047983, 0.6584468656126877, 0.658751640177172, 0.6590991794727078, 0.6593397521598496, 0.6595939181806869, 0.6598959097869406, 0.6602785950224784, 0.6605619765782125, 0.6608912916745329, 0.6611632611987212, 0.6614456843729003, 0.6615411738234115, 0.6615029849990522, 0.661395372869629, 0.6612008657031481, 0.6608660883384055, 0.6603196185764777, 0.6598400028219926, 0.659249657236706, 0.6587783518575385, 0.6583918276186973, 0.6578842348888305, 0.6574274014319506, 0.6569674231957585, 0.6566022709081858, 0.6562125986931202, 0.6558629232082208, 0.6555248307179711, 0.6551096546868367, 0.6547970314150657, 0.6545268479930622, 0.6541727901233493, 0.653633381969448, 0.6529292175770967, 0.6520736840441611, 0.6513566500241577, 0.6505861605676756, 0.6499181636280014, 0.6492060735923849, 0.6485173939439899, 0.6476890332205247, 0.646858059350656, 0.6460369406802742, 0.6452613127831806, 0.6443913197296366, 0.6434974331915373, 0.6427173493697481, 0.6420274809613877, 0.6413323276977038, 0.6407443403627979, 0.6400788154003133, 0.6394920499653272, 0.6387543825252704, 0.6378931103119, 0.6370081020386166, 0.6361129088340018, 0.6351831056200294, 0.6342740700486138, 0.6334172579232705, 0.6325871508715308, 0.6318166699711247], "moving_var_accuracy_train": [0.008689076451757868, 0.01748078233431173, 0.02519663965091678, 0.031610062223260904, 0.03660582412118905, 0.04021428773777074, 0.042737141421797416, 0.04440081762865344, 0.04531261366804143, 0.04557593811193713, 0.04527840737190571, 0.04456425838228249, 0.04355401010410686, 0.04226082298085633, 0.040755480006942166, 0.03910648469626097, 0.03737592520389462, 0.03555623203307333, 0.033721664819328985, 0.03190031612172152, 0.030070899512284487, 0.028255645860897183, 0.026489535752911905, 0.024787527817409234, 0.02315055734182831, 0.021595979513127073, 0.020106844869439457, 0.018698283496511033, 0.01737286302057344, 0.01612464700391662, 0.014960186267754853, 0.01386800490150827, 0.01284778904975826, 0.011901439274130008, 0.011018691360318888, 0.010195245926458145, 0.009430623567922312, 0.008718135677267027, 0.008057873101563686, 0.007449172511103834, 0.006887060461870428, 0.006367493022390314, 0.005891022071496457, 0.005455990342695922, 0.005053913841440874, 0.004680139176805302, 0.004333777372016634, 0.0040122286826791255, 0.0037203944425815475, 0.0034483383084038836, 0.003195649990995459, 0.0029639105007896985, 0.0027527064969068704, 0.002556263341559564, 0.002378319004325018, 0.002217630886860609, 0.002069391375186816, 0.0019344359419682822, 0.001807445099462918, 0.0016895754473999125, 0.001579394107000655, 0.001477383335501539, 0.001385543394670946, 0.001296883270942766, 0.0012112346683769161, 0.0011326710028366981, 0.001061642081711265, 0.0009972415229735684, 0.0009360411034619647, 0.0008800131894217888, 0.000827072477497251, 0.0007782893853308346, 0.0007332928540601952, 0.0006930233788952284, 0.0006560276344387812, 0.0006219030350868692, 0.0005906082036434128, 0.0005615434110852602, 0.0005351158491643673, 0.0005110140520765339, 0.0004877002654514487, 0.00046637933918958246, 0.00044552742041586193, 0.00042748737167625785, 0.000410834029888094, 0.00039540038662056343, 0.0003809056868601498, 0.0003657588714741363, 0.0003520789542550645, 0.00033939284922812255, 0.0003281731475910148, 0.0003170023239653695, 0.0003065802304680626, 0.0002961750272320081, 0.00028818060313691874, 0.0002799181420341848, 0.00027286337828930036, 0.0002662187040047077, 0.0002613854956078401, 0.0002571693710059557, 0.00025259012602041347, 0.00024860202031164527, 0.0002451975485959582, 0.00024159185464475282, 0.00023774214490908632, 0.00023423830827649749, 0.0002325838723296542, 0.00023103507171584335, 0.00022856503391845113, 0.00022639583873466842, 0.00022644478868511826, 0.00022413970095408017, 0.0002219592291434015, 0.00021946876090148047, 0.0002166959838065732, 0.0002139705796508835, 0.00021198026505702674, 0.00021129926610723024, 0.00020981614057971859, 0.00020681134281090742, 0.00020453550145161915, 0.00020222053714973197, 0.00019794638950614902, 0.00019515955785111137, 0.0001913479508432682, 0.00018933823835775977, 0.0001875666444382708, 0.00018548984123433837, 0.00018353077978596242, 0.00018191440442884548, 0.00017935699131964788, 0.00017718245501713677, 0.0001738227662726458, 0.00017046592697244015, 0.00016673946588482484, 0.00016217606193283217, 0.0001582678613963561, 0.0001530841233271758, 0.00014861218095146945, 0.0001448086263356798, 0.00014313495309895564, 0.00014257825108357597, 0.00014031594905493874, 0.00013805763315900534, 0.00013582249112611757, 0.00013372800026685135, 0.00013148543480478826, 0.00012915232066335215, 0.00012686311082969208, 0.00012504232173124854, 0.00012271200901513413, 0.00011937657297601623, 0.00011697367015695729, 0.00011488584641484915], "duration": 59121.750115, "accuracy_train": [0.31071738591269843, 0.35869980562476933, 0.3881104146479328, 0.4113121553732927, 0.4288165605389443, 0.4420677458241048, 0.4559474422642119, 0.4701054355850868, 0.48279714320321154, 0.4941373806063123, 0.5039723995824105, 0.5140152399986158, 0.5244304647125323, 0.5327755860095976, 0.5406327865448505, 0.5483508386397195, 0.5562087601513473, 0.5621139171511628, 0.5690178066745109, 0.5758290507336655, 0.5806428297457549, 0.5850598915074751, 0.5899884860072905, 0.5949156385543558, 0.5993098093161683, 0.6041919008397932, 0.6077726300064599, 0.611886701446567, 0.6160472758628645, 0.6197660720053525, 0.6239749518387782, 0.6274623145648763, 0.6309965407553525, 0.6348788182908822, 0.6381318636950905, 0.6411538361710963, 0.6443145965992987, 0.6470332182655039, 0.6499618243009413, 0.6531233057055187, 0.6560755237172389, 0.6588649813122923, 0.6620493537167774, 0.6654440709786822, 0.6681401621331672, 0.6704413384782207, 0.6727893782876523, 0.6749503247277593, 0.6780885546442414, 0.6800424006206165, 0.6820423890849945, 0.6844830743586194, 0.687134104489664, 0.6890400055370985, 0.6917836811323367, 0.6946196417035806, 0.696852145048911, 0.6994094482511997, 0.7011293373938723, 0.7031049929055925, 0.7048721060008306, 0.7068008980481727, 0.7092870048334257, 0.7104027157738095, 0.7113327752976191, 0.7131700033453304, 0.7152622767857143, 0.7173066052971576, 0.7186083281423035, 0.7204212232373569, 0.7217687280823182, 0.7234199442252676, 0.7250464669273717, 0.7270224829272794, 0.7287194810700444, 0.7303696157484312, 0.7320658929148209, 0.7336469941052971, 0.7353904952242525, 0.7371107448551126, 0.7384128281884459, 0.7400626023786453, 0.7412716797595976, 0.7432011927833149, 0.7447819334856035, 0.746338701723422, 0.7478267969615172, 0.7487797474852345, 0.750359767211148, 0.7518238899847729, 0.7534751061277224, 0.7546841835086747, 0.7561025242824843, 0.7572650986872462, 0.7592643661752492, 0.760426940580011, 0.7620777962347729, 0.7634950555440199, 0.7654245685677371, 0.7670282002699336, 0.7683070321151717, 0.7698877728174603, 0.7714917650078442, 0.772839630340993, 0.7741420741625139, 0.7756298089124216, 0.777675579376615, 0.7792094566145257, 0.7803727519956626, 0.7819066292335732, 0.7841391325789037, 0.7848824592215762, 0.7863465819952011, 0.787649025816722, 0.78892785766196, 0.7902996954595791, 0.7919265786498707, 0.79380922820921, 0.7949954145902547, 0.7958310262089332, 0.797411766911222, 0.7987378227090256, 0.7992726069352161, 0.801038999054079, 0.8018764131136952, 0.803781953672942, 0.8051763219822813, 0.8063617873869509, 0.8076864012320044, 0.8091040210294389, 0.8100108290651532, 0.8113823063745846, 0.8121031025055371, 0.813218813445921, 0.814149233457918, 0.8148002751245846, 0.8160551345053525, 0.8164042673149685, 0.8175900932078257, 0.8187988101005905, 0.8207519351005905, 0.8223791787790697, 0.8227969845884091, 0.8238440225290697, 0.8248888975406055, 0.8259820779692691, 0.8269346680047989, 0.8278883395048912, 0.8288881534929864, 0.8300965098975637, 0.8308398365402363, 0.8312351118378553, 0.8325600861710963, 0.8336296546234773], "end": "2016-02-04 04:03:50.640000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0], "moving_var_accuracy_valid": [0.008335594179962868, 0.016308015075027896, 0.02346503187680901, 0.029445783480437398, 0.0342034310977087, 0.03767404143499197, 0.03994746867624516, 0.04141521384111248, 0.04214468917158702, 0.04220872533968493, 0.041863777668966484, 0.04110216211653555, 0.04012884395881087, 0.039004914681898095, 0.03764526792366181, 0.0361900141169875, 0.034574206040652165, 0.03289410638481933, 0.03116727847206468, 0.029472816692470136, 0.027717475961128717, 0.025978326151566804, 0.02427306237590727, 0.022642068947255244, 0.021093536585410154, 0.019625386700965596, 0.0182127027543428, 0.01686334524373757, 0.015612807003252743, 0.014438441327187912, 0.01332774936324018, 0.012315542278382661, 0.011361756032071374, 0.0104640443524378, 0.009643640126540686, 0.008885837918598415, 0.008202860703985921, 0.007579879362480116, 0.006998809299892973, 0.006465148728234192, 0.005969903769891182, 0.005517650633831726, 0.00508779280115609, 0.004693699975274942, 0.004337395029211088, 0.004009166684596371, 0.0037055513979264644, 0.0034211251203758366, 0.003162884711283821, 0.002921388897090525, 0.0026980247537250557, 0.0024878698629550726, 0.00229547469149705, 0.002114666032055165, 0.0019422190114747025, 0.0017821218175381624, 0.0016342437638990923, 0.0014987661343219027, 0.0013740314126822948, 0.0012589661992033739, 0.00115211001535686, 0.0010531967430360833, 0.0009641926958139767, 0.0008832049937469905, 0.0008095887961114277, 0.0007418602385167859, 0.0006809225538192903, 0.0006274857892623592, 0.0005771399676492914, 0.000528565074272201, 0.00048592847891473556, 0.0004447754374042365, 0.0004061307520999638, 0.00037198410626035035, 0.0003400093760031938, 0.0003107036633547133, 0.0002835928864748242, 0.00025883470865307686, 0.00023574438881456735, 0.0002140131924417931, 0.00019428126192730052, 0.00017596190295390544, 0.00015918452771041254, 0.00014442583228793253, 0.0001309166750770424, 0.000118939551802885, 0.00010842143854470177, 9.868721527873054e-05, 8.957711654254898e-05, 8.070670284128778e-05, 7.287489067603592e-05, 6.612897292883198e-05, 6.000029167163823e-05, 5.46603613836564e-05, 5.0030313061699794e-05, 4.6114333813003605e-05, 4.2023777391891204e-05, 3.840280294803659e-05, 3.538331302546153e-05, 3.3163013628403474e-05, 3.056945822073558e-05, 2.848854829264219e-05, 2.63054002621628e-05, 2.4392725879767047e-05, 2.203551740822068e-05, 1.9845091144152068e-05, 1.7964805363328015e-05, 1.650882216730733e-05, 1.5866622906072128e-05, 1.6967623421778802e-05, 1.7341142527153913e-05, 1.874359946504506e-05, 1.886839836243131e-05, 1.8326167411094102e-05, 1.881240408470653e-05, 1.880943494216057e-05, 1.8832711247877558e-05, 1.8149465861166905e-05, 1.770111919179712e-05, 1.7031463775273885e-05, 1.63570761854163e-05, 1.627270879833173e-05, 1.5525037708973918e-05, 1.4629525671806485e-05, 1.429478588057619e-05, 1.548395770097442e-05, 1.8398189353977914e-05, 2.3145809052375113e-05, 2.5458468219718506e-05, 2.825550742069651e-05, 2.9445935881353544e-05, 3.106499226263576e-05, 3.2227009959394856e-05, 3.5179942357074464e-05, 3.787660627300877e-05, 4.015706848335516e-05, 4.15557493477695e-05, 4.421216563192525e-05, 4.698224735568735e-05, 4.776079954127484e-05, 4.726798537483012e-05, 4.68903293774412e-05, 4.531285839378497e-05, 4.476788383561773e-05, 4.33897385333063e-05, 4.394814394905542e-05, 4.62294379838656e-05, 4.8655650979499135e-05, 5.100242374384379e-05, 5.368298751988126e-05, 5.575179979878299e-05, 5.6783762982122586e-05, 5.730708614004218e-05, 5.6919144887053325e-05], "accuracy_test": 0.4585678411989796, "start": "2016-02-03 11:38:28.890000", "learning_rate_per_epoch": [0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602, 0.00017012128955684602], "accuracy_train_first": 0.31071738591269843, "accuracy_train_last": 0.8336296546234773, "batch_size_eval": 1024, "accuracy_train_std": [0.013557768827256752, 0.015443232334337703, 0.015211662302769081, 0.014983053295127563, 0.01624000307841386, 0.014288046903622186, 0.014217980677759694, 0.015030696432653413, 0.01534331033459856, 0.015018364497010796, 0.01562781178711572, 0.015082558323619938, 0.015384395417017851, 0.014624932346037015, 0.014878385960558863, 0.014422920444640313, 0.014420157214975334, 0.013755384060664943, 0.013983720283743672, 0.014260891507414143, 0.013561148983002851, 0.01306701656738745, 0.013648832663241652, 0.013711786768399908, 0.013764252901808865, 0.013989343231562106, 0.013788286917213271, 0.013353246701569246, 0.013156211754303994, 0.013666852488226628, 0.014064709708588518, 0.013603923583236846, 0.014037167543377436, 0.013459811127788343, 0.013419986176063796, 0.012955610408859201, 0.013131117477788418, 0.013077640585224452, 0.01286825440894828, 0.013011748218094619, 0.013337836929831091, 0.012777812819046028, 0.012930264302770278, 0.012250739404180566, 0.012154962571863515, 0.012962709958637594, 0.013087246396607173, 0.013721445358846033, 0.013895906634634945, 0.013843156582723537, 0.014042969642413076, 0.014114051832914202, 0.013653583224664681, 0.01372278531265436, 0.01376269745790773, 0.013666054275773493, 0.013496197870947031, 0.013594360408753165, 0.014040183294694844, 0.014099793355290081, 0.01379172940279345, 0.014467214567085405, 0.015161979642914875, 0.015202508567601318, 0.0149993005071902, 0.014537713259904526, 0.014952424391503214, 0.01567848972602144, 0.015822076844990794, 0.016001997742373264, 0.01601985265096537, 0.015916167588317473, 0.016248813859779464, 0.01607494485259685, 0.015526625602719316, 0.015960841777470983, 0.01618993188691721, 0.01603029683826485, 0.01577895329515571, 0.01556645358543731, 0.015365001309259408, 0.015556066523692546, 0.015640433767523138, 0.015847599335047483, 0.015951348829916508, 0.015764639882279836, 0.016071592259201788, 0.016372290889607857, 0.01681417473930061, 0.016767891373420236, 0.016306574876328774, 0.016371567432668654, 0.01583376491670631, 0.01562704241355094, 0.015497348626564801, 0.0154164091269442, 0.01496712591915111, 0.015287546994228872, 0.015688258071737966, 0.015947307068033278, 0.015842251088603, 0.01572700740282197, 0.0158224196620501, 0.016102197251829875, 0.016181504009662173, 0.016428911190650212, 0.016027087591467842, 0.016386753353743618, 0.015653517096365033, 0.015807267345428304, 0.015008813208250087, 0.01541510781899289, 0.015495568152427112, 0.014897887196090871, 0.014855295003230294, 0.014680310420449715, 0.015018084345231417, 0.015343488937351915, 0.0152861028181754, 0.016239623121259147, 0.01632995575002367, 0.015977288991365336, 0.01585077127554549, 0.01642360107169698, 0.01647448326633015, 0.016737738906000235, 0.01702540637747415, 0.017383051338398556, 0.017775584126154195, 0.018268814905162543, 0.01848997573335038, 0.01852455976328242, 0.018495780744943416, 0.01879993711261379, 0.018065482938700275, 0.018153727939999743, 0.01858212086992817, 0.01824362993824692, 0.018148340369350868, 0.018494746106392918, 0.017721312786671675, 0.017504599307220876, 0.01809942045722388, 0.017839853527559072, 0.018712195934050293, 0.01844626584899814, 0.018946045306306832, 0.01817901189786068, 0.017849916509006088, 0.01791619984523273, 0.018440832790185723, 0.01846888507461252, 0.018880621327111588, 0.018634764110724004], "accuracy_test_std": 0.012073633690818953, "error_valid": [0.6956684158509037, 0.6567662250564759, 0.6258088996611446, 0.6028596809111446, 0.5840799722326807, 0.5706610622176205, 0.5606204113328314, 0.5474265224962349, 0.536510789250753, 0.5278540921498494, 0.5165618528802711, 0.5082610716302711, 0.49713208301957834, 0.4859927993222892, 0.4792171616152108, 0.4702545533697289, 0.4652290803840362, 0.458972609186747, 0.4536824054028614, 0.44656114693147586, 0.4446183170180723, 0.4410782779555723, 0.43789415474397586, 0.4334584431475903, 0.4289418415850903, 0.4247914509600903, 0.4225941853350903, 0.42052928510918675, 0.41611416368599397, 0.41317418109939763, 0.41134312641189763, 0.40641913356551207, 0.40457778379141573, 0.4031026449548193, 0.3993184652673193, 0.3965108480798193, 0.39183099585843373, 0.38802622599774095, 0.38582896037274095, 0.38275661238704817, 0.38043727644954817, 0.37723256306475905, 0.37652073136295183, 0.3739469597138554, 0.3706304711031627, 0.3682905449924698, 0.36622564476656627, 0.36488287132906627, 0.36219732445406627, 0.3608442559299698, 0.35914556664156627, 0.3582807793674698, 0.3564188394201807, 0.35567612245858427, 0.35579819277108427, 0.35506577089608427, 0.35423186888177716, 0.35313323606927716, 0.35227874388177716, 0.3515669121799698, 0.3512007012424698, 0.3508344903049698, 0.3494814217808735, 0.3485048592808735, 0.3475077066076807, 0.34688705995858427, 0.34566635683358427, 0.34382500705948793, 0.3435705713478916, 0.3440588525978916, 0.3424719385353916, 0.34297051487198793, 0.34310288027108427, 0.34187188205948793, 0.34188217714608427, 0.34151596620858427, 0.34138360080948793, 0.34102768495858427, 0.34114975527108427, 0.34163803652108427, 0.3414041909826807, 0.3417704019201807, 0.3419130624058735, 0.3410379800451807, 0.34104827513177716, 0.3404276284826807, 0.33968491152108427, 0.3396952066076807, 0.33994964231927716, 0.3415777367281627, 0.34083501976656627, 0.3398481621799698, 0.33973638695406627, 0.3391157403049698, 0.3385053887424698, 0.3377729668674698, 0.3384950936558735, 0.33811858763177716, 0.33738616575677716, 0.3362772378576807, 0.3368875894201807, 0.33614487245858427, 0.33638901308358427, 0.33601250705948793, 0.33759942112198793, 0.3388407144201807, 0.3395731362951807, 0.3405496987951807, 0.34214690794427716, 0.3445986092808735, 0.3444765389683735, 0.3460634530308735, 0.3454633965549698, 0.3450868905308735, 0.3466840996799698, 0.3466840996799698, 0.3471723809299698, 0.3466840996799698, 0.3472944512424698, 0.3472841561558735, 0.34751800169427716, 0.3486269295933735, 0.3480165780308735, 0.3479048028049698, 0.34901373070406627, 0.3512212914156627, 0.35340826195406627, 0.35562611775225905, 0.3550966561558735, 0.3563482445406627, 0.35609380882906627, 0.3572027367281627, 0.35768072289156627, 0.3597662132906627, 0.3606207054781627, 0.3613531273531627, 0.3617193382906627, 0.36343861775225905, 0.3645475456513554, 0.3643034050263554, 0.3641813347138554, 0.36492405167545183, 0.3645475456513554, 0.36591090926204817, 0.36578883894954817, 0.36788462443524095, 0.36985833960843373, 0.37095697242093373, 0.3719438300075302, 0.37318512330572284, 0.3739072500941265, 0.3742940512048193, 0.3748838125941265, 0.3751176581325302], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.0456107090358078, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 16, "valid_ratio": 0.15, "learning_rate": 0.00017012129127409682, "optimization": "nesterov_momentum", "nb_data_augmentation": 0, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 4.864918581672589e-07, "rotation_range": [0, 0], "momentum": 0.510360145617936}, "accuracy_valid_max": 0.6639874929405121, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.6248823418674698, "accuracy_valid_std": [0.024981216807592334, 0.01863805319704065, 0.012049351415304265, 0.015538401065988031, 0.012854093681027483, 0.012435164871057263, 0.014208473676039442, 0.014339889226164254, 0.01556533542907283, 0.01599174968537068, 0.014372763144513537, 0.0156986699156894, 0.015554180115476058, 0.01713776528406499, 0.016848735920769582, 0.016650572857859543, 0.0165704602260032, 0.018953939103483624, 0.019347437229656622, 0.021364336066917084, 0.01906266729841723, 0.018945510042805955, 0.018826681798843767, 0.01996828541024397, 0.018823960899990333, 0.01744883239516664, 0.016925205626194012, 0.01691286743160208, 0.017478294724502366, 0.015941041165371504, 0.015430274700051705, 0.01578783512347318, 0.014643661215753853, 0.014625422925938006, 0.01386840859796743, 0.014201247341152615, 0.01347999345062838, 0.014918796536698095, 0.014322361097824119, 0.016023056852433847, 0.014291624701675132, 0.014638853673403111, 0.014757805379721508, 0.01577723719205723, 0.016007040771182278, 0.016472326333425023, 0.015343254043002463, 0.015460152625611685, 0.015186555032548893, 0.014663974589906545, 0.014826613603760697, 0.013295626675953067, 0.014147848306118828, 0.015211946352899788, 0.014752244383222536, 0.013571892043828273, 0.012863126261497847, 0.013862613541962497, 0.01194767998058871, 0.01245120618495919, 0.011751304045087403, 0.010686899313808292, 0.011006852956388275, 0.0108974830195111, 0.011399011618736842, 0.011197141798483001, 0.010991627271059214, 0.01220264300011376, 0.011676815001975847, 0.012425965769953659, 0.012368742192539956, 0.012386626846445727, 0.012628328813922613, 0.011696141517657391, 0.011606403390553343, 0.011494936767582226, 0.01244960993342036, 0.011698975872281712, 0.011721627604780111, 0.011356434324186135, 0.011618034524016746, 0.011943299852069659, 0.013467801031096748, 0.01297278822493931, 0.013391734905703882, 0.013964544493137497, 0.014280295071408152, 0.015091463766042215, 0.01540013718614117, 0.016762563759993226, 0.016705617086678098, 0.016527345297526867, 0.017146317915244333, 0.01585572169265463, 0.015015537776526925, 0.014203879373324546, 0.013148292279725455, 0.013432641726448124, 0.012647836667228754, 0.012964793665803099, 0.013058226430887214, 0.01236761312028657, 0.012618807201980628, 0.012839720923642444, 0.013196295536434224, 0.013850629643752825, 0.013143273164665667, 0.013172417790684721, 0.014669069550651595, 0.015470907438734931, 0.014470014013834803, 0.01542129992224232, 0.014560523027681285, 0.013831607943942795, 0.014356085785586498, 0.01521867231551379, 0.014941854905229448, 0.01388329062770895, 0.014112504142288223, 0.01292364251531251, 0.012106677019216586, 0.012961670809070099, 0.012045523821123472, 0.013837748703795477, 0.013313746783847107, 0.01237863089889609, 0.012996197496204039, 0.013469022239136862, 0.013522133060295457, 0.01464941411263603, 0.014612516512714344, 0.013743649605385282, 0.01438738876164663, 0.01363610645005715, 0.012719107300182575, 0.012016410210339584, 0.011935390746798542, 0.011247381986354518, 0.011839774444660028, 0.012336249611451518, 0.013980424042555261, 0.014458926641838935, 0.014218617705910479, 0.014807817046854577, 0.01566935060687311, 0.016647289832674717, 0.01779004387103629, 0.016335617724639782, 0.016749617429355563, 0.01743336300398335, 0.016373495108502268, 0.016862125296846605, 0.015382086970718134, 0.014284443536236617], "accuracy_valid": [0.3043315841490964, 0.3432337749435241, 0.3741911003388554, 0.3971403190888554, 0.4159200277673193, 0.4293389377823795, 0.43937958866716864, 0.4525734775037651, 0.463489210749247, 0.4721459078501506, 0.4834381471197289, 0.4917389283697289, 0.5028679169804217, 0.5140072006777108, 0.5207828383847892, 0.5297454466302711, 0.5347709196159638, 0.541027390813253, 0.5463175945971386, 0.5534388530685241, 0.5553816829819277, 0.5589217220444277, 0.5621058452560241, 0.5665415568524097, 0.5710581584149097, 0.5752085490399097, 0.5774058146649097, 0.5794707148908133, 0.583885836314006, 0.5868258189006024, 0.5886568735881024, 0.5935808664344879, 0.5954222162085843, 0.5968973550451807, 0.6006815347326807, 0.6034891519201807, 0.6081690041415663, 0.611973774002259, 0.614171039627259, 0.6172433876129518, 0.6195627235504518, 0.622767436935241, 0.6234792686370482, 0.6260530402861446, 0.6293695288968373, 0.6317094550075302, 0.6337743552334337, 0.6351171286709337, 0.6378026755459337, 0.6391557440700302, 0.6408544333584337, 0.6417192206325302, 0.6435811605798193, 0.6443238775414157, 0.6442018072289157, 0.6449342291039157, 0.6457681311182228, 0.6468667639307228, 0.6477212561182228, 0.6484330878200302, 0.6487992987575302, 0.6491655096950302, 0.6505185782191265, 0.6514951407191265, 0.6524922933923193, 0.6531129400414157, 0.6543336431664157, 0.6561749929405121, 0.6564294286521084, 0.6559411474021084, 0.6575280614646084, 0.6570294851280121, 0.6568971197289157, 0.6581281179405121, 0.6581178228539157, 0.6584840337914157, 0.6586163991905121, 0.6589723150414157, 0.6588502447289157, 0.6583619634789157, 0.6585958090173193, 0.6582295980798193, 0.6580869375941265, 0.6589620199548193, 0.6589517248682228, 0.6595723715173193, 0.6603150884789157, 0.6603047933923193, 0.6600503576807228, 0.6584222632718373, 0.6591649802334337, 0.6601518378200302, 0.6602636130459337, 0.6608842596950302, 0.6614946112575302, 0.6622270331325302, 0.6615049063441265, 0.6618814123682228, 0.6626138342432228, 0.6637227621423193, 0.6631124105798193, 0.6638551275414157, 0.6636109869164157, 0.6639874929405121, 0.6624005788780121, 0.6611592855798193, 0.6604268637048193, 0.6594503012048193, 0.6578530920557228, 0.6554013907191265, 0.6555234610316265, 0.6539365469691265, 0.6545366034450302, 0.6549131094691265, 0.6533159003200302, 0.6533159003200302, 0.6528276190700302, 0.6533159003200302, 0.6527055487575302, 0.6527158438441265, 0.6524819983057228, 0.6513730704066265, 0.6519834219691265, 0.6520951971950302, 0.6509862692959337, 0.6487787085843373, 0.6465917380459337, 0.644373882247741, 0.6449033438441265, 0.6436517554593373, 0.6439061911709337, 0.6427972632718373, 0.6423192771084337, 0.6402337867093373, 0.6393792945218373, 0.6386468726468373, 0.6382806617093373, 0.636561382247741, 0.6354524543486446, 0.6356965949736446, 0.6358186652861446, 0.6350759483245482, 0.6354524543486446, 0.6340890907379518, 0.6342111610504518, 0.632115375564759, 0.6301416603915663, 0.6290430275790663, 0.6280561699924698, 0.6268148766942772, 0.6260927499058735, 0.6257059487951807, 0.6251161874058735, 0.6248823418674698], "seed": 423171475, "model": "residualv3", "loss_std": [0.4917024075984955, 0.1865186244249344, 0.19680173695087433, 0.20594273507595062, 0.2141234427690506, 0.21956297755241394, 0.22334608435630798, 0.22639569640159607, 0.22911779582500458, 0.2317562699317932, 0.23452003300189972, 0.23720917105674744, 0.23965571820735931, 0.24190504848957062, 0.24397523701190948, 0.24571849405765533, 0.24739497900009155, 0.24891415238380432, 0.25026342272758484, 0.25143319368362427, 0.25246351957321167, 0.2533760964870453, 0.25405997037887573, 0.25476038455963135, 0.2552945911884308, 0.2557578980922699, 0.25610363483428955, 0.25637030601501465, 0.256672203540802, 0.25688064098358154, 0.257031112909317, 0.25715962052345276, 0.2572820782661438, 0.25742435455322266, 0.2574962377548218, 0.25756141543388367, 0.2575741708278656, 0.2575905919075012, 0.257588654756546, 0.25765782594680786, 0.2577347159385681, 0.25772976875305176, 0.25775450468063354, 0.2576700448989868, 0.2575617730617523, 0.2574819028377533, 0.25733682513237, 0.257176011800766, 0.257043719291687, 0.25691670179367065, 0.25674188137054443, 0.25654640793800354, 0.25628504157066345, 0.2560230791568756, 0.25577041506767273, 0.25549402832984924, 0.255141019821167, 0.25489556789398193, 0.2545624375343323, 0.2542415261268616, 0.25386276841163635, 0.2534353733062744, 0.25301411747932434, 0.25259485840797424, 0.2520699203014374, 0.25152555108070374, 0.25096556544303894, 0.2504388391971588, 0.24983420968055725, 0.2492586076259613, 0.2486490160226822, 0.24805626273155212, 0.2474040538072586, 0.24667304754257202, 0.24604003131389618, 0.24538502097129822, 0.24469152092933655, 0.24397680163383484, 0.24319645762443542, 0.2424589842557907, 0.24174648523330688, 0.24104808270931244, 0.24025581777095795, 0.23945695161819458, 0.23865973949432373, 0.23792147636413574, 0.23708003759384155, 0.2362208515405655, 0.23541231453418732, 0.23462356626987457, 0.23371177911758423, 0.23294833302497864, 0.23202946782112122, 0.23105324804782867, 0.2300434410572052, 0.22907917201519012, 0.2281339019536972, 0.2271447479724884, 0.22618164122104645, 0.22521944344043732, 0.22423720359802246, 0.22323723137378693, 0.22228795289993286, 0.2212599217891693, 0.22021713852882385, 0.21920742094516754, 0.21817734837532043, 0.2171679437160492, 0.21612146496772766, 0.21505460143089294, 0.21396054327487946, 0.21283431351184845, 0.21174679696559906, 0.21058301627635956, 0.20950670540332794, 0.2082110494375229, 0.2069794088602066, 0.20563256740570068, 0.2042456716299057, 0.2028084397315979, 0.20146895945072174, 0.2001306414604187, 0.19884347915649414, 0.19740553200244904, 0.19599047303199768, 0.1945362687110901, 0.19304318726062775, 0.19145803153514862, 0.18988534808158875, 0.18833868205547333, 0.18661005795001984, 0.18491187691688538, 0.18318936228752136, 0.18143463134765625, 0.17963598668575287, 0.17780619859695435, 0.17594337463378906, 0.17404691874980927, 0.17206284403800964, 0.1700175404548645, 0.16801592707633972, 0.16585303843021393, 0.16376768052577972, 0.16162946820259094, 0.1594863384962082, 0.15732048451900482, 0.1550234705209732, 0.15274307131767273, 0.15034370124340057, 0.14788776636123657, 0.145420104265213, 0.14285466074943542, 0.14033234119415283, 0.13760407269001007]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:36 2016", "state": "available"}], "summary": "f22d0e66ce1829f3af26610fa804b86b"}