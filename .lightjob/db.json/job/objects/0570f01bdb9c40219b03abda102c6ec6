{"content": {"hp_model": {"f0": 64, "f1": 32, "f2": 64, "f3": 16, "nonlin": "very_leaky_rectify", "nbg1": 2, "nbg3": 5, "nbg2": 1, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.01745279038271827, 0.01855969564161598, 0.017065730109363665, 0.011622206424220143, 0.013273659253230761, 0.012649008529588002, 0.012307274064476579, 0.010669440229269177, 0.011514787686557604, 0.011075975857069677, 0.01006887600731125, 0.012154520658971485, 0.008845708676048772, 0.008255045920694157, 0.007698594228994354, 0.0088414543064984, 0.008971110004167986, 0.00752582413120963, 0.007380526495804334, 0.007063694814984559, 0.008075057622363121, 0.007756919549228089, 0.006102735026779483, 0.006003104108988977, 0.006200329446214342, 0.005915314537931575, 0.005693166740559784, 0.005768104448012534, 0.005122871562833988, 0.007433473300301647, 0.0052209528569900744, 0.005952838770168851, 0.005928238458914325, 0.005473902954940526, 0.00682281731104545, 0.0056799225465946675, 0.00497176073638628, 0.0040871890707275095, 0.005393292215382414, 0.005213588880236922, 0.004878497643298437, 0.00547814862561376, 0.005168698460703772, 0.005778508803534464, 0.005673362534584306, 0.00500033220928181, 0.005613811041221332, 0.00620122542423192, 0.006780690946810462, 0.006119173133459443, 0.006130663338849379, 0.004830568512035636, 0.005631293103280966, 0.0063927747564715975, 0.006418226190474983, 0.006884586315410982, 0.005971379162216089, 0.005654216808474228, 0.00643760964449967, 0.0059286536665361005, 0.005368602561923481, 0.0067659404764237865, 0.007222980433517958, 0.00580188748106085, 0.0059397591660893725, 0.006877124765968554, 0.006655301709234502, 0.005644730912618804, 0.006603073956543438, 0.007166049191066079, 0.00652113615409376, 0.00549491192123799, 0.005712844364545245, 0.0063221213817299836, 0.006095185272912305, 0.005677269314404703, 0.005537158319626766, 0.006594707988766271, 0.0059439741248260465, 0.006407251695933215, 0.006514084457864328, 0.005528218527711462, 0.006084410043166358, 0.00642583013113019, 0.005481106819005522, 0.005633094099882489, 0.005592648080460186, 0.006573386754992263, 0.005714729615740847, 0.006027133123101574, 0.006021291980551861, 0.007411004173086802, 0.006210557387383344, 0.0057336732826886744, 0.005871526166358873, 0.006666621916195933, 0.0068881696105874655, 0.005429438394977761, 0.006588513830000285, 0.005547799097094691, 0.0055254086765873294, 0.005656121600950748, 0.006438541641060353, 0.006045097883010706, 0.005811224974881527, 0.006279893121094587, 0.005770051867226471, 0.006853469444450566, 0.006730610178305278, 0.005822397867029716, 0.005872443396576207, 0.006095595318703461, 0.0071331023691831395, 0.00666586994303664, 0.006305797954106205, 0.007238736122409247], "moving_avg_accuracy_train": [0.012814381748338868, 0.02607673135266703, 0.039079909056040044, 0.05150324068065937, 0.06340031287851258, 0.07468882086368642, 0.08528793117534286, 0.09528282357368159, 0.10468280262504359, 0.11341250103317414, 0.1215272490207113, 0.12895364694994324, 0.1358070688517097, 0.14211465749187097, 0.14789139656918812, 0.1532856660923173, 0.15824514035956214, 0.16281562404532057, 0.16709410887916062, 0.17106100267009286, 0.17467066251405625, 0.17801472352363254, 0.1811125898917381, 0.1840053373682804, 0.18669484060312086, 0.18911768261446807, 0.1913610194425377, 0.19337998653898159, 0.1953179286150576, 0.19713419214543998, 0.19878746656207907, 0.2004055497727501, 0.2018247304278579, 0.20317639777935967, 0.20446955620878804, 0.20552647799885423, 0.20657765295990457, 0.20754460071531686, 0.20842880458804505, 0.20926636865443435, 0.21000397237015553, 0.2107189329392954, 0.21132286992175936, 0.21199426034168198, 0.21250085546961234, 0.21298705406809224, 0.2134618351876765, 0.21383326252623627, 0.21425121643926417, 0.21463671160504616, 0.2149813321054404, 0.21532636778793807, 0.21557877118194788, 0.2158314748246427, 0.2161333489137916, 0.21633528112973988, 0.21653794646337904, 0.2167203092148355, 0.2169519010554413, 0.2170603883619957, 0.21726723683430482, 0.21744413591296366, 0.21757776844685187, 0.21770036287616076, 0.21779674696968165, 0.21794859682051712, 0.21800624267556395, 0.21805805184746863, 0.21816284487123966, 0.2182175950140529, 0.21831805946521315, 0.21838987628078116, 0.21842428448026854, 0.218462191257417, 0.2185265703401932, 0.21861702754920637, 0.21866588695398487, 0.2187168358647141, 0.21876734018198946, 0.21883608160445125, 0.21887469739657164, 0.21886294863328953, 0.2188989498201636, 0.21891958094902766, 0.2189428353114431, 0.21893353730309317, 0.2189786475181973, 0.21899832037250527, 0.21901137564376344, 0.219044123824819, 0.21909216232942644, 0.21916093757165914, 0.21921128164325845, 0.21917281385291748, 0.21917074492494393, 0.21914330625286296, 0.21922324314441866, 0.21920686674087564, 0.21921537946578218, 0.2191602619003409, 0.21917107391167265, 0.21920638135877596, 0.21917774024094008, 0.2191938159134592, 0.2191687204401458, 0.2191461345141637, 0.21914673352006553, 0.21919617284801468, 0.21923365674792158, 0.2192650310602095, 0.21928164219722102, 0.21922919895387397, 0.21920292637414734, 0.21928852699762222, 0.2192841873504163, 0.21929895495604468], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 923750389, "moving_var_accuracy_train": [0.0014778754163294432, 0.002913097127943309, 0.004143531088618452, 0.005118230497654006, 0.005880270389816994, 0.006439117063617297, 0.006806275611843528, 0.007024728917148499, 0.007117492480928049, 0.007091611941507499, 0.006975092961467892, 0.006773946141150806, 0.006519276052908237, 0.006225419517698835, 0.005903213995235578, 0.005574775888905462, 0.005238665765082088, 0.004902803078669936, 0.0045772716630635354, 0.0042611707138940115, 0.0039523204402067075, 0.0036577330925079525, 0.0033783307675689126, 0.003115809582479399, 0.0028693294730834156, 0.0026352279964826147, 0.0024169982379519147, 0.0022119844673854313, 0.00202458659605892, 0.0018518172553592023, 0.0016912353764937022, 0.0015456755783342308, 0.0014092346840872973, 0.0012847542573406101, 0.0011713291601189641, 0.0010642499971399183, 0.0009677697166145793, 0.0008794076366083929, 0.0007985032213444813, 0.0007249665212977922, 0.0006573664023410245, 0.0005962302796457451, 0.0005398899105902598, 0.0004899578053949087, 0.00044327177246820287, 0.00040107209691585683, 0.0003629936412278945, 0.00032793590151557146, 0.00029671448062475235, 0.0002683804912678485, 0.00024261131174469142, 0.000219421627169992, 0.00019805283171276186, 0.00017882228072076684, 0.0001617602043399853, 0.00014595117348452678, 0.00013172571527320573, 0.00011885244930395417, 0.00010744991739927531, 9.681085112049871e-05, 8.751484262291833e-05, 7.904499791689965e-05, 7.130121701223013e-05, 6.43063598578853e-05, 5.795933291345134e-05, 5.237092501689495e-05, 4.71637399166422e-05, 4.2471523637619004e-05, 3.8323205474336803e-05, 3.4517863130145795e-05, 3.115691477065356e-05, 2.8087642188573177e-05, 2.5289533287443547e-05, 2.277351227248326e-05, 2.053346304192688e-05, 1.8553759297696248e-05, 1.6719868540844416e-05, 1.5071243810300435e-05, 1.3587075603841442e-05, 1.2270896491915963e-05, 1.1057227457334139e-05, 9.95274701254866e-06, 8.969137080400874e-06, 8.076054163664627e-06, 7.273315635640299e-06, 6.546762148709746e-06, 5.910400317399431e-06, 5.3228434764291e-06, 4.792093089754804e-06, 4.322535771041347e-06, 3.911051475261476e-06, 3.562516633232823e-06, 3.229075699816313e-06, 2.9194860678781416e-06, 2.6275759852569653e-06, 2.371594313261365e-06, 2.1919440416195336e-06, 1.9751633167946123e-06, 1.7782991834831591e-06, 1.627810779316395e-06, 1.4660817976860916e-06, 1.3306931603060624e-06, 1.2050066669534575e-06, 1.0868318454805937e-06, 9.838167059599642e-07, 8.900261518361866e-07, 8.010267659252018e-07, 7.429223136652561e-07, 6.812754670688135e-07, 6.220070476058056e-07, 5.622897117005684e-07, 5.308133844853383e-07, 4.839442820462366e-07, 5.014970544952245e-07, 4.5151684188654935e-07, 4.0832789728184714e-07], "duration": 44901.052238, "accuracy_train": [0.1281438174833887, 0.1454378777916205, 0.1561085083863972, 0.1633132253022333, 0.17047396265919157, 0.176285392730251, 0.180679923980251, 0.18523685515873017, 0.1892826140873016, 0.1919797867063492, 0.1945599809085456, 0.19579122831303067, 0.19748786596760798, 0.19888295525332225, 0.19988204826504247, 0.20183409180047987, 0.2028804087647656, 0.20394997721714653, 0.20560047238372095, 0.20676304678848284, 0.20715760110972684, 0.20811127260981913, 0.20899338720468807, 0.21004006465716132, 0.21090036971668513, 0.21092326071659284, 0.21155105089516427, 0.21155069040697674, 0.21275940729974158, 0.2134805639188815, 0.21366693631183095, 0.21496829866878922, 0.214597356323828, 0.21534140394287563, 0.2161079820736434, 0.21503877410945, 0.2160382276093577, 0.2162471305140273, 0.21638663944259873, 0.21680444525193798, 0.21664240581164634, 0.2171535780615541, 0.21675830276393504, 0.2180367741209856, 0.2170602116209856, 0.21736284145441123, 0.21773486526393504, 0.21717610857327427, 0.21801280165651532, 0.2181061680970838, 0.21808291660898854, 0.21843168893041712, 0.21785040172803619, 0.21810580760889625, 0.21885021571613142, 0.21815267107327427, 0.21836193446613142, 0.21836157397794387, 0.2190362276208933, 0.2180367741209856, 0.21912887308508674, 0.2190362276208933, 0.2187804612518457, 0.21880371273994093, 0.2186642038113695, 0.21931524547803619, 0.2185250553709856, 0.21852433439461055, 0.21910598208517904, 0.21871034629937244, 0.21922223952565523, 0.2190362276208933, 0.21873395827565523, 0.2188033522517534, 0.21910598208517904, 0.21943114243032483, 0.21910562159699148, 0.2191753760612772, 0.21922187903746768, 0.2194547544066076, 0.21922223952565523, 0.21875720976375046, 0.2192229605020303, 0.21910526110880402, 0.21915212457318198, 0.21884985522794387, 0.21938463945413436, 0.2191753760612772, 0.21912887308508674, 0.21933885745431894, 0.2195245088708933, 0.2197799147517534, 0.21966437828765228, 0.21882660373984864, 0.21915212457318198, 0.21889635820413436, 0.21994267516842006, 0.21905947910898854, 0.21929199398994093, 0.2186642038113695, 0.21926838201365817, 0.21952414838270579, 0.21891997018041712, 0.21933849696613142, 0.21894286118032483, 0.21894286118032483, 0.21915212457318198, 0.21964112679955705, 0.2195710118470838, 0.21954739987080102, 0.21943114243032483, 0.21875720976375046, 0.2189664731566076, 0.22005893260889625, 0.21924513052556294, 0.2194318634066999], "end": "2016-01-24 01:21:05.493000", "learning_rate_per_epoch": [0.0009078236180357635, 0.0008355288882739842, 0.0007689913618378341, 0.0007077525369822979, 0.0006513905245810747, 0.000599516904912889, 0.0005517742247320712, 0.0005078335525467992, 0.00046739212120883167, 0.00043017123243771493, 0.0003959144523832947, 0.0003643857198767364, 0.0003353677748236805, 0.0003086606739088893, 0.0002840803936123848, 0.0002614575787447393, 0.00024063634919002652, 0.00022147322306409478, 0.00020383615628816187, 0.00018760361126624048, 0.0001726637565298006, 0.00015891363727860153, 0.00014625850599259138, 0.000134611182147637, 0.0001238913828274235, 0.00011402526433812454, 0.00010494483285583556, 9.65875296969898e-05, 8.889575838111341e-05, 8.181652083294466e-05, 7.530104630859569e-05, 6.930442759767175e-05, 6.378535181283951e-05, 5.870579116162844e-05, 5.403074101195671e-05, 4.972799069946632e-05, 4.5767890696879476e-05, 4.212315252516419e-05, 3.87686668545939e-05, 3.5681314329849556e-05, 3.283982368884608e-05, 3.0224617148633115e-05, 2.7817672162200324e-05, 2.560240500315558e-05, 2.356355071242433e-05, 2.1687061234842986e-05, 1.9960007193731144e-05, 1.8370486941421404e-05, 1.6907548342715017e-05, 1.5561112377326936e-05, 1.432189947081497e-05, 1.3181371286918875e-05, 1.2131669791415334e-05, 1.1165561772941146e-05, 1.0276389730279334e-05, 9.458027307118755e-06, 8.704834726813715e-06, 8.0116233220906e-06, 7.373615972028347e-06, 6.786416179238586e-06, 6.245978511287831e-06, 5.748578587372322e-06, 5.290788976708427e-06, 4.8694555516703986e-06, 4.481675205170177e-06, 4.124775841773953e-06, 3.796298415181809e-06, 3.4939791930810316e-06, 3.2157354326045606e-06, 2.9596496915473836e-06, 2.7239573228143854e-06, 2.5070344236155506e-06, 2.3073862394085154e-06, 2.1236369320831727e-06, 1.95452071238833e-06, 1.798871949176828e-06, 1.6556183481952758e-06, 1.5237727666317369e-06, 1.4024267329659779e-06, 1.290744194193394e-06, 1.1879554904226097e-06, 1.0933523526546196e-06, 1.0062830142487655e-06, 9.261474360755528e-07, 8.523934411641676e-07, 7.845129061934131e-07, 7.220380098260648e-07, 6.645383336945088e-07, 6.116176791692851e-07, 5.629113388749829e-07, 5.180837661100668e-07, 4.768260453147377e-07, 4.3885390255127277e-07, 4.0390565914094623e-07, 3.717405263614637e-07, 3.421368717226869e-07, 3.1489071261603385e-07, 2.898143236507167e-07, 2.6673490083339857e-07, 2.4549339627810696e-07, 2.259434666029847e-07, 2.079504071161864e-07, 1.9139022811032191e-07, 1.7614881642202818e-07, 1.6212116804581456e-07, 1.4921060653705354e-07, 1.3732818615608267e-07, 1.2639202395803295e-07, 1.1632676688577703e-07, 1.0706305886287737e-07, 9.853706472995327e-08, 9.069004391903945e-08, 8.346792412794457e-08, 7.682093894345599e-08, 7.07032867808266e-08, 6.507281113954377e-08], "accuracy_valid": [0.12762818853539157, 0.1435282144201807, 0.15357916039156627, 0.16208437264683734, 0.16845261907003012, 0.1760518637048193, 0.17984633847891568, 0.1859910344503012, 0.1892869328878012, 0.19186070453689757, 0.19481098221009036, 0.19809658556099397, 0.20265436746987953, 0.20339708443147592, 0.20573701054216867, 0.2056046451430723, 0.2065812076430723, 0.20781220585466867, 0.20867699312876506, 0.20917556946536145, 0.20842255741716867, 0.20989769625376506, 0.21162727080195784, 0.2128582690135542, 0.21382453642695784, 0.2160320971385542, 0.2157879565135542, 0.2143231127635542, 0.2150658297251506, 0.2160320971385542, 0.2154320406626506, 0.21727339043674698, 0.21751753106174698, 0.21837202324924698, 0.2171307299510542, 0.2173748705760542, 0.21837202324924698, 0.21923681052334337, 0.2187279391001506, 0.2190941500376506, 0.21922651543674698, 0.21971479668674698, 0.2193382906626506, 0.2193382906626506, 0.2187279391001506, 0.21971479668674698, 0.2197045016001506, 0.2179852221385542, 0.2193279955760542, 0.2193382906626506, 0.2198265719126506, 0.21971479668674698, 0.2190941500376506, 0.2195721362010542, 0.2205589937876506, 0.21834113798945784, 0.2189617846385542, 0.2192162203501506, 0.2208031344126506, 0.2184735033885542, 0.2194603609751506, 0.2196942065135542, 0.2199383471385542, 0.2200707125376506, 0.2199486422251506, 0.2210472750376506, 0.2190838549510542, 0.2198265719126506, 0.2192059252635542, 0.21858527861445784, 0.2206810641001506, 0.2198265719126506, 0.2194603609751506, 0.2198265719126506, 0.2208031344126506, 0.2200707125376506, 0.2195824312876506, 0.2195721362010542, 0.2200707125376506, 0.2200707125376506, 0.2199486422251506, 0.2197045016001506, 0.2201927828501506, 0.2200707125376506, 0.2190941500376506, 0.2192162203501506, 0.2200707125376506, 0.2203148531626506, 0.2199486422251506, 0.2206810641001506, 0.2204369234751506, 0.2206810641001506, 0.2205589937876506, 0.2194603609751506, 0.2195824312876506, 0.2195721362010542, 0.2196942065135542, 0.2198265719126506, 0.2204369234751506, 0.2192162203501506, 0.2193382906626506, 0.2197045016001506, 0.2192059252635542, 0.2201927828501506, 0.2198265719126506, 0.2195721362010542, 0.2198265719126506, 0.2196942065135542, 0.2196942065135542, 0.2200707125376506, 0.2198265719126506, 0.2193279955760542, 0.2195721362010542, 0.2210472750376506, 0.2190838549510542, 0.2205589937876506], "accuracy_test": 0.22621173469387754, "start": "2016-01-23 12:52:44.441000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0], "accuracy_train_last": 0.2194318634066999, "batch_size_eval": 1024, "accuracy_train_std": [0.010490302194653408, 0.010382198975709283, 0.011208415794371668, 0.01114295649708101, 0.011072453134979975, 0.011495640132765524, 0.011493032993099827, 0.011902874590110331, 0.012205788646915195, 0.012919842089716034, 0.013011015032563716, 0.01380795640503012, 0.013854215703341262, 0.01395950956298562, 0.014188617555785507, 0.013834813044783312, 0.01362124158362564, 0.013954450232209563, 0.013765537394554295, 0.014211109346772279, 0.014182241379831474, 0.01449592165072936, 0.014079302970226039, 0.01430019028164703, 0.0138750018552012, 0.01423443782793618, 0.014158007005137344, 0.014449939936436845, 0.014714681131962119, 0.014617689529641669, 0.015222585717166146, 0.014916715111732367, 0.014851327433253163, 0.015406474689917363, 0.0154149198159276, 0.01541403813759147, 0.015047102269387392, 0.015239694513669834, 0.015250044816590654, 0.015250593354813595, 0.01496398582466202, 0.015166834037753115, 0.015146263184401433, 0.015107958227278376, 0.015019514531003659, 0.015296897365515654, 0.015041951249721953, 0.014873061867822144, 0.015014808358201195, 0.014925516417813726, 0.01519513752353744, 0.015426591408397144, 0.01505549126500187, 0.01505985060639419, 0.01507824653051518, 0.01503506187089509, 0.01543161716548729, 0.015392873366700078, 0.01518690890249084, 0.015139487313432865, 0.01510648423281256, 0.014803806846652468, 0.015200782820164191, 0.015319013664683795, 0.015409020103662139, 0.015161123608125002, 0.015162847325840261, 0.015259088832363585, 0.015399986771964384, 0.015028310611213543, 0.015081725461430596, 0.015422803862450932, 0.015164911981026416, 0.014810630567812438, 0.01504346604326015, 0.015174638100180328, 0.015116816095925422, 0.015330552448065849, 0.015199775553498182, 0.015418190712047794, 0.015469688175752382, 0.015520844124096187, 0.015432041070133387, 0.015037980654733156, 0.015411686828521927, 0.015221695249315525, 0.01567129919016255, 0.015414745633191632, 0.015164991767916294, 0.015441781850025791, 0.015227365733633534, 0.015041415686469146, 0.01537136977738095, 0.015015319279898683, 0.015144165200398275, 0.015512412125611202, 0.015165497629974349, 0.015442218242789938, 0.015382758329864845, 0.015383948728769276, 0.014980061171476116, 0.015111690220443006, 0.01568798818150969, 0.015048241414266047, 0.014968078946994373, 0.015434126568144111, 0.015305239311655453, 0.015425081952403852, 0.015755570424970767, 0.015225003769411856, 0.015407773762395018, 0.014948511171787728, 0.015273785344191262, 0.01538563635448597, 0.015281724949901822, 0.015609092556396732], "accuracy_test_std": 0.012483745589681782, "error_valid": [0.8723718114646084, 0.8564717855798193, 0.8464208396084337, 0.8379156273531627, 0.8315473809299698, 0.8239481362951807, 0.8201536615210843, 0.8140089655496988, 0.8107130671121988, 0.8081392954631024, 0.8051890177899097, 0.801903414439006, 0.7973456325301205, 0.7966029155685241, 0.7942629894578314, 0.7943953548569277, 0.7934187923569277, 0.7921877941453314, 0.7913230068712349, 0.7908244305346386, 0.7915774425828314, 0.7901023037462349, 0.7883727291980421, 0.7871417309864458, 0.7861754635730421, 0.7839679028614458, 0.7842120434864458, 0.7856768872364458, 0.7849341702748494, 0.7839679028614458, 0.7845679593373494, 0.782726609563253, 0.782482468938253, 0.781627976750753, 0.7828692700489458, 0.7826251294239458, 0.781627976750753, 0.7807631894766567, 0.7812720608998494, 0.7809058499623494, 0.780773484563253, 0.780285203313253, 0.7806617093373494, 0.7806617093373494, 0.7812720608998494, 0.780285203313253, 0.7802954983998494, 0.7820147778614458, 0.7806720044239458, 0.7806617093373494, 0.7801734280873494, 0.780285203313253, 0.7809058499623494, 0.7804278637989458, 0.7794410062123494, 0.7816588620105421, 0.7810382153614458, 0.7807837796498494, 0.7791968655873494, 0.7815264966114458, 0.7805396390248494, 0.7803057934864458, 0.7800616528614458, 0.7799292874623494, 0.7800513577748494, 0.7789527249623494, 0.7809161450489458, 0.7801734280873494, 0.7807940747364458, 0.7814147213855421, 0.7793189358998494, 0.7801734280873494, 0.7805396390248494, 0.7801734280873494, 0.7791968655873494, 0.7799292874623494, 0.7804175687123494, 0.7804278637989458, 0.7799292874623494, 0.7799292874623494, 0.7800513577748494, 0.7802954983998494, 0.7798072171498494, 0.7799292874623494, 0.7809058499623494, 0.7807837796498494, 0.7799292874623494, 0.7796851468373494, 0.7800513577748494, 0.7793189358998494, 0.7795630765248494, 0.7793189358998494, 0.7794410062123494, 0.7805396390248494, 0.7804175687123494, 0.7804278637989458, 0.7803057934864458, 0.7801734280873494, 0.7795630765248494, 0.7807837796498494, 0.7806617093373494, 0.7802954983998494, 0.7807940747364458, 0.7798072171498494, 0.7801734280873494, 0.7804278637989458, 0.7801734280873494, 0.7803057934864458, 0.7803057934864458, 0.7799292874623494, 0.7801734280873494, 0.7806720044239458, 0.7804278637989458, 0.7789527249623494, 0.7809161450489458, 0.7794410062123494], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-3, 3], "momentum": 0.7339450667125776, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0009863737183841165, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "optimization": "adadelta", "nb_data_augmentation": 3, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 3.771863743159733e-07, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.0796352367559869}, "accuracy_valid_max": 0.2210472750376506, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.2205589937876506, "loss_train": [2.3269155025482178, 2.2681467533111572, 2.2318122386932373, 2.2067644596099854, 2.187398910522461, 2.171456813812256, 2.1586387157440186, 2.1471447944641113, 2.137850046157837, 2.1292362213134766, 2.1220920085906982, 2.1148521900177, 2.1088640689849854, 2.1030173301696777, 2.0984365940093994, 2.0940139293670654, 2.089622974395752, 2.085819721221924, 2.0829031467437744, 2.079059362411499, 2.0766780376434326, 2.0746383666992188, 2.0719504356384277, 2.0696346759796143, 2.0680348873138428, 2.06606388092041, 2.064561367034912, 2.0629875659942627, 2.0615460872650146, 2.060676336288452, 2.059880018234253, 2.0586154460906982, 2.057429075241089, 2.0564987659454346, 2.056004524230957, 2.055063247680664, 2.0542728900909424, 2.0536141395568848, 2.0528650283813477, 2.0528311729431152, 2.052144765853882, 2.051305055618286, 2.0513601303100586, 2.0505692958831787, 2.0503766536712646, 2.049873113632202, 2.049645185470581, 2.049665689468384, 2.0492441654205322, 2.048863410949707, 2.049264669418335, 2.0482771396636963, 2.0488977432250977, 2.048436164855957, 2.0485634803771973, 2.04848313331604, 2.047985076904297, 2.048128128051758, 2.047598361968994, 2.047755241394043, 2.047595977783203, 2.047426462173462, 2.0476043224334717, 2.047175645828247, 2.0479230880737305, 2.048060655593872, 2.0474278926849365, 2.047161340713501, 2.0471959114074707, 2.047179937362671, 2.0471677780151367, 2.046964406967163, 2.046915054321289, 2.0471835136413574, 2.0471079349517822, 2.0467562675476074, 2.047365188598633, 2.0467779636383057, 2.0470056533813477, 2.0467922687530518, 2.0470917224884033, 2.046919584274292, 2.04689884185791, 2.0470306873321533, 2.047483205795288, 2.0466268062591553, 2.0468461513519287, 2.0471370220184326, 2.047110080718994, 2.0466747283935547, 2.0470921993255615, 2.0471391677856445, 2.0471599102020264, 2.0467441082000732, 2.0471928119659424, 2.0470025539398193, 2.046637773513794, 2.046973943710327, 2.0471415519714355, 2.0469281673431396, 2.0470223426818848, 2.047037124633789, 2.0470943450927734, 2.0469470024108887, 2.047093152999878, 2.0472428798675537, 2.046639919281006, 2.046949625015259, 2.0465633869171143, 2.0468900203704834, 2.046949625015259, 2.046689510345459, 2.0464894771575928, 2.047004461288452, 2.0466866493225098, 2.0465471744537354], "accuracy_train_first": 0.1281438174833887, "model": "residualv5", "loss_std": [0.048316698521375656, 0.04323277622461319, 0.04144774749875069, 0.04064832255244255, 0.04059254750609398, 0.04069487005472183, 0.040684979408979416, 0.041053492575883865, 0.04076444357633591, 0.04091893136501312, 0.04092841595411301, 0.0410122349858284, 0.04131850227713585, 0.04111292213201523, 0.04142552986741066, 0.041777074337005615, 0.04138428717851639, 0.041176777333021164, 0.041171807795763016, 0.04140409827232361, 0.04151132330298424, 0.041253313422203064, 0.04146125540137291, 0.041495051234960556, 0.04152389243245125, 0.04132856801152229, 0.041493359953165054, 0.041095905005931854, 0.041228245943784714, 0.041440192610025406, 0.04152233526110649, 0.04166056588292122, 0.04159495607018471, 0.041257672011852264, 0.041320256888866425, 0.04096761345863342, 0.04128183424472809, 0.041292302310466766, 0.04166030511260033, 0.04146064445376396, 0.041438668966293335, 0.041522301733493805, 0.04112251475453377, 0.041412293910980225, 0.041258763521909714, 0.04099322482943535, 0.04170575737953186, 0.04120779037475586, 0.041148893535137177, 0.04138106107711792, 0.041399549692869186, 0.04151676595211029, 0.04116709530353546, 0.0417252853512764, 0.04116356000304222, 0.040838196873664856, 0.04172263294458389, 0.041098013520240784, 0.041242845356464386, 0.04081060364842415, 0.041669707745313644, 0.04168880358338356, 0.041058819741010666, 0.04110409691929817, 0.041368935257196426, 0.04165076091885567, 0.0414373055100441, 0.04165157303214073, 0.04176320508122444, 0.041317373514175415, 0.041361384093761444, 0.04135250672698021, 0.041465047746896744, 0.04099579527974129, 0.04183467850089073, 0.04129863902926445, 0.041691768914461136, 0.04141624644398689, 0.041748300194740295, 0.04209774732589722, 0.04143422096967697, 0.041487909853458405, 0.041385065764188766, 0.041302330791950226, 0.04123227670788765, 0.041959960013628006, 0.0413714163005352, 0.04163094609975815, 0.04119331017136574, 0.04161114618182182, 0.04185426980257034, 0.04169834405183792, 0.041405245661735535, 0.04145406559109688, 0.041593123227357864, 0.04170277714729309, 0.041433896869421005, 0.04161379113793373, 0.04201500490307808, 0.04188987612724304, 0.0417063906788826, 0.04139457643032074, 0.04122329503297806, 0.04189471900463104, 0.04173275828361511, 0.04151880368590355, 0.04106643795967102, 0.04163969308137894, 0.04143162816762924, 0.0416363887488842, 0.0413079597055912, 0.04150199145078659, 0.04167010635137558, 0.04159390553832054, 0.04131564870476723, 0.04139571264386177]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:10 2016", "state": "available"}], "summary": "a862f31a9fced742802495562b40a194"}