{"content": {"hp_model": {"f1": 244, "f2": 85, "f3": 183, "nonlin": "leaky_rectify", "ds2": 1697, "ds1": 2190, "do2": 0.33918217148774554, "do3": 0.4792317213274847, "do1": 0.05880510749888834, "do4": 0.1777988476831236, "do5": 0.04521481556332718}, "accuracy_valid_std": [0.04679102987389882, 0.05123977875095107, 0.05272198430082124, 0.056471912328037346, 0.04828347722815009, 0.055993634590497, 0.05468648085887568, 0.05957513939633769, 0.05521373438985279, 0.05559999994292863, 0.05563895982944131, 0.06005770968823405, 0.06066636533848589, 0.05593244630903631, 0.06182115907904464, 0.054593128515691744, 0.05442511679311952, 0.05645043267071248, 0.05627956788159839, 0.057987704303190855, 0.061850578087750165, 0.0603403455248531, 0.05365333132260564, 0.05581562034016277, 0.054398075291029774, 0.06244861464230358, 0.053862341338016796, 0.05712690856464713, 0.06272971814086495, 0.05159341131158424, 0.054048769391650764, 0.05442511679311952, 0.05260548720251193, 0.06213151680917241, 0.053149863870807355, 0.053420973513613156, 0.05441135188957709, 0.05441053244027231, 0.05949965120177742, 0.05814941012969282, 0.0547744646949085, 0.05442511679311952, 0.05326450070237946, 0.05451221380023349, 0.062421906110675246, 0.05442511679311952, 0.05442511679311952, 0.054642925399321834, 0.05475101616327272, 0.05442511679311952, 0.056056824130879625, 0.06145499021429146, 0.05442511679311952, 0.05470620805677076, 0.05442511679311952, 0.053256966388601674, 0.053149863870807355, 0.053349313776693996, 0.05344166845051854, 0.053149863870807355, 0.05442511679311952, 0.05736866128098957, 0.05442511679311952, 0.05442511679311952, 0.05423850261921379, 0.05442511679311952, 0.05442511679311952, 0.05551958894934511, 0.05442511679311952, 0.05442511679311952, 0.05163643051989342], "moving_avg_accuracy_train": [0.009158509036144576, 0.017151731927710842, 0.026364646084337348, 0.03515043298192771, 0.04093744164156626, 0.04838360711596386, 0.054920434657379516, 0.06202251769766566, 0.06713662511464609, 0.07096748444053087, 0.07527416220129707, 0.08033616616189025, 0.08589677017823134, 0.0875457038531793, 0.09315954461243967, 0.09362568728974992, 0.09432994838005203, 0.09642274420469742, 0.09717203604928792, 0.09922770518532298, 0.10420751373305573, 0.10503017350432847, 0.10588351910570286, 0.1063550316529639, 0.10564046222260726, 0.10781879175335858, 0.10703079435513116, 0.10758995136540117, 0.10937801948187309, 0.10945301873850506, 0.10961935090079913, 0.10872189246734573, 0.10812831767844248, 0.10972841889252595, 0.10879416887074322, 0.10805217668246409, 0.10780559982747069, 0.10705421906159109, 0.10770045378193799, 0.10774789710856346, 0.10703287772903242, 0.10639406661275569, 0.10631565392738374, 0.10610389275151284, 0.10917008480166275, 0.10831755297812298, 0.10755027433693719, 0.10685501723456876, 0.10625752379424441, 0.10569624807144648, 0.1060311789871934, 0.10747154753425718, 0.10678886943745797, 0.1061885781262423, 0.10563419697024458, 0.10511172230334061, 0.10464149510312704, 0.1042041716470312, 0.10398942089799074, 0.10363142383831216, 0.10333275811110745, 0.1036310711554184, 0.10333244069650308, 0.10306367328347928, 0.10282178261175785, 0.10260408100720858, 0.10240814956311423, 0.10264126156463413, 0.10244161206479722, 0.102261927514944, 0.10227199229357008], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.0007549045898862768, 0.0012544386406459797, 0.0018928948618977034, 0.002398315838396767, 0.002459889477597675, 0.002712908952286904, 0.0028261890858141065, 0.0029975264288327765, 0.0029331606380012263, 0.00277192392277357, 0.0026616587905119162, 0.002626107868334274, 0.0026417799347397855, 0.0024020727816452033, 0.002445502376113682, 0.0022029077394628035, 0.001987080818666345, 0.0018277908860725894, 0.0016500647418806588, 0.0015230902480642173, 0.0015939676618064462, 0.0014406618175192363, 0.0013031494242057777, 0.0011748353985252214, 0.0010619473439099011, 0.0009984586854198006, 0.0009042012759743392, 0.0008165950574361122, 0.0007637102399947923, 0.0006873898399917712, 0.0006188998534865149, 0.0005642587528958532, 0.0005110038568764617, 0.0004829463862466179, 0.00044250715555076516, 0.00040321141166289404, 0.0003634374718053706, 0.00033217488212283785, 0.00030271596773459076, 0.0002724646287843033, 0.00024981944032381764, 0.00022851021307194444, 0.00020571452870779517, 0.0001855466609974717, 0.0002516057980933477, 0.00023298651287534532, 0.00021498631020679004, 0.0001978381211316546, 0.00018126729471956476, 0.00016597583918062937, 0.00015038786372747405, 0.0001540210313170626, 0.0001428133726400009, 0.00013177518230089014, 0.00012136371026592948, 0.00011168415723734432, 0.00010250576409199619, 9.397645393006103e-05, 8.499386949497591e-05, 7.764793959812498e-05, 7.068595658777295e-05, 6.441827698065021e-05, 5.877907064151304e-05, 5.35512868780933e-05, 4.8722758063876536e-05, 4.427702815509886e-05, 4.0194827516653056e-05, 3.666441561226129e-05, 3.3356713356101305e-05, 3.031162085759475e-05, 2.7281370469754404e-05], "duration": 152516.068834, "accuracy_train": [0.09158509036144578, 0.08909073795180723, 0.1092808734939759, 0.11422251506024096, 0.09302051957831325, 0.11539909638554217, 0.11375188253012049, 0.12594126506024098, 0.11316359186746988, 0.10544521837349398, 0.11403426204819277, 0.1258942018072289, 0.1359422063253012, 0.10238610692771084, 0.14368411144578314, 0.09782097138554217, 0.10066829819277108, 0.11525790662650602, 0.10391566265060241, 0.11772872740963855, 0.1490257906626506, 0.11243411144578314, 0.11356362951807229, 0.11059864457831325, 0.09920933734939759, 0.12742375753012047, 0.09993881777108433, 0.11262236445783133, 0.12547063253012047, 0.11012801204819277, 0.11111634036144578, 0.10064476656626506, 0.10278614457831325, 0.12412932981927711, 0.1003859186746988, 0.1013742469879518, 0.10558640813253012, 0.1002917921686747, 0.11351656626506024, 0.10817488704819277, 0.10059770331325302, 0.10064476656626506, 0.10560993975903614, 0.1041980421686747, 0.13676581325301204, 0.10064476656626506, 0.10064476656626506, 0.10059770331325302, 0.1008800828313253, 0.10064476656626506, 0.10904555722891567, 0.12043486445783133, 0.10064476656626506, 0.1007859563253012, 0.10064476656626506, 0.10040945030120482, 0.10040945030120482, 0.10026826054216867, 0.10205666415662651, 0.10040945030120482, 0.10064476656626506, 0.10631588855421686, 0.10064476656626506, 0.10064476656626506, 0.10064476656626506, 0.10064476656626506, 0.10064476656626506, 0.10473926957831325, 0.10064476656626506, 0.10064476656626506, 0.10236257530120482], "end": "2016-01-18 18:35:16.181000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0], "accuracy_valid": [0.09134615384615384, 0.08613782051282051, 0.10616987179487179, 0.11057692307692307, 0.09134615384615384, 0.1140491452991453, 0.11511752136752136, 0.11805555555555555, 0.10964209401709402, 0.10029380341880342, 0.1076388888888889, 0.1267361111111111, 0.12860576923076922, 0.09802350427350427, 0.1388888888888889, 0.10016025641025642, 0.09602029914529915, 0.11672008547008547, 0.0998931623931624, 0.11912393162393162, 0.15251068376068377, 0.10990918803418803, 0.1111111111111111, 0.11645299145299146, 0.09829059829059829, 0.12980769230769232, 0.09561965811965811, 0.11084401709401709, 0.12566773504273504, 0.11271367521367522, 0.10790598290598291, 0.09602029914529915, 0.09949252136752136, 0.11792200854700854, 0.09788995726495726, 0.09922542735042734, 0.09762286324786325, 0.0953525641025641, 0.10844017094017094, 0.10349893162393162, 0.09588675213675214, 0.09602029914529915, 0.09922542735042734, 0.10216346153846154, 0.13528311965811965, 0.09602029914529915, 0.09602029914529915, 0.09628739316239317, 0.09642094017094018, 0.09602029914529915, 0.1045673076923077, 0.12459935897435898, 0.09602029914529915, 0.09655448717948718, 0.09602029914529915, 0.09802350427350427, 0.09788995726495726, 0.09401709401709402, 0.09815705128205128, 0.09788995726495726, 0.09602029914529915, 0.10657051282051282, 0.09602029914529915, 0.09602029914529915, 0.09588675213675214, 0.09602029914529915, 0.09602029914529915, 0.10122863247863248, 0.09602029914529915, 0.09602029914529915, 0.09788995726495726], "accuracy_test": 0.15104166666666666, "start": "2016-01-17 00:13:20.112000", "learning_rate_per_epoch": [0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246, 0.007411209400743246], "accuracy_train_last": 0.10236257530120482, "error_valid": [0.9086538461538461, 0.9138621794871795, 0.8938301282051282, 0.8894230769230769, 0.9086538461538461, 0.8859508547008547, 0.8848824786324786, 0.8819444444444444, 0.890357905982906, 0.8997061965811965, 0.8923611111111112, 0.8732638888888888, 0.8713942307692308, 0.9019764957264957, 0.8611111111111112, 0.8998397435897436, 0.9039797008547008, 0.8832799145299145, 0.9001068376068376, 0.8808760683760684, 0.8474893162393162, 0.890090811965812, 0.8888888888888888, 0.8835470085470085, 0.9017094017094017, 0.8701923076923077, 0.9043803418803419, 0.889155982905983, 0.8743322649572649, 0.8872863247863247, 0.892094017094017, 0.9039797008547008, 0.9005074786324786, 0.8820779914529915, 0.9021100427350427, 0.9007745726495726, 0.9023771367521367, 0.9046474358974359, 0.891559829059829, 0.8965010683760684, 0.9041132478632479, 0.9039797008547008, 0.9007745726495726, 0.8978365384615384, 0.8647168803418803, 0.9039797008547008, 0.9039797008547008, 0.9037126068376068, 0.9035790598290598, 0.9039797008547008, 0.8954326923076923, 0.875400641025641, 0.9039797008547008, 0.9034455128205128, 0.9039797008547008, 0.9019764957264957, 0.9021100427350427, 0.905982905982906, 0.9018429487179487, 0.9021100427350427, 0.9039797008547008, 0.8934294871794872, 0.9039797008547008, 0.9039797008547008, 0.9041132478632479, 0.9039797008547008, 0.9039797008547008, 0.8987713675213675, 0.9039797008547008, 0.9039797008547008, 0.9021100427350427], "accuracy_train_std": [0.05204617034646064, 0.05025524695435671, 0.05791993304524725, 0.05737176554523036, 0.051739015613972886, 0.05832897381173844, 0.05578548154560788, 0.057797966953360834, 0.055365586700021924, 0.05397011756251184, 0.05707899544879341, 0.05940491881175803, 0.060746897243608274, 0.05315030818981487, 0.06304633494473318, 0.05216497736305785, 0.05221041681995549, 0.05708194455176311, 0.05266308615373384, 0.05859595663908723, 0.06518397737753022, 0.05525119669526321, 0.0543038769258328, 0.0548952852258762, 0.051889408140015775, 0.05678535463229322, 0.052182255915326006, 0.05570442492438394, 0.05619100138633143, 0.054080572231489904, 0.054894700167562295, 0.052178308249240295, 0.05317372864457644, 0.05902650884401776, 0.053909574813158695, 0.05376502398774553, 0.053280918587400146, 0.052033295139875896, 0.055300423758576564, 0.05400445736834963, 0.05212810864076292, 0.052178308249240295, 0.0528669295073824, 0.05451615137254395, 0.060574556973214996, 0.052178308249240295, 0.052178308249240295, 0.05217041202092486, 0.0522312161117681, 0.052178308249240295, 0.053579379440186876, 0.05747174768055633, 0.052178308249240295, 0.052088917660682355, 0.052178308249240295, 0.05392713125008129, 0.05392713125008129, 0.05253553010778719, 0.05448656017635051, 0.05388620700043393, 0.052178308249240295, 0.05284293820403794, 0.052178308249240295, 0.052178308249240295, 0.052178308249240295, 0.052178308249240295, 0.052178308249240295, 0.052839474804202535, 0.052178308249240295, 0.052178308249240295, 0.055303447680009374], "accuracy_test_std": 0.06238303692463337, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1.0, 1.2], "translation_range": [-3, 3], "momentum": 0.5200036301745011, "shear_range": [1, 1.1], "patience_check_each": 1, "learning_rate": 0.007411209197229123, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "optimization": "adam", "nb_data_augmentation": 3, "learning_rate_decay_method": "none", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 8.30972639778152e-09, "valid_ratio": 0.15, "rotation_range": [-90, 90], "learning_rate_decay": 0.9596456740928593}, "accuracy_valid_max": 0.15251068376068377, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.98, interval=[0.8, 1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256, 512],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1.0, 1.2)),\n        rotation_range=make_constant_param((-90, 90)),\n        shear_range=make_constant_param((1, 1.1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    instantiate = instantiate_random\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.09788995726495726, "loss_train": [176422666240.0, 15363532.0, 457880064.0, 16265369.0, 2916175.5, 1683626.875, 431402.84375, 306787.09375, 96680.359375, 1358561640710144.0, 5382239944704.0, 2064528965632.0, 924615835648.0, 1142541123584.0, 311539138560.0, 70259613696.0, 1367504977920.0, 418338668544.0, 26066132992.0, 12793260032.0, 2698671616.0, 5427148288.0, 1448514432.0, 365298080.0, 1738717114925056.0, 210898346049536.0, 200355090530304.0, 16917118058496.0, 10856076148736.0, 4142212055040.0, 2434089877504.0, 2746684801024.0, 252870590464.0, 75138211840.0, 3.817850030606254e+17, 1542636959694848.0, 6306165726117888.0, 315466924949504.0, 174604580552704.0, 78302572183552.0, 46777654837248.0, 36285745987584.0, 16202234593280.0, 103961948323840.0, 12068027629568.0, 2.1523669914558136e+18, 4367879734558720.0, 1658216006025216.0, 858074738851840.0, 580949154725888.0, 227037289644032.0, 348013516029952.0, 323487709265920.0, 59572509212672.0, 43902656577536.0, 1.823779350244229e+17, 6764579396780032.0, 2560618162814976.0, 1234719748390912.0, 543562571710464.0, 370228596834304.0, 256144266231808.0, 110178586329088.0, 1242248691843072.0, 2.619764909067469e+16, 1920870570262528.0, 1075469407485952.0, 1.4329045814775644e+18, 5262137022742528.0, 2721138538971136.0, 1.8692208267799753e+24], "accuracy_train_first": 0.09158509036144578, "model": "vgg", "loss_std": [4598592962560.0, 27128004.0, 4408827392.0, 49397364.0, 2954621.5, 1591605.125, 330247.375, 462042.40625, 59333.66796875, 2.647155848249344e+16, 2928173121536.0, 1123992338432.0, 608277823488.0, 2195005767680.0, 288287096832.0, 36139606016.0, 10617144475648.0, 2140942499840.0, 25251612672.0, 10527046656.0, 1039601152.0, 17946122240.0, 873563776.0, 188227952.0, 1.0807810606497792e+16, 179484821028864.0, 440519024967680.0, 30393594019840.0, 5757456613376.0, 3539331186688.0, 2920905441280.0, 3404047843328.0, 182899654656.0, 29084571648.0, Infinity, 2344371122864128.0, 1.2247898108461056e+17, 175275769856000.0, 127381046034432.0, 50274492219392.0, 30278993051648.0, 42881460994048.0, 12191047614464.0, 410021301059584.0, 6049982578688.0, Infinity, 1928587821187072.0, 796540473966592.0, 496284309913600.0, 265163513004032.0, 124412300886016.0, 475295408717824.0, 442040114479104.0, 98342302384128.0, 60479527452672.0, Infinity, 4728472303828992.0, 1777346453438464.0, 486891686199296.0, 198888745074688.0, 320257793196032.0, 156140751028224.0, 122698206281728.0, 8814306367897600.0, 1.6288343924513178e+17, 992782026014720.0, 884160088506368.0, Infinity, 1887048642330624.0, 953418382311424.0, Infinity]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:00 2016", "state": "available"}], "summary": "a75fc6630793a2ec38ba26c4128eb557"}