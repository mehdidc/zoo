{"content": {"hp_model": {"f0": 64, "f1": 64, "f2": 32, "f3": 32, "nonlin": "rectify", "nbg1": 6, "nbg3": 2, "nbg2": 1, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.015258232160802842, 0.016170228864410604, 0.013474606923402565, 0.011562839037841761, 0.01575661773223252, 0.012769273933857454, 0.008492971466795235, 0.010083558409313131, 0.011911379145631713, 0.010384273313707513, 0.007599801794048929, 0.01162260888534798, 0.009745660742289016, 0.00990398982310569, 0.011025935242628073, 0.011134525635733769, 0.009381175788423105, 0.011025657844604048, 0.011125272884713265, 0.01194685774814495, 0.011522743051021866, 0.010420002665924688, 0.008583392613557216, 0.008908677703099652, 0.009921941476873326, 0.007130231934995598, 0.007171663725384361, 0.007436053171252379, 0.0103723551912189, 0.012009583128862777, 0.011383325418342085, 0.011081881440739324, 0.010307393739516866, 0.011919034511360836, 0.011917347376870136, 0.01203165441656924, 0.012573200727012384, 0.011916582134734163, 0.012423002939271384, 0.01112938189241692, 0.01127390523854775, 0.01235663952087421, 0.012727752440290502, 0.015765246654799146, 0.014592900518182027, 0.014739988468835218, 0.014928852443053675, 0.015228420551097504, 0.015647108315816952, 0.01680446067228476, 0.017097709378264686, 0.016616834915371036, 0.016844369929280144, 0.016548021346751825, 0.01618728173836458, 0.016219413554137366, 0.01612086607057069, 0.015540863910163613, 0.01516130615825857, 0.015126201086555466, 0.014039225723648326, 0.013751285116230626, 0.013372251804258193, 0.013038237261598237, 0.013483837269301833, 0.013405720509277684, 0.01325680922428129, 0.01393788680494074, 0.013476961968298284, 0.013320516419837041, 0.01360911169577285, 0.014077639141845092, 0.013908826139208233, 0.013778023218315082, 0.013592109716847652, 0.013865310480672886, 0.01413588579814676, 0.015020833392314692, 0.015068375734440838, 0.014732357820526213, 0.014710577093523445, 0.014575496198264537, 0.014494653128058045, 0.014129017931718649, 0.014069648582366992, 0.013906475091703483, 0.013761437018475212, 0.01391365117895926, 0.014268961751018187, 0.014352263070437207, 0.014415637458624567, 0.014418557621199429, 0.014428708212099598, 0.014136582698847544, 0.014136582698847544, 0.014354833434099979, 0.014651217736454681, 0.015032133046929668], "moving_avg_accuracy_train": [0.046347695903700616, 0.10109455929598096, 0.15440283419417908, 0.20579058997857252, 0.25418539414516705, 0.3001140819997072, 0.34296768250913107, 0.3832770628889396, 0.42044135087837714, 0.45484909999019796, 0.4869597590145724, 0.5168241807460054, 0.5442110434542122, 0.5693194912094278, 0.5925796534533798, 0.6139601559467276, 0.6340767199478465, 0.6526954493869397, 0.669940515034486, 0.6858563854637155, 0.7007501500642617, 0.7145383680024184, 0.7273917233741034, 0.7392667349491147, 0.7502402386701962, 0.7603606047418071, 0.7696780894526578, 0.7784613540412144, 0.7866639472673532, 0.794350839616107, 0.8015875520680714, 0.8085491667509836, 0.8151657895334803, 0.821450885119861, 0.8273051087964131, 0.8328343988696141, 0.8380433469140849, 0.8429405193516908, 0.8475805254753073, 0.8519982743651151, 0.8561207687897608, 0.8600797686457423, 0.863889226143479, 0.8674990994985847, 0.8708921086955517, 0.8740992767942505, 0.8771322485068982, 0.8799595792982811, 0.8826251207974397, 0.8851263065478452, 0.8875331586934482, 0.8897923676256907, 0.8919186976659086, 0.8939184252080571, 0.8957949099067051, 0.8975395857557356, 0.8991771872865204, 0.9006975316404172, 0.9021332348255818, 0.9034509443291348, 0.9046600983216089, 0.905799490188645, 0.906883035540397, 0.9078907784403071, 0.9088209985383214, 0.9096814481146296, 0.9105023557094973, 0.9112900006698783, 0.9120593710520877, 0.9127704055865522, 0.9134312990556748, 0.9140493907147991, 0.914649851035392, 0.9152088665144017, 0.915718955891939, 0.9161896620757701, 0.9166248873364471, 0.9170212403686754, 0.9173733078000619, 0.9177064445299764, 0.9180225075797472, 0.918316300968598, 0.9186155922507064, 0.9188733286605564, 0.9191122668758499, 0.9193435873112807, 0.9195634014472162, 0.9197798353600342, 0.9199885767744276, 0.9201903949402388, 0.9203813318847069, 0.9205601505811569, 0.9207327131520094, 0.9208856943169672, 0.9210280276630483, 0.9211514773769022, 0.9212672324169897, 0.9213807125483067], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 265412145, "moving_var_accuracy_train": [0.019332980240237167, 0.04437465367785051, 0.0655131378636622, 0.08272813707830415, 0.0955338370033811, 0.10496545261540104, 0.11099678704345259, 0.1145207236585442, 0.11549931000854642, 0.11460441779816985, 0.11242382582516963, 0.10920839641082873, 0.10503791901072936, 0.10020803444774391, 0.09505654733150426, 0.08966502558016634, 0.08434060834704978, 0.07902646128568018, 0.0738003457598058, 0.06870014556750542, 0.06382654902654321, 0.05915492870907984, 0.05472631453696929, 0.050522826182432215, 0.046554303619438304, 0.042820669542305186, 0.039319942280107094, 0.036082259683589725, 0.03307957653593224, 0.030303413708170985, 0.02774440240136564, 0.02540613887216914, 0.023259542258364914, 0.0212891098712979, 0.019468646297864038, 0.017796939106500036, 0.016261443453420007, 0.01485113978903083, 0.013559792721572528, 0.012379461996695856, 0.011294470439557388, 0.0103060865143386, 0.009406085560748293, 0.008582757675432588, 0.007828094510585649, 0.007137858404446886, 0.006506862820689686, 0.005928120733255835, 0.005399254663283881, 0.004915632568377778, 0.004476205746797146, 0.004074521397113149, 0.0037077607723612327, 0.003372974887310556, 0.00306736815199784, 0.0027880263811617683, 0.002533359392008252, 0.0023008264753972617, 0.002089295020580562, 0.001895992743544289, 0.001719551949587505, 0.0015592806790687692, 0.001413919245925622, 0.0012816672331039326, 0.0011612882946702874, 0.0010518228264635781, 0.0009527055473310248, 0.0008630184538504446, 0.0007820439855305879, 0.00070838971796034, 0.0006414817677620655, 0.0005807719266775701, 0.0005259397073792708, 0.0004761582213932958, 0.0004308841198116538, 0.00038978978663396086, 0.00035251559721834663, 0.0003186778990319211, 0.0002879256724149163, 0.00026013192590078744, 0.00023501779597358307, 0.000212292847374216, 0.00019186974008070947, 0.00017328061858529976, 0.00015646637996331883, 0.00014130132426161835, 0.00012760605612466982, 0.00011526704325976248, 0.00010413249573653284, 9.408582131134214e-05, 8.500535143107354e-05, 7.679260142376666e-05, 6.938134184912318e-05, 6.26538367956974e-05, 5.657078214878731e-05, 5.1050862420564054e-05, 4.6066369242258686e-05, 4.157563197986612e-05], "duration": 51252.76642, "accuracy_train": [0.46347695903700625, 0.5938163298265042, 0.6341773082779623, 0.6682803920381137, 0.6897386316445183, 0.7134722726905685, 0.7286500870939461, 0.7460614863072167, 0.7549199427833149, 0.7645188419965854, 0.7759556902339424, 0.7856039763289037, 0.7906928078280732, 0.7952955210063677, 0.8019211136489479, 0.8063846783868586, 0.815125795957918, 0.820264014338778, 0.825146105862403, 0.829099219326781, 0.8347940314691769, 0.8386323294458287, 0.8430719217192691, 0.8461418391242157, 0.8490017721599299, 0.8514438993863048, 0.8535354518503139, 0.8575107353382245, 0.8604872863026025, 0.8635328707548912, 0.8667179641357512, 0.8712036988971945, 0.8747153945759505, 0.8780167453972868, 0.879993121885382, 0.8825980095284238, 0.8849238793143227, 0.887015071290144, 0.8893405805878553, 0.891758014373385, 0.8932232186115725, 0.8957107673495754, 0.8981743436231081, 0.8999879596945367, 0.901429191468254, 0.9029637896825397, 0.9044289939207272, 0.9054055564207272, 0.906614994289867, 0.9076369783014949, 0.9091948280038759, 0.9101252480158729, 0.91105566802787, 0.9119159730873938, 0.9126832721945367, 0.9132416683970099, 0.9139156010635843, 0.914380630825489, 0.9150545634920635, 0.915310329861111, 0.9155424842538759, 0.9160540169919711, 0.9166349437061646, 0.9169604645394979, 0.9171929794204503, 0.9174254943014026, 0.9178905240633074, 0.9183788053133074, 0.9189837044919711, 0.9191697163967331, 0.9193793402777777, 0.9196122156469176, 0.9200539939207272, 0.920240005825489, 0.9203097602897747, 0.920426017730251, 0.9205419146825397, 0.9205884176587301, 0.9205419146825397, 0.9207046750992063, 0.9208670750276854, 0.920960441468254, 0.9213092137896824, 0.9211929563492063, 0.921262710813492, 0.9214254712301587, 0.9215417286706349, 0.9217277405753967, 0.9218672495039681, 0.9220067584325397, 0.9220997643849206, 0.9221695188492063, 0.9222857762896824, 0.9222625248015872, 0.9223090277777777, 0.9222625248015872, 0.9223090277777777, 0.9224020337301587], "end": "2016-01-25 11:50:36.009000", "learning_rate_per_epoch": [0.0011412992607802153, 0.0010551600717008114, 0.0009755222126841545, 0.0009018949931487441, 0.0008338248007930815, 0.0007708921330049634, 0.000712709326762706, 0.0006589178228750825, 0.0006091862451285124, 0.0005632081301882863, 0.0005207001813687384, 0.000481400522403419, 0.00044506698031909764, 0.0004114756884519011, 0.0003804196894634515, 0.00035170765477232635, 0.0003251626330893487, 0.0003006210899911821, 0.0002779318019747734, 0.00025695498334243894, 0.00023756139853503555, 0.00021963153267279267, 0.00020305492216721177, 0.00018772942712530494, 0.0001735606201691553, 0.00016046118980739266, 0.00014835043111816049, 0.00013715373643208295, 0.00012680210056714714, 0.00011723175703082234, 0.00010838372691068798, 0.00010020349873229861, 9.264067193726078e-05, 8.564865129301324e-05, 7.918434857856482e-05, 7.320793520193547e-05, 6.768259481759742e-05, 6.257427594391629e-05, 5.785150278825313e-05, 5.348517879610881e-05, 4.9448404752183706e-05, 4.5716304157394916e-05, 4.2265881347702816e-05, 3.907587961293757e-05, 3.612663931562565e-05, 3.339999238960445e-05, 3.087913864874281e-05, 2.8548545742523856e-05, 2.6393854568595998e-05, 2.4401788323302753e-05, 2.2560072466148995e-05, 2.0857358322246e-05, 1.928315577970352e-05, 1.782776598702185e-05, 1.6482221326441504e-05, 1.5238231753755827e-05, 1.4088131138123572e-05, 1.3024834515817929e-05, 1.2041789887007326e-05, 1.1132940016977955e-05, 1.0292685146851e-05, 9.515848432783969e-06, 8.797643204161432e-06, 8.133643859764561e-06, 7.519759947172133e-06, 6.952208423172124e-06, 6.4274927353835665e-06, 5.94238008488901e-06, 5.4938809626037255e-06, 5.079232323623728e-06, 4.695878942584386e-06, 4.3414588617451955e-06, 4.01378883907455e-06, 3.710849568960839e-06, 3.4307745409023482e-06, 3.171837988702464e-06, 2.9324446586542763e-06, 2.7111193503515096e-06, 2.506498503862531e-06, 2.3173213321570074e-06, 2.142422317774617e-06, 1.980723709493759e-06, 1.8312292695554788e-06, 1.6930179072005558e-06, 1.5652379943276173e-06, 1.4471022495854413e-06, 1.3378827361520962e-06, 1.2369065416351077e-06, 1.1435514579716255e-06, 1.0572423434496159e-06, 9.774473710422171e-07, 9.036748451762833e-07, 8.354703027180221e-07, 7.724134434283769e-07, 7.141157993828529e-07, 6.602181770176685e-07, 6.103884402364201e-07, 5.643195777338406e-07], "accuracy_valid": [0.45776073042168675, 0.5839873164533133, 0.6162962396460843, 0.647303569747741, 0.6671201407191265, 0.689307523060994, 0.7034588549510542, 0.7172425051769578, 0.7249535250376506, 0.729602491999247, 0.7428375611822289, 0.7433258424322289, 0.7488498917545181, 0.7482395401920181, 0.7525325913027108, 0.75341796875, 0.7584640319088856, 0.7622482115963856, 0.7637336455195783, 0.7627570830195783, 0.7646190229668675, 0.7669383589043675, 0.7670192488704819, 0.7668971785579819, 0.7697459760918675, 0.7672736845820783, 0.7665309676204819, 0.7676501906061747, 0.7676604856927711, 0.7691356245293675, 0.7658088408320783, 0.7685149778802711, 0.7675178252070783, 0.7681075865963856, 0.7685958678463856, 0.7689723738704819, 0.7693179946347892, 0.7683311370481928, 0.7683414321347892, 0.7690841490963856, 0.7695930205195783, 0.7702239622552711, 0.7709666792168675, 0.771740281438253, 0.771374070500753, 0.770397508000753, 0.771007859563253, 0.7718726468373494, 0.7710181546498494, 0.7711505200489458, 0.7704180981739458, 0.7704180981739458, 0.7706622387989458, 0.7711608151355422, 0.7689532544239458, 0.7694415356739458, 0.7689532544239458, 0.768200242375753, 0.767589890813253, 0.7677016660391567, 0.7662162321159638, 0.7655955854668675, 0.7651073042168675, 0.7651073042168675, 0.7643748823418675, 0.7641307417168675, 0.7637645307793675, 0.7637748258659638, 0.7637748258659638, 0.7629100385918675, 0.7625438276543675, 0.7632865446159638, 0.7626658979668675, 0.7629100385918675, 0.7627879682793675, 0.7633983198418675, 0.7637645307793675, 0.7633983198418675, 0.7633983198418675, 0.7633983198418675, 0.7636424604668675, 0.7635203901543675, 0.7630218138177711, 0.7631438841302711, 0.7632659544427711, 0.7633880247552711, 0.7631438841302711, 0.7628997435052711, 0.7628997435052711, 0.7628997435052711, 0.7627776731927711, 0.7628997435052711, 0.7630218138177711, 0.7630218138177711, 0.7630218138177711, 0.7632659544427711, 0.7633983198418675, 0.7635306852409638], "accuracy_test": 0.6353734853316326, "start": "2016-01-24 21:36:23.242000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0], "accuracy_train_last": 0.9224020337301587, "batch_size_eval": 1024, "accuracy_train_std": [0.01730883010295283, 0.01774385325907012, 0.015771317709929292, 0.016482611017795044, 0.01612771861617108, 0.017171174659162045, 0.018327850477949062, 0.019833072911055183, 0.020406924315955175, 0.022690709904228012, 0.023029036592898757, 0.02388014737116979, 0.02544062713271822, 0.025230058710092394, 0.026076741870075713, 0.025411638453637603, 0.02501273526151228, 0.025129255387802817, 0.02503967681119673, 0.024326441020725526, 0.024086805548299478, 0.023735694235536134, 0.02357347623187419, 0.022508478610999985, 0.023110878078656156, 0.02234485183590925, 0.022610526143139676, 0.02181426661554514, 0.021329242356112815, 0.020673097206951926, 0.0201715280001046, 0.02008344365663554, 0.019908689811316178, 0.018917283802642095, 0.018393801904189492, 0.017595930856700907, 0.01720083843252725, 0.017064550165232468, 0.017018407962848217, 0.01619181250885331, 0.016141133516063416, 0.015378672597258945, 0.015481375935116287, 0.015308202530716557, 0.014964560113961033, 0.014873167554909014, 0.013812602839391171, 0.013857437840392796, 0.013733181077117669, 0.013590527996419889, 0.013253708476959765, 0.012857397825601085, 0.012602230271432863, 0.012484792583372073, 0.01196674695052029, 0.01162930051603106, 0.011349147088953177, 0.01127537380879577, 0.010876384607048982, 0.010769143411481028, 0.010526714918003277, 0.01022448273612941, 0.009952861707034117, 0.009606419073363558, 0.009537945827523854, 0.009313312921738157, 0.009203843699135449, 0.009191332503031646, 0.00895041517091848, 0.008960363490473825, 0.008904749933622287, 0.008942800610819954, 0.008854069091811943, 0.008766844909299748, 0.0084782666026957, 0.008297478963438009, 0.008259207282011034, 0.008225273936453106, 0.008098181727488918, 0.008037593232412463, 0.007891265135410568, 0.007668182691515128, 0.007935557989762296, 0.007930708082958714, 0.008011857609316293, 0.007829259387301784, 0.0076814141340365025, 0.007751941364491241, 0.007756264129665908, 0.007755148808036211, 0.007866402210372698, 0.00794024606499866, 0.007927924010003133, 0.00793625059164712, 0.007893673792080445, 0.007878820482768919, 0.007789429740300714, 0.00782152165842153], "accuracy_test_std": 0.012740046899922319, "error_valid": [0.5422392695783133, 0.41601268354668675, 0.38370376035391573, 0.35269643025225905, 0.3328798592808735, 0.31069247693900603, 0.2965411450489458, 0.28275749482304224, 0.27504647496234935, 0.270397508000753, 0.2571624388177711, 0.2566741575677711, 0.2511501082454819, 0.2517604598079819, 0.24746740869728923, 0.24658203125, 0.24153596809111444, 0.23775178840361444, 0.23626635448042166, 0.23724291698042166, 0.23538097703313254, 0.23306164109563254, 0.2329807511295181, 0.2331028214420181, 0.23025402390813254, 0.23272631541792166, 0.2334690323795181, 0.23234980939382532, 0.23233951430722888, 0.23086437547063254, 0.23419115916792166, 0.23148502211972888, 0.23248217479292166, 0.23189241340361444, 0.23140413215361444, 0.2310276261295181, 0.23068200536521077, 0.23166886295180722, 0.23165856786521077, 0.23091585090361444, 0.23040697948042166, 0.22977603774472888, 0.22903332078313254, 0.22825971856174698, 0.22862592949924698, 0.22960249199924698, 0.22899214043674698, 0.22812735316265065, 0.22898184535015065, 0.2288494799510542, 0.2295819018260542, 0.2295819018260542, 0.2293377612010542, 0.22883918486445776, 0.2310467455760542, 0.2305584643260542, 0.2310467455760542, 0.23179975762424698, 0.23241010918674698, 0.23229833396084332, 0.2337837678840362, 0.23440441453313254, 0.23489269578313254, 0.23489269578313254, 0.23562511765813254, 0.23586925828313254, 0.23623546922063254, 0.2362251741340362, 0.2362251741340362, 0.23708996140813254, 0.23745617234563254, 0.2367134553840362, 0.23733410203313254, 0.23708996140813254, 0.23721203172063254, 0.23660168015813254, 0.23623546922063254, 0.23660168015813254, 0.23660168015813254, 0.23660168015813254, 0.23635753953313254, 0.23647960984563254, 0.23697818618222888, 0.23685611586972888, 0.23673404555722888, 0.23661197524472888, 0.23685611586972888, 0.23710025649472888, 0.23710025649472888, 0.23710025649472888, 0.23722232680722888, 0.23710025649472888, 0.23697818618222888, 0.23697818618222888, 0.23697818618222888, 0.23673404555722888, 0.23660168015813254, 0.2364693147590362], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "momentum": 0.5971425736886387, "shear_range": [1, 1], "patience_check_each": 1, "learning_rate": 0.0012344705431499548, "patience_threshold": 1, "do_flip": true, "batch_size": 32, "optimization": "adam", "nb_data_augmentation": 0, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.00026288764364001586, "valid_ratio": 0.15, "rotation_range": [0, 0], "learning_rate_decay": 0.07547465749988658}, "accuracy_valid_max": 0.7718726468373494, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.7635306852409638, "loss_train": [3.6175930500030518, 2.071819543838501, 1.6839931011199951, 1.5050371885299683, 1.4060792922973633, 1.3326338529586792, 1.271610975265503, 1.221126914024353, 1.1767544746398926, 1.138275384902954, 1.1048825979232788, 1.0735305547714233, 1.046840786933899, 1.020691156387329, 0.9972432851791382, 0.9752504229545593, 0.9535315632820129, 0.9335049390792847, 0.9142066836357117, 0.8955765962600708, 0.8785324096679688, 0.8616398572921753, 0.8447338938713074, 0.8290974497795105, 0.8139321208000183, 0.799523651599884, 0.7857913374900818, 0.7724688649177551, 0.7600306272506714, 0.7481194138526917, 0.7360838055610657, 0.7251322865486145, 0.7150102853775024, 0.7050095796585083, 0.6956764459609985, 0.6868970990180969, 0.678555965423584, 0.670788586139679, 0.663093626499176, 0.6560073494911194, 0.6491655707359314, 0.6428878307342529, 0.6370351910591125, 0.6314710974693298, 0.6261589527130127, 0.6212524175643921, 0.6166063547134399, 0.6123434901237488, 0.6082828640937805, 0.6043962836265564, 0.6008304953575134, 0.5974603295326233, 0.5943095088005066, 0.5913781523704529, 0.5886234045028687, 0.5860615968704224, 0.5836672782897949, 0.5814493894577026, 0.5793709754943848, 0.5773943066596985, 0.5755748152732849, 0.5738659501075745, 0.5722576975822449, 0.5707777738571167, 0.5693790912628174, 0.5680902004241943, 0.566901445388794, 0.5657713413238525, 0.5647372007369995, 0.5637602806091309, 0.5628532767295837, 0.5620108246803284, 0.5612117648124695, 0.5604754090309143, 0.5597901940345764, 0.5591350793838501, 0.5585166215896606, 0.5579431056976318, 0.5574148893356323, 0.5569157004356384, 0.5564517974853516, 0.556008517742157, 0.5555963516235352, 0.5552107691764832, 0.5548505187034607, 0.5545148253440857, 0.5541995167732239, 0.5539065599441528, 0.5536314845085144, 0.5533733367919922, 0.5531331896781921, 0.5529118180274963, 0.5527015924453735, 0.5525062084197998, 0.5523241758346558, 0.5521547794342041, 0.5519988536834717, 0.5518527030944824], "accuracy_train_first": 0.46347695903700625, "model": "residualv5", "loss_std": [1.5755618810653687, 0.2369312047958374, 0.19112427532672882, 0.18377439677715302, 0.18205557763576508, 0.17982831597328186, 0.17728765308856964, 0.17672020196914673, 0.1759868562221527, 0.17346498370170593, 0.1717296689748764, 0.16925747692584991, 0.167525053024292, 0.1651454120874405, 0.16249483823776245, 0.160098597407341, 0.15742841362953186, 0.15510329604148865, 0.15308308601379395, 0.15035663545131683, 0.14872856438159943, 0.14657586812973022, 0.1443897932767868, 0.14220485091209412, 0.14043284952640533, 0.13818834722042084, 0.13635626435279846, 0.13362140953540802, 0.13106097280979156, 0.12905718386173248, 0.12652581930160522, 0.12401968240737915, 0.12199387699365616, 0.11988700926303864, 0.11783187836408615, 0.11554647982120514, 0.1135438084602356, 0.11163696646690369, 0.10959305614233017, 0.10784663259983063, 0.10598789155483246, 0.10429546236991882, 0.10276242345571518, 0.10116395354270935, 0.09966707974672318, 0.09843950718641281, 0.09720288217067719, 0.09604963660240173, 0.0948621928691864, 0.09371353685855865, 0.0926436334848404, 0.09167642891407013, 0.09078505635261536, 0.08995700627565384, 0.08911781013011932, 0.0883946344256401, 0.08770397305488586, 0.08705390244722366, 0.08646921813488007, 0.08587855845689774, 0.08533290773630142, 0.08479127287864685, 0.0843062698841095, 0.08386620879173279, 0.0834394171833992, 0.08305706083774567, 0.08269715309143066, 0.08234070986509323, 0.08201071619987488, 0.08169998973608017, 0.08141789585351944, 0.08114703744649887, 0.08090266585350037, 0.08067278563976288, 0.08045829832553864, 0.08024592697620392, 0.08005201071500778, 0.07987402379512787, 0.07970711588859558, 0.07955173403024673, 0.0794103816151619, 0.07927760481834412, 0.07915423065423965, 0.07903881371021271, 0.07893407344818115, 0.07883574068546295, 0.07874448597431183, 0.0786595344543457, 0.07858099788427353, 0.07850868254899979, 0.07844109833240509, 0.07838010042905807, 0.07832059264183044, 0.07826539874076843, 0.07821471244096756, 0.07816709578037262, 0.07812277227640152, 0.07808245718479156]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:13 2016", "state": "available"}], "summary": "7394baeb0446ff691672c0898d66f718"}