{"content": {"hp_model": {"f0": 16, "f1": 64, "f2": 16, "f3": 64, "nonlin": "rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [1.576714277267456, 1.2172454595565796, 1.0305898189544678, 0.9042364954948425, 0.8081965446472168, 0.735430896282196, 0.6813101172447205, 0.6355340480804443, 0.5965038537979126, 0.5631849765777588, 0.5337464809417725, 0.5077852010726929, 0.4814645051956177, 0.46257686614990234, 0.4421006739139557, 0.4250273108482361, 0.40378519892692566, 0.38983190059661865, 0.3753862679004669, 0.3604418933391571, 0.3447759747505188, 0.33461329340934753, 0.3204701244831085, 0.3087480962276459, 0.29397088289260864, 0.28552600741386414, 0.2768864929676056, 0.2668485939502716, 0.2586541771888733, 0.2511509358882904, 0.24119932949543, 0.23185938596725464, 0.22605159878730774, 0.21764448285102844, 0.21157196164131165, 0.20619001984596252, 0.19729013741016388, 0.19323283433914185, 0.1844111531972885, 0.18139062821865082, 0.17473749816417694, 0.17057690024375916, 0.16555720567703247, 0.16137702763080597, 0.15494106709957123, 0.15483646094799042, 0.14890222251415253, 0.14668768644332886, 0.14140552282333374, 0.13725915551185608, 0.13701198995113373, 0.13171815872192383, 0.12864629924297333, 0.12544786930084229, 0.12145303189754486, 0.12061802297830582, 0.11758900433778763, 0.11517058312892914, 0.11399343609809875, 0.10849914699792862, 0.10702597349882126, 0.10265073925256729, 0.10421018302440643, 0.10241802781820297, 0.09718428552150726, 0.09981729835271835, 0.09669841080904007, 0.08955468237400055, 0.09248480945825577, 0.08876627683639526, 0.08901465684175491, 0.08841175585985184, 0.08615348488092422, 0.08422663807868958, 0.08417616784572601, 0.07917450368404388, 0.07922778278589249, 0.07701423019170761, 0.0778733566403389, 0.0752531960606575, 0.07134531438350677, 0.07064119726419449, 0.0750378966331482, 0.07180991023778915, 0.07648608833551407, 0.06756532192230225, 0.06791693717241287, 0.06321435421705246, 0.0667107030749321, 0.0654539167881012, 0.04862542450428009, 0.03234166279435158, 0.029262600466609, 0.027705544605851173, 0.025333363562822342, 0.024418765679001808, 0.022913683205842972, 0.022194886580109596, 0.021570943295955658, 0.020514696836471558, 0.020841695368289948, 0.019759373739361763, 0.018935009837150574, 0.018450437113642693, 0.01938072219491005, 0.01755012944340706, 0.01698962412774563, 0.016889575868844986, 0.016854675486683846, 0.01558943185955286, 0.014956503175199032, 0.01478907186537981, 0.014836951158940792, 0.014469319023191929, 0.014828129671514034, 0.014942698180675507, 0.01472382340580225, 0.014883740805089474, 0.014342114329338074, 0.014881303533911705, 0.014737400226294994, 0.014737647958099842, 0.014497405849397182, 0.014893284067511559, 0.01424204558134079, 0.01531271729618311, 0.014830715954303741, 0.01470624003559351, 0.01431176159530878, 0.01469741202890873, 0.014945614151656628, 0.014346446841955185, 0.014674813486635685, 0.014751211740076542, 0.014162114821374416, 0.014747989363968372, 0.014548753388226032, 0.015005378052592278, 0.014646809548139572, 0.014793379232287407, 0.015104386024177074, 0.01477854698896408, 0.014614294283092022, 0.014649759978055954, 0.014639030210673809, 0.014724940992891788, 0.015490920282900333, 0.014849572442471981, 0.01454174891114235], "moving_avg_accuracy_train": [0.054226111168789205, 0.11295332831533775, 0.1701108450708287, 0.2271228375755583, 0.2805394586260497, 0.331039295438094, 0.3781325240938047, 0.42216216660644346, 0.4623791082260686, 0.5002620532312579, 0.5342711418646198, 0.5653790483845993, 0.5943571607572874, 0.6223555654652888, 0.6466821268012811, 0.6696827667881888, 0.691464428826378, 0.7100168853012061, 0.7274746000333594, 0.743491137786345, 0.7586476721366326, 0.7734880774958746, 0.7862887678025348, 0.7980929490868347, 0.8091118793938673, 0.8187779447940432, 0.8268169892946591, 0.8349752134225944, 0.8423337469841279, 0.8497654347799473, 0.855105655877211, 0.8615275448968174, 0.864536064170517, 0.8710145821536129, 0.8780100036966957, 0.8830714093117068, 0.8864828813950248, 0.8911805220461277, 0.896054790001168, 0.8999696620011897, 0.9042277217273811, 0.9079064435618873, 0.9109638880415236, 0.9144803817874358, 0.9164133298755343, 0.9200032969237413, 0.9211327292803243, 0.9222119613702875, 0.9246596315988457, 0.9274878556390349, 0.9282782385586585, 0.9298029526838281, 0.9317240386619845, 0.9334089824102194, 0.9358876468537675, 0.9377859485731987, 0.9384343325076377, 0.9394967866057573, 0.9398415893036165, 0.9414515617697573, 0.9438258380690182, 0.9444005111777218, 0.9462612204016347, 0.9479337498472594, 0.9493367558495213, 0.9509666545193679, 0.9526451158150779, 0.9545439947835886, 0.9542373341791224, 0.9550796280660274, 0.9556401630618887, 0.9566118192247843, 0.9570677829856762, 0.9580477757799934, 0.9585323490925441, 0.9600192520916508, 0.9587514416100144, 0.9598234852085644, 0.9599167901806943, 0.9613140771959859, 0.9620136358442813, 0.9634314280253571, 0.9645795217549827, 0.9645805842354922, 0.9649301685941043, 0.9650726974561317, 0.9666007490641083, 0.9662368923482199, 0.9662233163932059, 0.9663691721039223, 0.9694300936947482, 0.9722592918395776, 0.9748102204675431, 0.9771687992017504, 0.9793031818554033, 0.9812264513925005, 0.9829945603080216, 0.9845881474319813, 0.9860456633804591, 0.9873202614019554, 0.9884766641677215, 0.9895081621104916, 0.990466665095871, 0.9913107886898738, 0.9920495375363718, 0.992739952086306, 0.9933567469812654, 0.993937366925996, 0.9944227945929387, 0.9949014961229398, 0.9953415920463601, 0.9957400035262478, 0.9960985738581468, 0.9964189620080465, 0.9967073113429561, 0.9969622114955745, 0.9971985610305408, 0.9974066253143915, 0.9975962083186667, 0.997766869071333, 0.997925077997533, 0.9980604905846846, 0.9981870122107399, 0.9983008816741897, 0.9984056893401041, 0.9984907156441889, 0.998567275366684, 0.9986431185145394, 0.9987090521987997, 0.9987707176634435, 0.998826216581623, 0.9988715513591842, 0.9989123166101705, 0.9989536556336773, 0.9989908607548333, 0.9990266705126833, 0.9990565741459388, 0.9990834874158687, 0.9991077093588057, 0.9991248948586486, 0.9991473012061172, 0.9991674669188388, 0.9991809657626692, 0.9991908256221258, 0.999204313744437, 0.999216453054517, 0.9992250893335983, 0.9992328259359528, 0.9992444391756907], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.05409156155873492, 0.1119295345444277, 0.1681576324830572, 0.22390928734469123, 0.27586006135871605, 0.32421987953572096, 0.36896353658403136, 0.41081783004535716, 0.4487033321970715, 0.48431410308128, 0.5153769392904712, 0.5437791220557012, 0.5701711646694082, 0.5953534022593198, 0.6174130945070323, 0.6375964073737237, 0.6561062743547248, 0.6719746390596891, 0.6867495960874551, 0.6998730704489656, 0.7119283379993251, 0.7237781729211546, 0.7337888451339337, 0.7432165777139138, 0.7519731802493749, 0.7592253868855819, 0.7652030564519183, 0.7708759278116211, 0.7761412329502632, 0.7820245270592279, 0.7853622487226575, 0.7903997719678616, 0.7924644869774008, 0.7973624283399017, 0.802482701413291, 0.8059617232523836, 0.8087520755412265, 0.8121230323319835, 0.8154478031763454, 0.8181400686983192, 0.8209212296089843, 0.823369269251625, 0.8254107249977728, 0.8278045581361733, 0.8292611481621645, 0.831647327444216, 0.8326087477494931, 0.8330792829896041, 0.8350368796812311, 0.8370662418825356, 0.8380228801189809, 0.8389357711827605, 0.840700403072391, 0.8419366268841278, 0.8434988294536216, 0.8446900856742986, 0.8449718477676368, 0.8451501324468218, 0.845656503567727, 0.8468568664827917, 0.848650348462148, 0.8490752526690206, 0.850104639111456, 0.8512111038524188, 0.8523941456226739, 0.8536196336394728, 0.8546207985699532, 0.8555493495958646, 0.8545914943614288, 0.855164853867304, 0.8563096130682994, 0.8569635373977647, 0.8570209898985756, 0.8572913942031457, 0.8570698613810992, 0.8579397001206248, 0.8573063922885322, 0.8578229880935646, 0.858094670835413, 0.858994246955938, 0.8594945716485219, 0.8605349194064861, 0.8614875574545423, 0.8617223731040429, 0.8619610627044066, 0.8622511845495534, 0.863492974744824, 0.8630226423494078, 0.8629909977021929, 0.8633154919172898, 0.8659787892993561, 0.8682536866307157, 0.8704252235587585, 0.8724507899641778, 0.8741517294165552, 0.8755615341198545, 0.8770114048042545, 0.8783173179288742, 0.8797042773069206, 0.8808803280683218, 0.8818481769915348, 0.8827721871820651, 0.883491874054973, 0.8841019416381806, 0.8844770154995885, 0.8850098944748555, 0.8853185871150958, 0.8856065585052428, 0.8858454367285137, 0.8862313255669574, 0.8865308269052165, 0.88679934860099, 0.8871142603146862, 0.8873000246070127, 0.8873430831402873, 0.8875181721813037, 0.8876879593494685, 0.8877909101671573, 0.8878591518405772, 0.8879826340115646, 0.8881548031217033, 0.8882365131333281, 0.8883100521437904, 0.8884006513157066, 0.8884943976016811, 0.8885787692590582, 0.8887045613843572, 0.8888045377572167, 0.8887724461802902, 0.8886672330475773, 0.8886966705579551, 0.8887984655221144, 0.8887283010576289, 0.8887282472131612, 0.8888258550031403, 0.8888150162554618, 0.8887798178113915, 0.8887735827828879, 0.8887191431322345, 0.8887566261740563, 0.8888513960679458, 0.8888756538161964, 0.8888232140934623, 0.8888879406415708, 0.888871922838709, 0.888919571481043, 0.8890601115091434, 0.8890512906820243, 0.889067766000117], "moving_var_accuracy_train": [0.026464240192408974, 0.054857790477168863, 0.07877484692434004, 0.10015066783614014, 0.11581561969259235, 0.1271861593857211, 0.13442749311412044, 0.13843222858082527, 0.13914562726186977, 0.1381471222360786, 0.13474197299951748, 0.12997709233206778, 0.12453696206901825, 0.11913846185785373, 0.11255064994997255, 0.10605684991324134, 0.09972113213223024, 0.09284676169026072, 0.08630503175425783, 0.07998329391316736, 0.07405244932345367, 0.06862934307214785, 0.06324112781587629, 0.0581710632964222, 0.05344670839278117, 0.048942932936387344, 0.04463027577109457, 0.04076625778227975, 0.037176964149637705, 0.033956337586124714, 0.030817365479821182, 0.028106794859060327, 0.025377576067136292, 0.023217559217738343, 0.021336226599053352, 0.019433164380345015, 0.01759459121828784, 0.016033742545641105, 0.014644194683954784, 0.013317711220548286, 0.012149119752179782, 0.011056004725982862, 0.010034535954099102, 0.009142373913074552, 0.008261763116568647, 0.007551577575576692, 0.006807900375051894, 0.0061375930146827596, 0.005577753519144414, 0.005091967828223513, 0.004588393391837858, 0.004150476831125497, 0.003768644290032173, 0.0034173311799413995, 0.0031308920587606423, 0.0028502347976465405, 0.0025689949334198347, 0.0023222547184733513, 0.0020910992467300746, 0.0019053174241326495, 0.0017655203732264725, 0.0015919405785406284, 0.001463906670030158, 0.0013426921957454757, 0.0012261388087523735, 0.0011274340549428487, 0.0010400457403393305, 0.0009684928383388665, 0.0008724899210419645, 0.0007916260598650265, 0.0007152912492127904, 0.0006522591655815495, 0.0005889043755846141, 0.0005386574109183755, 0.0004869049714836651, 0.0004581123990940685, 0.0004267672499407875, 0.00039443402224143833, 0.000355068972377712, 0.0003371337741678631, 0.0003078248374727216, 0.0002951335657439253, 0.0002774832820775835, 0.00024973496402960863, 0.00022586135064072387, 0.00020345804586524886, 0.0002041267167284863, 0.0001849055704429121, 0.00016641667215761178, 0.00014996646993698767, 0.0002192929918099484, 0.0002694029519133064, 0.00030102778850673965, 0.0003209910524651601, 0.00032989225102857535, 0.0003301937173366515, 0.0003253102278372927, 0.00031563488434841624, 0.00030319057057417786, 0.00028749291456438216, 0.00027077902931798675, 0.000253277018439639, 0.00023621786835250627, 0.00021900898329482534, 0.00020201983368916244, 0.00018610790057709442, 0.00017092103400141544, 0.00015686300628324457, 0.00014329746583342077, 0.00013103011564350697, 0.00011967026387545688, 0.00010913182285366874, 9.937579471456552e-05, 9.03620523424738e-05, 8.207415515871194e-05, 7.445150643308463e-05, 6.750910571388553e-05, 6.114781185842566e-05, 5.535650611217298e-05, 5.008298133346156e-05, 4.529995377907972e-05, 4.093498752000321e-05, 3.6985558264740106e-05, 3.340369873062325e-05, 3.0162190679070678e-05, 2.7211036862640535e-05, 2.4542685696353233e-05, 2.214018677440748e-05, 1.996529335344803e-05, 1.80029876838709e-05, 1.6230410084755628e-05, 1.4625866254788798e-05, 1.3178235880501739e-05, 1.1875792526231997e-05, 1.0700671262970948e-05, 9.642145185489336e-06, 8.685978712477306e-06, 7.823899758114468e-06, 7.046790104979786e-06, 6.344769167125476e-06, 5.71481065007483e-06, 5.146989488793484e-06, 4.633930508976955e-06, 4.171412409535794e-06, 3.755908533573561e-06, 3.381643945859197e-06, 3.0441508191206154e-06, 2.7402744323524735e-06, 2.4674607951521507e-06], "duration": 158840.696973, "accuracy_train": [0.5422611116878922, 0.6414982826342747, 0.6845284958702473, 0.7402307701181248, 0.7612890480804725, 0.7855378267464931, 0.8019715819952011, 0.8184289492201919, 0.8243315828026948, 0.8412085582779623, 0.8403529395648762, 0.845350207064415, 0.8551601721114802, 0.8743412078373015, 0.8656211788252122, 0.8766885266703581, 0.8874993871700813, 0.8769889935746585, 0.8845940326227391, 0.8876399775632153, 0.8950564812892212, 0.9070517257290514, 0.9014949805624769, 0.9043305806455334, 0.9082822521571613, 0.9057725333956257, 0.899168389800203, 0.9083992305740125, 0.9085605490379292, 0.916650624942322, 0.9031676457525839, 0.9193245460732743, 0.8916127376338132, 0.9293212440014765, 0.9409687975844407, 0.928624059846807, 0.9171861301448875, 0.9334592879060539, 0.9399232015965301, 0.9352035100013842, 0.9425502592631044, 0.9410149400724437, 0.9384808883582503, 0.946128825500646, 0.9338098626684201, 0.9523130003576044, 0.9312976204895718, 0.9319250501799556, 0.9466886636558692, 0.9529418720007383, 0.9353916848352714, 0.9435253798103543, 0.9490138124653931, 0.9485734761443337, 0.9581956268456996, 0.9548706640480805, 0.9442697879175894, 0.9490588734888336, 0.9429448135843485, 0.9559413139650241, 0.9651943247623662, 0.9495725691560539, 0.9630076034168512, 0.9629865148578812, 0.9619638098698781, 0.9656357425479882, 0.9677512674764673, 0.9716339055001846, 0.9514773887389257, 0.9626602730481728, 0.96068497802464, 0.9653567246908453, 0.9611714568337025, 0.9668677109288483, 0.9628935089055003, 0.9734013790836102, 0.9473411472752861, 0.969471877595515, 0.9607565349298633, 0.9738896603336102, 0.9683096636789406, 0.9761915576550388, 0.9749123653216132, 0.9645901465600776, 0.9680764278216132, 0.966355457214378, 0.9803532135358989, 0.9629621819052234, 0.9661011327980805, 0.9676818735003692, 0.9969783880121816, 0.9977220751430418, 0.9977685781192323, 0.9983960078096161, 0.9985126257382798, 0.998535877226375, 0.9989075405477114, 0.9989304315476191, 0.9991633069167589, 0.9987916435954227, 0.9988842890596161, 0.9987916435954227, 0.9990931919642857, 0.9989079010358989, 0.9986982771548542, 0.9989536830357143, 0.9989079010358989, 0.9991629464285714, 0.9987916435954227, 0.9992098098929494, 0.9993024553571429, 0.9993257068452381, 0.9993257068452381, 0.9993024553571429, 0.9993024553571429, 0.99925631286914, 0.9993257068452381, 0.9992792038690477, 0.9993024553571429, 0.9993028158453304, 0.9993489583333334, 0.9992792038690477, 0.9993257068452381, 0.9993257068452381, 0.9993489583333334, 0.9992559523809523, 0.99925631286914, 0.9993257068452381, 0.9993024553571429, 0.9993257068452381, 0.9993257068452381, 0.9992795643572352, 0.9992792038690477, 0.9993257068452381, 0.9993257068452381, 0.9993489583333334, 0.9993257068452381, 0.9993257068452381, 0.9993257068452381, 0.9992795643572352, 0.9993489583333334, 0.9993489583333334, 0.9993024553571429, 0.9992795643572352, 0.9993257068452381, 0.9993257068452381, 0.9993028158453304, 0.9993024553571429, 0.9993489583333334], "end": "2016-02-03 10:15:26.525000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0], "moving_var_accuracy_valid": [0.026333073286761693, 0.053806846029929065, 0.07688055240710118, 0.09716672034468792, 0.11173999459612566, 0.12161404326352986, 0.12747059255168824, 0.13048957022684043, 0.13035841466374432, 0.12873571622407823, 0.1245462427419018, 0.11935177434017737, 0.11368545612607317, 0.10802421632377866, 0.10160146488997493, 0.09510761346545017, 0.08868038869979435, 0.08207859481550271, 0.07583542953050343, 0.0698019167913081, 0.06412969039357404, 0.05898048864328813, 0.05398436180232469, 0.04938586489648879, 0.04513738119851629, 0.04109699358851288, 0.03730888703066033, 0.03386763155276792, 0.030730379341318226, 0.027968859753339608, 0.025272237251128392, 0.0229734032900293, 0.020714430393661915, 0.0188588958206102, 0.017208961005663864, 0.015596997241709425, 0.014107372110601145, 0.012798905046707379, 0.011618501452544311, 0.010521885950057165, 0.00953931105915055, 0.008639316036062961, 0.007812892306527982, 0.007083177009725721, 0.0063939541992875, 0.005805803443453582, 0.005233542060138817, 0.004712180484834612, 0.00427545209961477, 0.0038849716881500483, 0.003504710929773905, 0.0031617401676454727, 0.0028735914822340365, 0.0025999865778249783, 0.002361952211855679, 0.0021385288131198256, 0.0019253904407030241, 0.001733137465474211, 0.0015621314243355708, 0.0014188861220527762, 0.0013059467083399831, 0.0011769769297711467, 0.0010688159648248581, 0.0009729527463493178, 0.000888253762185901, 0.0008129447738811698, 0.0007406712774552679, 0.0006743640127792295, 0.0006151849913525321, 0.0005566251623240759, 0.0005127569087460432, 0.000465329771129438, 0.000418826501125139, 0.0003776019174039958, 0.0003402834167847912, 0.0003130646500013277, 0.00028536789429290337, 0.00025923294589560585, 0.00023397395491600942, 0.0002178596941939773, 0.00019832664795666228, 0.00018823489427850394, 0.00017757907810609264, 0.00016031741579873682, 0.00014479842874675955, 0.00013107612203736542, 0.00013184689583525978, 0.00012065311931133465, 0.00010859681983347738, 9.868480631081231e-05, 0.00015265470218761687, 0.0001839656527828973, 0.0002080092411732934, 0.0002241345904208347, 0.00022775988656463674, 0.00022287184162117648, 0.00021950378247240394, 0.00021290208602665016, 0.00020892478427114042, 0.00020048016438455995, 0.00018886273178958502, 0.00017766061210046016, 0.00016455609364573844, 0.00015145012638589052, 0.00013757123736090398, 0.00012636975364534867, 0.00011459039859606089, 0.00010387770643034381, 9.4003501037287e-05, 8.594334269427801e-05, 7.815631788942102e-05, 7.098962121038879e-05, 6.478318357615751e-05, 5.861544056927406e-05, 5.2770582847936525e-05, 4.7769430113699434e-05, 4.325193624459033e-05, 3.902213245789621e-05, 3.5161831546026804e-05, 3.1782879010390126e-05, 2.8871370931724757e-05, 2.6044322572549895e-05, 2.3488562189832975e-05, 2.1213579860416693e-05, 1.917131716958118e-05, 1.7318252641740047e-05, 1.5728840306651193e-05, 1.4245913752157284e-05, 1.2830591200728212e-05, 1.1647160310312448e-05, 1.0490243382436395e-05, 9.534478976746509e-06, 8.625338547760738e-06, 7.762804719077705e-06, 7.072269773151303e-06, 6.366100101897315e-06, 5.740640465892295e-06, 5.1669262995270335e-06, 4.676906749643555e-06, 4.221860880497085e-06, 3.8805067875379164e-06, 3.4977520539358315e-06, 3.1727261692261134e-06, 2.8931592865739826e-06, 2.6061524879932895e-06, 2.3659707772403503e-06, 2.3071371950027794e-06, 2.0771237384220963e-06, 1.871854289536204e-06], "accuracy_test": 0.8856046715561223, "start": "2016-02-01 14:08:05.828000", "learning_rate_per_epoch": [0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 0.00023703054466750473, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703054466750473e-05, 2.3703055376245175e-06, 2.3703054807810986e-07, 2.3703055518353722e-08, 2.370305507426451e-09, 2.3703056184487536e-10, 2.3703056878376927e-11, 2.3703057745738665e-12, 2.370305828783975e-13, 2.370305828783975e-14, 2.3703058711356225e-15, 2.370305765256504e-16, 2.3703057321692796e-17, 2.370305690810249e-18, 2.370305690810249e-19, 2.3703057554337343e-20, 2.370305836213091e-21, 2.370305886700189e-22, 2.3703058235913165e-23, 2.370305744705226e-24, 2.370305646097613e-25, 2.3703056152827337e-26, 2.370305538245536e-27, 2.370305538245536e-28, 2.3703054780602252e-29, 2.3703055532918636e-30, 2.3703056003116377e-31, 2.3703056003116377e-32, 2.3703055635774392e-33, 2.3703056094951873e-34, 2.3703055807965947e-35, 2.370305544923354e-36, 2.370305544923354e-37, 2.3703056009752926e-38, 2.3703061614946783e-39, 2.3703103653900713e-40, 2.370296352405428e-41, 2.3709970016375905e-42, 2.368194404708941e-43, 2.382207389352189e-44, 2.802596928649634e-45, 0.0], "accuracy_train_first": 0.5422611116878922, "accuracy_train_last": 0.9993489583333334, "batch_size_eval": 1024, "accuracy_train_std": [0.01265385414530707, 0.017478621937809097, 0.01717994870474362, 0.015667609210918376, 0.017413324352933836, 0.016011004534889964, 0.01607653361833542, 0.017479593323636477, 0.018547065735664836, 0.018112353609882195, 0.015689329209199403, 0.017252591429548256, 0.017589124118533334, 0.01558886805404555, 0.017252829237756107, 0.014816707368238114, 0.015661779271775297, 0.017138610922303357, 0.01618198711917118, 0.01558328097748887, 0.013703314097058978, 0.015428013971637393, 0.014043207483215362, 0.015397455756014311, 0.015103866410048218, 0.014472737732536368, 0.016184173816425798, 0.013931395554152204, 0.014048465237464579, 0.014555029235965123, 0.014660442232469808, 0.014263949761373084, 0.015271744887450034, 0.013620291246979369, 0.013655258546526206, 0.013176526161662686, 0.014140843394226341, 0.014588337153638433, 0.01285269318009088, 0.012203409015907966, 0.013177226584358648, 0.013409646687435718, 0.014753887419395416, 0.013517191555131581, 0.013783280945703313, 0.013277436782428874, 0.015017919604952691, 0.013101177424463714, 0.011289993638881233, 0.012868055210677659, 0.012943004628637136, 0.013945634743352633, 0.011342231029891745, 0.012876143371631347, 0.012232180941964679, 0.012169951041652981, 0.01265258681832338, 0.012840094830169298, 0.012459479783093507, 0.01218761766254347, 0.01042206872292918, 0.011013501256102117, 0.011212264097978852, 0.00990766746509871, 0.011126131754740495, 0.010114953233027506, 0.009896688566854175, 0.009147895453741305, 0.012707682570451207, 0.011143198420149245, 0.010444622504753219, 0.00976316915319102, 0.011425962354830671, 0.008549917269579573, 0.008914083201332154, 0.008343205003962129, 0.010126028488807268, 0.009780112839641008, 0.010424453917344773, 0.007893533036202827, 0.009600824584190695, 0.007803218203043643, 0.007710578240348374, 0.009069598617251245, 0.009628355819431068, 0.010406574197773683, 0.006690573738188611, 0.011397667600670574, 0.009819430650669939, 0.008273704346651258, 0.001983985573928466, 0.001589235101120896, 0.0015103759875453873, 0.001202024293385863, 0.0012814902800429196, 0.001299283458172978, 0.0010695337182272686, 0.000948478332141515, 0.0008928454816401713, 0.0012002916376376422, 0.0010560613893948441, 0.0012002916376376422, 0.001073856328009253, 0.0011299207817179091, 0.0011605128760072345, 0.0009139343381246999, 0.0008815765896460046, 0.0009183601961556686, 0.0012190623766111662, 0.0009342526234097963, 0.0009112685054996942, 0.0009162974560657567, 0.0009162974560657567, 0.0009112685054996942, 0.0009112685054996942, 0.0009237595442807268, 0.0009162974560657567, 0.0009544445569091236, 0.0009112685054996942, 0.0009107746007450151, 0.0008957105786950438, 0.0009544445569091236, 0.0009162974560657567, 0.0008911722422217635, 0.0008957105786950438, 0.0008993247584548789, 0.0008988429412103787, 0.0009162974560657567, 0.0009112685054996942, 0.0009162974560657567, 0.0009162974560657567, 0.0009298753666742859, 0.0009544445569091236, 0.0009407518751927042, 0.0009162974560657567, 0.0008957105786950438, 0.0009162974560657567, 0.0009162974560657567, 0.0009162974560657567, 0.0009774938991726043, 0.0008957105786950438, 0.0008699910218503398, 0.0009112685054996942, 0.000905127137402048, 0.0008911722422217635, 0.0008911722422217635, 0.0008854926937452561, 0.0009112685054996942, 0.0008957105786950438], "accuracy_test_std": 0.0075241042690617896, "error_valid": [0.45908438441265065, 0.3675287085843373, 0.32578948606927716, 0.27432581890060237, 0.25658297251506024, 0.2405417568712349, 0.22834354998117468, 0.21249352880271077, 0.2103271484375, 0.19518895896084332, 0.20505753482680722, 0.20060123305722888, 0.19230045180722888, 0.17800645943147586, 0.1840496752635542, 0.1807537768260542, 0.1773049228162651, 0.18521007859563254, 0.18027579066265065, 0.18201566029743976, 0.17957425404743976, 0.16957331278237953, 0.1761151049510542, 0.1719338290662651, 0.16921739693147586, 0.1755047533885542, 0.1809979174510542, 0.1780682299510542, 0.17647102080195776, 0.1650258259600903, 0.18459825630647586, 0.16426251882530118, 0.18895307793674698, 0.1585560993975903, 0.15143484092620485, 0.1627270801957832, 0.16613475385918675, 0.15753835655120485, 0.15462925922439763, 0.15762954160391573, 0.15404832219503017, 0.1545983739646084, 0.15621617328689763, 0.15065094361822284, 0.15762954160391573, 0.1468770590173193, 0.15873846950301207, 0.16268589984939763, 0.1473447500941265, 0.14466949830572284, 0.15336737575301207, 0.15284820924322284, 0.14341790992093373, 0.14693735881024095, 0.14244134742093373, 0.1445886083396084, 0.1524922933923193, 0.15324530544051207, 0.1497861563441265, 0.1423398672816265, 0.1352083137236446, 0.1471006094691265, 0.1406308829066265, 0.13883071347891573, 0.13695847844503017, 0.13535097420933728, 0.13636871705572284, 0.13609369117093373, 0.15402920274849397, 0.1396749105798193, 0.13338755412274095, 0.13715114363704817, 0.1424619375941265, 0.14027496705572284, 0.1449239340173193, 0.1342317512236446, 0.14839337820030118, 0.1375276496611446, 0.13946018448795183, 0.13290956795933728, 0.13600250611822284, 0.13010195077183728, 0.12993870011295183, 0.13616428605045183, 0.1358907308923193, 0.1351377188441265, 0.12533091349774095, 0.14121034920933728, 0.13729380412274095, 0.13376406014683728, 0.11005153426204817, 0.11127223738704817, 0.11003094408885539, 0.10931911238704817, 0.11053981551204817, 0.11175022355045183, 0.10993975903614461, 0.10992946394954817, 0.10781308829066272, 0.10853521507906627, 0.10944118269954817, 0.10891172110316272, 0.11003094408885539, 0.11040745011295183, 0.11214731974774095, 0.11019419474774095, 0.11190317912274095, 0.11180169898343373, 0.11200465926204817, 0.11029567488704817, 0.11077366105045183, 0.11078395613704817, 0.11005153426204817, 0.11102809676204817, 0.11226939006024095, 0.11090602644954817, 0.11078395613704817, 0.11128253247364461, 0.11152667309864461, 0.11090602644954817, 0.11029567488704817, 0.11102809676204817, 0.11102809676204817, 0.11078395613704817, 0.11066188582454817, 0.11066188582454817, 0.11016330948795183, 0.11029567488704817, 0.11151637801204817, 0.11227968514683728, 0.11103839184864461, 0.11028537980045183, 0.11190317912274095, 0.11127223738704817, 0.11029567488704817, 0.11128253247364461, 0.11153696818524095, 0.11128253247364461, 0.11177081372364461, 0.11090602644954817, 0.11029567488704817, 0.11090602644954817, 0.11164874341114461, 0.11052952042545183, 0.11127223738704817, 0.11065159073795183, 0.10967502823795183, 0.11102809676204817, 0.11078395613704817], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.04011693636776125, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "valid_ratio": 0.15, "learning_rate": 0.00023703054044518754, "optimization": "adam", "nb_data_augmentation": 3, "learning_rate_decay_method": "discrete", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 2.8866227736855615e-07, "rotation_range": [0, 0], "momentum": 0.8949321434372051}, "accuracy_valid_max": 0.8921869117093373, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test, batch_size_eval)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8892160438629518, "accuracy_valid_std": [0.021220048678363527, 0.02640848317154766, 0.019496533919080666, 0.026151908080867817, 0.017549499306881794, 0.028418692794921086, 0.02243669937178998, 0.015274178003094722, 0.019579636718645183, 0.01819925253494047, 0.020433654163327878, 0.016159967581409918, 0.017602418517208514, 0.013352291063547342, 0.015404727436735042, 0.01337992967609816, 0.012477638020698269, 0.017223320070793285, 0.014976977936347969, 0.01593858817973152, 0.01608511246931697, 0.007193245594274305, 0.013364248248186413, 0.012860144223207746, 0.010099707614490246, 0.015985247315935085, 0.010511563892548993, 0.01413189147892613, 0.015879516760047566, 0.009825509828352195, 0.011477006454313404, 0.008388987720171217, 0.010424952082807176, 0.009214682677188547, 0.007012078600634229, 0.011368106297717145, 0.011577019822246532, 0.01059150477354677, 0.012927179323822202, 0.008480637386629717, 0.010486246717232356, 0.006889413496486296, 0.012201475157293504, 0.010690203603132822, 0.010214995704419763, 0.006672577597354147, 0.010079208147704752, 0.007692630962227913, 0.00948447788812144, 0.008552956719716976, 0.011254026515893505, 0.008404663172837038, 0.007858616333121165, 0.011061799702213741, 0.01107990441254736, 0.008302860306317026, 0.007388991466228918, 0.011034587479360662, 0.008550911404849903, 0.006511911955213031, 0.0065348605736390095, 0.007748332830100915, 0.007567473914889118, 0.011091162297433775, 0.007068769336144014, 0.0076096568328505275, 0.008103890719534988, 0.008619617519242976, 0.012032424924014455, 0.010668762271939995, 0.008723097765816782, 0.010993367244545353, 0.007956751234700883, 0.006886714907007022, 0.006536004408500959, 0.0060739862459036, 0.013224682175650041, 0.007757985389924766, 0.01009187726422075, 0.006017301214207689, 0.006876187885441574, 0.00852174091592081, 0.009800801938304798, 0.009873738826303484, 0.009979159333339017, 0.010790931352346211, 0.006918606932177472, 0.01010291502461349, 0.011116432635617625, 0.011499087867434152, 0.01133553218108649, 0.010297600391651082, 0.009028233565785129, 0.010402232867469136, 0.009032187303885083, 0.01040796990054585, 0.0107131687069834, 0.010484688822533138, 0.00958466096501147, 0.007576863862268222, 0.010510478980811576, 0.009767393145091657, 0.008497686551845057, 0.009643319956040793, 0.012122418141719216, 0.01155264907062172, 0.011153709284340261, 0.011957339848341448, 0.009106933272460078, 0.010555332569437212, 0.009787686562836595, 0.010703693985104653, 0.010528595109269413, 0.010211990513809466, 0.011058942868369875, 0.010036908419151629, 0.010546620540217783, 0.011037366740581953, 0.010606026461975655, 0.009612225566739584, 0.01052139676630994, 0.010374131788326019, 0.010129946702743486, 0.010432977476652004, 0.010545267147938641, 0.010071121957271192, 0.009885832063379493, 0.010326987657075548, 0.01033070732293648, 0.012030983373328334, 0.010903236904532114, 0.009193938410280498, 0.011614458587469624, 0.010004004665562359, 0.010589159616736668, 0.011004917483961431, 0.011693264762771209, 0.010483441019580668, 0.010576124441181563, 0.010329568969321804, 0.010767775938156943, 0.010557858053317782, 0.010962345839957756, 0.009721871987471604, 0.009872056775488898, 0.009725001609768427, 0.009406695952745807, 0.010316516731244544, 0.010013188811795758], "accuracy_valid": [0.5409156155873494, 0.6324712914156627, 0.6742105139307228, 0.7256741810993976, 0.7434170274849398, 0.7594582431287651, 0.7716564500188253, 0.7875064711972892, 0.7896728515625, 0.8048110410391567, 0.7949424651731928, 0.7993987669427711, 0.8076995481927711, 0.8219935405685241, 0.8159503247364458, 0.8192462231739458, 0.8226950771837349, 0.8147899214043675, 0.8197242093373494, 0.8179843397025602, 0.8204257459525602, 0.8304266872176205, 0.8238848950489458, 0.8280661709337349, 0.8307826030685241, 0.8244952466114458, 0.8190020825489458, 0.8219317700489458, 0.8235289791980422, 0.8349741740399097, 0.8154017436935241, 0.8357374811746988, 0.811046922063253, 0.8414439006024097, 0.8485651590737951, 0.8372729198042168, 0.8338652461408133, 0.8424616434487951, 0.8453707407756024, 0.8423704583960843, 0.8459516778049698, 0.8454016260353916, 0.8437838267131024, 0.8493490563817772, 0.8423704583960843, 0.8531229409826807, 0.8412615304969879, 0.8373141001506024, 0.8526552499058735, 0.8553305016942772, 0.8466326242469879, 0.8471517907567772, 0.8565820900790663, 0.853062641189759, 0.8575586525790663, 0.8554113916603916, 0.8475077066076807, 0.8467546945594879, 0.8502138436558735, 0.8576601327183735, 0.8647916862763554, 0.8528993905308735, 0.8593691170933735, 0.8611692865210843, 0.8630415215549698, 0.8646490257906627, 0.8636312829442772, 0.8639063088290663, 0.845970797251506, 0.8603250894201807, 0.866612445877259, 0.8628488563629518, 0.8575380624058735, 0.8597250329442772, 0.8550760659826807, 0.8657682487763554, 0.8516066217996988, 0.8624723503388554, 0.8605398155120482, 0.8670904320406627, 0.8639974938817772, 0.8698980492281627, 0.8700612998870482, 0.8638357139495482, 0.8641092691076807, 0.8648622811558735, 0.874669086502259, 0.8587896507906627, 0.862706195877259, 0.8662359398531627, 0.8899484657379518, 0.8887277626129518, 0.8899690559111446, 0.8906808876129518, 0.8894601844879518, 0.8882497764495482, 0.8900602409638554, 0.8900705360504518, 0.8921869117093373, 0.8914647849209337, 0.8905588173004518, 0.8910882788968373, 0.8899690559111446, 0.8895925498870482, 0.887852680252259, 0.889805805252259, 0.888096820877259, 0.8881983010165663, 0.8879953407379518, 0.8897043251129518, 0.8892263389495482, 0.8892160438629518, 0.8899484657379518, 0.8889719032379518, 0.887730609939759, 0.8890939735504518, 0.8892160438629518, 0.8887174675263554, 0.8884733269013554, 0.8890939735504518, 0.8897043251129518, 0.8889719032379518, 0.8889719032379518, 0.8892160438629518, 0.8893381141754518, 0.8893381141754518, 0.8898366905120482, 0.8897043251129518, 0.8884836219879518, 0.8877203148531627, 0.8889616081513554, 0.8897146201995482, 0.888096820877259, 0.8887277626129518, 0.8897043251129518, 0.8887174675263554, 0.888463031814759, 0.8887174675263554, 0.8882291862763554, 0.8890939735504518, 0.8897043251129518, 0.8890939735504518, 0.8883512565888554, 0.8894704795745482, 0.8887277626129518, 0.8893484092620482, 0.8903249717620482, 0.8889719032379518, 0.8892160438629518], "seed": 852438731, "model": "residualv3", "loss_std": [0.2810063362121582, 0.14969581365585327, 0.14028798043727875, 0.13566412031650543, 0.13125985860824585, 0.1268213540315628, 0.12356222420930862, 0.12185283750295639, 0.11596193164587021, 0.11526015400886536, 0.11174449324607849, 0.10615944117307663, 0.1040206253528595, 0.10279877483844757, 0.0988147184252739, 0.09610585123300552, 0.09339345991611481, 0.09064903855323792, 0.08731414377689362, 0.08737070858478546, 0.08530846983194351, 0.08309958875179291, 0.08081745356321335, 0.07922913134098053, 0.07456105202436447, 0.0730106309056282, 0.07375034689903259, 0.06986790895462036, 0.06984874606132507, 0.0682745948433876, 0.0664263442158699, 0.06449408829212189, 0.06114410236477852, 0.06083612143993378, 0.0607924722135067, 0.05960097908973694, 0.05508853867650032, 0.05428345501422882, 0.05418195575475693, 0.05117101967334747, 0.052912283688783646, 0.050835300236940384, 0.05078713968396187, 0.04763351380825043, 0.04668586701154709, 0.047333259135484695, 0.04524674639105797, 0.04551537334918976, 0.04561806842684746, 0.043235473334789276, 0.04574786126613617, 0.045126400887966156, 0.04259113967418671, 0.04192757233977318, 0.040177054703235626, 0.03965357691049576, 0.039154183119535446, 0.03731685131788254, 0.039978861808776855, 0.036194827407598495, 0.03760618343949318, 0.03513670712709427, 0.036687903106212616, 0.036778442561626434, 0.03469927981495857, 0.03529474511742592, 0.03675230219960213, 0.03219059854745865, 0.03322744742035866, 0.032299358397722244, 0.0341159924864769, 0.032329920679330826, 0.03317015990614891, 0.03179539740085602, 0.030762122943997383, 0.030036598443984985, 0.03208056092262268, 0.030318310484290123, 0.03051006607711315, 0.029930997639894485, 0.027258172631263733, 0.02901824750006199, 0.02942419983446598, 0.029743490740656853, 0.03380364552140236, 0.026733705773949623, 0.02909771539270878, 0.026747185736894608, 0.027487879619002342, 0.028059709817171097, 0.028782550245523453, 0.015307944267988205, 0.014410852454602718, 0.01303731556981802, 0.012187119573354721, 0.012275905348360538, 0.01205921545624733, 0.011258293874561787, 0.011072070337831974, 0.0103510906919837, 0.010314417071640491, 0.010162657126784325, 0.009241987951099873, 0.009088797494769096, 0.009936142712831497, 0.008760725148022175, 0.008532257750630379, 0.009328568354249, 0.008657625876367092, 0.008124838583171368, 0.007699300535023212, 0.007750066462904215, 0.007972171530127525, 0.007579993922263384, 0.007754805032163858, 0.007849672809243202, 0.007795464713126421, 0.00784229300916195, 0.007323154713958502, 0.0077226837165653706, 0.007509081158787012, 0.007599761243909597, 0.007859018631279469, 0.007549591828137636, 0.007475525140762329, 0.00823640450835228, 0.007466171868145466, 0.00805202778428793, 0.0069782547652721405, 0.007795889396220446, 0.007722340989857912, 0.007321130950003862, 0.007455213461071253, 0.007687121629714966, 0.006990242749452591, 0.007326554972678423, 0.007766806520521641, 0.00824897550046444, 0.007699066773056984, 0.007774920668452978, 0.008313748985528946, 0.0074273827485740185, 0.007833040319383144, 0.007445245049893856, 0.007870424538850784, 0.007897086441516876, 0.008175610564649105, 0.008107221685349941, 0.007637209724634886]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:33 2016", "state": "available"}], "summary": "331849ed5031368e1b1e20ba60e99412"}