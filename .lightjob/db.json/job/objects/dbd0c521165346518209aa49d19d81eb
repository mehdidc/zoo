{"content": {"hp_model": {"f0": 16, "f1": 16, "f2": 64, "f3": 64, "nonlin": "very_leaky_rectify", "nbg1": 5, "nbg3": 5, "nbg2": 5, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "loss_train": [2.0634896755218506, 1.6288714408874512, 1.4071160554885864, 1.2663962841033936, 1.1463018655776978, 1.0679129362106323, 0.9968822598457336, 0.9488946795463562, 0.8881741762161255, 0.8339586853981018, 0.8055624961853027, 0.7684394717216492, 0.7373896241188049, 0.6961379647254944, 0.6659877896308899, 0.6366996169090271, 0.6136094927787781, 0.5928868055343628, 0.5617286562919617, 0.5402992367744446, 0.5188064575195312, 0.49792617559432983, 0.47948750853538513, 0.46195879578590393, 0.4448569416999817, 0.4302276372909546, 0.4151056110858917, 0.39862537384033203, 0.3872701823711395, 0.3737035393714905, 0.3646117150783539, 0.35243433713912964, 0.34088000655174255, 0.33125290274620056, 0.32161325216293335, 0.3146587610244751, 0.3066600263118744, 0.30078327655792236, 0.2917329668998718, 0.28574711084365845, 0.2797746956348419, 0.27560219168663025, 0.2699565589427948, 0.2641286849975586, 0.2601126730442047, 0.2569632828235626, 0.2531200349330902, 0.24919243156909943, 0.24516992270946503, 0.24154502153396606, 0.23989079892635345, 0.23787839710712433, 0.2348378449678421, 0.2334020733833313, 0.2314756065607071, 0.2294321209192276, 0.22746405005455017, 0.2259846180677414, 0.22602029144763947, 0.2236763834953308, 0.22256547212600708, 0.22120603919029236, 0.21979594230651855, 0.22004422545433044, 0.21837526559829712, 0.21757003664970398, 0.21861881017684937, 0.21621665358543396, 0.21656815707683563, 0.216216579079628, 0.2146630734205246, 0.21505200862884521, 0.214095801115036, 0.21359606087207794, 0.2126246690750122, 0.21224741637706757, 0.21244069933891296, 0.21240060031414032, 0.21113890409469604, 0.2111177146434784, 0.21136534214019775, 0.2103496491909027, 0.21136699616909027, 0.21176131069660187, 0.2106495052576065, 0.2098294347524643, 0.20931287109851837, 0.21128419041633606, 0.20975375175476074, 0.20894555747509003, 0.21012470126152039, 0.21014970541000366, 0.2099192589521408, 0.21021240949630737, 0.20877936482429504, 0.20993706583976746, 0.20991754531860352, 0.20957030355930328, 0.20990626513957977, 0.20912782847881317, 0.20915932953357697, 0.20929326117038727, 0.20980872213840485, 0.20869441330432892, 0.2092944234609604, 0.20997019112110138, 0.20867766439914703, 0.2090822458267212, 0.20892737805843353, 0.20960299670696259, 0.20794343948364258, 0.20828792452812195, 0.20850993692874908, 0.20791707932949066, 0.2085552215576172, 0.20881052315235138, 0.20867379009723663, 0.20852677524089813, 0.2094300240278244], "moving_avg_accuracy_train": [0.03446823529411764, 0.07668023529411763, 0.11910397647058822, 0.15494887294117643, 0.19435751505882348, 0.2375876459058823, 0.28245241072705873, 0.3231554049484705, 0.36626574680656465, 0.39912858389061406, 0.4396063137368468, 0.4736786235396327, 0.5074495847150812, 0.541504626243573, 0.570961222442745, 0.5987568649043529, 0.6229188254727411, 0.647306942925467, 0.6703974251035085, 0.6925459178872753, 0.7120819143338418, 0.7309043111357517, 0.7488374094339413, 0.7655748449611354, 0.7814173604650219, 0.7966191538302844, 0.8104866502119618, 0.8234450440142951, 0.8351240690246303, 0.8463646032986379, 0.8566834370864211, 0.866139799260132, 0.87563170168706, 0.8843367668124716, 0.8925595607194597, 0.8999859575886903, 0.9071755971239388, 0.9140039197644861, 0.9202576454350964, 0.9262012926562926, 0.9318023398612516, 0.9367021058751264, 0.9415095423464372, 0.9458032939941464, 0.9498276704770847, 0.9535860798999645, 0.9571051189687916, 0.9603640188366183, 0.9633276169529564, 0.9660325023164844, 0.9685421932613065, 0.9709067974645876, 0.9730514118357758, 0.9750309765345512, 0.9768549377046255, 0.9784470909929864, 0.9799647348348642, 0.981349437821966, 0.982616846980946, 0.983788103459322, 0.9848845872310368, 0.9858620108608743, 0.9867722803630222, 0.9876244640914259, 0.9883702529764009, 0.9890955806199373, 0.9897271990285318, 0.990321537949208, 0.9908305606248754, 0.9912698575035643, 0.9917028717532079, 0.9920972904602401, 0.9924946202377455, 0.9928875111551474, 0.9932034659219856, 0.9935113546239047, 0.9937861015144553, 0.9940192560688921, 0.9942573304620028, 0.9944574797687437, 0.9946446729683399, 0.9948202056715059, 0.9949852439278847, 0.995140837182155, 0.9952949887580571, 0.9954172545881338, 0.9955390585410852, 0.9956510350399178, 0.9957612256535732, 0.9958651030882159, 0.9959491810146883, 0.9960154393838078, 0.9960727189748388, 0.9961336823714726, 0.9961956082519724, 0.9962536944855988, 0.9963177368017448, 0.9963636101803939, 0.9964096021035309, 0.9964392301284719, 0.9964658953509188, 0.996489894051121, 0.9965209046460088, 0.9965464612402315, 0.9965482857044436, 0.9965781630163522, 0.9966050525970699, 0.9966221943961865, 0.9966282102506855, 0.9966383304020875, 0.9966568503030552, 0.9966594005668673, 0.9966499310984158, 0.9966649379885743, 0.9966737383073639, 0.9966722468295687, 0.9967038456760235, 0.9967016964025388, 0.9967162326446378], "dataset": "Cifar10", "nb_examples_train": 42500, "moving_avg_accuracy_valid": [0.03547999999999999, 0.07814533333333332, 0.11963746666666664, 0.15463371999999997, 0.19345034799999994, 0.23514531319999993, 0.2786041152133333, 0.3183970370253333, 0.36023733332279995, 0.3919069333238533, 0.4308629066581346, 0.4630832826589878, 0.4954416210597557, 0.5277241256204468, 0.5555517130584021, 0.5817165417525619, 0.6048782209106391, 0.627297065486242, 0.6488473589376178, 0.6689492897105227, 0.6868676940728038, 0.7037942579988568, 0.7194814988656377, 0.7342000156457407, 0.7479666807478332, 0.7611166793397165, 0.7724850114057449, 0.783063176931837, 0.79262352590532, 0.8016278399814547, 0.8099317226499759, 0.817245217051645, 0.8243606953464804, 0.8308046258118323, 0.8366841632306491, 0.8420290802409175, 0.8469461722168258, 0.8519048883284766, 0.8561543994956289, 0.8602722928793993, 0.863831730258126, 0.8667952238989801, 0.8696357015090821, 0.8723787980248405, 0.8747409182223566, 0.8772268264001208, 0.8792241437601088, 0.8812083960507646, 0.8828208897790215, 0.8844588008011194, 0.8858262540543408, 0.8870036286489067, 0.8881565991173493, 0.8890609392056145, 0.8901015119517196, 0.8907846940898809, 0.8914395580142261, 0.8920156022128035, 0.8925873753248565, 0.893128637792371, 0.8936157740131339, 0.8941208632784872, 0.8946954436173051, 0.8949325659222412, 0.8953593093300172, 0.8955167117303487, 0.8959250405573138, 0.8962658698349157, 0.8967059495180908, 0.896928687899615, 0.8970891524429868, 0.8972202371986882, 0.897284880145486, 0.8973163921309374, 0.897438086251177, 0.8975742776260593, 0.8976968498634534, 0.8977671648771082, 0.8978837817227306, 0.8980020702171243, 0.8979485298620785, 0.8979936768758707, 0.8980609758549504, 0.8980815449361219, 0.8981267237758431, 0.8982207180649255, 0.8982653129250997, 0.8982787816325897, 0.8982909034693307, 0.8983551464557309, 0.8983862984768245, 0.8984410019624753, 0.8985169017662278, 0.898585211589605, 0.8986466904306445, 0.89874202138758, 0.8987744859154887, 0.8987903706572731, 0.8988580002582124, 0.8988922002323911, 0.8988963135424853, 0.8989400155215701, 0.8988460139694131, 0.8987480792391385, 0.898726604648558, 0.8986806108503689, 0.8986658830986654, 0.8986659614554655, 0.898719365309919, 0.8987007621122605, 0.8987373525677012, 0.8987569506442643, 0.8987345889131713, 0.8988077966885207, 0.8988203503530019, 0.8988583153177018, 0.8988791504525983, 0.8988312354073384, 0.8988547785332713], "moving_var_accuracy_train": [0.010692533198615916, 0.025659956374754322, 0.03929192507595239, 0.04692644199524185, 0.056211167457728736, 0.0674096486294403, 0.07878430786863153, 0.0858164807290629, 0.09396134683225228, 0.09428490669994201, 0.09960243555148919, 0.10009049265401346, 0.10034574375703495, 0.10074888206289723, 0.09848321339337723, 0.09558827171272136, 0.09128364758802436, 0.0875083052852135, 0.08355600806162224, 0.07961540884879315, 0.0750887643783562, 0.07076843153283753, 0.06658595251070654, 0.0624486329918787, 0.058462637370108775, 0.054696224326779154, 0.05095736899716377, 0.04737291182687453, 0.04386321727091539, 0.0406140420407101, 0.03751094281329817, 0.03456465360201186, 0.031919054146951564, 0.02940915216179533, 0.02707676600234701, 0.024865451736246158, 0.022844124812442832, 0.020979346241949245, 0.019233393380623562, 0.01762799652317151, 0.016147542438983968, 0.01474885755800208, 0.013481974811033082, 0.012299704058839626, 0.011215494107643505, 0.010221075469389076, 0.009310420646161551, 0.008474962436682087, 0.007706512417170347, 0.007001708818921759, 0.006358224874776284, 0.005772724564642229, 0.005236846445387973, 0.004748429888418914, 0.004303528408726471, 0.0038959901366965722, 0.0035271203085040226, 0.0031916648989160183, 0.002886955342810811, 0.0026106063841729696, 0.002360366235710379, 0.0021329278247088235, 0.001927092357336806, 0.001740919075565729, 0.0015718329775577273, 0.001419384581516257, 0.0012810365996913102, 0.0011561120884958545, 0.0010428328164053618, 0.0009402863704934582, 0.0008479452455076618, 0.0007645508160050079, 0.0006895165729733396, 0.0006219541851327981, 0.0005606572133517083, 0.0005054446510914622, 0.0004555795586671215, 0.00041051085221670107, 0.0003699698817449266, 0.00033333343127533364, 0.00030031545979357593, 0.0002705612193831453, 0.0002437502360794478, 0.00021959309581847303, 0.0001978476506118038, 0.00017819742594946236, 0.00016051120918110726, 0.00014457293688961394, 0.00013022492094269208, 0.00011729954354127438, 0.00010563321106662625, 9.510940150326889e-05, 8.56279899168801e-05, 7.709863974675421e-05, 6.942328910415989e-05, 6.251132628857588e-05, 5.6297106424034393e-05, 5.068633508344906e-05, 4.563673888804878e-05, 4.108096537800106e-05, 3.697926814699425e-05, 3.3286524770797407e-05, 2.9966527206675384e-05, 2.6975752741582193e-05, 2.4278207425450924e-05, 2.1858420566807776e-05, 1.9679085956087574e-05, 1.771382193197138e-05, 1.5942765453322418e-05, 1.4349410665169779e-05, 1.2917556479239488e-05, 1.1625859365925143e-05, 1.0464080466827403e-05, 9.419699280914706e-06, 8.478426363320428e-06, 7.63060374754251e-06, 6.87652975666378e-06, 6.188918355386011e-06, 5.571928240856674e-06], "duration": 88035.900758, "accuracy_train": [0.3446823529411765, 0.45658823529411763, 0.5009176470588236, 0.47755294117647057, 0.5490352941176471, 0.6266588235294117, 0.686235294117647, 0.6894823529411764, 0.7542588235294118, 0.6948941176470588, 0.8039058823529411, 0.7803294117647058, 0.8113882352941176, 0.848, 0.8360705882352941, 0.8489176470588236, 0.8403764705882353, 0.8668, 0.8782117647058824, 0.8918823529411765, 0.8879058823529412, 0.9003058823529412, 0.910235294117647, 0.9162117647058824, 0.924, 0.933435294117647, 0.9352941176470588, 0.9400705882352941, 0.9402352941176471, 0.9475294117647058, 0.9495529411764706, 0.9512470588235294, 0.9610588235294117, 0.9626823529411764, 0.966564705882353, 0.9668235294117647, 0.9718823529411764, 0.9754588235294117, 0.9765411764705882, 0.9796941176470588, 0.9822117647058823, 0.9808, 0.9847764705882353, 0.9844470588235295, 0.9860470588235294, 0.9874117647058823, 0.9887764705882353, 0.9896941176470588, 0.99, 0.9903764705882353, 0.9911294117647059, 0.9921882352941176, 0.9923529411764705, 0.9928470588235294, 0.9932705882352941, 0.9927764705882353, 0.9936235294117647, 0.9938117647058824, 0.9940235294117648, 0.9943294117647059, 0.9947529411764706, 0.9946588235294118, 0.994964705882353, 0.9952941176470588, 0.9950823529411764, 0.9956235294117647, 0.9954117647058823, 0.9956705882352941, 0.9954117647058823, 0.9952235294117647, 0.9956, 0.9956470588235294, 0.9960705882352942, 0.9964235294117647, 0.9960470588235294, 0.9962823529411765, 0.9962588235294118, 0.9961176470588236, 0.9964, 0.9962588235294118, 0.9963294117647059, 0.9964, 0.9964705882352941, 0.9965411764705883, 0.9966823529411765, 0.9965176470588235, 0.9966352941176471, 0.9966588235294118, 0.9967529411764706, 0.9968, 0.9967058823529412, 0.9966117647058823, 0.9965882352941177, 0.9966823529411765, 0.9967529411764706, 0.9967764705882353, 0.9968941176470588, 0.9967764705882353, 0.9968235294117647, 0.9967058823529412, 0.9967058823529412, 0.9967058823529412, 0.9968, 0.9967764705882353, 0.9965647058823529, 0.9968470588235294, 0.9968470588235294, 0.9967764705882353, 0.9966823529411765, 0.9967294117647059, 0.9968235294117647, 0.9966823529411765, 0.9965647058823529, 0.9968, 0.9967529411764706, 0.9966588235294118, 0.9969882352941176, 0.9966823529411765, 0.9968470588235294], "end": "2016-02-05 01:16:50.418000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0], "moving_var_accuracy_valid": [0.011329473599999997, 0.026579502255999997, 0.03941592618735999, 0.046496973294961594, 0.055407851449078886, 0.0655132974114339, 0.07595997492219746, 0.08261526706700122, 0.09010923390863933, 0.09012498259581586, 0.09477059506202543, 0.09463690922255011, 0.09459677687682258, 0.0945165400955397, 0.09203425768953917, 0.0889922162659378, 0.08492116507213937, 0.08095248989387073, 0.07703697723504735, 0.07297006809873055, 0.06856268422286942, 0.06428499289766729, 0.06007129934201219, 0.05601388203366651, 0.05211818344259843, 0.04846266726503739, 0.044779551304205044, 0.041308674446861184, 0.038000409454628056, 0.034930067557000344, 0.03205765100765341, 0.029333270710157275, 0.026855613921420024, 0.02454377068785864, 0.022400514261406178, 0.02041757607588547, 0.018593418609792797, 0.01695537653809702, 0.01542236399072509, 0.014032741004933486, 0.012743493254517832, 0.011548184580100491, 0.01046598093957186, 0.00948710405206757, 0.008588610153308428, 0.007785366793192067, 0.007042733603601442, 0.006373895557618053, 0.005759907226069258, 0.005208061276109118, 0.0047040845040959185, 0.00424615195210969, 0.003833500825008629, 0.0034575112214649557, 0.0031215052240778926, 0.0028135553421752284, 0.0025360594287923855, 0.002285439928181579, 0.002059838255788422, 0.0018564911157382374, 0.001672977719442626, 0.0015079759839921397, 0.0013601496686847312, 0.0012246407447037422, 0.0011038156596580894, 0.000993657073332952, 0.0008957919578780332, 0.000807258243458466, 0.0007282754502605107, 0.0006558944167138962, 0.0005905367148696224, 0.0005316376923012556, 0.0004785115314662664, 0.00043066931536668357, 0.0003877356689601232, 0.00034912903487944183, 0.00031435134697191576, 0.0002829607100850315, 0.0002547870344746749, 0.00022943426053836054, 0.00020651663361109034, 0.00018588331452567045, 0.0001673357454463698, 0.00015060597868563503, 0.00013556375096509846, 0.00012208689020600948, 0.00010989609949939407, 9.890812220418774e-05, 8.901863243410275e-05, 8.015391364240711e-05, 7.214725631393032e-05, 6.49594629246185e-05, 5.851536365404362e-05, 5.27058233763677e-05, 4.746925786979097e-05, 4.2804124004964106e-05, 3.853319711461869e-05, 3.468214832835086e-05, 3.125509736182473e-05, 2.814011436974671e-05, 2.5326255206651423e-05, 2.281081845276964e-05, 2.060926323376402e-05, 1.8634657812933317e-05, 1.6775342454005394e-05, 1.5116847073851621e-05, 1.3607114526498635e-05, 1.2246403129106864e-05, 1.1047430561230542e-05, 9.945802215775603e-06, 8.963271747062209e-06, 8.07040133380079e-06, 7.267861623578034e-06, 6.58930986656489e-06, 5.931797230335576e-06, 5.3515895542039365e-06, 4.820337524398938e-06, 4.358966436019307e-06, 3.928058301425574e-06], "accuracy_test": 0.8894, "start": "2016-02-04 00:49:34.517000", "learning_rate_per_epoch": [0.0056126913987100124, 0.00513544911518693, 0.004698786418884993, 0.004299252759665251, 0.003933690953999758, 0.0035992125049233437, 0.0032931745517998934, 0.003013158682733774, 0.0027569523081183434, 0.0025225309655070305, 0.0023080422542989254, 0.0021117914002388716, 0.0019322276348248124, 0.0017679319716989994, 0.0016176062636077404, 0.0014800626086071134, 0.001354214153252542, 0.0012390664778649807, 0.00113370968028903, 0.0010373112745583057, 0.000949109613429755, 0.000868407660163939, 0.0007945676916278899, 0.0007270062924362719, 0.0006651895819231868, 0.0006086290813982487, 0.000556877872440964, 0.0005095270462334156, 0.00046620238572359085, 0.0004265616007614881, 0.00039029144681990147, 0.0003571053093764931, 0.0003267409629188478, 0.0002989584463648498, 0.00027353825862519443, 0.0002502795250620693, 0.00022899846953805536, 0.0002095269301207736, 0.0001917110348585993, 0.00017541000852361321, 0.00016049505211412907, 0.0001468482951167971, 0.00013436190783977509, 0.00012293722829781473, 0.00011248398368479684, 0.0001029195700539276, 9.416840475751087e-05, 8.616134437033907e-05, 7.883511716499925e-05, 7.213183562271297e-05, 6.599853077204898e-05, 6.0386733821360394e-05, 5.525210144696757e-05, 5.0554062909213826e-05, 4.6255492634372786e-05, 4.232242645230144e-05, 3.872378874802962e-05, 3.543113780324347e-05, 3.241845843149349e-05, 2.9661945518455468e-05, 2.7139816666021943e-05, 2.4832141207298264e-05, 2.2720685592503287e-05, 2.078876605082769e-05, 1.902111580420751e-05, 1.7403766833012924e-05, 1.5923938917694613e-05, 1.456994050386129e-05, 1.3331071386346593e-05, 1.2197541764180642e-05, 1.1160394933540374e-05, 1.0211436347162817e-05, 9.34316631173715e-06, 8.5487245087279e-06, 7.821833605703432e-06, 7.156749688874697e-06, 6.548217243107501e-06, 5.991427769913571e-06, 5.48198204342043e-06, 5.015853730583331e-06, 4.5893598326074425e-06, 4.199130671622697e-06, 3.842082151095383e-06, 3.515393245834275e-06, 3.2164823551283916e-06, 2.942987521237228e-06, 2.692747784749372e-06, 2.4637856768094935e-06, 2.2542922124557663e-06, 2.0626116565836128e-06, 1.8872295868277433e-06, 1.7267600469494937e-06, 1.5799350876477547e-06, 1.4455945347435772e-06, 1.3226768942331546e-06, 1.2102108257749933e-06, 1.1073076393586234e-06, 1.01315424672066e-06, 9.270066243516339e-07, 8.48184072310687e-07, 7.760637004139426e-07, 7.100756533873209e-07, 6.496985065496119e-07, 5.944552299297357e-07, 5.439092092274223e-07, 4.976610625817557e-07, 4.5534537207458925e-07, 4.1662775629447424e-07, 3.8120225553939235e-07, 3.4878894439316355e-07, 3.1913171483211045e-07, 2.9199622986197937e-07, 2.671680476851179e-07, 2.4445097324132803e-07, 2.2366552343555668e-07, 2.0464743499815086e-07, 1.8724644235135202e-07, 1.7132504126493586e-07, 1.567574230421087e-07], "accuracy_train_first": 0.3446823529411765, "accuracy_train_last": 0.9968470588235294, "batch_size_eval": 1024, "accuracy_train_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_test_std": 0, "error_valid": [0.6452, 0.5378666666666667, 0.5069333333333333, 0.5304, 0.45720000000000005, 0.38959999999999995, 0.3302666666666667, 0.3234666666666667, 0.2632, 0.3230666666666666, 0.21853333333333336, 0.24693333333333334, 0.21333333333333337, 0.1817333333333333, 0.19399999999999995, 0.18279999999999996, 0.18666666666666665, 0.17093333333333338, 0.1572, 0.15013333333333334, 0.1518666666666667, 0.1438666666666667, 0.1393333333333333, 0.1333333333333333, 0.12813333333333332, 0.12053333333333338, 0.12519999999999998, 0.12173333333333336, 0.1213333333333333, 0.11733333333333329, 0.11533333333333329, 0.11693333333333333, 0.11160000000000003, 0.11119999999999997, 0.11040000000000005, 0.10986666666666667, 0.10880000000000001, 0.1034666666666667, 0.10560000000000003, 0.10266666666666668, 0.1041333333333333, 0.10653333333333337, 0.1048, 0.10293333333333332, 0.10399999999999998, 0.10040000000000004, 0.1028, 0.10093333333333332, 0.10266666666666668, 0.1008, 0.10186666666666666, 0.10240000000000005, 0.1014666666666667, 0.1028, 0.10053333333333336, 0.10306666666666664, 0.10266666666666668, 0.1028, 0.10226666666666662, 0.10199999999999998, 0.10199999999999998, 0.10133333333333339, 0.1001333333333333, 0.10293333333333332, 0.1008, 0.10306666666666664, 0.10040000000000004, 0.10066666666666668, 0.09933333333333338, 0.10106666666666664, 0.1014666666666667, 0.10160000000000002, 0.1021333333333333, 0.10240000000000005, 0.1014666666666667, 0.10119999999999996, 0.10119999999999996, 0.10160000000000002, 0.10106666666666664, 0.10093333333333332, 0.10253333333333337, 0.10160000000000002, 0.10133333333333339, 0.10173333333333334, 0.1014666666666667, 0.10093333333333332, 0.10133333333333339, 0.10160000000000002, 0.10160000000000002, 0.10106666666666664, 0.10133333333333339, 0.10106666666666664, 0.1008, 0.1008, 0.1008, 0.10040000000000004, 0.10093333333333332, 0.10106666666666664, 0.10053333333333336, 0.1008, 0.10106666666666664, 0.10066666666666668, 0.10199999999999998, 0.1021333333333333, 0.1014666666666667, 0.10173333333333334, 0.1014666666666667, 0.10133333333333339, 0.1008, 0.1014666666666667, 0.10093333333333332, 0.10106666666666664, 0.1014666666666667, 0.10053333333333336, 0.10106666666666664, 0.1008, 0.10093333333333332, 0.10160000000000002, 0.10093333333333332], "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1, 1], "translation_range": [-5, 5], "learning_rate_decay": 0.08502913948568164, "discrete_learning_divide": 10.0, "shear_range": [1, 1], "patience_check_each": 1, "discrete_learning_rate_epsilon": 0.0001, "patience_threshold": 1, "do_flip": true, "batch_size": 128, "valid_ratio": 0.15, "learning_rate": 0.006134284020112665, "optimization": "adam", "nb_data_augmentation": 4, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 0.0, "l2_decay": 6.691809221368772e-05, "rotation_range": [0, 0], "momentum": 0.6332409793335116}, "accuracy_valid_max": 0.9006666666666666, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nfrom lasagnekit.updates import santa_sss\nupdates.santa_sss = santa_sss  # NOQA\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n    import residualv2  # NOQA\n    import residualv3  # NOQA\n    import residualv4  # NOQA\n    import residualv5  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n    parser.add_argument(\"--default-model\", default=False, type=bool)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual,\n        \"residualv2\": residualv2,\n        \"residualv3\": residualv3,\n        \"residualv4\": residualv4,\n        \"residualv5\": residualv5\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = np.random.randint(0, 1000000000)\n    np.random.seed(seed)\n    fast_test = args.fast_test\n    rng = np.random\n\n    if args.default_model is True:\n        instantiate = instantiate_default\n    else:\n        instantiate = instantiate_random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.05, interval=[0, 0.1], type='real'),\n        learning_rate_decay_method=Param(initial='discrete', interval=['exp', 'none', 'sqrt', 'lin', 'discrete'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        #weight_decay=Param(initial=0, interval=[-10, -3], type='real', scale='log10'),\n        weight_decay=make_constant_param(0.),\n        discrete_learning_rate_epsilon=make_constant_param(1e-4),#NEW TO ADD\n        discrete_learning_divide=make_constant_param(10.),\n        l2_decay=Param(initial=0, interval=[-8, -4], type='real', scale='log10'),#NEW TO ADD\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1, 1)),\n        rotation_range=make_constant_param((0, 0)),\n        shear_range=make_constant_param((1, 1)),\n        translation_range=make_constant_param((-5, 5)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        y_pred = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            y_pred.extend((nnet.predict(X[mini_batch]) == y[mini_batch]).tolist())\n        return np.mean(y_pred)\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            acc = evaluate(X_train, y_train, batch_size=self.batch_size_eval)\n            status[\"accuracy_train\"] = acc\n            status[\"accuracy_train_std\"] = 0\n            acc = evaluate(X_valid, y_valid, batch_size=self.batch_size_eval)\n            status[\"accuracy_valid\"] = acc\n            status[\"accuracy_valid_std\"] = 0\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n            status = self.add_moving_avg(\"accuracy_valid\", status)\n            status = self.add_moving_var(\"accuracy_valid\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            elif lr_decay_method == 'discrete':\n                eps = hp[\"discrete_learning_rate_epsilon\"]\n                div = hp[\"discrete_learning_divide\"]\n                if status[\"moving_var_accuracy_valid\"] <= eps:\n                    new_lr = cur_lr / div\n                else:\n                    new_lr = cur_lr\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n        verbose_stat_show=[\n            \"epoch\",\n            \"duration\",\n            \"accuracy_train\",\n            \"accuracy_train_std\",\n            \"accuracy_valid\",\n            \"accuracy_valid_std\",\n        ]\n    )\n    batch_size_eval = 1024\n    light.set(\"batch_size_eval\", batch_size_eval)\n    batch_optimizer.learning_rate = learning_rate\n    batch_optimizer.batch_size_eval = batch_size_eval\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n\n        if hp[\"l2_decay\"] > 0:\n            l2 = sum(T.sqr(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"l2_decay\"]\n        else:\n            l2 = 0\n\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1 + l2\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n\n    # rescaling to [-1, 1]\n    X_min = X_train.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X_train.max(axis=(0, 2, 3))[None, :, None, None]\n    def preprocess(a):\n        return (a / 255.) * 2 - 1\n        # return 2 * ((a - X_min) / (X_max - X_min)) - 1\n    X_train = preprocess(X_train)\n    X_valid = preprocess(X_valid)\n\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = preprocess(X_test)\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    acc = evaluate(X_test, y_test, batch_size_eval)\n    light.set(\"accuracy_test\", acc)\n    light.set(\"accuracy_test_std\", 0)\n    print(\"Test accuracy : {}+-{}\".format(acc, 0))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.8990666666666667, "accuracy_valid_std": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_valid": [0.3548, 0.46213333333333334, 0.49306666666666665, 0.4696, 0.5428, 0.6104, 0.6697333333333333, 0.6765333333333333, 0.7368, 0.6769333333333334, 0.7814666666666666, 0.7530666666666667, 0.7866666666666666, 0.8182666666666667, 0.806, 0.8172, 0.8133333333333334, 0.8290666666666666, 0.8428, 0.8498666666666667, 0.8481333333333333, 0.8561333333333333, 0.8606666666666667, 0.8666666666666667, 0.8718666666666667, 0.8794666666666666, 0.8748, 0.8782666666666666, 0.8786666666666667, 0.8826666666666667, 0.8846666666666667, 0.8830666666666667, 0.8884, 0.8888, 0.8896, 0.8901333333333333, 0.8912, 0.8965333333333333, 0.8944, 0.8973333333333333, 0.8958666666666667, 0.8934666666666666, 0.8952, 0.8970666666666667, 0.896, 0.8996, 0.8972, 0.8990666666666667, 0.8973333333333333, 0.8992, 0.8981333333333333, 0.8976, 0.8985333333333333, 0.8972, 0.8994666666666666, 0.8969333333333334, 0.8973333333333333, 0.8972, 0.8977333333333334, 0.898, 0.898, 0.8986666666666666, 0.8998666666666667, 0.8970666666666667, 0.8992, 0.8969333333333334, 0.8996, 0.8993333333333333, 0.9006666666666666, 0.8989333333333334, 0.8985333333333333, 0.8984, 0.8978666666666667, 0.8976, 0.8985333333333333, 0.8988, 0.8988, 0.8984, 0.8989333333333334, 0.8990666666666667, 0.8974666666666666, 0.8984, 0.8986666666666666, 0.8982666666666667, 0.8985333333333333, 0.8990666666666667, 0.8986666666666666, 0.8984, 0.8984, 0.8989333333333334, 0.8986666666666666, 0.8989333333333334, 0.8992, 0.8992, 0.8992, 0.8996, 0.8990666666666667, 0.8989333333333334, 0.8994666666666666, 0.8992, 0.8989333333333334, 0.8993333333333333, 0.898, 0.8978666666666667, 0.8985333333333333, 0.8982666666666667, 0.8985333333333333, 0.8986666666666666, 0.8992, 0.8985333333333333, 0.8990666666666667, 0.8989333333333334, 0.8985333333333333, 0.8994666666666666, 0.8989333333333334, 0.8992, 0.8990666666666667, 0.8984, 0.8990666666666667], "seed": 535792866, "model": "residualv3", "loss_std": [0.3777352273464203, 0.1817048043012619, 0.1359759271144867, 0.12769195437431335, 0.11866509914398193, 0.11393887549638748, 0.10534138977527618, 0.107844278216362, 0.09317579865455627, 0.08467461913824081, 0.0892632007598877, 0.08952509611845016, 0.09016843140125275, 0.08227444440126419, 0.07980193942785263, 0.07599881291389465, 0.07719212770462036, 0.07518908381462097, 0.06721338629722595, 0.06888213008642197, 0.06444715708494186, 0.06268329918384552, 0.060060929507017136, 0.058945730328559875, 0.05633777379989624, 0.05477125570178032, 0.054526105523109436, 0.051495686173439026, 0.049861643463373184, 0.048920076340436935, 0.04775017872452736, 0.04574047401547432, 0.04230370372533798, 0.042661622166633606, 0.041607409715652466, 0.03806200996041298, 0.03809640184044838, 0.035373251885175705, 0.03565513715147972, 0.03343050926923752, 0.0329136848449707, 0.03202520310878754, 0.030827732756733894, 0.029288869351148605, 0.02857177145779133, 0.028206972405314445, 0.028408542275428772, 0.02777373418211937, 0.026781683787703514, 0.026362542062997818, 0.02611890807747841, 0.024751823395490646, 0.0242906641215086, 0.024723971262574196, 0.023972848430275917, 0.023192906752228737, 0.023457186296582222, 0.021786533296108246, 0.023013820871710777, 0.021371135488152504, 0.021179495379328728, 0.02205297164618969, 0.021159667521715164, 0.020619064569473267, 0.021272476762533188, 0.02089344896376133, 0.020130114629864693, 0.02025766670703888, 0.020391127094626427, 0.019605964422225952, 0.019981348887085915, 0.02021494321525097, 0.0205587986856699, 0.019465995952486992, 0.019729008898139, 0.019097600132226944, 0.019420785829424858, 0.019366687163710594, 0.018842071294784546, 0.018073532730340958, 0.019376004114747047, 0.01889255829155445, 0.019672071561217308, 0.019100463017821312, 0.019567329436540604, 0.01915285922586918, 0.019651789218187332, 0.0187474824488163, 0.018788505345582962, 0.018337596207857132, 0.01938280090689659, 0.01885823719203472, 0.018076259642839432, 0.019222674891352654, 0.01859932392835617, 0.018822338432073593, 0.01871006190776825, 0.019396090880036354, 0.019078390672802925, 0.018870433792471886, 0.019446948543190956, 0.019223734736442566, 0.018335307016968727, 0.018367866054177284, 0.01873580552637577, 0.019147304818034172, 0.01843852922320366, 0.01892283745110035, 0.01823514886200428, 0.017701460048556328, 0.017966100946068764, 0.018705151975154877, 0.01839027740061283, 0.01847863383591175, 0.018804611638188362, 0.01853560283780098, 0.017650267109274864, 0.01864861324429512, 0.01940620318055153]}, "state": "available", "life": [{"dt": "Sun May 15 22:05:38 2016", "state": "available"}], "summary": "be0d2fea76cfb2fd73cb9c3b0f485906"}