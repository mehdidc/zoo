{"content": {"hp_model": {"f0": 64, "f1": 16, "f2": 32, "f3": 64, "nonlin": "rectify", "nbg1": 2, "nbg3": 2, "nbg2": 2, "fs0": 3, "fs1": 3, "fs2": 3, "fs3": 3, "pg2": 2, "pg3": 2, "pg1": 2}, "accuracy_valid_std": [0.0516068910654253, 0.06321500936960263, 0.06098464759071302, 0.061623515793077614, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134, 0.061735418007837134], "moving_avg_accuracy_train": [0.030158132530120473, 0.07759412650602407, 0.120554781626506, 0.1592123117469879, 0.19400644201807224, 0.22532115926204813, 0.25350440478162645, 0.27886932574924694, 0.3016977546201054, 0.322243340603878, 0.34073436798927337, 0.3573762926361292, 0.37235402481829943, 0.38583398378225264, 0.3979659468498105, 0.4088847136106126, 0.4187116036953345, 0.4275558047715842, 0.43551558574020893, 0.4426793886119712, 0.44912681119655723, 0.45492949152268464, 0.4601519038161993, 0.4648520748803625, 0.4690822288381094, 0.47288936740008164, 0.4763157921058566, 0.4793995743410541, 0.4821749783527319, 0.48467284196324184, 0.4869209192127008, 0.4889441887372139, 0.4907651313092757, 0.4924039796241313, 0.4938789431075013, 0.4952064102425343, 0.49640113066406405, 0.4974763790434408, 0.49844410258487987, 0.49931505377217505, 0.5000989098407407, 0.5008043803024498, 0.501439303717988, 0.5020107347919723, 0.5025250227585583, 0.5029878819284855, 0.5034044551814201, 0.5037793711090612, 0.5041167954439383, 0.5044204773453276, 0.504693791056578, 0.5049397733967033], "dataset": "Cifar10", "nb_examples_train": 42500, "seed": 1234, "moving_var_accuracy_train": [0.008185616619338799, 0.02761861667774259, 0.04146731600539724, 0.05077022612000123, 0.056588887019891794, 0.059755501962534076, 0.060928609718432156, 0.060626161687831644, 0.05925378000145507, 0.057127491932058905, 0.054492005582759975, 0.05153538792804862, 0.04840084128713111, 0.04519614080144676, 0.04200118747215538, 0.038874043933131014, 0.03585574945845276, 0.032974153546701704, 0.030246961209647857, 0.027684145732952293, 0.025289854481515134, 0.023063908924068656, 0.02100298034313287, 0.01910150678111116, 0.017352403925556217, 0.0157476122692711, 0.014278514518723095, 0.01293625048271786, 0.011711951241298407, 0.010596910020718955, 0.009582703680522876, 0.008661275888589998, 0.007824990786387721, 0.007066664121940893, 0.006379577365242279, 0.0057574791496693865, 0.005194577446673029, 0.004685525133701897, 0.004225401020005606, 0.0038096879217409028, 0.003434249002592857, 0.0030953032994846673, 0.0027894011192285883, 0.0025133998085565636, 0.0022644402567140827, 0.0020399243785433467, 0.0018374937401645565, 0.001655009423723292, 0.0014905331779868675, 0.0013423098644632634, 0.0012087511814797543, 0.0010884206291366606], "duration": 7569.859985, "accuracy_train": [0.3015813253012048, 0.5045180722891566, 0.5072006777108434, 0.5071300828313253, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314, 0.5071536144578314], "end": "2016-01-17 09:57:38.840000", "epoch": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0], "accuracy_valid": [0.2950053418803419, 0.5032051282051282, 0.5018696581196581, 0.5029380341880342, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812, 0.5030715811965812], "accuracy_test": 0.4979967948717949, "start": "2016-01-17 07:51:28.980000", "learning_rate_per_epoch": [0.0001366168144159019, 7.497887963836547e-06, 4.11503691566395e-07, 2.2584398351455093e-08, 1.2394908432966645e-09, 6.8026494159934e-11, 3.733471864997284e-12, 2.0490269095167768e-13, 1.1245594807739092e-14, 6.171876453410898e-16, 3.387287072175662e-17, 1.8590315580458167e-18, 1.0202850864482224e-19, 5.5995910787420514e-21, 3.073201905397753e-22, 1.6866535618056396e-23, 9.2567956011596e-25, 5.0803714654026195e-26, 2.788240617676327e-27, 1.530259313263166e-28, 8.398462893800181e-30, 4.609295786297437e-31, 2.5297020465359644e-32, 1.3883665513581149e-33, 7.61971853797945e-35, 4.181900791644612e-36, 2.2951365321806565e-37, 1.2596309730874317e-38, 6.913179856884696e-40, 3.7941557220058747e-41, 2.0823295179866782e-42, 1.14906474074635e-43, 7.006492321624085e-45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "accuracy_train_last": 0.5071536144578314, "error_valid": [0.7049946581196581, 0.4967948717948718, 0.4981303418803419, 0.4970619658119658, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876, 0.49692841880341876], "accuracy_train_std": [0.056453308733131626, 0.06368442471774646, 0.061882128981975995, 0.061386247355684806, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725, 0.06138650444069725], "accuracy_test_std": 0.0643194198526065, "tags": ["deepconvnets", "zoonormalized"], "hp": {"zoom_range": [1.0, 1.2], "translation_range": [-3, 3], "momentum": 0.9118310462905022, "shear_range": [1, 1.1], "patience_check_each": 1, "learning_rate": 0.0024892551478338746, "patience_threshold": 1, "do_flip": true, "batch_size": 64, "optimization": "adam", "nb_data_augmentation": 4, "learning_rate_decay_method": "exp", "max_epochs": 1000, "patience_nb_epochs": 50, "weight_decay": 2.4754222215975816e-10, "valid_ratio": 0.15, "rotation_range": [-90, 90], "learning_rate_decay": 0.945117386814867}, "accuracy_valid_max": 0.5032051282051282, "code_": "from datetime import datetime\nimport matplotlib as mpl\nmpl.use('Agg')   # NOQA\nfrom lasagnekit.easy import BatchOptimizer, BatchIterator, get_batch_slice\nfrom lasagnekit.nnet.capsule import Capsule\nfrom lasagnekit.easy import iterate_minibatches\nfrom lasagne import updates\nimport theano\nimport theano.tensor as T\n\nimport numpy as np\nimport json\n\nfrom skimage.io import imsave\nfrom lasagnekit.datasets.infinite_image_dataset import Transform\n\n\nclass MyBatchIterator(BatchIterator):\n\n    def __init__(self, nb_data_augmentation=1,  **transform_params):\n        super(MyBatchIterator, self).__init__()\n\n        self.nb_data_augmentation = nb_data_augmentation\n        self.transform_params = transform_params\n\n    def transform(self, batch_index, V):\n        assert self.batch_size is not None\n        assert self.nb_batches is not None\n\n        if isinstance(batch_index, T.TensorVariable):\n            batch_slice = get_batch_slice(batch_index,\n                                          self.batch_size)\n        else:\n            batch_slice = slice(batch_index * self.batch_size,\n                                (batch_index+1) * self.batch_size)\n\n        d = OrderedDict()\n        X = V[\"X\"][batch_slice]\n        y = V[\"y\"][batch_slice]\n\n        X_list = [X]\n        y_list = [y]\n        for i in range(self.nb_data_augmentation):\n            tr, _ = Transform(X.transpose(0, 2, 3, 1),\n                              np.random,\n                              **self.transform_params)\n            imsave(\"out.png\", (((tr[0] + 1) / 2.)))\n            X_transformed = tr.transpose((0, 3, 1, 2))\n            X_list.append(X_transformed)\n            y_list.append(y)\n        d[\"X\"] = np.concatenate(X_list, axis=0)\n        d[\"y\"] = np.concatenate(y_list, axis=0)\n        d[\"X\"], d[\"y\"] = shuffle(d[\"X\"], d[\"y\"])\n        return d\n\n\nif __name__ == \"__main__\":\n    from lasagnekit.datasets.cifar10 import Cifar10\n    from sklearn.utils import shuffle\n    from sklearn.cross_validation import train_test_split\n    from collections import OrderedDict\n\n    from lightexperiments.light import Light\n    from hp_toolkit.hp import (\n            Param, make_constant_param,\n            instantiate_random, instantiate_default\n    )\n    import argparse\n    import vgg  # NOQA\n    import vgg_small  # NOQA\n    import vgg_very_small  # NOQA\n    import spatially_sparse  # NOQA\n    import nin  # NOQA\n    import fully  # NOQA\n    import residual  # NOQA\n\n    parser = argparse.ArgumentParser(description='zoo')\n    parser.add_argument(\"--budget-hours\",\n                        default=np.inf,\n                        help=\"nb of maximum hours (defaut=inf)\")\n    parser.add_argument(\"--fast-test\", default=False, type=bool)\n    parser.add_argument(\"--model\", default=\"vgg\", type=str)\n\n    models = {\n        \"vgg\": vgg,\n        \"vgg_small\": vgg_small,\n        \"vgg_very_small\": vgg_very_small,\n        \"spatially_sparse\": spatially_sparse,\n        \"nin\": nin,\n        \"fully\": fully,\n        \"residual\": residual\n    }\n    args = parser.parse_args()\n    model_class = models[args.model]\n    budget_sec = args.budget_hours * 3600\n    begin = datetime.now()\n    seed = 1234\n    fast_test = args.fast_test\n    np.random.seed(seed)\n    rng = np.random\n\n    light = Light()\n    light.launch()\n    light.initials()\n    light.file_snapshot()\n    light.set_seed(seed)\n    light.tag(\"deepconvnets\")\n    light.tag(\"zoonormalized\")\n\n    data = Cifar10(batch_indexes=[1, 2, 3, 4, 5])\n    data.load()\n\n    data_test = Cifar10(batch_indexes=[6])\n    data_test.load()\n\n    light.set(\"dataset\", data.__class__.__name__)\n\n    hp = dict(\n        learning_rate=Param(initial=0.001, interval=[-4, -2], type='real', scale='log10'),\n        learning_rate_decay=Param(initial=0.98, interval=[0.8, 1], type='real'),\n        learning_rate_decay_method=Param(initial='sqrt', interval=['exp', 'none', 'sqrt', 'lin'], type='choice'),\n        momentum=Param(initial=0.9, interval=[0.5, 0.99], type='real'),\n        weight_decay=Param(initial=0, interval=[-10, -6], type='real', scale='log10'),\n        max_epochs=make_constant_param(1000),\n        batch_size=Param(initial=32,\n                         interval=[16, 32, 64, 128, 256, 512],\n                         type='choice'),\n        patience_nb_epochs=make_constant_param(50),\n        valid_ratio=make_constant_param(0.15),\n\n        patience_threshold=make_constant_param(1),\n        patience_check_each=make_constant_param(1),\n\n        optimization=Param(initial='adam',\n                           interval=['adam', 'nesterov_momentum', 'adadelta', 'rmsprop'],\n                           type='choice'),\n        # data augmentation\n        nb_data_augmentation=Param(initial=1, interval=[0, 1, 2, 3, 4], type='choice'),\n        zoom_range=make_constant_param((1.0, 1.2)),\n        rotation_range=make_constant_param((-90, 90)),\n        shear_range=make_constant_param((1, 1.1)),\n        translation_range=make_constant_param((-3, 3)),\n        do_flip=make_constant_param(True)\n\n    )\n\n    instantiate = instantiate_random\n    if fast_test is True:\n        instantiate = instantiate_default\n\n    default_params = {}\n    if fast_test is True:\n        default_params[\"max_epochs\"] = 1\n    hp = instantiate(hp, default_params=default_params)\n    light.set(\"hp\", hp)\n\n    hp_model = model_class.params\n    hp_model = instantiate(hp_model)\n    light.set(\"hp_model\", hp_model)\n\n    model = model_class.build_model(\n        input_width=data.img_dim[1],\n        input_height=data.img_dim[2],\n        output_dim=data.output_dim,\n        **hp_model)\n    light.set(\"model\", model_class.__name__)\n    print(model_class.__name__)\n    print(json.dumps(hp, indent=4))\n    print(json.dumps(hp_model, indent=4))\n\n    initial_lr = hp[\"learning_rate\"]\n\n    def evaluate(X, y, batch_size=None):\n        if batch_size is None:\n            batch_size = hp[\"batch_size\"]\n        accs = []\n        for mini_batch in iterate_minibatches(X.shape[0],\n                                              batch_size):\n            acc = (nnet.predict(X[mini_batch]) == y[mini_batch]).mean()\n            accs.append(acc)\n        return accs\n\n    class MyBatchOptimizer(BatchOptimizer):\n\n        def quitter(self, update_status):\n            quit = super(MyBatchOptimizer, self).quitter(update_status)\n            if (datetime.now() - begin).total_seconds() >= budget_sec:\n                print(\"Budget finished.quit.\")\n                quit = True\n            return quit\n\n        def iter_update(self, epoch, nb_batches, iter_update_batch):\n            start = datetime.now()\n            status = super(MyBatchOptimizer, self).iter_update(epoch,\n                                                               nb_batches,\n                                                               iter_update_batch)\n            duration = (datetime.now() - start).total_seconds()\n            status[\"duration\"] = duration\n            accs = evaluate(X_train, y_train)\n            status[\"accuracy_train\"] = np.mean(accs)\n            status[\"accuracy_train_std\"] = np.std(accs)\n            accs = evaluate(X_valid, y_valid)\n            status[\"accuracy_valid\"] = np.mean(accs)\n            status[\"accuracy_valid_std\"] = np.std(accs)\n\n            status[\"error_valid\"] = 1 - status[\"accuracy_valid\"]\n\n            status = self.add_moving_avg(\"accuracy_train\", status)\n            status = self.add_moving_var(\"accuracy_train\", status)\n\n            for k, v in status.items():\n                light.append(k, float(v))\n\n            lr = self.learning_rate\n            lr_decay_method = hp[\"learning_rate_decay_method\"]\n            lr_decay = hp[\"learning_rate_decay\"]\n            cur_lr = lr.get_value()\n            t = status[\"epoch\"]\n\n            if lr_decay_method == \"exp\":\n                new_lr = cur_lr * (1 - lr_decay)\n            elif lr_decay_method == \"lin\":\n                new_lr = initial_lr / (1 + t)\n            elif lr_decay_method == \"sqrt\":\n                new_lr = initial_lr / np.sqrt(1 + t)\n            else:\n                new_lr = cur_lr\n\n            new_lr = np.array(new_lr, dtype=\"float32\")\n            lr.set_value(new_lr)\n\n            light.append(\"learning_rate_per_epoch\",\n                         float(self.learning_rate.get_value()))\n            return status\n\n        def add_moving_avg(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n            else:\n                old_avg = 0\n            avg = B * old_avg + (1 - B) * status[name]\n            status[\"moving_avg_\" + name] = avg\n            return status\n\n        def add_moving_var(self, name, status, B=0.9):\n            if len(self.stats) >= 2:\n                old_avg = self.stats[-2][\"moving_avg_\" + name]\n                old_var = self.stats[-2][\"moving_var_\" + name]\n            else:\n                old_avg = 0\n                old_var = 0\n            new_avg = B * old_avg + (1 - B) * status[name]\n            var = B * old_var + (1 - B) * (status[name] - old_avg) * (status[name] - new_avg)\n            status[\"moving_var_\" + name] = var\n            return status\n\n    learning_rate = theano.shared(np.array(hp[\"learning_rate\"],\n                                  dtype=\"float32\"))\n    momentum = hp[\"momentum\"]\n\n    optim_params = {\"learning_rate\": learning_rate}\n    if \"momentum\" in hp[\"optimization\"]:\n        optim_params[\"momentum\"] = hp[\"momentum\"]\n\n    batch_optimizer = MyBatchOptimizer(\n        verbose=1, max_nb_epochs=hp[\"max_epochs\"],\n        batch_size=hp[\"batch_size\"],\n        optimization_procedure=(getattr(updates, hp[\"optimization\"]),\n                                optim_params),\n        patience_stat=\"error_valid\",\n        patience_nb_epochs=hp[\"patience_nb_epochs\"],\n        patience_progression_rate_threshold=hp[\"patience_threshold\"],\n        patience_check_each=hp[\"patience_check_each\"],\n    )\n    batch_optimizer.learning_rate = learning_rate\n\n    input_variables = OrderedDict()\n    input_variables[\"X\"] = dict(tensor_type=T.tensor4)\n    input_variables[\"y\"] = dict(tensor_type=T.ivector)\n    functions = dict(\n        predict=dict(\n            get_output=lambda model, X: (model.get_output(X, deterministic=True)[0]).argmax(axis=1),\n            params=[\"X\"]\n        )\n    )\n\n    def loss_function(model, tensors):\n        X = tensors[\"X\"]\n        y = tensors[\"y\"]\n        y_hat, = model.get_output(X)\n        if hp[\"weight_decay\"] > 0:\n            l1 = sum(T.abs_(param).sum() for param in model.capsule.all_params_regularizable) * hp[\"weight_decay\"]\n        else:\n            l1 = 0\n        return T.nnet.categorical_crossentropy(y_hat, y).mean() + l1\n\n    batch_iterator = MyBatchIterator(hp[\"nb_data_augmentation\"],\n                                     zoom_range=hp[\"zoom_range\"],\n                                     rotation_range=hp[\"rotation_range\"],\n                                     shear_range=hp[\"shear_range\"],\n                                     translation_range=hp[\"translation_range\"],\n                                     do_flip=hp[\"do_flip\"])\n\n    nnet = Capsule(\n        input_variables, model,\n        loss_function,\n        functions=functions,\n        batch_optimizer=batch_optimizer,\n        batch_iterator=batch_iterator,\n    )\n\n    from sklearn.preprocessing import LabelEncoder\n\n    imshape = ([data.X.shape[0]] +\n               list(data.img_dim))\n    X = data.X.reshape(imshape).astype(np.float32)\n    y = data.y\n    label_encoder = LabelEncoder()\n    y = label_encoder.fit_transform(y)\n    y = y.astype(np.int32)\n\n    # rescaling to [-1, 1]\n    X_min = X.min(axis=(0, 2, 3))[None, :, None, None]\n    X_max = X.max(axis=(0, 2, 3))[None, :, None, None]\n    X = 2 * ((X - X_min) / (X_max - X_min)) - 1\n    X, y = shuffle(X, y)\n\n    if fast_test is True:\n        X = X[0:100]\n        y = y[0:100]\n\n    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=hp[\"valid_ratio\"])\n    light.set(\"nb_examples_train\", X_train.shape[0])\n    light.set(\"nb_examples_valid\", X_valid.shape[0])\n    try:\n        nnet.fit(X=X_train, y=y_train)\n    except KeyboardInterrupt:\n        print(\"interruption...\")\n\n    imshape = ([data_test.X.shape[0]] +\n               list(data_test.img_dim))\n    X_test = data_test.X.reshape(imshape).astype(np.float32)\n    X_test = 2 * ((X_test - X_min) / (X_max - X_min)) - 1\n    y_test = data_test.y\n    y_test = label_encoder.transform(y_test)\n    y_test = y_test.astype(np.int32)\n\n    accs = evaluate(X_test, y_test)\n    m, s = np.mean(accs), np.std(accs)\n    light.set(\"accuracy_test\", m)\n    light.set(\"accuracy_test_std\", s)\n    print(\"Test accuracy : {}+-{}\".format(m, s))\n\n    light.endings()  # save the duration\n\n    if fast_test is False:\n        light.store_experiment()  # update the DB\n    light.close()\n", "nb_examples_valid": 7500, "accuracy_valid_last": 0.5030715811965812, "loss_train": [1.8799970149993896, 1.5646727085113525, 1.493003487586975, 1.4881446361541748, 1.4890259504318237, 1.4868972301483154, 1.4883052110671997, 1.4886647462844849, 1.4891058206558228, 1.4889030456542969, 1.4881513118743896, 1.4893295764923096, 1.487795114517212, 1.4879239797592163, 1.4872485399246216, 1.4899529218673706, 1.4897617101669312, 1.4888577461242676, 1.4874682426452637, 1.4875108003616333, 1.489130973815918, 1.4867056608200073, 1.4893393516540527, 1.4880543947219849, 1.4880253076553345, 1.4862241744995117, 1.4881230592727661, 1.4880093336105347, 1.4894378185272217, 1.4881426095962524, 1.4893542528152466, 1.4882498979568481, 1.489396572113037, 1.4882739782333374, 1.4883135557174683, 1.4887568950653076, 1.487022042274475, 1.4874730110168457, 1.4876554012298584, 1.4880242347717285, 1.4877026081085205, 1.4885958433151245, 1.4894146919250488, 1.4884406328201294, 1.4885724782943726, 1.4886552095413208, 1.4894369840621948, 1.4889005422592163, 1.4883018732070923, 1.487652063369751, 1.488848328590393, 1.4879683256149292], "accuracy_train_first": 0.3015813253012048, "model": "residual", "loss_std": [0.16557461023330688, 0.12130025774240494, 0.10919329524040222, 0.10906805098056793, 0.11006083339452744, 0.10890921205282211, 0.1100749596953392, 0.10930100083351135, 0.1094975620508194, 0.11152713745832443, 0.11127256602048874, 0.10956940054893494, 0.10870219022035599, 0.10983140021562576, 0.10860295593738556, 0.11088411509990692, 0.10984837263822556, 0.11042869836091995, 0.11036740243434906, 0.11045648157596588, 0.10922697931528091, 0.10862097144126892, 0.10985273867845535, 0.11091622710227966, 0.11003342270851135, 0.1111011952161789, 0.11162932962179184, 0.10997844487428665, 0.10992899537086487, 0.11085433512926102, 0.11195290088653564, 0.11010418832302094, 0.10975056141614914, 0.10942231118679047, 0.10899364948272705, 0.10980597883462906, 0.11076945811510086, 0.11091700196266174, 0.11038260161876678, 0.11006380617618561, 0.10944924503564835, 0.10882096737623215, 0.11046837270259857, 0.10988572239875793, 0.10980381816625595, 0.11027480661869049, 0.10836807638406754, 0.11089690774679184, 0.11055292934179306, 0.10960105806589127, 0.11014682054519653, 0.11080645024776459]}, "state": "available", "life": [{"dt": "Sun May 15 22:04:57 2016", "state": "available"}], "summary": "705f0e561dd51ddc06f9b20e08258a8e"}